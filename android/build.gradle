buildscript {
  def kotlin_version = rootProject.ext.has('kotlinVersion')
    ? rootProject.ext.get('kotlinVersion')
    : project.properties['PdfExtractor_kotlinVersion']

  repositories {
    mavenCentral()
    google()
    maven { url 'https://plugins.gradle.org/m2/' }
  }

  dependencies {
    classpath('com.android.tools.build:gradle:7.1.3')
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.0"
    classpath 'com.dicedmelon.gradle:jacoco-android:0.1.5'

  }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'org.sonarqube'
apply plugin: 'com.dicedmelon.gradle.jacoco-android'

jacoco {
  toolVersion = "0.8.4"
}

def kotlin_version = getExtOrDefault("kotlinVersion")

sonarqube {
  properties {
    property "sonar.projectKey", "code-leak_react-native-pdf-extractor_android"
    property "sonar.organization", "code-leak"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.sourceEncoding", "UTF-8"
    property "sonar.java.coveragePlugin", "jacoco"
  }
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['PdfExtractor_' + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['PdfExtractor_' + name]).toInteger()
}

android {
  compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault('minSdkVersion')
    targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
    versionCode 1
    versionName "0.1.2"
  }

  buildTypes {
    release {
      minifyEnabled true
    }

    debug {
      minifyEnabled false
      testCoverageEnabled true
    }
  }

  lintOptions {
    disable 'GradleCompatible'
  }
}

repositories {
  mavenCentral()
  google()

  def found = false
  def defaultDir = null
  def androidSourcesName = 'React Native sources'

  if (rootProject.ext.has('reactNativeAndroidRoot')) {
    defaultDir = rootProject.ext.get('reactNativeAndroidRoot')
  } else {
    defaultDir = new File(projectDir, '/../../../node_modules/react-native/android')
  }

  if (defaultDir.exists()) {
    maven {
      url defaultDir.toString()
      name androidSourcesName
    }

    logger.info(":${project.name}:reactNativeAndroidRoot ${defaultDir.canonicalPath}")
    found = true
  } else {
    def parentDir = rootProject.projectDir

    1.upto(5, {
      if (found) return true
      parentDir = parentDir.parentFile

      def androidSourcesDir = new File(parentDir, 'node_modules/react-native')
      def androidPrebuiltBinaryDir = new File(parentDir, 'node_modules/react-native/android')

      if (androidPrebuiltBinaryDir.exists()) {
        maven {
          url androidPrebuiltBinaryDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidPrebuiltBinaryDir.canonicalPath}")
        found = true
      } else if (androidSourcesDir.exists()) {
        maven {
          url androidSourcesDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidSourcesDir.canonicalPath}")
        found = true
      }
    })
  }

  if (!found) {
    throw new GradleException(
      "${project.name}: unable to locate React Native android sources. " +
        "Ensure you have you installed React Native as a dependency in your project and try again."
    )
  }
}

dependencies {
  // noinspection GradleDynamicVersion
  api("com.facebook.react:react-native:+")

  // Project dependencies
  implementation('com.tom-roush:pdfbox-android:2.0.23.0')
  implementation('org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.3')
  implementation('org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.3')
  implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")


  // Unit Tests dependencies
  testImplementation("junit:junit:4.13.2")
  testImplementation("pl.pragmatists:JUnitParams:1.1.1")
  testImplementation("io.mockk:mockk:1.12.4")
}
