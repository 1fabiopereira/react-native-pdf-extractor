"use strict";(self.webpackChunkreact_native_pdf_extractor=self.webpackChunkreact_native_pdf_extractor||[]).push([[838],{3905:function(t,e,n){n.d(e,{Zo:function(){return d},kt:function(){return f}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},l=Object.keys(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=r.createContext({}),u=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},d=function(t){var e=u(t.components);return r.createElement(s.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},c=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,l=t.originalType,s=t.parentName,d=i(t,["components","mdxType","originalType","parentName"]),c=u(n),f=a,m=c["".concat(s,".").concat(f)]||c[f]||p[f]||l;return n?r.createElement(m,o(o({ref:e},d),{},{components:n})):r.createElement(m,o({ref:e},d))}));function f(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i.mdxType="string"==typeof t?t:a,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4039:function(t,e,n){n.r(e),n.d(e,{assets:function(){return d},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return p}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),o=["components"],i={sidebar_position:1},s="Methods",u={unversionedId:"methods",id:"methods",title:"Methods",description:"hasPassword",source:"@site/docs/methods.md",sourceDirName:".",slug:"/methods",permalink:"/react-native-pdf-extractor/docs/methods",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Playground",permalink:"/react-native-pdf-extractor/docs/playground"},next:{title:"Patterns",permalink:"/react-native-pdf-extractor/docs/patterns"}},d={},p=[{value:"hasPassword",id:"haspassword",level:3},{value:"getNumberOfPages",id:"getnumberofpages",level:3},{value:"getText",id:"gettext",level:3},{value:"getTextWithPattern",id:"gettextwithpattern",level:3}],c={toc:p};function f(t){var e=t.components,n=(0,a.Z)(t,o);return(0,l.kt)("wrapper",(0,r.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"methods"},"Methods"),(0,l.kt)("h3",{id:"haspassword"},"hasPassword"),(0,l.kt)("p",null,"This function return a ",(0,l.kt)("inlineCode",{parentName:"p"},"Promise<boolean>")," that's determine if a pdf file is encrypted and need a password to be read."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"async function hasPassword(): Promise<boolean>\n")),(0,l.kt)("h3",{id:"getnumberofpages"},"getNumberOfPages"),(0,l.kt)("p",null,"This function return a ",(0,l.kt)("inlineCode",{parentName:"p"},"Promise<number>")," that's determine the pdf file number of pages."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"async function hasPassword(): Promise<boolean>\n")),(0,l.kt)("table",null,(0,l.kt)("th",null,"name"),(0,l.kt)("th",null,"type"),(0,l.kt)("th",null,"default"),(0,l.kt)("th",null,"required"),(0,l.kt)("th",null,"description"),(0,l.kt)("tbody",null,(0,l.kt)("tr",null,(0,l.kt)("td",null,"password"),(0,l.kt)("td",null,"string | undefined"),(0,l.kt)("td",null,"undefined"),(0,l.kt)("td",null,"false"),(0,l.kt)("td",null,"password of pdf file")))),(0,l.kt)("h3",{id:"gettext"},"getText"),(0,l.kt)("p",null,"This function return all pdf file text as ",(0,l.kt)("inlineCode",{parentName:"p"},"Promise<Readonly<String[]>>"),", where each array position is one line of pdf file that it can get."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"async function getText(password?: string): Promise<Readonly<String[]>>\n")),(0,l.kt)("table",null,(0,l.kt)("th",null,"name"),(0,l.kt)("th",null,"type"),(0,l.kt)("th",null,"default"),(0,l.kt)("th",null,"required"),(0,l.kt)("th",null,"description"),(0,l.kt)("tbody",null,(0,l.kt)("tr",null,(0,l.kt)("td",null,"password"),(0,l.kt)("td",null,"string | undefined"),(0,l.kt)("td",null,"undefined"),(0,l.kt)("td",null,"false"),(0,l.kt)("td",null,"password of pdf file")))),(0,l.kt)("h3",{id:"gettextwithpattern"},"getTextWithPattern"),(0,l.kt)("p",null,"This function return pdf file text that matches with passed pattern, as ",(0,l.kt)("inlineCode",{parentName:"p"},"Promise<Readonly<String[]>>"),", where each array position is one match of pdf file text with pattern."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"async function getTextWithPattern(\n  pattern: string | String[],\n  password?: string\n): Promise<Readonly<String[]>>\n")),(0,l.kt)("table",null,(0,l.kt)("th",null,"name"),(0,l.kt)("th",null,"type"),(0,l.kt)("th",null,"default"),(0,l.kt)("th",null,"required"),(0,l.kt)("th",null,"description"),(0,l.kt)("tbody",null,(0,l.kt)("tr",null,(0,l.kt)("td",null,"pattern"),(0,l.kt)("td",null,"string | string[]"),(0,l.kt)("td",null,"none"),(0,l.kt)("td",null,"true"),(0,l.kt)("td",null,"pattern to find match with pdf`s text")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"password"),(0,l.kt)("td",null,"string | undefined"),(0,l.kt)("td",null,"undefined"),(0,l.kt)("td",null,"false"),(0,l.kt)("td",null,"password of pdf file")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NOTE:")," All patterns passed will be converted in RegExp on runtime, yours patterns need to be in according to Javascript's RegExp specification, but in ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," type, ex: ",(0,l.kt)("inlineCode",{parentName:"p"},"'([0-9]{12})\\s([0-9]{12})\\s([0-9]{12})\\s([0-9]{12})'"),". You can see more infomation ",(0,l.kt)("a",{parentName:"p",href:"https://www.w3schools.com/jsref/jsref_obj_regexp.asp#:~:text=RegExp%20Object,pattern%20with%20Properties%20and%20Methods."},"here"),"."))}f.isMDXComponent=!0}}]);