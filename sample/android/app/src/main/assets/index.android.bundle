var __BUNDLE_START_TIME__=this.nativePerformanceNow?nativePerformanceNow():Date.now(),__DEV__=true,process=this.process||{};process.env=process.env||{};process.env.NODE_ENV=process.env.NODE_ENV||"development";
(function (global) {
  "use strict";

  global.__r = metroRequire;
  global.__d = define;
  global.__c = clear;
  global.__registerSegment = registerSegment;
  var modules = clear();
  var EMPTY = {};
  var _ref = {},
      hasOwnProperty = _ref.hasOwnProperty;

  if (__DEV__) {
    global.$RefreshReg$ = function () {};

    global.$RefreshSig$ = function () {
      return function (type) {
        return type;
      };
    };
  }

  function clear() {
    modules = Object.create(null);
    return modules;
  }

  if (__DEV__) {
    var verboseNamesToModuleIds = Object.create(null);
    var initializingModuleIds = [];
  }

  function define(factory, moduleId, dependencyMap) {
    if (modules[moduleId] != null) {
      if (__DEV__) {
        var inverseDependencies = arguments[4];

        if (inverseDependencies) {
          global.__accept(moduleId, factory, dependencyMap, inverseDependencies);
        }
      }

      return;
    }

    var mod = {
      dependencyMap: dependencyMap,
      factory: factory,
      hasError: false,
      importedAll: EMPTY,
      importedDefault: EMPTY,
      isInitialized: false,
      publicModule: {
        exports: {}
      }
    };
    modules[moduleId] = mod;

    if (__DEV__) {
      mod.hot = createHotReloadingObject();
      var verboseName = arguments[3];

      if (verboseName) {
        mod.verboseName = verboseName;
        verboseNamesToModuleIds[verboseName] = moduleId;
      }
    }
  }

  function metroRequire(moduleId) {
    if (__DEV__ && typeof moduleId === "string") {
      var verboseName = moduleId;
      moduleId = verboseNamesToModuleIds[verboseName];

      if (moduleId == null) {
        throw new Error("Unknown named module: \"" + verboseName + "\"");
      } else {
        console.warn("Requiring module \"" + verboseName + "\" by name is only supported for " + "debugging purposes and will BREAK IN PRODUCTION!");
      }
    }

    var moduleIdReallyIsNumber = moduleId;

    if (__DEV__) {
      var initializingIndex = initializingModuleIds.indexOf(moduleIdReallyIsNumber);

      if (initializingIndex !== -1) {
        var cycle = initializingModuleIds.slice(initializingIndex).map(function (id) {
          return modules[id] ? modules[id].verboseName : "[unknown]";
        });
        cycle.push(cycle[0]);
        console.warn("Require cycle: " + cycle.join(" -> ") + "\n\n" + "Require cycles are allowed, but can result in uninitialized values. " + "Consider refactoring to remove the need for a cycle.");
      }
    }

    var module = modules[moduleIdReallyIsNumber];
    return module && module.isInitialized ? module.publicModule.exports : guardedLoadModule(moduleIdReallyIsNumber, module);
  }

  function metroImportDefault(moduleId) {
    if (__DEV__ && typeof moduleId === "string") {
      var verboseName = moduleId;
      moduleId = verboseNamesToModuleIds[verboseName];
    }

    var moduleIdReallyIsNumber = moduleId;

    if (modules[moduleIdReallyIsNumber] && modules[moduleIdReallyIsNumber].importedDefault !== EMPTY) {
      return modules[moduleIdReallyIsNumber].importedDefault;
    }

    var exports = metroRequire(moduleIdReallyIsNumber);
    var importedDefault = exports && exports.__esModule ? exports.default : exports;
    return modules[moduleIdReallyIsNumber].importedDefault = importedDefault;
  }

  metroRequire.importDefault = metroImportDefault;

  function metroImportAll(moduleId) {
    if (__DEV__ && typeof moduleId === "string") {
      var verboseName = moduleId;
      moduleId = verboseNamesToModuleIds[verboseName];
    }

    var moduleIdReallyIsNumber = moduleId;

    if (modules[moduleIdReallyIsNumber] && modules[moduleIdReallyIsNumber].importedAll !== EMPTY) {
      return modules[moduleIdReallyIsNumber].importedAll;
    }

    var exports = metroRequire(moduleIdReallyIsNumber);
    var importedAll;

    if (exports && exports.__esModule) {
      importedAll = exports;
    } else {
      importedAll = {};

      if (exports) {
        for (var key in exports) {
          if (hasOwnProperty.call(exports, key)) {
            importedAll[key] = exports[key];
          }
        }
      }

      importedAll.default = exports;
    }

    return modules[moduleIdReallyIsNumber].importedAll = importedAll;
  }

  metroRequire.importAll = metroImportAll;
  var inGuard = false;

  function guardedLoadModule(moduleId, module) {
    if (!inGuard && global.ErrorUtils) {
      inGuard = true;
      var returnValue;

      try {
        returnValue = loadModuleImplementation(moduleId, module);
      } catch (e) {
        global.ErrorUtils.reportFatalError(e);
      }

      inGuard = false;
      return returnValue;
    } else {
      return loadModuleImplementation(moduleId, module);
    }
  }

  var ID_MASK_SHIFT = 16;
  var LOCAL_ID_MASK = ~0 >>> ID_MASK_SHIFT;

  function unpackModuleId(moduleId) {
    var segmentId = moduleId >>> ID_MASK_SHIFT;
    var localId = moduleId & LOCAL_ID_MASK;
    return {
      segmentId: segmentId,
      localId: localId
    };
  }

  metroRequire.unpackModuleId = unpackModuleId;

  function packModuleId(value) {
    return (value.segmentId << ID_MASK_SHIFT) + value.localId;
  }

  metroRequire.packModuleId = packModuleId;
  var moduleDefinersBySegmentID = [];

  function registerSegment(segmentID, moduleDefiner) {
    moduleDefinersBySegmentID[segmentID] = moduleDefiner;
  }

  function loadModuleImplementation(moduleId, module) {
    if (!module && moduleDefinersBySegmentID.length > 0) {
      var _unpackModuleId = unpackModuleId(moduleId),
          segmentId = _unpackModuleId.segmentId,
          localId = _unpackModuleId.localId;

      var definer = moduleDefinersBySegmentID[segmentId];

      if (definer != null) {
        definer(localId);
        module = modules[moduleId];
      }
    }

    var nativeRequire = global.nativeRequire;

    if (!module && nativeRequire) {
      var _unpackModuleId2 = unpackModuleId(moduleId),
          _segmentId = _unpackModuleId2.segmentId,
          _localId = _unpackModuleId2.localId;

      nativeRequire(_localId, _segmentId);
      module = modules[moduleId];
    }

    if (!module) {
      throw unknownModuleError(moduleId);
    }

    if (module.hasError) {
      throw moduleThrewError(moduleId, module.error);
    }

    if (__DEV__) {
      var Systrace = metroRequire.Systrace,
          Refresh = metroRequire.Refresh;
    }

    module.isInitialized = true;
    var _module = module,
        factory = _module.factory,
        dependencyMap = _module.dependencyMap;

    if (__DEV__) {
      initializingModuleIds.push(moduleId);
    }

    try {
      if (__DEV__) {
        Systrace.beginEvent("JS_require_" + (module.verboseName || moduleId));
      }

      var moduleObject = module.publicModule;

      if (__DEV__) {
        moduleObject.hot = module.hot;
        var prevRefreshReg = global.$RefreshReg$;
        var prevRefreshSig = global.$RefreshSig$;

        if (Refresh != null) {
          var RefreshRuntime = Refresh;

          global.$RefreshReg$ = function (type, id) {
            RefreshRuntime.register(type, moduleId + " " + id);
          };

          global.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
        }
      }

      moduleObject.id = moduleId;
      factory(global, metroRequire, metroImportDefault, metroImportAll, moduleObject, moduleObject.exports, dependencyMap);

      if (!__DEV__) {
        module.factory = undefined;
        module.dependencyMap = undefined;
      }

      if (__DEV__) {
        Systrace.endEvent();

        if (Refresh != null) {
          registerExportsForReactRefresh(Refresh, moduleObject.exports, moduleId);
        }
      }

      return moduleObject.exports;
    } catch (e) {
      module.hasError = true;
      module.error = e;
      module.isInitialized = false;
      module.publicModule.exports = undefined;
      throw e;
    } finally {
      if (__DEV__) {
        if (initializingModuleIds.pop() !== moduleId) {
          throw new Error("initializingModuleIds is corrupt; something is terribly wrong");
        }

        global.$RefreshReg$ = prevRefreshReg;
        global.$RefreshSig$ = prevRefreshSig;
      }
    }
  }

  function unknownModuleError(id) {
    var message = 'Requiring unknown module "' + id + '".';

    if (__DEV__) {
      message += " If you are sure the module exists, try restarting Metro. " + "You may also want to run `yarn` or `npm install`.";
    }

    return Error(message);
  }

  function moduleThrewError(id, error) {
    var displayName = __DEV__ && modules[id] && modules[id].verboseName || id;
    return Error('Requiring module "' + displayName + '", which threw an exception: ' + error);
  }

  if (__DEV__) {
    metroRequire.Systrace = {
      beginEvent: function beginEvent() {},
      endEvent: function endEvent() {}
    };

    metroRequire.getModules = function () {
      return modules;
    };

    var createHotReloadingObject = function createHotReloadingObject() {
      var hot = {
        _acceptCallback: null,
        _disposeCallback: null,
        _didAccept: false,
        accept: function accept(callback) {
          hot._didAccept = true;
          hot._acceptCallback = callback;
        },
        dispose: function dispose(callback) {
          hot._disposeCallback = callback;
        }
      };
      return hot;
    };

    var reactRefreshTimeout = null;

    var metroHotUpdateModule = function metroHotUpdateModule(id, factory, dependencyMap, inverseDependencies) {
      var mod = modules[id];

      if (!mod) {
        if (factory) {
          return;
        }

        throw unknownModuleError(id);
      }

      if (!mod.hasError && !mod.isInitialized) {
        mod.factory = factory;
        mod.dependencyMap = dependencyMap;
        return;
      }

      var Refresh = metroRequire.Refresh;
      var refreshBoundaryIDs = new Set();
      var didBailOut = false;
      var updatedModuleIDs = topologicalSort([id], function (pendingID) {
        var pendingModule = modules[pendingID];

        if (pendingModule == null) {
          return [];
        }

        var pendingHot = pendingModule.hot;

        if (pendingHot == null) {
          throw new Error("[Refresh] Expected module.hot to always exist in DEV.");
        }

        var canAccept = pendingHot._didAccept;

        if (!canAccept && Refresh != null) {
          var isBoundary = isReactRefreshBoundary(Refresh, pendingModule.publicModule.exports);

          if (isBoundary) {
            canAccept = true;
            refreshBoundaryIDs.add(pendingID);
          }
        }

        if (canAccept) {
          return [];
        }

        var parentIDs = inverseDependencies[pendingID];

        if (parentIDs.length === 0) {
          performFullRefresh("No root boundary", {
            source: mod,
            failed: pendingModule
          });
          didBailOut = true;
          return [];
        }

        return parentIDs;
      }, function () {
        return didBailOut;
      }).reverse();

      if (didBailOut) {
        return;
      }

      var seenModuleIDs = new Set();

      for (var i = 0; i < updatedModuleIDs.length; i++) {
        var updatedID = updatedModuleIDs[i];

        if (seenModuleIDs.has(updatedID)) {
          continue;
        }

        seenModuleIDs.add(updatedID);
        var updatedMod = modules[updatedID];

        if (updatedMod == null) {
          throw new Error("[Refresh] Expected to find the updated module.");
        }

        var prevExports = updatedMod.publicModule.exports;
        var didError = runUpdatedModule(updatedID, updatedID === id ? factory : undefined, updatedID === id ? dependencyMap : undefined);
        var nextExports = updatedMod.publicModule.exports;

        if (didError) {
          return;
        }

        if (refreshBoundaryIDs.has(updatedID)) {
          var isNoLongerABoundary = !isReactRefreshBoundary(Refresh, nextExports);
          var didInvalidate = shouldInvalidateReactRefreshBoundary(Refresh, prevExports, nextExports);

          if (isNoLongerABoundary || didInvalidate) {
            var parentIDs = inverseDependencies[updatedID];

            if (parentIDs.length === 0) {
              performFullRefresh(isNoLongerABoundary ? "No longer a boundary" : "Invalidated boundary", {
                source: mod,
                failed: updatedMod
              });
              return;
            }

            for (var j = 0; j < parentIDs.length; j++) {
              var parentID = parentIDs[j];
              var parentMod = modules[parentID];

              if (parentMod == null) {
                throw new Error("[Refresh] Expected to find parent module.");
              }

              var canAcceptParent = isReactRefreshBoundary(Refresh, parentMod.publicModule.exports);

              if (canAcceptParent) {
                refreshBoundaryIDs.add(parentID);
                updatedModuleIDs.push(parentID);
              } else {
                performFullRefresh("Invalidated boundary", {
                  source: mod,
                  failed: parentMod
                });
                return;
              }
            }
          }
        }
      }

      if (Refresh != null) {
        if (reactRefreshTimeout == null) {
          reactRefreshTimeout = setTimeout(function () {
            reactRefreshTimeout = null;
            Refresh.performReactRefresh();
          }, 30);
        }
      }
    };

    var topologicalSort = function topologicalSort(roots, getEdges, earlyStop) {
      var result = [];
      var visited = new Set();

      function traverseDependentNodes(node) {
        visited.add(node);
        var dependentNodes = getEdges(node);

        if (earlyStop(node)) {
          return;
        }

        dependentNodes.forEach(function (dependent) {
          if (visited.has(dependent)) {
            return;
          }

          traverseDependentNodes(dependent);
        });
        result.push(node);
      }

      roots.forEach(function (root) {
        if (!visited.has(root)) {
          traverseDependentNodes(root);
        }
      });
      return result;
    };

    var runUpdatedModule = function runUpdatedModule(id, factory, dependencyMap) {
      var mod = modules[id];

      if (mod == null) {
        throw new Error("[Refresh] Expected to find the module.");
      }

      var hot = mod.hot;

      if (!hot) {
        throw new Error("[Refresh] Expected module.hot to always exist in DEV.");
      }

      if (hot._disposeCallback) {
        try {
          hot._disposeCallback();
        } catch (error) {
          console.error("Error while calling dispose handler for module " + id + ": ", error);
        }
      }

      if (factory) {
        mod.factory = factory;
      }

      if (dependencyMap) {
        mod.dependencyMap = dependencyMap;
      }

      mod.hasError = false;
      mod.error = undefined;
      mod.importedAll = EMPTY;
      mod.importedDefault = EMPTY;
      mod.isInitialized = false;
      var prevExports = mod.publicModule.exports;
      mod.publicModule.exports = {};
      hot._didAccept = false;
      hot._acceptCallback = null;
      hot._disposeCallback = null;
      metroRequire(id);

      if (mod.hasError) {
        mod.hasError = false;
        mod.isInitialized = true;
        mod.error = null;
        mod.publicModule.exports = prevExports;
        return true;
      }

      if (hot._acceptCallback) {
        try {
          hot._acceptCallback();
        } catch (error) {
          console.error("Error while calling accept handler for module " + id + ": ", error);
        }
      }

      return false;
    };

    var performFullRefresh = function performFullRefresh(reason, modules) {
      if (typeof window !== "undefined" && window.location != null && typeof window.location.reload === "function") {
        window.location.reload();
      } else {
        var Refresh = metroRequire.Refresh;

        if (Refresh != null) {
          var _ref2, _modules$source, _ref3, _modules$failed;

          var sourceName = (_ref2 = (_modules$source = modules.source) === null || _modules$source === void 0 ? void 0 : _modules$source.verboseName) !== null && _ref2 !== void 0 ? _ref2 : "unknown";
          var failedName = (_ref3 = (_modules$failed = modules.failed) === null || _modules$failed === void 0 ? void 0 : _modules$failed.verboseName) !== null && _ref3 !== void 0 ? _ref3 : "unknown";
          Refresh.performFullRefresh("Fast Refresh - " + reason + " <" + sourceName + "> <" + failedName + ">");
        } else {
          console.warn("Could not reload the application after an edit.");
        }
      }
    };

    var isReactRefreshBoundary = function isReactRefreshBoundary(Refresh, moduleExports) {
      if (Refresh.isLikelyComponentType(moduleExports)) {
        return true;
      }

      if (moduleExports == null || typeof moduleExports !== "object") {
        return false;
      }

      var hasExports = false;
      var areAllExportsComponents = true;

      for (var key in moduleExports) {
        hasExports = true;

        if (key === "__esModule") {
          continue;
        }

        var desc = Object.getOwnPropertyDescriptor(moduleExports, key);

        if (desc && desc.get) {
          return false;
        }

        var exportValue = moduleExports[key];

        if (!Refresh.isLikelyComponentType(exportValue)) {
          areAllExportsComponents = false;
        }
      }

      return hasExports && areAllExportsComponents;
    };

    var shouldInvalidateReactRefreshBoundary = function shouldInvalidateReactRefreshBoundary(Refresh, prevExports, nextExports) {
      var prevSignature = getRefreshBoundarySignature(Refresh, prevExports);
      var nextSignature = getRefreshBoundarySignature(Refresh, nextExports);

      if (prevSignature.length !== nextSignature.length) {
        return true;
      }

      for (var i = 0; i < nextSignature.length; i++) {
        if (prevSignature[i] !== nextSignature[i]) {
          return true;
        }
      }

      return false;
    };

    var getRefreshBoundarySignature = function getRefreshBoundarySignature(Refresh, moduleExports) {
      var signature = [];
      signature.push(Refresh.getFamilyByType(moduleExports));

      if (moduleExports == null || typeof moduleExports !== "object") {
        return signature;
      }

      for (var key in moduleExports) {
        if (key === "__esModule") {
          continue;
        }

        var desc = Object.getOwnPropertyDescriptor(moduleExports, key);

        if (desc && desc.get) {
          continue;
        }

        var exportValue = moduleExports[key];
        signature.push(key);
        signature.push(Refresh.getFamilyByType(exportValue));
      }

      return signature;
    };

    var registerExportsForReactRefresh = function registerExportsForReactRefresh(Refresh, moduleExports, moduleID) {
      Refresh.register(moduleExports, moduleID + " %exports%");

      if (moduleExports == null || typeof moduleExports !== "object") {
        return;
      }

      for (var key in moduleExports) {
        var desc = Object.getOwnPropertyDescriptor(moduleExports, key);

        if (desc && desc.get) {
          continue;
        }

        var exportValue = moduleExports[key];
        var typeID = moduleID + " %exports% " + key;
        Refresh.register(exportValue, typeID);
      }
    };

    global.__accept = metroHotUpdateModule;
  }
})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  var inspect = function () {
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        formatValueCalls: 0,
        stylize: stylizeNoColor
      };
      return formatValue(ctx, obj, opts.depth);
    }

    function stylizeNoColor(str, styleType) {
      return str;
    }

    function arrayToHash(array) {
      var hash = {};
      array.forEach(function (val, idx) {
        hash[val] = true;
      });
      return hash;
    }

    function formatValue(ctx, value, recurseTimes) {
      ctx.formatValueCalls++;

      if (ctx.formatValueCalls > 200) {
        return "[TOO BIG formatValueCalls " + ctx.formatValueCalls + " exceeded limit of 200]";
      }

      var primitive = formatPrimitive(ctx, value);

      if (primitive) {
        return primitive;
      }

      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }

        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }

        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }

        if (isError(value)) {
          return formatError(value);
        }
      }

      var base = '',
          array = false,
          braces = ['{', '}'];

      if (isArray(value)) {
        array = true;
        braces = ['[', ']'];
      }

      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      if (isError(value)) {
        base = ' ' + formatError(value);
      }

      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }

      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }

      ctx.seen.push(value);
      var output;

      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function (key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }

      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }

    function formatPrimitive(ctx, value) {
      if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

      if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, 'string');
      }

      if (isNumber(value)) return ctx.stylize('' + value, 'number');
      if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
      if (isNull(value)) return ctx.stylize('null', 'null');
    }

    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }

    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];

      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
        } else {
          output.push('');
        }
      }

      keys.forEach(function (key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
        }
      });
      return output;
    }

    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
      };

      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }

      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }

      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }

          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function (line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function (line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }

      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }

        name = JSON.stringify('' + key);

        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    }

    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function (prev, cur) {
        numLinesEst++;
        if (cur.indexOf('\n') >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);

      if (length > 60) {
        return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
      }

      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }

    function isArray(ar) {
      return Array.isArray(ar);
    }

    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }

    function isNull(arg) {
      return arg === null;
    }

    function isNullOrUndefined(arg) {
      return arg == null;
    }

    function isNumber(arg) {
      return typeof arg === 'number';
    }

    function isString(arg) {
      return typeof arg === 'string';
    }

    function isSymbol(arg) {
      return typeof arg === 'symbol';
    }

    function isUndefined(arg) {
      return arg === void 0;
    }

    function isRegExp(re) {
      return isObject(re) && objectToString(re) === '[object RegExp]';
    }

    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }

    function isDate(d) {
      return isObject(d) && objectToString(d) === '[object Date]';
    }

    function isError(e) {
      return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
    }

    function isFunction(arg) {
      return typeof arg === 'function';
    }

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }

    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    return inspect;
  }();

  var OBJECT_COLUMN_NAME = '(index)';
  var LOG_LEVELS = {
    trace: 0,
    info: 1,
    warn: 2,
    error: 3
  };
  var INSPECTOR_LEVELS = [];
  INSPECTOR_LEVELS[LOG_LEVELS.trace] = 'debug';
  INSPECTOR_LEVELS[LOG_LEVELS.info] = 'log';
  INSPECTOR_LEVELS[LOG_LEVELS.warn] = 'warning';
  INSPECTOR_LEVELS[LOG_LEVELS.error] = 'error';
  var INSPECTOR_FRAMES_TO_SKIP = __DEV__ ? 2 : 1;

  function getNativeLogFunction(level) {
    return function () {
      var str;

      if (arguments.length === 1 && typeof arguments[0] === 'string') {
        str = arguments[0];
      } else {
        str = Array.prototype.map.call(arguments, function (arg) {
          return inspect(arg, {
            depth: 10
          });
        }).join(', ');
      }

      var firstArg = arguments[0];
      var logLevel = level;

      if (typeof firstArg === 'string' && firstArg.slice(0, 9) === 'Warning: ' && logLevel >= LOG_LEVELS.error) {
        logLevel = LOG_LEVELS.warn;
      }

      if (global.__inspectorLog) {
        global.__inspectorLog(INSPECTOR_LEVELS[logLevel], str, [].slice.call(arguments), INSPECTOR_FRAMES_TO_SKIP);
      }

      if (groupStack.length) {
        str = groupFormat('', str);
      }

      global.nativeLoggingHook(str, logLevel);
    };
  }

  function repeat(element, n) {
    return Array.apply(null, Array(n)).map(function () {
      return element;
    });
  }

  function consoleTablePolyfill(rows) {
    if (!Array.isArray(rows)) {
      var data = rows;
      rows = [];

      for (var key in data) {
        if (data.hasOwnProperty(key)) {
          var row = data[key];
          row[OBJECT_COLUMN_NAME] = key;
          rows.push(row);
        }
      }
    }

    if (rows.length === 0) {
      global.nativeLoggingHook('', LOG_LEVELS.info);
      return;
    }

    var columns = Object.keys(rows[0]).sort();
    var stringRows = [];
    var columnWidths = [];
    columns.forEach(function (k, i) {
      columnWidths[i] = k.length;

      for (var j = 0; j < rows.length; j++) {
        var cellStr = (rows[j][k] || '?').toString();
        stringRows[j] = stringRows[j] || [];
        stringRows[j][i] = cellStr;
        columnWidths[i] = Math.max(columnWidths[i], cellStr.length);
      }
    });

    function joinRow(row, space) {
      var cells = row.map(function (cell, i) {
        var extraSpaces = repeat(' ', columnWidths[i] - cell.length).join('');
        return cell + extraSpaces;
      });
      space = space || ' ';
      return cells.join(space + '|' + space);
    }

    var separators = columnWidths.map(function (columnWidth) {
      return repeat('-', columnWidth).join('');
    });
    var separatorRow = joinRow(separators, '-');
    var header = joinRow(columns);
    var table = [header, separatorRow];

    for (var i = 0; i < rows.length; i++) {
      table.push(joinRow(stringRows[i]));
    }

    global.nativeLoggingHook('\n' + table.join('\n'), LOG_LEVELS.info);
  }

  var GROUP_PAD = "\u2502";
  var GROUP_OPEN = "\u2510";
  var GROUP_CLOSE = "\u2518";
  var groupStack = [];

  function groupFormat(prefix, msg) {
    return groupStack.join('') + prefix + ' ' + (msg || '');
  }

  function consoleGroupPolyfill(label) {
    global.nativeLoggingHook(groupFormat(GROUP_OPEN, label), LOG_LEVELS.info);
    groupStack.push(GROUP_PAD);
  }

  function consoleGroupCollapsedPolyfill(label) {
    global.nativeLoggingHook(groupFormat(GROUP_CLOSE, label), LOG_LEVELS.info);
    groupStack.push(GROUP_PAD);
  }

  function consoleGroupEndPolyfill() {
    groupStack.pop();
    global.nativeLoggingHook(groupFormat(GROUP_CLOSE), LOG_LEVELS.info);
  }

  function consoleAssertPolyfill(expression, label) {
    if (!expression) {
      global.nativeLoggingHook('Assertion failed: ' + label, LOG_LEVELS.error);
    }
  }

  if (global.nativeLoggingHook) {
    var originalConsole = global.console;

    if (__DEV__ && originalConsole) {
      var descriptor = Object.getOwnPropertyDescriptor(global, 'console');

      if (descriptor) {
        Object.defineProperty(global, 'originalConsole', descriptor);
      }
    }

    global.console = {
      error: getNativeLogFunction(LOG_LEVELS.error),
      info: getNativeLogFunction(LOG_LEVELS.info),
      log: getNativeLogFunction(LOG_LEVELS.info),
      warn: getNativeLogFunction(LOG_LEVELS.warn),
      trace: getNativeLogFunction(LOG_LEVELS.trace),
      debug: getNativeLogFunction(LOG_LEVELS.trace),
      table: consoleTablePolyfill,
      group: consoleGroupPolyfill,
      groupEnd: consoleGroupEndPolyfill,
      groupCollapsed: consoleGroupCollapsedPolyfill,
      assert: consoleAssertPolyfill
    };
    Object.defineProperty(console, '_isPolyfilled', {
      value: true,
      enumerable: false
    });

    if (__DEV__ && originalConsole) {
      Object.keys(console).forEach(function (methodName) {
        var reactNativeMethod = console[methodName];

        if (originalConsole[methodName]) {
          console[methodName] = function () {
            if (methodName === 'assert') {
              if (!arguments[0]) {
                originalConsole.assert.apply(originalConsole, arguments);
              }
            } else {
              originalConsole[methodName].apply(originalConsole, arguments);
            }

            reactNativeMethod.apply(console, arguments);
          };
        }
      });
      ['clear', 'dir', 'dirxml', 'profile', 'profileEnd'].forEach(function (methodName) {
        if (typeof originalConsole[methodName] === 'function') {
          console[methodName] = function () {
            originalConsole[methodName].apply(originalConsole, arguments);
          };
        }
      });
    }
  } else if (!global.console) {
    function stub() {}

    var log = global.print || stub;
    global.console = {
      debug: log,
      error: log,
      info: log,
      log: log,
      trace: log,
      warn: log,
      assert: function assert(expression, label) {
        if (!expression) {
          log('Assertion failed: ' + label);
        }
      },
      clear: stub,
      dir: stub,
      dirxml: stub,
      group: stub,
      groupCollapsed: stub,
      groupEnd: stub,
      profile: stub,
      profileEnd: stub,
      table: stub
    };
    Object.defineProperty(console, '_isPolyfilled', {
      value: true,
      enumerable: false
    });
  }
})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  var _inGuard = 0;

  var _globalHandler = function onError(e, isFatal) {
    throw e;
  };

  var ErrorUtils = {
    setGlobalHandler: function setGlobalHandler(fun) {
      _globalHandler = fun;
    },
    getGlobalHandler: function getGlobalHandler() {
      return _globalHandler;
    },
    reportError: function reportError(error) {
      _globalHandler && _globalHandler(error, false);
    },
    reportFatalError: function reportFatalError(error) {
      _globalHandler && _globalHandler(error, true);
    },
    applyWithGuard: function applyWithGuard(fun, context, args, unused_onError, unused_name) {
      try {
        _inGuard++;
        return fun.apply(context, args);
      } catch (e) {
        ErrorUtils.reportError(e);
      } finally {
        _inGuard--;
      }

      return null;
    },
    applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {
      if (ErrorUtils.inGuard()) {
        return fun.apply(context, args);
      } else {
        ErrorUtils.applyWithGuard(fun, context, args);
      }

      return null;
    },
    inGuard: function inGuard() {
      return !!_inGuard;
    },
    guard: function guard(fun, name, context) {
      var _ref;

      if (typeof fun !== 'function') {
        console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
        return null;
      }

      var guardName = (_ref = name != null ? name : fun.name) != null ? _ref : '<generated guard>';

      function guarded() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return ErrorUtils.applyWithGuard(fun, context != null ? context : this, args, null, guardName);
      }

      return guarded;
    }
  };
  global.ErrorUtils = ErrorUtils;
})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  (function () {
    'use strict';

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    if (typeof Object.entries !== 'function') {
      Object.entries = function (object) {
        if (object == null) {
          throw new TypeError('Object.entries called on non-object');
        }

        var entries = [];

        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            entries.push([key, object[key]]);
          }
        }

        return entries;
      };
    }

    if (typeof Object.values !== 'function') {
      Object.values = function (object) {
        if (object == null) {
          throw new TypeError('Object.values called on non-object');
        }

        var values = [];

        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            values.push(object[key]);
          }
        }

        return values;
      };
    }
  })();
})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _reactNative = _$$_REQUIRE(_dependencyMap[0], "react-native");

  var _App = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "./src/App"));

  _reactNative.AppRegistry.registerComponent(_$$_REQUIRE(_dependencyMap[3], "./app.json").name, function () {
    return _App.default;
  });
},0,[1,3,478,490],"index.tsx");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    get AccessibilityInfo() {
      return _$$_REQUIRE(_dependencyMap[0], "./Libraries/Components/AccessibilityInfo/AccessibilityInfo");
    },

    get ActivityIndicator() {
      return _$$_REQUIRE(_dependencyMap[1], "./Libraries/Components/ActivityIndicator/ActivityIndicator");
    },

    get Button() {
      return _$$_REQUIRE(_dependencyMap[2], "./Libraries/Components/Button");
    },

    get CheckBox() {
      _$$_REQUIRE(_dependencyMap[3], "./Libraries/Utilities/warnOnce")('checkBox-moved', 'CheckBox has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/checkbox' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-checkbox');

      return _$$_REQUIRE(_dependencyMap[4], "./Libraries/Components/CheckBox/CheckBox");
    },

    get DatePickerIOS() {
      _$$_REQUIRE(_dependencyMap[3], "./Libraries/Utilities/warnOnce")('DatePickerIOS-merged', 'DatePickerIOS has been merged with DatePickerAndroid and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. " + 'See https://github.com/react-native-community/datetimepicker');

      return _$$_REQUIRE(_dependencyMap[5], "./Libraries/Components/DatePicker/DatePickerIOS");
    },

    get DrawerLayoutAndroid() {
      return _$$_REQUIRE(_dependencyMap[6], "./Libraries/Components/DrawerAndroid/DrawerLayoutAndroid");
    },

    get FlatList() {
      return _$$_REQUIRE(_dependencyMap[7], "./Libraries/Lists/FlatList");
    },

    get Image() {
      return _$$_REQUIRE(_dependencyMap[8], "./Libraries/Image/Image");
    },

    get ImageBackground() {
      return _$$_REQUIRE(_dependencyMap[9], "./Libraries/Image/ImageBackground");
    },

    get InputAccessoryView() {
      return _$$_REQUIRE(_dependencyMap[10], "./Libraries/Components/TextInput/InputAccessoryView");
    },

    get KeyboardAvoidingView() {
      return _$$_REQUIRE(_dependencyMap[11], "./Libraries/Components/Keyboard/KeyboardAvoidingView");
    },

    get MaskedViewIOS() {
      _$$_REQUIRE(_dependencyMap[3], "./Libraries/Utilities/warnOnce")('maskedviewios-moved', 'MaskedViewIOS has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/masked-view' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-masked-view');

      return _$$_REQUIRE(_dependencyMap[12], "./Libraries/Components/MaskedView/MaskedViewIOS");
    },

    get Modal() {
      return _$$_REQUIRE(_dependencyMap[13], "./Libraries/Modal/Modal");
    },

    get Picker() {
      _$$_REQUIRE(_dependencyMap[3], "./Libraries/Utilities/warnOnce")('picker-moved', 'Picker has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/picker' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-picker');

      return _$$_REQUIRE(_dependencyMap[14], "./Libraries/Components/Picker/Picker");
    },

    get PickerIOS() {
      _$$_REQUIRE(_dependencyMap[3], "./Libraries/Utilities/warnOnce")('pickerios-moved', 'PickerIOS has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/picker' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-picker');

      return _$$_REQUIRE(_dependencyMap[15], "./Libraries/Components/Picker/PickerIOS");
    },

    get Pressable() {
      return _$$_REQUIRE(_dependencyMap[16], "./Libraries/Components/Pressable/Pressable").default;
    },

    get ProgressBarAndroid() {
      _$$_REQUIRE(_dependencyMap[3], "./Libraries/Utilities/warnOnce")('progress-bar-android-moved', 'ProgressBarAndroid has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/progress-bar-android' instead of 'react-native'. " + 'See https://github.com/react-native-community/progress-bar-android');

      return _$$_REQUIRE(_dependencyMap[17], "./Libraries/Components/ProgressBarAndroid/ProgressBarAndroid");
    },

    get ProgressViewIOS() {
      _$$_REQUIRE(_dependencyMap[3], "./Libraries/Utilities/warnOnce")('progress-view-ios-moved', 'ProgressViewIOS has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/progress-view' instead of 'react-native'. " + 'See https://github.com/react-native-community/progress-view');

      return _$$_REQUIRE(_dependencyMap[18], "./Libraries/Components/ProgressViewIOS/ProgressViewIOS");
    },

    get SafeAreaView() {
      return _$$_REQUIRE(_dependencyMap[19], "./Libraries/Components/SafeAreaView/SafeAreaView");
    },

    get ScrollView() {
      return _$$_REQUIRE(_dependencyMap[20], "./Libraries/Components/ScrollView/ScrollView");
    },

    get SectionList() {
      return _$$_REQUIRE(_dependencyMap[21], "./Libraries/Lists/SectionList");
    },

    get SegmentedControlIOS() {
      _$$_REQUIRE(_dependencyMap[3], "./Libraries/Utilities/warnOnce")('segmented-control-ios-moved', 'SegmentedControlIOS has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/segmented-control' instead of 'react-native'. " + 'See https://github.com/react-native-community/segmented-control');

      return _$$_REQUIRE(_dependencyMap[22], "./Libraries/Components/SegmentedControlIOS/SegmentedControlIOS");
    },

    get Slider() {
      _$$_REQUIRE(_dependencyMap[3], "./Libraries/Utilities/warnOnce")('slider-moved', 'Slider has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/slider' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-slider');

      return _$$_REQUIRE(_dependencyMap[23], "./Libraries/Components/Slider/Slider");
    },

    get Switch() {
      return _$$_REQUIRE(_dependencyMap[24], "./Libraries/Components/Switch/Switch");
    },

    get RefreshControl() {
      return _$$_REQUIRE(_dependencyMap[25], "./Libraries/Components/RefreshControl/RefreshControl");
    },

    get StatusBar() {
      return _$$_REQUIRE(_dependencyMap[26], "./Libraries/Components/StatusBar/StatusBar");
    },

    get Text() {
      return _$$_REQUIRE(_dependencyMap[27], "./Libraries/Text/Text");
    },

    get TextInput() {
      return _$$_REQUIRE(_dependencyMap[28], "./Libraries/Components/TextInput/TextInput");
    },

    get Touchable() {
      return _$$_REQUIRE(_dependencyMap[29], "./Libraries/Components/Touchable/Touchable");
    },

    get TouchableHighlight() {
      return _$$_REQUIRE(_dependencyMap[30], "./Libraries/Components/Touchable/TouchableHighlight");
    },

    get TouchableNativeFeedback() {
      return _$$_REQUIRE(_dependencyMap[31], "./Libraries/Components/Touchable/TouchableNativeFeedback");
    },

    get TouchableOpacity() {
      return _$$_REQUIRE(_dependencyMap[32], "./Libraries/Components/Touchable/TouchableOpacity");
    },

    get TouchableWithoutFeedback() {
      return _$$_REQUIRE(_dependencyMap[33], "./Libraries/Components/Touchable/TouchableWithoutFeedback");
    },

    get View() {
      return _$$_REQUIRE(_dependencyMap[34], "./Libraries/Components/View/View");
    },

    get VirtualizedList() {
      return _$$_REQUIRE(_dependencyMap[35], "./Libraries/Lists/VirtualizedList");
    },

    get VirtualizedSectionList() {
      return _$$_REQUIRE(_dependencyMap[36], "./Libraries/Lists/VirtualizedSectionList");
    },

    get ActionSheetIOS() {
      return _$$_REQUIRE(_dependencyMap[37], "./Libraries/ActionSheetIOS/ActionSheetIOS");
    },

    get Alert() {
      return _$$_REQUIRE(_dependencyMap[38], "./Libraries/Alert/Alert");
    },

    get Animated() {
      return _$$_REQUIRE(_dependencyMap[39], "./Libraries/Animated/src/Animated");
    },

    get Appearance() {
      return _$$_REQUIRE(_dependencyMap[40], "./Libraries/Utilities/Appearance");
    },

    get AppRegistry() {
      return _$$_REQUIRE(_dependencyMap[41], "./Libraries/ReactNative/AppRegistry");
    },

    get AppState() {
      return _$$_REQUIRE(_dependencyMap[42], "./Libraries/AppState/AppState");
    },

    get AsyncStorage() {
      _$$_REQUIRE(_dependencyMap[3], "./Libraries/Utilities/warnOnce")('async-storage-moved', 'AsyncStorage has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/async-storage' instead of 'react-native'. " + 'See https://github.com/react-native-community/async-storage');

      return _$$_REQUIRE(_dependencyMap[43], "./Libraries/Storage/AsyncStorage");
    },

    get BackHandler() {
      return _$$_REQUIRE(_dependencyMap[44], "./Libraries/Utilities/BackHandler");
    },

    get Clipboard() {
      _$$_REQUIRE(_dependencyMap[3], "./Libraries/Utilities/warnOnce")('clipboard-moved', 'Clipboard has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/clipboard' instead of 'react-native'. " + 'See https://github.com/react-native-community/clipboard');

      return _$$_REQUIRE(_dependencyMap[45], "./Libraries/Components/Clipboard/Clipboard");
    },

    get DatePickerAndroid() {
      _$$_REQUIRE(_dependencyMap[3], "./Libraries/Utilities/warnOnce")('DatePickerAndroid-merged', 'DatePickerAndroid has been merged with DatePickerIOS and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. " + 'See https://github.com/react-native-community/datetimepicker');

      return _$$_REQUIRE(_dependencyMap[46], "./Libraries/Components/DatePickerAndroid/DatePickerAndroid");
    },

    get DeviceInfo() {
      return _$$_REQUIRE(_dependencyMap[47], "./Libraries/Utilities/DeviceInfo");
    },

    get DevSettings() {
      return _$$_REQUIRE(_dependencyMap[48], "./Libraries/Utilities/DevSettings");
    },

    get Dimensions() {
      return _$$_REQUIRE(_dependencyMap[49], "./Libraries/Utilities/Dimensions");
    },

    get Easing() {
      return _$$_REQUIRE(_dependencyMap[50], "./Libraries/Animated/src/Easing");
    },

    get findNodeHandle() {
      return _$$_REQUIRE(_dependencyMap[51], "./Libraries/Renderer/shims/ReactNative").findNodeHandle;
    },

    get I18nManager() {
      return _$$_REQUIRE(_dependencyMap[52], "./Libraries/ReactNative/I18nManager");
    },

    get ImagePickerIOS() {
      _$$_REQUIRE(_dependencyMap[3], "./Libraries/Utilities/warnOnce")('imagePickerIOS-moved', 'ImagePickerIOS has been extracted from react-native core and will be removed in a future release. ' + "Please upgrade to use either '@react-native-community/react-native-image-picker' or 'expo-image-picker'. " + "If you cannot upgrade to a different library, please install the deprecated '@react-native-community/image-picker-ios' package. " + 'See https://github.com/react-native-community/react-native-image-picker-ios');

      return _$$_REQUIRE(_dependencyMap[53], "./Libraries/Image/ImagePickerIOS");
    },

    get InteractionManager() {
      return _$$_REQUIRE(_dependencyMap[54], "./Libraries/Interaction/InteractionManager");
    },

    get Keyboard() {
      return _$$_REQUIRE(_dependencyMap[55], "./Libraries/Components/Keyboard/Keyboard");
    },

    get LayoutAnimation() {
      return _$$_REQUIRE(_dependencyMap[56], "./Libraries/LayoutAnimation/LayoutAnimation");
    },

    get Linking() {
      return _$$_REQUIRE(_dependencyMap[57], "./Libraries/Linking/Linking");
    },

    get LogBox() {
      return _$$_REQUIRE(_dependencyMap[58], "./Libraries/LogBox/LogBox");
    },

    get NativeDialogManagerAndroid() {
      return _$$_REQUIRE(_dependencyMap[59], "./Libraries/NativeModules/specs/NativeDialogManagerAndroid").default;
    },

    get NativeEventEmitter() {
      return _$$_REQUIRE(_dependencyMap[60], "./Libraries/EventEmitter/NativeEventEmitter");
    },

    get Networking() {
      return _$$_REQUIRE(_dependencyMap[61], "./Libraries/Network/RCTNetworking");
    },

    get PanResponder() {
      return _$$_REQUIRE(_dependencyMap[62], "./Libraries/Interaction/PanResponder");
    },

    get PermissionsAndroid() {
      return _$$_REQUIRE(_dependencyMap[63], "./Libraries/PermissionsAndroid/PermissionsAndroid");
    },

    get PixelRatio() {
      return _$$_REQUIRE(_dependencyMap[64], "./Libraries/Utilities/PixelRatio");
    },

    get PushNotificationIOS() {
      _$$_REQUIRE(_dependencyMap[3], "./Libraries/Utilities/warnOnce")('pushNotificationIOS-moved', 'PushNotificationIOS has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/push-notification-ios' instead of 'react-native'. " + 'See https://github.com/react-native-community/push-notification-ios');

      return _$$_REQUIRE(_dependencyMap[65], "./Libraries/PushNotificationIOS/PushNotificationIOS");
    },

    get Settings() {
      return _$$_REQUIRE(_dependencyMap[66], "./Libraries/Settings/Settings");
    },

    get Share() {
      return _$$_REQUIRE(_dependencyMap[67], "./Libraries/Share/Share");
    },

    get StatusBarIOS() {
      _$$_REQUIRE(_dependencyMap[3], "./Libraries/Utilities/warnOnce")('StatusBarIOS-merged', 'StatusBarIOS has been merged with StatusBar and will be removed in a future release. Use StatusBar for mutating the status bar');

      return _$$_REQUIRE(_dependencyMap[68], "./Libraries/Components/StatusBar/StatusBarIOS");
    },

    get StyleSheet() {
      return _$$_REQUIRE(_dependencyMap[69], "./Libraries/StyleSheet/StyleSheet");
    },

    get Systrace() {
      return _$$_REQUIRE(_dependencyMap[70], "./Libraries/Performance/Systrace");
    },

    get ToastAndroid() {
      return _$$_REQUIRE(_dependencyMap[71], "./Libraries/Components/ToastAndroid/ToastAndroid");
    },

    get TurboModuleRegistry() {
      return _$$_REQUIRE(_dependencyMap[72], "./Libraries/TurboModule/TurboModuleRegistry");
    },

    get TVEventHandler() {
      return _$$_REQUIRE(_dependencyMap[73], "./Libraries/Components/AppleTV/TVEventHandler");
    },

    get UIManager() {
      return _$$_REQUIRE(_dependencyMap[74], "./Libraries/ReactNative/UIManager");
    },

    get unstable_batchedUpdates() {
      return _$$_REQUIRE(_dependencyMap[51], "./Libraries/Renderer/shims/ReactNative").unstable_batchedUpdates;
    },

    get useColorScheme() {
      return _$$_REQUIRE(_dependencyMap[75], "./Libraries/Utilities/useColorScheme").default;
    },

    get useWindowDimensions() {
      return _$$_REQUIRE(_dependencyMap[76], "./Libraries/Utilities/useWindowDimensions").default;
    },

    get UTFSequence() {
      return _$$_REQUIRE(_dependencyMap[77], "./Libraries/UTFSequence");
    },

    get Vibration() {
      return _$$_REQUIRE(_dependencyMap[78], "./Libraries/Vibration/Vibration");
    },

    get YellowBox() {
      return _$$_REQUIRE(_dependencyMap[79], "./Libraries/YellowBox/YellowBoxDeprecated");
    },

    get DeviceEventEmitter() {
      return _$$_REQUIRE(_dependencyMap[80], "./Libraries/EventEmitter/RCTDeviceEventEmitter");
    },

    get NativeAppEventEmitter() {
      return _$$_REQUIRE(_dependencyMap[81], "./Libraries/EventEmitter/RCTNativeAppEventEmitter");
    },

    get NativeModules() {
      return _$$_REQUIRE(_dependencyMap[82], "./Libraries/BatchedBridge/NativeModules");
    },

    get Platform() {
      return _$$_REQUIRE(_dependencyMap[83], "./Libraries/Utilities/Platform");
    },

    get processColor() {
      return _$$_REQUIRE(_dependencyMap[84], "./Libraries/StyleSheet/processColor");
    },

    get PlatformColor() {
      return _$$_REQUIRE(_dependencyMap[85], "./Libraries/StyleSheet/PlatformColorValueTypes").PlatformColor;
    },

    get DynamicColorIOS() {
      return _$$_REQUIRE(_dependencyMap[86], "./Libraries/StyleSheet/PlatformColorValueTypesIOS").DynamicColorIOS;
    },

    get ColorAndroid() {
      return _$$_REQUIRE(_dependencyMap[87], "./Libraries/StyleSheet/PlatformColorValueTypesAndroid").ColorAndroid;
    },

    get requireNativeComponent() {
      return _$$_REQUIRE(_dependencyMap[88], "./Libraries/ReactNative/requireNativeComponent");
    },

    get unstable_RootTagContext() {
      return _$$_REQUIRE(_dependencyMap[89], "./Libraries/ReactNative/RootTagContext");
    },

    get unstable_enableLogBox() {
      return function () {
        return console.warn('LogBox is enabled by default so there is no need to call unstable_enableLogBox() anymore. This is a no op and will be removed in the next version.');
      };
    },

    get ColorPropType() {
      return _$$_REQUIRE(_dependencyMap[90], "./Libraries/DeprecatedPropTypes/DeprecatedColorPropType");
    },

    get EdgeInsetsPropType() {
      return _$$_REQUIRE(_dependencyMap[91], "./Libraries/DeprecatedPropTypes/DeprecatedEdgeInsetsPropType");
    },

    get PointPropType() {
      return _$$_REQUIRE(_dependencyMap[92], "./Libraries/DeprecatedPropTypes/DeprecatedPointPropType");
    },

    get ViewPropTypes() {
      return _$$_REQUIRE(_dependencyMap[93], "./Libraries/DeprecatedPropTypes/DeprecatedViewPropTypes");
    }

  };

  if (__DEV__) {
    Object.defineProperty(module.exports, 'ART', {
      configurable: true,
      get: function get() {
        _$$_REQUIRE(_dependencyMap[94], "invariant")(false, 'ART has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/art' instead of 'react-native'. " + 'See https://github.com/react-native-community/art');
      }
    });
    Object.defineProperty(module.exports, 'ListView', {
      configurable: true,
      get: function get() {
        _$$_REQUIRE(_dependencyMap[94], "invariant")(false, 'ListView has been removed from React Native. ' + 'See https://fb.me/nolistview for more information or use ' + '`deprecated-react-native-listview`.');
      }
    });
    Object.defineProperty(module.exports, 'SwipeableListView', {
      configurable: true,
      get: function get() {
        _$$_REQUIRE(_dependencyMap[94], "invariant")(false, 'SwipeableListView has been removed from React Native. ' + 'See https://fb.me/nolistview for more information or use ' + '`deprecated-react-native-swipeable-listview`.');
      }
    });
    Object.defineProperty(module.exports, 'WebView', {
      configurable: true,
      get: function get() {
        _$$_REQUIRE(_dependencyMap[94], "invariant")(false, 'WebView has been removed from React Native. ' + "It can now be installed and imported from 'react-native-webview' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-webview');
      }
    });
    Object.defineProperty(module.exports, 'NetInfo', {
      configurable: true,
      get: function get() {
        _$$_REQUIRE(_dependencyMap[94], "invariant")(false, 'NetInfo has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/netinfo' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-netinfo');
      }
    });
    Object.defineProperty(module.exports, 'CameraRoll', {
      configurable: true,
      get: function get() {
        _$$_REQUIRE(_dependencyMap[94], "invariant")(false, 'CameraRoll has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/cameraroll' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-cameraroll');
      }
    });
    Object.defineProperty(module.exports, 'ImageStore', {
      configurable: true,
      get: function get() {
        _$$_REQUIRE(_dependencyMap[94], "invariant")(false, 'ImageStore has been removed from React Native. ' + 'To get a base64-encoded string from a local image use either of the following third-party libraries:' + "* expo-file-system: `readAsStringAsync(filepath, 'base64')`" + "* react-native-fs: `readFile(filepath, 'base64')`");
      }
    });
    Object.defineProperty(module.exports, 'ImageEditor', {
      configurable: true,
      get: function get() {
        _$$_REQUIRE(_dependencyMap[94], "invariant")(false, 'ImageEditor has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/image-editor' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-image-editor');
      }
    });
    Object.defineProperty(module.exports, 'TimePickerAndroid', {
      configurable: true,
      get: function get() {
        _$$_REQUIRE(_dependencyMap[94], "invariant")(false, 'TimePickerAndroid has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. " + 'See https://github.com/react-native-community/datetimepicker');
      }
    });
    Object.defineProperty(module.exports, 'ToolbarAndroid', {
      configurable: true,
      get: function get() {
        _$$_REQUIRE(_dependencyMap[94], "invariant")(false, 'ToolbarAndroid has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/toolbar-android' instead of 'react-native'. " + 'See https://github.com/react-native-community/toolbar-android');
      }
    });
    Object.defineProperty(module.exports, 'ViewPagerAndroid', {
      configurable: true,
      get: function get() {
        _$$_REQUIRE(_dependencyMap[94], "invariant")(false, 'ViewPagerAndroid has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/viewpager' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-viewpager');
      }
    });
  }
},1,[2,48,243,18,343,345,346,294,322,351,352,354,355,357,387,388,392,52,395,396,297,335,398,399,401,314,348,338,404,254,369,244,260,371,236,296,336,407,138,261,409,412,171,444,417,446,448,433,158,232,284,85,364,450,269,307,310,452,386,139,126,121,454,456,231,458,460,461,463,241,23,154,5,251,43,464,471,78,472,474,30,148,7,80,176,178,475,476,56,385,221,330,477,326,6],"node_modules/react-native/index.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeAccessibilityInfo = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./NativeAccessibilityInfo"));

  var REDUCE_MOTION_EVENT = 'reduceMotionDidChange';
  var TOUCH_EXPLORATION_EVENT = 'touchExplorationDidChange';

  var _subscriptions = new Map();

  var AccessibilityInfo = {
    isBoldTextEnabled: function isBoldTextEnabled() {
      return Promise.resolve(false);
    },
    isGrayscaleEnabled: function isGrayscaleEnabled() {
      return Promise.resolve(false);
    },
    isInvertColorsEnabled: function isInvertColorsEnabled() {
      return Promise.resolve(false);
    },
    isReduceMotionEnabled: function isReduceMotionEnabled() {
      return new Promise(function (resolve, reject) {
        if (_NativeAccessibilityInfo.default) {
          _NativeAccessibilityInfo.default.isReduceMotionEnabled(resolve);
        } else {
          reject(false);
        }
      });
    },
    isReduceTransparencyEnabled: function isReduceTransparencyEnabled() {
      return Promise.resolve(false);
    },
    isScreenReaderEnabled: function isScreenReaderEnabled() {
      return new Promise(function (resolve, reject) {
        if (_NativeAccessibilityInfo.default) {
          _NativeAccessibilityInfo.default.isTouchExplorationEnabled(resolve);
        } else {
          reject(false);
        }
      });
    },

    get fetch() {
      console.warn('AccessibilityInfo.fetch is deprecated, call AccessibilityInfo.isScreenReaderEnabled instead');
      return this.isScreenReaderEnabled;
    },

    addEventListener: function addEventListener(eventName, handler) {
      var listener;

      if (eventName === 'change' || eventName === 'screenReaderChanged') {
        listener = _$$_REQUIRE(_dependencyMap[2], "../../EventEmitter/RCTDeviceEventEmitter").addListener(TOUCH_EXPLORATION_EVENT, function (enabled) {
          handler(enabled);
        });
      } else if (eventName === 'reduceMotionChanged') {
        listener = _$$_REQUIRE(_dependencyMap[2], "../../EventEmitter/RCTDeviceEventEmitter").addListener(REDUCE_MOTION_EVENT, function (enabled) {
          handler(enabled);
        });
      }

      _subscriptions.set(handler, listener);
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      var listener = _subscriptions.get(handler);

      if (!listener) {
        return;
      }

      listener.remove();

      _subscriptions.delete(handler);
    },
    setAccessibilityFocus: function setAccessibilityFocus(reactTag) {
      _$$_REQUIRE(_dependencyMap[3], "../../ReactNative/UIManager").sendAccessibilityEvent(reactTag, _$$_REQUIRE(_dependencyMap[3], "../../ReactNative/UIManager").getConstants().AccessibilityEventTypes.typeViewFocused);
    },
    announceForAccessibility: function announceForAccessibility(announcement) {
      if (_NativeAccessibilityInfo.default) {
        _NativeAccessibilityInfo.default.announceForAccessibility(announcement);
      }
    }
  };
  module.exports = AccessibilityInfo;
},2,[3,4,30,43],"node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }

  module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
},3,[],"node_modules/@babel/runtime/helpers/interopRequireDefault.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('AccessibilityInfo');

  exports.default = _default;
},4,[5],"node_modules/react-native/Libraries/Components/AccessibilityInfo/NativeAccessibilityInfo.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.get = get;
  exports.getEnforcing = getEnforcing;

  var _invariant = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "invariant"));

  var turboModuleProxy = global.__turboModuleProxy;

  function get(name) {
    if (!global.RN$Bridgeless) {
      var legacyModule = _$$_REQUIRE(_dependencyMap[2], "../BatchedBridge/NativeModules")[name];

      if (legacyModule != null) {
        return legacyModule;
      }
    }

    if (turboModuleProxy != null) {
      var module = turboModuleProxy(name);
      return module;
    }

    return null;
  }

  function getEnforcing(name) {
    var module = get(name);
    (0, _invariant.default)(module != null, "TurboModuleRegistry.getEnforcing(...): '" + name + "' could not be found. " + 'Verify that a module by this name is registered in the native binary.');
    return module;
  }
},5,[3,6,7],"node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = function invariant(condition, format, a, b, c, d, e, f) {
    if (process.env.NODE_ENV !== 'production') {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    }

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  };

  module.exports = invariant;
},6,[],"node_modules/invariant/browser.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function genModule(config, moduleID) {
    if (!config) {
      return null;
    }

    var _config = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/slicedToArray")(config, 5),
        moduleName = _config[0],
        constants = _config[1],
        methods = _config[2],
        promiseMethods = _config[3],
        syncMethods = _config[4];

    _$$_REQUIRE(_dependencyMap[1], "invariant")(!moduleName.startsWith('RCT') && !moduleName.startsWith('RK'), "Module name prefixes should've been stripped by the native side " + "but wasn't for " + moduleName);

    if (!constants && !methods) {
      return {
        name: moduleName
      };
    }

    var module = {};
    methods && methods.forEach(function (methodName, methodID) {
      var isPromise = promiseMethods && arrayContains(promiseMethods, methodID);
      var isSync = syncMethods && arrayContains(syncMethods, methodID);

      _$$_REQUIRE(_dependencyMap[1], "invariant")(!isPromise || !isSync, 'Cannot have a method that is both async and a sync hook');

      var methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';
      module[methodName] = genMethod(moduleID, methodID, methodType);
    });
    Object.assign(module, constants);

    if (module.getConstants == null) {
      module.getConstants = function () {
        return constants || Object.freeze({});
      };
    } else {
      console.warn("Unable to define method 'getConstants()' on NativeModule '" + moduleName + "'. NativeModule '" + moduleName + "' already has a constant or method called 'getConstants'. Please remove it.");
    }

    if (__DEV__) {
      _$$_REQUIRE(_dependencyMap[2], "./BatchedBridge").createDebugLookup(moduleID, moduleName, methods);
    }

    return {
      name: moduleName,
      module: module
    };
  }

  global.__fbGenNativeModule = genModule;

  function loadModule(name, moduleID) {
    _$$_REQUIRE(_dependencyMap[1], "invariant")(global.nativeRequireModuleConfig, "Can't lazily create module without nativeRequireModuleConfig");

    var config = global.nativeRequireModuleConfig(name);
    var info = genModule(config, moduleID);
    return info && info.module;
  }

  function genMethod(moduleID, methodID, type) {
    var fn = null;

    if (type === 'promise') {
      fn = function promiseMethodWrapper() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var enqueueingFrameError = new Error();
        return new Promise(function (resolve, reject) {
          _$$_REQUIRE(_dependencyMap[2], "./BatchedBridge").enqueueNativeCall(moduleID, methodID, args, function (data) {
            return resolve(data);
          }, function (errorData) {
            return reject(updateErrorWithErrorData(errorData, enqueueingFrameError));
          });
        });
      };
    } else {
      fn = function nonPromiseMethodWrapper() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        var lastArg = args.length > 0 ? args[args.length - 1] : null;
        var secondLastArg = args.length > 1 ? args[args.length - 2] : null;
        var hasSuccessCallback = typeof lastArg === 'function';
        var hasErrorCallback = typeof secondLastArg === 'function';
        hasErrorCallback && _$$_REQUIRE(_dependencyMap[1], "invariant")(hasSuccessCallback, 'Cannot have a non-function arg after a function arg.');
        var onSuccess = hasSuccessCallback ? lastArg : null;
        var onFail = hasErrorCallback ? secondLastArg : null;
        var callbackCount = hasSuccessCallback + hasErrorCallback;
        args = args.slice(0, args.length - callbackCount);

        if (type === 'sync') {
          return _$$_REQUIRE(_dependencyMap[2], "./BatchedBridge").callNativeSyncHook(moduleID, methodID, args, onFail, onSuccess);
        } else {
          _$$_REQUIRE(_dependencyMap[2], "./BatchedBridge").enqueueNativeCall(moduleID, methodID, args, onFail, onSuccess);
        }
      };
    }

    fn.type = type;
    return fn;
  }

  function arrayContains(array, value) {
    return array.indexOf(value) !== -1;
  }

  function updateErrorWithErrorData(errorData, error) {
    return Object.assign(error, errorData || {});
  }

  var NativeModules = {};

  if (global.nativeModuleProxy) {
    NativeModules = global.nativeModuleProxy;
  } else if (!global.nativeExtensions) {
    var bridgeConfig = global.__fbBatchedBridgeConfig;

    _$$_REQUIRE(_dependencyMap[1], "invariant")(bridgeConfig, '__fbBatchedBridgeConfig is not set, cannot invoke native modules');

    var defineLazyObjectProperty = _$$_REQUIRE(_dependencyMap[3], "../Utilities/defineLazyObjectProperty");

    (bridgeConfig.remoteModuleConfig || []).forEach(function (config, moduleID) {
      var info = genModule(config, moduleID);

      if (!info) {
        return;
      }

      if (info.module) {
        NativeModules[info.name] = info.module;
      } else {
        defineLazyObjectProperty(NativeModules, info.name, {
          get: function get() {
            return loadModule(info.name, moduleID);
          }
        });
      }
    });
  }

  module.exports = NativeModules;
},7,[8,6,14,29],"node_modules/react-native/Libraries/BatchedBridge/NativeModules.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _slicedToArray(arr, i) {
    return _$$_REQUIRE(_dependencyMap[0], "./arrayWithHoles.js")(arr) || _$$_REQUIRE(_dependencyMap[1], "./iterableToArrayLimit.js")(arr, i) || _$$_REQUIRE(_dependencyMap[2], "./unsupportedIterableToArray.js")(arr, i) || _$$_REQUIRE(_dependencyMap[3], "./nonIterableRest.js")();
  }

  module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},8,[9,10,11,13],"node_modules/@babel/runtime/helpers/slicedToArray.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
},9,[],"node_modules/@babel/runtime/helpers/arrayWithHoles.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
},10,[],"node_modules/@babel/runtime/helpers/iterableToArrayLimit.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _$$_REQUIRE(_dependencyMap[0], "./arrayLikeToArray.js")(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _$$_REQUIRE(_dependencyMap[0], "./arrayLikeToArray.js")(o, minLen);
  }

  module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},11,[12],"node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},12,[],"node_modules/@babel/runtime/helpers/arrayLikeToArray.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
},13,[],"node_modules/@babel/runtime/helpers/nonIterableRest.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = new (_$$_REQUIRE(_dependencyMap[0], "./MessageQueue"))();
  Object.defineProperty(global, '__fbBatchedBridge', {
    configurable: true,
    value: BatchedBridge
  });
  module.exports = BatchedBridge;
},14,[15],"node_modules/react-native/Libraries/BatchedBridge/BatchedBridge.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var TO_JS = 0;
  var TO_NATIVE = 1;
  var MODULE_IDS = 0;
  var METHOD_IDS = 1;
  var PARAMS = 2;
  var MIN_TIME_BETWEEN_FLUSHES_MS = 5;
  var TRACE_TAG_REACT_APPS = 1 << 17;
  var DEBUG_INFO_LIMIT = 32;

  var MessageQueue = function () {
    function MessageQueue() {
      _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/classCallCheck")(this, MessageQueue);

      this._lazyCallableModules = {};
      this._queue = [[], [], [], 0];
      this._successCallbacks = new Map();
      this._failureCallbacks = new Map();
      this._callID = 0;
      this._lastFlush = 0;
      this._eventLoopStartTime = Date.now();
      this._immediatesCallback = null;

      if (__DEV__) {
        this._debugInfo = {};
        this._remoteModuleTable = {};
        this._remoteMethodTable = {};
      }

      this.callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(this);
      this.flushedQueue = this.flushedQueue.bind(this);
      this.invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(this);
    }

    _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/createClass")(MessageQueue, [{
      key: "callFunctionReturnFlushedQueue",
      value: function callFunctionReturnFlushedQueue(module, method, args) {
        var _this = this;

        this.__guard(function () {
          _this.__callFunction(module, method, args);
        });

        return this.flushedQueue();
      }
    }, {
      key: "callFunctionReturnResultAndFlushedQueue",
      value: function callFunctionReturnResultAndFlushedQueue(module, method, args) {}
    }, {
      key: "invokeCallbackAndReturnFlushedQueue",
      value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {
        var _this2 = this;

        this.__guard(function () {
          _this2.__invokeCallback(cbID, args);
        });

        return this.flushedQueue();
      }
    }, {
      key: "flushedQueue",
      value: function flushedQueue() {
        var _this3 = this;

        this.__guard(function () {
          _this3.__callImmediates();
        });

        var queue = this._queue;
        this._queue = [[], [], [], this._callID];
        return queue[0].length ? queue : null;
      }
    }, {
      key: "getEventLoopRunningTime",
      value: function getEventLoopRunningTime() {
        return Date.now() - this._eventLoopStartTime;
      }
    }, {
      key: "registerCallableModule",
      value: function registerCallableModule(name, module) {
        this._lazyCallableModules[name] = function () {
          return module;
        };
      }
    }, {
      key: "registerLazyCallableModule",
      value: function registerLazyCallableModule(name, factory) {
        var module;
        var getValue = factory;

        this._lazyCallableModules[name] = function () {
          if (getValue) {
            module = getValue();
            getValue = null;
          }

          return module;
        };
      }
    }, {
      key: "getCallableModule",
      value: function getCallableModule(name) {
        var getValue = this._lazyCallableModules[name];
        return getValue ? getValue() : null;
      }
    }, {
      key: "callNativeSyncHook",
      value: function callNativeSyncHook(moduleID, methodID, params, onFail, onSucc) {
        if (__DEV__) {
          _$$_REQUIRE(_dependencyMap[2], "invariant")(global.nativeCallSyncHook, 'Calling synchronous methods on native ' + 'modules is not supported in Chrome.\n\n Consider providing alternative ' + 'methods to expose this method in debug mode, e.g. by exposing constants ' + 'ahead-of-time.');
        }

        this.processCallbacks(moduleID, methodID, params, onFail, onSucc);
        return global.nativeCallSyncHook(moduleID, methodID, params);
      }
    }, {
      key: "processCallbacks",
      value: function processCallbacks(moduleID, methodID, params, onFail, onSucc) {
        var _this4 = this;

        if (onFail || onSucc) {
          if (__DEV__) {
            this._debugInfo[this._callID] = [moduleID, methodID];

            if (this._callID > DEBUG_INFO_LIMIT) {
              delete this._debugInfo[this._callID - DEBUG_INFO_LIMIT];
            }

            if (this._successCallbacks.size > 500) {
              var info = {};

              this._successCallbacks.forEach(function (_, callID) {
                var debug = _this4._debugInfo[callID];
                var module = debug && _this4._remoteModuleTable[debug[0]];
                var method = debug && _this4._remoteMethodTable[debug[0]][debug[1]];
                info[callID] = {
                  module: module,
                  method: method
                };
              });

              _$$_REQUIRE(_dependencyMap[3], "../Utilities/warnOnce")('excessive-number-of-pending-callbacks', "Please report: Excessive number of pending callbacks: " + this._successCallbacks.size + ". Some pending callbacks that might have leaked by never being called from native code: " + _$$_REQUIRE(_dependencyMap[4], "../Utilities/stringifySafe").default(info));
            }
          }

          onFail && params.push(this._callID << 1);
          onSucc && params.push(this._callID << 1 | 1);

          this._successCallbacks.set(this._callID, onSucc);

          this._failureCallbacks.set(this._callID, onFail);
        }

        if (__DEV__) {
          global.nativeTraceBeginAsyncFlow && global.nativeTraceBeginAsyncFlow(TRACE_TAG_REACT_APPS, 'native', this._callID);
        }

        this._callID++;
      }
    }, {
      key: "enqueueNativeCall",
      value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {
        this.processCallbacks(moduleID, methodID, params, onFail, onSucc);

        this._queue[MODULE_IDS].push(moduleID);

        this._queue[METHOD_IDS].push(methodID);

        if (__DEV__) {
          var isValidArgument = function isValidArgument(val) {
            var t = typeof val;

            if (t === 'undefined' || t === 'null' || t === 'boolean' || t === 'string') {
              return true;
            }

            if (t === 'number') {
              return isFinite(val);
            }

            if (t === 'function' || t !== 'object') {
              return false;
            }

            if (Array.isArray(val)) {
              return val.every(isValidArgument);
            }

            for (var k in val) {
              if (typeof val[k] !== 'function' && !isValidArgument(val[k])) {
                return false;
              }
            }

            return true;
          };

          var replacer = function replacer(key, val) {
            var t = typeof val;

            if (t === 'function') {
              return '<<Function ' + val.name + '>>';
            } else if (t === 'number' && !isFinite(val)) {
              return '<<' + val.toString() + '>>';
            } else {
              return val;
            }
          };

          _$$_REQUIRE(_dependencyMap[2], "invariant")(isValidArgument(params), '%s is not usable as a native method argument', JSON.stringify(params, replacer));

          _$$_REQUIRE(_dependencyMap[5], "../Utilities/deepFreezeAndThrowOnMutationInDev")(params);
        }

        this._queue[PARAMS].push(params);

        var now = Date.now();

        if (global.nativeFlushQueueImmediate && now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS) {
          var queue = this._queue;
          this._queue = [[], [], [], this._callID];
          this._lastFlush = now;
          global.nativeFlushQueueImmediate(queue);
        }

        _$$_REQUIRE(_dependencyMap[6], "../Performance/Systrace").counterEvent('pending_js_to_native_queue', this._queue[0].length);

        if (__DEV__ && this.__spy && isFinite(moduleID)) {
          this.__spy({
            type: TO_NATIVE,
            module: this._remoteModuleTable[moduleID],
            method: this._remoteMethodTable[moduleID][methodID],
            args: params
          });
        } else if (this.__spy) {
          this.__spy({
            type: TO_NATIVE,
            module: moduleID + '',
            method: methodID,
            args: params
          });
        }
      }
    }, {
      key: "createDebugLookup",
      value: function createDebugLookup(moduleID, name, methods) {
        if (__DEV__) {
          this._remoteModuleTable[moduleID] = name;
          this._remoteMethodTable[moduleID] = methods || [];
        }
      }
    }, {
      key: "setImmediatesCallback",
      value: function setImmediatesCallback(fn) {
        this._immediatesCallback = fn;
      }
    }, {
      key: "__guard",
      value: function __guard(fn) {
        if (this.__shouldPauseOnThrow()) {
          fn();
        } else {
          try {
            fn();
          } catch (error) {
            _$$_REQUIRE(_dependencyMap[7], "../vendor/core/ErrorUtils").reportFatalError(error);
          }
        }
      }
    }, {
      key: "__shouldPauseOnThrow",
      value: function __shouldPauseOnThrow() {
        return typeof DebuggerInternal !== 'undefined' && DebuggerInternal.shouldPauseOnThrow === true;
      }
    }, {
      key: "__callImmediates",
      value: function __callImmediates() {
        _$$_REQUIRE(_dependencyMap[6], "../Performance/Systrace").beginEvent('JSTimers.callImmediates()');

        if (this._immediatesCallback != null) {
          this._immediatesCallback();
        }

        _$$_REQUIRE(_dependencyMap[6], "../Performance/Systrace").endEvent();
      }
    }, {
      key: "__callFunction",
      value: function __callFunction(module, method, args) {
        this._lastFlush = Date.now();
        this._eventLoopStartTime = this._lastFlush;

        if (__DEV__ || this.__spy) {
          _$$_REQUIRE(_dependencyMap[6], "../Performance/Systrace").beginEvent(module + "." + method + "(" + _$$_REQUIRE(_dependencyMap[4], "../Utilities/stringifySafe").default(args) + ")");
        } else {
          _$$_REQUIRE(_dependencyMap[6], "../Performance/Systrace").beginEvent(module + "." + method + "(...)");
        }

        if (this.__spy) {
          this.__spy({
            type: TO_JS,
            module: module,
            method: method,
            args: args
          });
        }

        var moduleMethods = this.getCallableModule(module);

        _$$_REQUIRE(_dependencyMap[2], "invariant")(!!moduleMethods, 'Module %s is not a registered callable module (calling %s)', module, method);

        _$$_REQUIRE(_dependencyMap[2], "invariant")(!!moduleMethods[method], 'Method %s does not exist on module %s', method, module);

        moduleMethods[method].apply(moduleMethods, args);

        _$$_REQUIRE(_dependencyMap[6], "../Performance/Systrace").endEvent();
      }
    }, {
      key: "__invokeCallback",
      value: function __invokeCallback(cbID, args) {
        this._lastFlush = Date.now();
        this._eventLoopStartTime = this._lastFlush;
        var callID = cbID >>> 1;
        var isSuccess = cbID & 1;
        var callback = isSuccess ? this._successCallbacks.get(callID) : this._failureCallbacks.get(callID);

        if (__DEV__) {
          var debug = this._debugInfo[callID];

          var _module = debug && this._remoteModuleTable[debug[0]];

          var method = debug && this._remoteMethodTable[debug[0]][debug[1]];

          _$$_REQUIRE(_dependencyMap[2], "invariant")(callback, "No callback found with cbID " + cbID + " and callID " + callID + " for " + (method ? " " + _module + "." + method + " - most likely the callback was already invoked" : "module " + (_module || '<unknown>')) + (". Args: '" + _$$_REQUIRE(_dependencyMap[4], "../Utilities/stringifySafe").default(args) + "'"));

          var profileName = debug ? '<callback for ' + _module + '.' + method + '>' : cbID;

          if (callback && this.__spy) {
            this.__spy({
              type: TO_JS,
              module: null,
              method: profileName,
              args: args
            });
          }

          _$$_REQUIRE(_dependencyMap[6], "../Performance/Systrace").beginEvent("MessageQueue.invokeCallback(" + profileName + ", " + _$$_REQUIRE(_dependencyMap[4], "../Utilities/stringifySafe").default(args) + ")");
        }

        if (!callback) {
          return;
        }

        this._successCallbacks.delete(callID);

        this._failureCallbacks.delete(callID);

        callback.apply(void 0, _$$_REQUIRE(_dependencyMap[8], "@babel/runtime/helpers/toConsumableArray")(args));

        if (__DEV__) {
          _$$_REQUIRE(_dependencyMap[6], "../Performance/Systrace").endEvent();
        }
      }
    }], [{
      key: "spy",
      value: function spy(spyOrToggle) {
        if (spyOrToggle === true) {
          MessageQueue.prototype.__spy = function (info) {
            console.log((info.type === TO_JS ? 'N->JS' : 'JS->N') + " : " + ("" + (info.module ? info.module + '.' : '') + info.method) + ("(" + JSON.stringify(info.args) + ")"));
          };
        } else if (spyOrToggle === false) {
          MessageQueue.prototype.__spy = null;
        } else {
          MessageQueue.prototype.__spy = spyOrToggle;
        }
      }
    }]);

    return MessageQueue;
  }();

  module.exports = MessageQueue;
},15,[16,17,6,18,21,22,23,24,25],"node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
},16,[],"node_modules/@babel/runtime/helpers/classCallCheck.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
},17,[],"node_modules/@babel/runtime/helpers/createClass.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var warnedKeys = {};

  function warnOnce(key, message) {
    if (warnedKeys[key]) {
      return;
    }

    _$$_REQUIRE(_dependencyMap[0], "fbjs/lib/warning")(false, message);

    warnedKeys[key] = true;
  }

  module.exports = warnOnce;
},18,[19],"node_modules/react-native/Libraries/Utilities/warnOnce.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function printWarning(format) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });

    if (typeof console !== 'undefined') {
      console.error(message);
    }

    try {
      throw new Error(message);
    } catch (x) {}
  }

  var warning = process.env.NODE_ENV !== "production" ? function (condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(void 0, [format].concat(args));
    }
  } : _$$_REQUIRE(_dependencyMap[0], "./emptyFunction");
  module.exports = warning;
},19,[20],"node_modules/fbjs/lib/warning.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function makeEmptyFunction(arg) {
    return function () {
      return arg;
    };
  }

  var emptyFunction = function emptyFunction() {};

  emptyFunction.thatReturns = makeEmptyFunction;
  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction.thatReturnsNull = makeEmptyFunction(null);

  emptyFunction.thatReturnsThis = function () {
    return this;
  };

  emptyFunction.thatReturnsArgument = function (arg) {
    return arg;
  };

  module.exports = emptyFunction;
},20,[],"node_modules/fbjs/lib/emptyFunction.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createStringifySafeWithLimits = createStringifySafeWithLimits;
  exports.default = void 0;

  var _invariant = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "invariant"));

  function createStringifySafeWithLimits(limits) {
    var _limits$maxDepth = limits.maxDepth,
        maxDepth = _limits$maxDepth === void 0 ? Number.POSITIVE_INFINITY : _limits$maxDepth,
        _limits$maxStringLimi = limits.maxStringLimit,
        maxStringLimit = _limits$maxStringLimi === void 0 ? Number.POSITIVE_INFINITY : _limits$maxStringLimi,
        _limits$maxArrayLimit = limits.maxArrayLimit,
        maxArrayLimit = _limits$maxArrayLimit === void 0 ? Number.POSITIVE_INFINITY : _limits$maxArrayLimit,
        _limits$maxObjectKeys = limits.maxObjectKeysLimit,
        maxObjectKeysLimit = _limits$maxObjectKeys === void 0 ? Number.POSITIVE_INFINITY : _limits$maxObjectKeys;
    var stack = [];

    function replacer(key, value) {
      while (stack.length && this !== stack[0]) {
        stack.shift();
      }

      if (typeof value === 'string') {
        var truncatedString = '...(truncated)...';

        if (value.length > maxStringLimit + truncatedString.length) {
          return value.substring(0, maxStringLimit) + truncatedString;
        }

        return value;
      }

      if (typeof value !== 'object' || value === null) {
        return value;
      }

      var retval = value;

      if (Array.isArray(value)) {
        if (stack.length >= maxDepth) {
          retval = "[ ... array with " + value.length + " values ... ]";
        } else if (value.length > maxArrayLimit) {
          retval = value.slice(0, maxArrayLimit).concat(["... extra " + (value.length - maxArrayLimit) + " values truncated ..."]);
        }
      } else {
        (0, _invariant.default)(typeof value === 'object', 'This was already found earlier');
        var keys = Object.keys(value);

        if (stack.length >= maxDepth) {
          retval = "{ ... object with " + keys.length + " keys ... }";
        } else if (keys.length > maxObjectKeysLimit) {
          retval = {};

          for (var k of keys.slice(0, maxObjectKeysLimit)) {
            retval[k] = value[k];
          }

          var truncatedKey = '...(truncated keys)...';
          retval[truncatedKey] = keys.length - maxObjectKeysLimit;
        }
      }

      stack.unshift(retval);
      return retval;
    }

    return function stringifySafe(arg) {
      if (arg === undefined) {
        return 'undefined';
      } else if (arg === null) {
        return 'null';
      } else if (typeof arg === 'function') {
        try {
          return arg.toString();
        } catch (e) {
          return '[function unknown]';
        }
      } else if (arg instanceof Error) {
        return arg.name + ': ' + arg.message;
      } else {
        try {
          var ret = JSON.stringify(arg, replacer);

          if (ret === undefined) {
            return '["' + typeof arg + '" failed to stringify]';
          }

          return ret;
        } catch (e) {
          if (typeof arg.toString === 'function') {
            try {
              return arg.toString();
            } catch (E) {}
          }
        }
      }

      return '["' + typeof arg + '" failed to stringify]';
    };
  }

  var stringifySafe = createStringifySafeWithLimits({
    maxDepth: 10,
    maxStringLimit: 100,
    maxArrayLimit: 50,
    maxObjectKeysLimit: 50
  });
  var _default = stringifySafe;
  exports.default = _default;
},21,[3,6],"node_modules/react-native/Libraries/Utilities/stringifySafe.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function deepFreezeAndThrowOnMutationInDev(object) {
    if (__DEV__) {
      if (typeof object !== 'object' || object === null || Object.isFrozen(object) || Object.isSealed(object)) {
        return object;
      }

      var keys = Object.keys(object);
      var _hasOwnProperty = Object.prototype.hasOwnProperty;

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];

        if (_hasOwnProperty.call(object, key)) {
          Object.defineProperty(object, key, {
            get: identity.bind(null, object[key])
          });
          Object.defineProperty(object, key, {
            set: throwOnImmutableMutation.bind(null, key)
          });
        }
      }

      Object.freeze(object);
      Object.seal(object);

      for (var _i = 0; _i < keys.length; _i++) {
        var _key = keys[_i];

        if (_hasOwnProperty.call(object, _key)) {
          deepFreezeAndThrowOnMutationInDev(object[_key]);
        }
      }
    }

    return object;
  }

  function throwOnImmutableMutation(key, value) {
    throw Error('You attempted to set the key `' + key + '` with the value `' + JSON.stringify(value) + '` on an object that is meant to be immutable ' + 'and has been frozen.');
  }

  function identity(value) {
    return value;
  }

  module.exports = deepFreezeAndThrowOnMutationInDev;
},22,[],"node_modules/react-native/Libraries/Utilities/deepFreezeAndThrowOnMutationInDev.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var TRACE_TAG_REACT_APPS = 1 << 17;
  var TRACE_TAG_JS_VM_CALLS = 1 << 27;
  var _enabled = false;
  var _asyncCookie = 0;
  var _markStack = [];

  var _markStackIndex = -1;

  var _canInstallReactHook = false;
  var REACT_MARKER = "\u269B";
  var userTimingPolyfill = __DEV__ ? {
    mark: function mark(markName) {
      if (_enabled) {
        _markStackIndex++;
        _markStack[_markStackIndex] = markName;
        var systraceLabel = markName;

        if (markName[0] === REACT_MARKER) {
          var indexOfId = markName.lastIndexOf(' (#');
          var cutoffIndex = indexOfId !== -1 ? indexOfId : markName.length;
          systraceLabel = markName.slice(2, cutoffIndex);
        }

        Systrace.beginEvent(systraceLabel);
      }
    },
    measure: function measure(measureName, startMark, endMark) {
      if (_enabled) {
        _$$_REQUIRE(_dependencyMap[0], "invariant")(typeof measureName === 'string' && typeof startMark === 'string' && typeof endMark === 'undefined', 'Only performance.measure(string, string) overload is supported.');

        var topMark = _markStack[_markStackIndex];

        _$$_REQUIRE(_dependencyMap[0], "invariant")(startMark === topMark, 'There was a mismatching performance.measure() call. ' + 'Expected "%s" but got "%s."', topMark, startMark);

        _markStackIndex--;
        Systrace.endEvent();
      }
    },
    clearMarks: function clearMarks(markName) {
      if (_enabled) {
        if (_markStackIndex === -1) {
          return;
        }

        if (markName === _markStack[_markStackIndex]) {
          if (userTimingPolyfill != null) {
            userTimingPolyfill.measure(markName, markName);
          }
        }
      }
    },
    clearMeasures: function clearMeasures() {}
  } : null;

  function installPerformanceHooks(polyfill) {
    if (polyfill) {
      if (global.performance === undefined) {
        global.performance = {};
      }

      Object.keys(polyfill).forEach(function (methodName) {
        if (typeof global.performance[methodName] !== 'function') {
          global.performance[methodName] = polyfill[methodName];
        }
      });
    }
  }

  var Systrace = {
    installReactHook: function installReactHook() {
      if (_enabled) {
        if (__DEV__) {
          installPerformanceHooks(userTimingPolyfill);
        }
      }

      _canInstallReactHook = true;
    },
    setEnabled: function setEnabled(enabled) {
      if (_enabled !== enabled) {
        if (__DEV__) {
          if (enabled) {
            global.nativeTraceBeginLegacy && global.nativeTraceBeginLegacy(TRACE_TAG_JS_VM_CALLS);
          } else {
            global.nativeTraceEndLegacy && global.nativeTraceEndLegacy(TRACE_TAG_JS_VM_CALLS);
          }

          if (_canInstallReactHook) {
            if (enabled) {
              installPerformanceHooks(userTimingPolyfill);
            }
          }
        }

        _enabled = enabled;
      }
    },
    isEnabled: function isEnabled() {
      return _enabled;
    },
    beginEvent: function beginEvent(profileName, args) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, profileName, args);
      }
    },
    endEvent: function endEvent() {
      if (_enabled) {
        global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);
      }
    },
    beginAsyncEvent: function beginAsyncEvent(profileName) {
      var cookie = _asyncCookie;

      if (_enabled) {
        _asyncCookie++;
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie);
      }

      return cookie;
    },
    endAsyncEvent: function endAsyncEvent(profileName, cookie) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie);
      }
    },
    counterEvent: function counterEvent(profileName, value) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceCounter && global.nativeTraceCounter(TRACE_TAG_REACT_APPS, profileName, value);
      }
    }
  };

  if (__DEV__) {
    _$$_REQUIRE.Systrace = Systrace;
  }

  module.exports = Systrace;
},23,[6],"node_modules/react-native/Libraries/Performance/Systrace.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = global.ErrorUtils;
},24,[],"node_modules/react-native/Libraries/vendor/core/ErrorUtils.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _toConsumableArray(arr) {
    return _$$_REQUIRE(_dependencyMap[0], "./arrayWithoutHoles.js")(arr) || _$$_REQUIRE(_dependencyMap[1], "./iterableToArray.js")(arr) || _$$_REQUIRE(_dependencyMap[2], "./unsupportedIterableToArray.js")(arr) || _$$_REQUIRE(_dependencyMap[3], "./nonIterableSpread.js")();
  }

  module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},25,[26,27,11,28],"node_modules/@babel/runtime/helpers/toConsumableArray.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _$$_REQUIRE(_dependencyMap[0], "./arrayLikeToArray.js")(arr);
  }

  module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
},26,[12],"node_modules/@babel/runtime/helpers/arrayWithoutHoles.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},27,[],"node_modules/@babel/runtime/helpers/iterableToArray.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;
},28,[],"node_modules/@babel/runtime/helpers/nonIterableSpread.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function defineLazyObjectProperty(object, name, descriptor) {
    var get = descriptor.get;
    var enumerable = descriptor.enumerable !== false;
    var writable = descriptor.writable !== false;
    var value;
    var valueSet = false;

    function getValue() {
      if (!valueSet) {
        valueSet = true;
        setValue(get());
      }

      return value;
    }

    function setValue(newValue) {
      value = newValue;
      valueSet = true;
      Object.defineProperty(object, name, {
        value: newValue,
        configurable: true,
        enumerable: enumerable,
        writable: writable
      });
    }

    Object.defineProperty(object, name, {
      get: getValue,
      set: setValue,
      configurable: true,
      enumerable: enumerable
    });
  }

  module.exports = defineLazyObjectProperty;
},29,[],"node_modules/react-native/Libraries/Utilities/defineLazyObjectProperty.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function checkNativeEventModule(eventType) {
    if (eventType) {
      if (eventType.lastIndexOf('statusBar', 0) === 0) {
        throw new Error('`' + eventType + '` event should be registered via the StatusBarIOS module');
      }

      if (eventType.lastIndexOf('keyboard', 0) === 0) {
        throw new Error('`' + eventType + '` event should be registered via the Keyboard module');
      }

      if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {
        throw new Error('`' + eventType + '` event should be registered via the AppState module');
      }
    }
  }

  var RCTDeviceEventEmitter = function (_EventEmitter) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(RCTDeviceEventEmitter, _EventEmitter);

    var _super = _createSuper(RCTDeviceEventEmitter);

    function RCTDeviceEventEmitter() {
      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, RCTDeviceEventEmitter);

      var sharedSubscriber = new (_$$_REQUIRE(_dependencyMap[4], "../vendor/emitter/EventSubscriptionVendor"))();
      _this = _super.call(this, sharedSubscriber);
      _this.sharedSubscriber = sharedSubscriber;
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(RCTDeviceEventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        if (__DEV__) {
          checkNativeEventModule(eventType);
        }

        return _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(RCTDeviceEventEmitter.prototype), "addListener", this).call(this, eventType, listener, context);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        if (__DEV__) {
          checkNativeEventModule(eventType);
        }

        _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(RCTDeviceEventEmitter.prototype), "removeAllListeners", this).call(this, eventType);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        if (subscription.emitter !== this) {
          subscription.emitter.removeSubscription(subscription);
        } else {
          _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(RCTDeviceEventEmitter.prototype), "removeSubscription", this).call(this, subscription);
        }
      }
    }]);

    return RCTDeviceEventEmitter;
  }(_$$_REQUIRE(_dependencyMap[7], "../vendor/emitter/EventEmitter"));

  module.exports = new RCTDeviceEventEmitter();
},30,[31,32,35,16,37,17,38,40],"node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _getPrototypeOf(o) {
    module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _getPrototypeOf(o);
  }

  module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
},31,[],"node_modules/@babel/runtime/helpers/getPrototypeOf.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _possibleConstructorReturn(self, call) {
    if (call && (_$$_REQUIRE(_dependencyMap[0], "./typeof.js")["default"](call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }

    return _$$_REQUIRE(_dependencyMap[1], "./assertThisInitialized.js")(self);
  }

  module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;
},32,[33,34],"node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _typeof(obj) {
    "@babel/helpers - typeof";

    return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
  }

  module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
},33,[],"node_modules/@babel/runtime/helpers/typeof.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
},34,[],"node_modules/@babel/runtime/helpers/assertThisInitialized.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _$$_REQUIRE(_dependencyMap[0], "./setPrototypeOf.js")(subClass, superClass);
  }

  module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;
},35,[36],"node_modules/@babel/runtime/helpers/inherits.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _setPrototypeOf(o, p) {
    module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _setPrototypeOf(o, p);
  }

  module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
},36,[],"node_modules/@babel/runtime/helpers/setPrototypeOf.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var EventSubscriptionVendor = function () {
    function EventSubscriptionVendor() {
      _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/classCallCheck")(this, EventSubscriptionVendor);

      this._subscriptionsForType = {};
      this._currentSubscription = null;
    }

    _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/createClass")(EventSubscriptionVendor, [{
      key: "addSubscription",
      value: function addSubscription(eventType, subscription) {
        _$$_REQUIRE(_dependencyMap[2], "invariant")(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');

        if (!this._subscriptionsForType[eventType]) {
          this._subscriptionsForType[eventType] = [];
        }

        var key = this._subscriptionsForType[eventType].length;

        this._subscriptionsForType[eventType].push(subscription);

        subscription.eventType = eventType;
        subscription.key = key;
        return subscription;
      }
    }, {
      key: "removeAllSubscriptions",
      value: function removeAllSubscriptions(eventType) {
        if (eventType === undefined) {
          this._subscriptionsForType = {};
        } else {
          delete this._subscriptionsForType[eventType];
        }
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        var eventType = subscription.eventType;
        var key = subscription.key;
        var subscriptionsForType = this._subscriptionsForType[eventType];

        if (subscriptionsForType) {
          delete subscriptionsForType[key];
        }
      }
    }, {
      key: "getSubscriptionsForType",
      value: function getSubscriptionsForType(eventType) {
        return this._subscriptionsForType[eventType];
      }
    }]);

    return EventSubscriptionVendor;
  }();

  module.exports = EventSubscriptionVendor;
},37,[16,17,6],"node_modules/react-native/Libraries/vendor/emitter/EventSubscriptionVendor.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _get() {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      module.exports = _get = Reflect.get.bind(), module.exports.__esModule = true, module.exports["default"] = module.exports;
    } else {
      module.exports = _get = function _get(target, property, receiver) {
        var base = _$$_REQUIRE(_dependencyMap[0], "./superPropBase.js")(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(arguments.length < 3 ? target : receiver);
        }

        return desc.value;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }

    return _get.apply(this, arguments);
  }

  module.exports = _get, module.exports.__esModule = true, module.exports["default"] = module.exports;
},38,[39],"node_modules/@babel/runtime/helpers/get.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _$$_REQUIRE(_dependencyMap[0], "./getPrototypeOf.js")(object);
      if (object === null) break;
    }

    return object;
  }

  module.exports = _superPropBase, module.exports.__esModule = true, module.exports["default"] = module.exports;
},39,[31],"node_modules/@babel/runtime/helpers/superPropBase.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var sparseFilterPredicate = function sparseFilterPredicate() {
    return true;
  };

  var EventEmitter = function () {
    function EventEmitter(subscriber) {
      _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/classCallCheck")(this, EventEmitter);

      this._subscriber = subscriber || new (_$$_REQUIRE(_dependencyMap[1], "./EventSubscriptionVendor"))();
    }

    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass")(EventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return this._subscriber.addSubscription(eventType, new (_$$_REQUIRE(_dependencyMap[3], "./EmitterSubscription"))(this, this._subscriber, listener, context));
      }
    }, {
      key: "once",
      value: function once(eventType, listener, context) {
        var _this = this;

        return this.addListener(eventType, function () {
          _this.removeCurrentListener();

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          listener.apply(context, args);
        });
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this._subscriber.removeAllSubscriptions(eventType);
      }
    }, {
      key: "removeCurrentListener",
      value: function removeCurrentListener() {
        _$$_REQUIRE(_dependencyMap[4], "invariant")(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');

        this.removeSubscription(this._currentSubscription);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        _$$_REQUIRE(_dependencyMap[4], "invariant")(subscription.emitter === this, 'Subscription does not belong to this emitter.');

        this._subscriber.removeSubscription(subscription);
      }
    }, {
      key: "listeners",
      value: function listeners(eventType) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        return subscriptions ? subscriptions.filter(sparseFilterPredicate).map(function (subscription) {
          return subscription.listener;
        }) : [];
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        if (subscriptions) {
          for (var i = 0, l = subscriptions.length; i < l; i++) {
            var subscription = subscriptions[i];

            if (subscription && subscription.listener) {
              this._currentSubscription = subscription;
              subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));
            }
          }

          this._currentSubscription = null;
        }
      }
    }, {
      key: "removeListener",
      value: function removeListener(eventType, listener) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        if (subscriptions) {
          for (var i = 0, l = subscriptions.length; i < l; i++) {
            var subscription = subscriptions[i];

            if (subscription && subscription.listener === listener) {
              subscription.remove();
            }
          }
        }
      }
    }]);

    return EventEmitter;
  }();

  module.exports = EventEmitter;
},40,[16,37,17,41,6],"node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var EmitterSubscription = function (_EventSubscription) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(EmitterSubscription, _EventSubscription);

    var _super = _createSuper(EmitterSubscription);

    function EmitterSubscription(emitter, subscriber, listener, context) {
      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, EmitterSubscription);

      _this = _super.call(this, subscriber);
      _this.emitter = emitter;
      _this.listener = listener;
      _this.context = context;
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/createClass")(EmitterSubscription, [{
      key: "remove",
      value: function remove() {
        this.emitter.removeSubscription(this);
      }
    }]);

    return EmitterSubscription;
  }(_$$_REQUIRE(_dependencyMap[5], "./EventSubscription"));

  module.exports = EmitterSubscription;
},41,[31,32,35,16,17,42],"node_modules/react-native/Libraries/vendor/emitter/EmitterSubscription.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var EventSubscription = function () {
    function EventSubscription(subscriber) {
      _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/classCallCheck")(this, EventSubscription);

      this.subscriber = subscriber;
    }

    _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/createClass")(EventSubscription, [{
      key: "remove",
      value: function remove() {
        this.subscriber.removeSubscription(this);
      }
    }]);

    return EventSubscription;
  }();

  module.exports = EventSubscription;
},42,[16,17],"node_modules/react-native/Libraries/vendor/emitter/EventSubscription.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var UIManager = global.RN$Bridgeless === true ? _$$_REQUIRE(_dependencyMap[0], "./DummyUIManager") : _$$_REQUIRE(_dependencyMap[1], "./PaperUIManager");
  module.exports = UIManager;
},43,[44,45],"node_modules/react-native/Libraries/ReactNative/UIManager.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    getViewManagerConfig: function getViewManagerConfig(viewManagerName) {
      console.warn('Attempting to get config for view manager: ' + viewManagerName);

      if (viewManagerName === 'RCTVirtualText') {
        return {};
      }

      return null;
    },
    getConstants: function getConstants() {
      return {};
    },
    getConstantsForViewManager: function getConstantsForViewManager(viewManagerName) {},
    getDefaultEventTypes: function getDefaultEventTypes() {
      return [];
    },
    playTouchSound: function playTouchSound() {},
    lazilyLoadView: function lazilyLoadView(name) {},
    createView: function createView(reactTag, viewName, rootTag, props) {},
    updateView: function updateView(reactTag, viewName, props) {},
    focus: function focus(reactTag) {},
    blur: function blur(reactTag) {},
    findSubviewIn: function findSubviewIn(reactTag, point, callback) {},
    dispatchViewManagerCommand: function dispatchViewManagerCommand(reactTag, commandID, commandArgs) {},
    measure: function measure(reactTag, callback) {},
    measureInWindow: function measureInWindow(reactTag, callback) {},
    viewIsDescendantOf: function viewIsDescendantOf(reactTag, ancestorReactTag, callback) {},
    measureLayout: function measureLayout(reactTag, ancestorReactTag, errorCallback, callback) {},
    measureLayoutRelativeToParent: function measureLayoutRelativeToParent(reactTag, errorCallback, callback) {},
    setJSResponder: function setJSResponder(reactTag, blockNativeResponder) {},
    clearJSResponder: function clearJSResponder() {},
    configureNextLayoutAnimation: function configureNextLayoutAnimation(config, callback, errorCallback) {},
    removeSubviewsFromContainerWithID: function removeSubviewsFromContainerWithID(containerID) {},
    replaceExistingNonRootView: function replaceExistingNonRootView(reactTag, newReactTag) {},
    setChildren: function setChildren(containerTag, reactTags) {},
    manageChildren: function manageChildren(containerTag, moveFromIndices, moveToIndices, addChildReactTags, addAtIndices, removeAtIndices) {},
    setLayoutAnimationEnabledExperimental: function setLayoutAnimationEnabledExperimental(enabled) {},
    sendAccessibilityEvent: function sendAccessibilityEvent(reactTag, eventType) {},
    showPopupMenu: function showPopupMenu(reactTag, items, error, success) {},
    dismissPopupMenu: function dismissPopupMenu() {}
  };
},44,[],"node_modules/react-native/Libraries/ReactNative/DummyUIManager.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeUIManager = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./NativeUIManager"));

  var viewManagerConfigs = {};
  var triedLoadingConfig = new Set();
  var NativeUIManagerConstants = {};
  var isNativeUIManagerConstantsSet = false;

  function _getConstants() {
    if (!isNativeUIManagerConstantsSet) {
      NativeUIManagerConstants = _NativeUIManager.default.getConstants();
      isNativeUIManagerConstantsSet = true;
    }

    return NativeUIManagerConstants;
  }

  var UIManagerJS = Object.assign({}, _NativeUIManager.default, {
    getConstants: function getConstants() {
      return _getConstants();
    },
    getViewManagerConfig: function getViewManagerConfig(viewManagerName) {
      if (viewManagerConfigs[viewManagerName] === undefined && _NativeUIManager.default.getConstantsForViewManager) {
        try {
          viewManagerConfigs[viewManagerName] = _NativeUIManager.default.getConstantsForViewManager(viewManagerName);
        } catch (e) {
          viewManagerConfigs[viewManagerName] = null;
        }
      }

      var config = viewManagerConfigs[viewManagerName];

      if (config) {
        return config;
      }

      if (!global.nativeCallSyncHook) {
        return config;
      }

      if (_NativeUIManager.default.lazilyLoadView && !triedLoadingConfig.has(viewManagerName)) {
        var result = _NativeUIManager.default.lazilyLoadView(viewManagerName);

        triedLoadingConfig.add(viewManagerName);

        if (result.viewConfig) {
          _getConstants()[viewManagerName] = result.viewConfig;
          lazifyViewManagerConfig(viewManagerName);
        }
      }

      return viewManagerConfigs[viewManagerName];
    }
  });
  _NativeUIManager.default.getViewManagerConfig = UIManagerJS.getViewManagerConfig;

  function lazifyViewManagerConfig(viewName) {
    var viewConfig = _getConstants()[viewName];

    viewManagerConfigs[viewName] = viewConfig;

    if (viewConfig.Manager) {
      _$$_REQUIRE(_dependencyMap[2], "../Utilities/defineLazyObjectProperty")(viewConfig, 'Constants', {
        get: function get() {
          var viewManager = _$$_REQUIRE(_dependencyMap[3], "../BatchedBridge/NativeModules")[viewConfig.Manager];

          var constants = {};
          viewManager && Object.keys(viewManager).forEach(function (key) {
            var value = viewManager[key];

            if (typeof value !== 'function') {
              constants[key] = value;
            }
          });
          return constants;
        }
      });

      _$$_REQUIRE(_dependencyMap[2], "../Utilities/defineLazyObjectProperty")(viewConfig, 'Commands', {
        get: function get() {
          var viewManager = _$$_REQUIRE(_dependencyMap[3], "../BatchedBridge/NativeModules")[viewConfig.Manager];

          var commands = {};
          var index = 0;
          viewManager && Object.keys(viewManager).forEach(function (key) {
            var value = viewManager[key];

            if (typeof value === 'function') {
              commands[key] = index++;
            }
          });
          return commands;
        }
      });
    }
  }

  if ("android" === 'ios') {
    Object.keys(_getConstants()).forEach(function (viewName) {
      lazifyViewManagerConfig(viewName);
    });
  } else if (_getConstants().ViewManagerNames) {
    _NativeUIManager.default.getConstants().ViewManagerNames.forEach(function (viewManagerName) {
      _$$_REQUIRE(_dependencyMap[2], "../Utilities/defineLazyObjectProperty")(_NativeUIManager.default, viewManagerName, {
        get: function get() {
          return _NativeUIManager.default.getConstantsForViewManager(viewManagerName);
        }
      });
    });
  }

  if (!global.nativeCallSyncHook) {
    Object.keys(_getConstants()).forEach(function (viewManagerName) {
      if (!_$$_REQUIRE(_dependencyMap[4], "./UIManagerProperties").includes(viewManagerName)) {
        if (!viewManagerConfigs[viewManagerName]) {
          viewManagerConfigs[viewManagerName] = _getConstants()[viewManagerName];
        }

        _$$_REQUIRE(_dependencyMap[2], "../Utilities/defineLazyObjectProperty")(_NativeUIManager.default, viewManagerName, {
          get: function get() {
            console.warn("Accessing view manager configs directly off UIManager via UIManager['" + viewManagerName + "'] " + ("is no longer supported. Use UIManager.getViewManagerConfig('" + viewManagerName + "') instead."));
            return UIManagerJS.getViewManagerConfig(viewManagerName);
          }
        });
      }
    });
  }

  module.exports = UIManagerJS;
},45,[3,46,29,7,47],"node_modules/react-native/Libraries/ReactNative/PaperUIManager.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.getEnforcing('UIManager');

  exports.default = _default;
},46,[5],"node_modules/react-native/Libraries/ReactNative/NativeUIManager.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = ['clearJSResponder', 'configureNextLayoutAnimation', 'createView', 'dismissPopupMenu', 'dispatchViewManagerCommand', 'findSubviewIn', 'getConstantsForViewManager', 'getDefaultEventTypes', 'manageChildren', 'measure', 'measureInWindow', 'measureLayout', 'measureLayoutRelativeToParent', 'playTouchSound', 'removeRootView', 'removeSubviewsFromContainerWithID', 'replaceExistingNonRootView', 'sendAccessibilityEvent', 'setChildren', 'setJSResponder', 'setLayoutAnimationEnabledExperimental', 'showPopupMenu', 'updateView', 'viewIsDescendantOf', 'PopupMenu', 'LazyViewManagersEnabled', 'ViewManagerNames', 'StyleConstants', 'AccessibilityEventTypes', 'UIView', 'getViewManagerConfig', 'blur', 'focus', 'genericBubblingEventTypes', 'genericDirectEventTypes', 'lazilyLoadView'];
},47,[],"node_modules/react-native/Libraries/ReactNative/UIManagerProperties.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _excluded = ["onLayout", "style", "size"];

  var _this = this,
      _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js";

  var React = _$$_REQUIRE(_dependencyMap[0], "react");

  var PlatformActivityIndicator = "android" === 'android' ? _$$_REQUIRE(_dependencyMap[1], "../ProgressBarAndroid/ProgressBarAndroid") : _$$_REQUIRE(_dependencyMap[2], "./ActivityIndicatorViewNativeComponent").default;
  var GRAY = '#999999';

  var ActivityIndicator = function ActivityIndicator(props, forwardedRef) {
    var onLayout = props.onLayout,
        style = props.style,
        size = props.size,
        restProps = _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/objectWithoutProperties")(props, _excluded);

    var sizeStyle;
    var sizeProp;

    switch (size) {
      case 'small':
        sizeStyle = styles.sizeSmall;
        sizeProp = 'small';
        break;

      case 'large':
        sizeStyle = styles.sizeLarge;
        sizeProp = 'large';
        break;

      default:
        sizeStyle = {
          height: props.size,
          width: props.size
        };
        break;
    }

    var nativeProps = Object.assign({}, restProps, {
      ref: forwardedRef,
      style: sizeStyle,
      size: sizeProp
    });
    var androidProps = {
      styleAttr: 'Normal',
      indeterminate: true
    };
    return React.createElement(_$$_REQUIRE(_dependencyMap[4], "../View/View"), {
      onLayout: onLayout,
      style: _$$_REQUIRE(_dependencyMap[5], "../../StyleSheet/StyleSheet").compose(styles.container, style),
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 102,
        columnNumber: 5
      }
    }, "android" === 'android' ? React.createElement(PlatformActivityIndicator, _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/extends")({}, nativeProps, androidProps, {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 110,
        columnNumber: 9
      }
    })) : React.createElement(PlatformActivityIndicator, _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/extends")({}, nativeProps, {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 115,
        columnNumber: 9
      }
    })));
  };

  var ActivityIndicatorWithRef = React.forwardRef(ActivityIndicator);
  ActivityIndicatorWithRef.displayName = 'ActivityIndicator';
  ActivityIndicatorWithRef.defaultProps = {
    animating: true,
    color: "android" === 'ios' ? GRAY : null,
    hidesWhenStopped: true,
    size: 'small'
  };

  var styles = _$$_REQUIRE(_dependencyMap[5], "../../StyleSheet/StyleSheet").create({
    container: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    sizeSmall: {
      width: 20,
      height: 20
    },
    sizeLarge: {
      width: 36,
      height: 36
    }
  });

  module.exports = ActivityIndicatorWithRef;
},48,[49,52,235,128,236,241,53],"node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (process.env.NODE_ENV === 'production') {
    module.exports = _$$_REQUIRE(_dependencyMap[0], "./cjs/react.production.min.js");
  } else {
    module.exports = _$$_REQUIRE(_dependencyMap[1], "./cjs/react.development.js");
  }
},49,[50,51],"node_modules/react/index.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * @license React
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  var l = Symbol.for("react.element"),
      n = Symbol.for("react.portal"),
      p = Symbol.for("react.fragment"),
      q = Symbol.for("react.strict_mode"),
      r = Symbol.for("react.profiler"),
      t = Symbol.for("react.provider"),
      u = Symbol.for("react.context"),
      v = Symbol.for("react.forward_ref"),
      w = Symbol.for("react.suspense"),
      x = Symbol.for("react.memo"),
      y = Symbol.for("react.lazy"),
      z = Symbol.iterator;

  function A(a) {
    if (null === a || "object" !== typeof a) return null;
    a = z && a[z] || a["@@iterator"];
    return "function" === typeof a ? a : null;
  }

  var B = {
    isMounted: function isMounted() {
      return !1;
    },
    enqueueForceUpdate: function enqueueForceUpdate() {},
    enqueueReplaceState: function enqueueReplaceState() {},
    enqueueSetState: function enqueueSetState() {}
  },
      C = Object.assign,
      D = {};

  function E(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = D;
    this.updater = e || B;
  }

  E.prototype.isReactComponent = {};

  E.prototype.setState = function (a, b) {
    if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
    this.updater.enqueueSetState(this, a, b, "setState");
  };

  E.prototype.forceUpdate = function (a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
  };

  function F() {}

  F.prototype = E.prototype;

  function G(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = D;
    this.updater = e || B;
  }

  var H = G.prototype = new F();
  H.constructor = G;
  C(H, E.prototype);
  H.isPureReactComponent = !0;
  var I = Array.isArray,
      J = Object.prototype.hasOwnProperty,
      K = {
    current: null
  },
      L = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
  };

  function M(a, b, e) {
    var d,
        c = {},
        k = null,
        h = null;
    if (null != b) for (d in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) {
      J.call(b, d) && !L.hasOwnProperty(d) && (c[d] = b[d]);
    }
    var g = arguments.length - 2;
    if (1 === g) c.children = e;else if (1 < g) {
      for (var f = Array(g), m = 0; m < g; m++) {
        f[m] = arguments[m + 2];
      }

      c.children = f;
    }
    if (a && a.defaultProps) for (d in g = a.defaultProps, g) {
      void 0 === c[d] && (c[d] = g[d]);
    }
    return {
      $$typeof: l,
      type: a,
      key: k,
      ref: h,
      props: c,
      _owner: K.current
    };
  }

  function N(a, b) {
    return {
      $$typeof: l,
      type: a.type,
      key: b,
      ref: a.ref,
      props: a.props,
      _owner: a._owner
    };
  }

  function O(a) {
    return "object" === typeof a && null !== a && a.$$typeof === l;
  }

  function escape(a) {
    var b = {
      "=": "=0",
      ":": "=2"
    };
    return "$" + a.replace(/[=:]/g, function (a) {
      return b[a];
    });
  }

  var P = /\/+/g;

  function Q(a, b) {
    return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
  }

  function R(a, b, e, d, c) {
    var k = typeof a;
    if ("undefined" === k || "boolean" === k) a = null;
    var h = !1;
    if (null === a) h = !0;else switch (k) {
      case "string":
      case "number":
        h = !0;
        break;

      case "object":
        switch (a.$$typeof) {
          case l:
          case n:
            h = !0;
        }

    }
    if (h) return h = a, c = c(h), a = "" === d ? "." + Q(h, 0) : d, I(c) ? (e = "", null != a && (e = a.replace(P, "$&/") + "/"), R(c, b, e, "", function (a) {
      return a;
    })) : null != c && (O(c) && (c = N(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P, "$&/") + "/") + a)), b.push(c)), 1;
    h = 0;
    d = "" === d ? "." : d + ":";
    if (I(a)) for (var g = 0; g < a.length; g++) {
      k = a[g];
      var f = d + Q(k, g);
      h += R(k, b, e, f, c);
    } else if (f = A(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) {
      k = k.value, f = d + Q(k, g++), h += R(k, b, e, f, c);
    } else if ("object" === k) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
    return h;
  }

  function S(a, b, e) {
    if (null == a) return a;
    var d = [],
        c = 0;
    R(a, d, "", "", function (a) {
      return b.call(e, a, c++);
    });
    return d;
  }

  function T(a) {
    if (-1 === a._status) {
      var b = a._result;
      b = b();
      b.then(function (b) {
        if (0 === a._status || -1 === a._status) a._status = 1, a._result = b;
      }, function (b) {
        if (0 === a._status || -1 === a._status) a._status = 2, a._result = b;
      });
      -1 === a._status && (a._status = 0, a._result = b);
    }

    if (1 === a._status) return a._result.default;
    throw a._result;
  }

  var U = {
    current: null
  },
      V = {
    transition: null
  },
      W = {
    ReactCurrentDispatcher: U,
    ReactCurrentBatchConfig: V,
    ReactCurrentOwner: K
  };
  exports.Children = {
    map: S,
    forEach: function forEach(a, b, e) {
      S(a, function () {
        b.apply(this, arguments);
      }, e);
    },
    count: function count(a) {
      var b = 0;
      S(a, function () {
        b++;
      });
      return b;
    },
    toArray: function toArray(a) {
      return S(a, function (a) {
        return a;
      }) || [];
    },
    only: function only(a) {
      if (!O(a)) throw Error("React.Children.only expected to receive a single React element child.");
      return a;
    }
  };
  exports.Component = E;
  exports.Fragment = p;
  exports.Profiler = r;
  exports.PureComponent = G;
  exports.StrictMode = q;
  exports.Suspense = w;
  exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;

  exports.cloneElement = function (a, b, e) {
    if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
    var d = C({}, a.props),
        c = a.key,
        k = a.ref,
        h = a._owner;

    if (null != b) {
      void 0 !== b.ref && (k = b.ref, h = K.current);
      void 0 !== b.key && (c = "" + b.key);
      if (a.type && a.type.defaultProps) var g = a.type.defaultProps;

      for (f in b) {
        J.call(b, f) && !L.hasOwnProperty(f) && (d[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
      }
    }

    var f = arguments.length - 2;
    if (1 === f) d.children = e;else if (1 < f) {
      g = Array(f);

      for (var m = 0; m < f; m++) {
        g[m] = arguments[m + 2];
      }

      d.children = g;
    }
    return {
      $$typeof: l,
      type: a.type,
      key: c,
      ref: k,
      props: d,
      _owner: h
    };
  };

  exports.createContext = function (a) {
    a = {
      $$typeof: u,
      _currentValue: a,
      _currentValue2: a,
      _threadCount: 0,
      Provider: null,
      Consumer: null,
      _defaultValue: null,
      _globalName: null
    };
    a.Provider = {
      $$typeof: t,
      _context: a
    };
    return a.Consumer = a;
  };

  exports.createElement = M;

  exports.createFactory = function (a) {
    var b = M.bind(null, a);
    b.type = a;
    return b;
  };

  exports.createRef = function () {
    return {
      current: null
    };
  };

  exports.forwardRef = function (a) {
    return {
      $$typeof: v,
      render: a
    };
  };

  exports.isValidElement = O;

  exports.lazy = function (a) {
    return {
      $$typeof: y,
      _payload: {
        _status: -1,
        _result: a
      },
      _init: T
    };
  };

  exports.memo = function (a, b) {
    return {
      $$typeof: x,
      type: a,
      compare: void 0 === b ? null : b
    };
  };

  exports.startTransition = function (a) {
    var b = V.transition;
    V.transition = {};

    try {
      a();
    } finally {
      V.transition = b;
    }
  };

  exports.unstable_act = function () {
    throw Error("act(...) is not supported in production builds of React.");
  };

  exports.useCallback = function (a, b) {
    return U.current.useCallback(a, b);
  };

  exports.useContext = function (a) {
    return U.current.useContext(a);
  };

  exports.useDebugValue = function () {};

  exports.useDeferredValue = function (a) {
    return U.current.useDeferredValue(a);
  };

  exports.useEffect = function (a, b) {
    return U.current.useEffect(a, b);
  };

  exports.useId = function () {
    return U.current.useId();
  };

  exports.useImperativeHandle = function (a, b, e) {
    return U.current.useImperativeHandle(a, b, e);
  };

  exports.useInsertionEffect = function (a, b) {
    return U.current.useInsertionEffect(a, b);
  };

  exports.useLayoutEffect = function (a, b) {
    return U.current.useLayoutEffect(a, b);
  };

  exports.useMemo = function (a, b) {
    return U.current.useMemo(a, b);
  };

  exports.useReducer = function (a, b, e) {
    return U.current.useReducer(a, b, e);
  };

  exports.useRef = function (a) {
    return U.current.useRef(a);
  };

  exports.useState = function (a) {
    return U.current.useState(a);
  };

  exports.useSyncExternalStore = function (a, b, e) {
    return U.current.useSyncExternalStore(a, b, e);
  };

  exports.useTransition = function () {
    return U.current.useTransition();
  };

  exports.version = "18.1.0";
},50,[],"node_modules/react/cjs/react.production.min.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  if (process.env.NODE_ENV !== "production") {
    (function () {
      'use strict';

      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      }

      var ReactVersion = '18.1.0';
      var enableScopeAPI = false;
      var enableCacheElement = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var REACT_ELEMENT_TYPE = Symbol.for('react.element');
      var REACT_PORTAL_TYPE = Symbol.for('react.portal');
      var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
      var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
      var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
      var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
      var REACT_CONTEXT_TYPE = Symbol.for('react.context');
      var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
      var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
      var REACT_MEMO_TYPE = Symbol.for('react.memo');
      var REACT_LAZY_TYPE = Symbol.for('react.lazy');
      var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = '@@iterator';

      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') {
          return null;
        }

        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

        if (typeof maybeIterator === 'function') {
          return maybeIterator;
        }

        return null;
      }

      var ReactCurrentDispatcher = {
        current: null
      };
      var ReactCurrentBatchConfig = {
        transition: null
      };
      var ReactCurrentActQueue = {
        current: null,
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false
      };
      var ReactCurrentOwner = {
        current: null
      };
      var ReactDebugCurrentFrame = {};
      var currentExtraStackFrame = null;

      function setExtraStackFrame(stack) {
        {
          currentExtraStackFrame = stack;
        }
      }

      {
        ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
          {
            currentExtraStackFrame = stack;
          }
        };

        ReactDebugCurrentFrame.getCurrentStack = null;

        ReactDebugCurrentFrame.getStackAddendum = function () {
          var stack = '';

          if (currentExtraStackFrame) {
            stack += currentExtraStackFrame;
          }

          var impl = ReactDebugCurrentFrame.getCurrentStack;

          if (impl) {
            stack += impl() || '';
          }

          return stack;
        };
      }
      var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
        ReactCurrentOwner: ReactCurrentOwner
      };
      {
        ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
        ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
      }

      function warn(format) {
        {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }

            printWarning('warn', format, args);
          }
        }
      }

      function error(format) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }

            printWarning('error', format, args);
          }
        }
      }

      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame.getStackAddendum();

          if (stack !== '') {
            format += '%s';
            args = args.concat([stack]);
          }

          var argsWithFormat = args.map(function (item) {
            return String(item);
          });
          argsWithFormat.unshift('Warning: ' + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }

      var didWarnStateUpdateForUnmountedComponent = {};

      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor;
          var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
          var warningKey = componentName + "." + callerName;

          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }

          error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }

      var ReactNoopUpdateQueue = {
        isMounted: function isMounted(publicInstance) {
          return false;
        },
        enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {
          warnNoop(publicInstance, 'forceUpdate');
        },
        enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, 'replaceState');
        },
        enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, 'setState');
        }
      };
      var assign = Object.assign;
      var emptyObject = {};
      {
        Object.freeze(emptyObject);
      }

      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }

      Component.prototype.isReactComponent = {};

      Component.prototype.setState = function (partialState, callback) {
        if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {
          throw new Error('setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');
        }

        this.updater.enqueueSetState(this, partialState, callback, 'setState');
      };

      Component.prototype.forceUpdate = function (callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
      };

      {
        var deprecatedAPIs = {
          isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
          replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
        };

        var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function get() {
              warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
              return undefined;
            }
          });
        };

        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }

      function ComponentDummy() {}

      ComponentDummy.prototype = Component.prototype;

      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }

      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent;
      assign(pureComponentPrototype, Component.prototype);
      pureComponentPrototype.isPureReactComponent = true;

      function createRef() {
        var refObject = {
          current: null
        };
        {
          Object.seal(refObject);
        }
        return refObject;
      }

      var isArrayImpl = Array.isArray;

      function isArray(a) {
        return isArrayImpl(a);
      }

      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
          return type;
        }
      }

      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e) {
            return true;
          }
        }
      }

      function testStringCoercion(value) {
        return '' + value;
      }

      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));
            return testStringCoercion(value);
          }
        }
      }

      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;

        if (displayName) {
          return displayName;
        }

        var functionName = innerType.displayName || innerType.name || '';
        return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
      }

      function getContextName(type) {
        return type.displayName || 'Context';
      }

      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }

        {
          if (typeof type.tag === 'number') {
            error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
          }
        }

        if (typeof type === 'function') {
          return type.displayName || type.name || null;
        }

        if (typeof type === 'string') {
          return type;
        }

        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return 'Fragment';

          case REACT_PORTAL_TYPE:
            return 'Portal';

          case REACT_PROFILER_TYPE:
            return 'Profiler';

          case REACT_STRICT_MODE_TYPE:
            return 'StrictMode';

          case REACT_SUSPENSE_TYPE:
            return 'Suspense';

          case REACT_SUSPENSE_LIST_TYPE:
            return 'SuspenseList';
        }

        if (typeof type === 'object') {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + '.Consumer';

            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + '.Provider';

            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, 'ForwardRef');

            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;

              if (outerName !== null) {
                return outerName;
              }

              return getComponentNameFromType(type.type) || 'Memo';

            case REACT_LAZY_TYPE:
              {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;

                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
          }
        }

        return null;
      }

      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }

      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== undefined;
      }

      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== undefined;
      }

      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function warnAboutAccessingKey() {
          {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
            }
          }
        };

        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }

      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function warnAboutAccessingRef() {
          {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
            }
          }
        };

        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }

      function warnIfStringRefCannotBeAutoConverted(config) {
        {
          if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);

            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }

      var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type: type,
          key: key,
          ref: ref,
          props: props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
          });
          Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });

          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };

      function createElement(type, config, children) {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        var self = null;
        var source = null;

        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            {
              warnIfStringRefCannotBeAutoConverted(config);
            }
          }

          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = '' + config.key;
          }

          self = config.__self === undefined ? null : config.__self;
          source = config.__source === undefined ? null : config.__source;

          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }

        var childrenLength = arguments.length - 2;

        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);

          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }

          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }

        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;

          for (propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
        }

        {
          if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }

            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
      }

      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }

      function cloneElement(element, config, children) {
        if (element === null || element === undefined) {
          throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        }

        var propName;
        var props = assign({}, element.props);
        var key = element.key;
        var ref = element.ref;
        var self = element._self;
        var source = element._source;
        var owner = element._owner;

        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }

          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = '' + config.key;
          }

          var defaultProps;

          if (element.type && element.type.defaultProps) {
            defaultProps = element.type.defaultProps;
          }

          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config[propName] === undefined && defaultProps !== undefined) {
                props[propName] = defaultProps[propName];
              } else {
                props[propName] = config[propName];
              }
            }
          }
        }

        var childrenLength = arguments.length - 2;

        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);

          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }

          props.children = childArray;
        }

        return ReactElement(element.type, key, ref, self, source, owner, props);
      }

      function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }

      var SEPARATOR = '.';
      var SUBSEPARATOR = ':';

      function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          '=': '=0',
          ':': '=2'
        };
        var escapedString = key.replace(escapeRegex, function (match) {
          return escaperLookup[match];
        });
        return '$' + escapedString;
      }

      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;

      function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, '$&/');
      }

      function getElementKey(element, index) {
        if (typeof element === 'object' && element !== null && element.key != null) {
          {
            checkKeyStringCoercion(element.key);
          }
          return escape('' + element.key);
        }

        return index.toString(36);
      }

      function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;

        if (type === 'undefined' || type === 'boolean') {
          children = null;
        }

        var invokeCallback = false;

        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case 'string':
            case 'number':
              invokeCallback = true;
              break;

            case 'object':
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }

          }
        }

        if (invokeCallback) {
          var _child = children;
          var mappedChild = callback(_child);
          var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;

          if (isArray(mappedChild)) {
            var escapedChildKey = '';

            if (childKey != null) {
              escapedChildKey = escapeUserProvidedKey(childKey) + '/';
            }

            mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
              return c;
            });
          } else if (mappedChild != null) {
            if (isValidElement(mappedChild)) {
              {
                if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                  checkKeyStringCoercion(mappedChild.key);
                }
              }
              mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
            }

            array.push(mappedChild);
          }

          return 1;
        }

        var child;
        var nextName;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

        if (isArray(children)) {
          for (var i = 0; i < children.length; i++) {
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
          }
        } else {
          var iteratorFn = getIteratorFn(children);

          if (typeof iteratorFn === 'function') {
            var iterableChildren = children;
            {
              if (iteratorFn === iterableChildren.entries) {
                if (!didWarnAboutMaps) {
                  warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
                }

                didWarnAboutMaps = true;
              }
            }
            var iterator = iteratorFn.call(iterableChildren);
            var step;
            var ii = 0;

            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getElementKey(child, ii++);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else if (type === 'object') {
            var childrenString = String(children);
            throw new Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
          }
        }

        return subtreeCount;
      }

      function mapChildren(children, func, context) {
        if (children == null) {
          return children;
        }

        var result = [];
        var count = 0;
        mapIntoArray(children, result, '', '', function (child) {
          return func.call(context, child, count++);
        });
        return result;
      }

      function countChildren(children) {
        var n = 0;
        mapChildren(children, function () {
          n++;
        });
        return n;
      }

      function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function () {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      }

      function toArray(children) {
        return mapChildren(children, function (child) {
          return child;
        }) || [];
      }

      function onlyChild(children) {
        if (!isValidElement(children)) {
          throw new Error('React.Children.only expected to receive a single React element child.');
        }

        return children;
      }

      function createContext(defaultValue) {
        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          _threadCount: 0,
          Provider: null,
          Consumer: null,
          _defaultValue: null,
          _globalName: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        {
          var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context
          };
          Object.defineProperties(Consumer, {
            Provider: {
              get: function get() {
                if (!hasWarnedAboutUsingConsumerProvider) {
                  hasWarnedAboutUsingConsumerProvider = true;
                  error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
                }

                return context.Provider;
              },
              set: function set(_Provider) {
                context.Provider = _Provider;
              }
            },
            _currentValue: {
              get: function get() {
                return context._currentValue;
              },
              set: function set(_currentValue) {
                context._currentValue = _currentValue;
              }
            },
            _currentValue2: {
              get: function get() {
                return context._currentValue2;
              },
              set: function set(_currentValue2) {
                context._currentValue2 = _currentValue2;
              }
            },
            _threadCount: {
              get: function get() {
                return context._threadCount;
              },
              set: function set(_threadCount) {
                context._threadCount = _threadCount;
              }
            },
            Consumer: {
              get: function get() {
                if (!hasWarnedAboutUsingNestedContextConsumers) {
                  hasWarnedAboutUsingNestedContextConsumers = true;
                  error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
                }

                return context.Consumer;
              }
            },
            displayName: {
              get: function get() {
                return context.displayName;
              },
              set: function set(displayName) {
                if (!hasWarnedAboutDisplayNameOnConsumer) {
                  warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);
                  hasWarnedAboutDisplayNameOnConsumer = true;
                }
              }
            }
          });
          context.Consumer = Consumer;
        }
        {
          context._currentRenderer = null;
          context._currentRenderer2 = null;
        }
        return context;
      }

      var Uninitialized = -1;
      var Pending = 0;
      var Resolved = 1;
      var Rejected = 2;

      function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
          var ctor = payload._result;
          var thenable = ctor();
          thenable.then(function (moduleObject) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var resolved = payload;
              resolved._status = Resolved;
              resolved._result = moduleObject;
            }
          }, function (error) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var rejected = payload;
              rejected._status = Rejected;
              rejected._result = error;
            }
          });

          if (payload._status === Uninitialized) {
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
          }
        }

        if (payload._status === Resolved) {
          var moduleObject = payload._result;
          {
            if (moduleObject === undefined) {
              error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + 'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))\n\n" + 'Did you accidentally put curly braces around the import?', moduleObject);
            }
          }
          {
            if (!('default' in moduleObject)) {
              error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + 'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
            }
          }
          return moduleObject.default;
        } else {
          throw payload._result;
        }
      }

      function lazy(ctor) {
        var payload = {
          _status: Uninitialized,
          _result: ctor
        };
        var lazyType = {
          $$typeof: REACT_LAZY_TYPE,
          _payload: payload,
          _init: lazyInitializer
        };
        {
          var defaultProps;
          var propTypes;
          Object.defineProperties(lazyType, {
            defaultProps: {
              configurable: true,
              get: function get() {
                return defaultProps;
              },
              set: function set(newDefaultProps) {
                error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
                defaultProps = newDefaultProps;
                Object.defineProperty(lazyType, 'defaultProps', {
                  enumerable: true
                });
              }
            },
            propTypes: {
              configurable: true,
              get: function get() {
                return propTypes;
              },
              set: function set(newPropTypes) {
                error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
                propTypes = newPropTypes;
                Object.defineProperty(lazyType, 'propTypes', {
                  enumerable: true
                });
              }
            }
          });
        }
        return lazyType;
      }

      function forwardRef(render) {
        {
          if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
            error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
          } else if (typeof render !== 'function') {
            error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
          } else {
            if (render.length !== 0 && render.length !== 2) {
              error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
            }
          }

          if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) {
              error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
            }
          }
        }
        var elementType = {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render: render
        };
        {
          var ownName;
          Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function get() {
              return ownName;
            },
            set: function set(name) {
              ownName = name;

              if (!render.name && !render.displayName) {
                render.displayName = name;
              }
            }
          });
        }
        return elementType;
      }

      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
      }

      function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') {
          return true;
        }

        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }

        if (typeof type === 'object' && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
            return true;
          }
        }

        return false;
      }

      function memo(type, compare) {
        {
          if (!isValidElementType(type)) {
            error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
          }
        }
        var elementType = {
          $$typeof: REACT_MEMO_TYPE,
          type: type,
          compare: compare === undefined ? null : compare
        };
        {
          var ownName;
          Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function get() {
              return ownName;
            },
            set: function set(name) {
              ownName = name;

              if (!type.name && !type.displayName) {
                type.displayName = name;
              }
            }
          });
        }
        return elementType;
      }

      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        {
          if (dispatcher === null) {
            error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' + '2. You might be breaking the Rules of Hooks\n' + '3. You might have more than one copy of React in the same app\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
          }
        }
        return dispatcher;
      }

      function useContext(Context) {
        var dispatcher = resolveDispatcher();
        {
          if (Context._context !== undefined) {
            var realContext = Context._context;

            if (realContext.Consumer === Context) {
              error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
            } else if (realContext.Provider === Context) {
              error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
            }
          }
        }
        return dispatcher.useContext(Context);
      }

      function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
      }

      function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
      }

      function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }

      function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
      }

      function useInsertionEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create, deps);
      }

      function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
      }

      function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
      }

      function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
      }

      function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
      }

      function useDebugValue(value, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value, formatterFn);
        }
      }

      function useTransition() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
      }

      function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
      }

      function useId() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
      }

      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      }

      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;

      function disabledLog() {}

      disabledLog.__reactDisabledLog = true;

      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }

          disabledDepth++;
        }
      }

      function reenableLogs() {
        {
          disabledDepth--;

          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }

          if (disabledDepth < 0) {
            error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
          }
        }
      }

      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;

      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === undefined) {
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || '';
            }
          }

          return '\n' + prefix + name;
        }
      }

      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }

      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return '';
        }

        {
          var frame = componentFrameCache.get(fn);

          if (frame !== undefined) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = null;
          disableLogs();
        }

        try {
          if (construct) {
            var Fake = function Fake() {
              throw Error();
            };

            Object.defineProperty(Fake.prototype, 'props', {
              set: function set() {
                throw Error();
              }
            });

            if (typeof Reflect === 'object' && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }

              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }

              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }

            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === 'string') {
            var sampleLines = sample.stack.split('\n');
            var controlLines = control.stack.split('\n');
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;

            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }

            for (; s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;

                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                      if (fn.displayName && _frame.includes('<anonymous>')) {
                        _frame = _frame.replace('<anonymous>', fn.displayName);
                      }

                      {
                        if (typeof fn === 'function') {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }

                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }

        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        {
          if (typeof fn === 'function') {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }

      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }

      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }

      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return '';
        }

        if (typeof type === 'function') {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }

        if (typeof type === 'string') {
          return describeBuiltInComponentFrame(type);
        }

        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame('Suspense');

          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame('SuspenseList');
        }

        if (typeof type === 'object') {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);

            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

            case REACT_LAZY_TYPE:
              {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;

                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
              }
          }
        }

        return '';
      }

      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }

      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);

          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;

              try {
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                  var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                  err.name = 'Invariant Violation';
                  throw err;
                }

                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
              } catch (ex) {
                error$1 = ex;
              }

              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }

              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }

      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
          } else {
            setExtraStackFrame(null);
          }
        }
      }

      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }

      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentNameFromType(ReactCurrentOwner.current.type);

          if (name) {
            return '\n\nCheck the render method of `' + name + '`.';
          }
        }

        return '';
      }

      function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, '');
          var lineNumber = source.lineNumber;
          return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }

        return '';
      }

      function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) {
          return getSourceInfoErrorAddendum(elementProps.__source);
        }

        return '';
      }

      var ownerHasKeyUseWarning = {};

      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();

        if (!info) {
          var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

          if (parentName) {
            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
          }
        }

        return info;
      }

      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }

        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }

        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = '';

        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        }

        {
          setCurrentlyValidatingElement$1(element);
          error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }

      function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') {
          return;
        }

        if (isArray(node)) {
          for (var i = 0; i < node.length; i++) {
            var child = node[i];

            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);

          if (typeof iteratorFn === 'function') {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;

              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }

      function validatePropTypes(element) {
        {
          var type = element.type;

          if (type === null || type === undefined || typeof type === 'string') {
            return;
          }

          var propTypes;

          if (typeof type === 'function') {
            propTypes = type.propTypes;
          } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
          } else {
            return;
          }

          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
          } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;

            var _name = getComponentNameFromType(type);

            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
          }

          if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
            error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
          }
        }
      }

      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);

          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];

            if (key !== 'children' && key !== 'key') {
              setCurrentlyValidatingElement$1(fragment);
              error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }

          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
          }
        }
      }

      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);

        if (!validType) {
          var info = '';

          if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
            info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
          }

          var sourceInfo = getSourceInfoErrorAddendumForProps(props);

          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }

          var typeString;

          if (type === null) {
            typeString = 'null';
          } else if (isArray(type)) {
            typeString = 'array';
          } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
            typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
            info = ' Did you accidentally export a JSX literal instead of a component?';
          } else {
            typeString = typeof type;
          }

          {
            error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
          }
        }

        var element = createElement.apply(this, arguments);

        if (element == null) {
          return element;
        }

        if (validType) {
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], type);
          }
        }

        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }

        return element;
      }

      var didWarnAboutDeprecatedCreateFactory = false;

      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
          }

          Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function get() {
              warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
              Object.defineProperty(this, 'type', {
                value: type
              });
              return type;
            }
          });
        }
        return validatedFactory;
      }

      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);

        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], newElement.type);
        }

        validatePropTypes(newElement);
        return newElement;
      }

      function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        {
          ReactCurrentBatchConfig.transition._updatedFibers = new Set();
        }

        try {
          scope();
        } finally {
          ReactCurrentBatchConfig.transition = prevTransition;
          {
            if (prevTransition === null && currentTransition._updatedFibers) {
              var updatedFibersCount = currentTransition._updatedFibers.size;

              if (updatedFibersCount > 10) {
                warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');
              }

              currentTransition._updatedFibers.clear();
            }
          }
        }
      }

      var didWarnAboutMessageChannel = false;
      var enqueueTaskImpl = null;

      function enqueueTask(task) {
        if (enqueueTaskImpl === null) {
          try {
            var requireString = ('require' + Math.random()).slice(0, 7);
            var nodeRequire = module && module[requireString];
            enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;
          } catch (_err) {
            enqueueTaskImpl = function enqueueTaskImpl(callback) {
              {
                if (didWarnAboutMessageChannel === false) {
                  didWarnAboutMessageChannel = true;

                  if (typeof MessageChannel === 'undefined') {
                    error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');
                  }
                }
              }
              var channel = new MessageChannel();
              channel.port1.onmessage = callback;
              channel.port2.postMessage(undefined);
            };
          }
        }

        return enqueueTaskImpl(task);
      }

      var actScopeDepth = 0;
      var didWarnNoAwaitAct = false;

      function act(callback) {
        {
          var prevActScopeDepth = actScopeDepth;
          actScopeDepth++;

          if (ReactCurrentActQueue.current === null) {
            ReactCurrentActQueue.current = [];
          }

          var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
          var result;

          try {
            ReactCurrentActQueue.isBatchingLegacy = true;
            result = callback();

            if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
              var queue = ReactCurrentActQueue.current;

              if (queue !== null) {
                ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                flushActQueue(queue);
              }
            }
          } catch (error) {
            popActScope(prevActScopeDepth);
            throw error;
          } finally {
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
          }

          if (result !== null && typeof result === 'object' && typeof result.then === 'function') {
            var thenableResult = result;
            var wasAwaited = false;
            var thenable = {
              then: function then(resolve, reject) {
                wasAwaited = true;
                thenableResult.then(function (returnValue) {
                  popActScope(prevActScopeDepth);

                  if (actScopeDepth === 0) {
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  } else {
                    resolve(returnValue);
                  }
                }, function (error) {
                  popActScope(prevActScopeDepth);
                  reject(error);
                });
              }
            };
            {
              if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') {
                Promise.resolve().then(function () {}).then(function () {
                  if (!wasAwaited) {
                    didWarnNoAwaitAct = true;
                    error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, ' + 'interleaving multiple act calls and mixing their ' + 'scopes. ' + 'You should - await act(async () => ...);');
                  }
                });
              }
            }
            return thenable;
          } else {
            var returnValue = result;
            popActScope(prevActScopeDepth);

            if (actScopeDepth === 0) {
              var _queue = ReactCurrentActQueue.current;

              if (_queue !== null) {
                flushActQueue(_queue);
                ReactCurrentActQueue.current = null;
              }

              var _thenable = {
                then: function then(resolve, reject) {
                  if (ReactCurrentActQueue.current === null) {
                    ReactCurrentActQueue.current = [];
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  } else {
                    resolve(returnValue);
                  }
                }
              };
              return _thenable;
            } else {
              var _thenable2 = {
                then: function then(resolve, reject) {
                  resolve(returnValue);
                }
              };
              return _thenable2;
            }
          }
        }
      }

      function popActScope(prevActScopeDepth) {
        {
          if (prevActScopeDepth !== actScopeDepth - 1) {
            error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');
          }

          actScopeDepth = prevActScopeDepth;
        }
      }

      function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        {
          var queue = ReactCurrentActQueue.current;

          if (queue !== null) {
            try {
              flushActQueue(queue);
              enqueueTask(function () {
                if (queue.length === 0) {
                  ReactCurrentActQueue.current = null;
                  resolve(returnValue);
                } else {
                  recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                }
              });
            } catch (error) {
              reject(error);
            }
          } else {
            resolve(returnValue);
          }
        }
      }

      var isFlushing = false;

      function flushActQueue(queue) {
        {
          if (!isFlushing) {
            isFlushing = true;
            var i = 0;

            try {
              for (; i < queue.length; i++) {
                var callback = queue[i];

                do {
                  callback = callback(true);
                } while (callback !== null);
              }

              queue.length = 0;
            } catch (error) {
              queue = queue.slice(i + 1);
              throw error;
            } finally {
              isFlushing = false;
            }
          }
        }
      }

      var createElement$1 = createElementWithValidation;
      var cloneElement$1 = cloneElementWithValidation;
      var createFactory = createFactoryWithValidation;
      var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
      };
      exports.Children = Children;
      exports.Component = Component;
      exports.Fragment = REACT_FRAGMENT_TYPE;
      exports.Profiler = REACT_PROFILER_TYPE;
      exports.PureComponent = PureComponent;
      exports.StrictMode = REACT_STRICT_MODE_TYPE;
      exports.Suspense = REACT_SUSPENSE_TYPE;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
      exports.cloneElement = cloneElement$1;
      exports.createContext = createContext;
      exports.createElement = createElement$1;
      exports.createFactory = createFactory;
      exports.createRef = createRef;
      exports.forwardRef = forwardRef;
      exports.isValidElement = isValidElement;
      exports.lazy = lazy;
      exports.memo = memo;
      exports.startTransition = startTransition;
      exports.unstable_act = act;
      exports.useCallback = useCallback;
      exports.useContext = useContext;
      exports.useDebugValue = useDebugValue;
      exports.useDeferredValue = useDeferredValue;
      exports.useEffect = useEffect;
      exports.useId = useId;
      exports.useImperativeHandle = useImperativeHandle;
      exports.useInsertionEffect = useInsertionEffect;
      exports.useLayoutEffect = useLayoutEffect;
      exports.useMemo = useMemo;
      exports.useReducer = useReducer;
      exports.useRef = useRef;
      exports.useState = useState;
      exports.useSyncExternalStore = useSyncExternalStore;
      exports.useTransition = useTransition;
      exports.version = ReactVersion;

      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
      }
    })();
  }
},51,[],"node_modules/react/cjs/react.development.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/extends"));

  var _ProgressBarAndroidNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "./ProgressBarAndroidNativeComponent"));

  var _this = this,
      _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.android.js";

  var React = _$$_REQUIRE(_dependencyMap[3], "react");

  var ProgressBarAndroid = function ProgressBarAndroid(props, forwardedRef) {
    return React.createElement(_ProgressBarAndroidNativeComponent.default, (0, _extends2.default)({}, props, {
      ref: forwardedRef,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 87,
        columnNumber: 10
      }
    }));
  };

  var ProgressBarAndroidToExport = React.forwardRef(ProgressBarAndroid);
  ProgressBarAndroidToExport.defaultProps = {
    styleAttr: 'Normal',
    indeterminate: true,
    animating: true
  };
  module.exports = ProgressBarAndroidToExport;
},52,[3,53,54,49],"node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _extends() {
    module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _extends.apply(this, arguments);
  }

  module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;
},53,[],"node_modules/@babel/runtime/helpers/extends.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _codegenNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../Utilities/codegenNativeComponent"));

  var _default = (0, _codegenNativeComponent.default)('AndroidProgressBar');

  exports.default = _default;
},54,[3,55],"node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroidNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _requireNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../Libraries/ReactNative/requireNativeComponent"));

  var _UIManager = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../ReactNative/UIManager"));

  function codegenNativeComponent(componentName, options) {
    var componentNameInUse = options && options.paperComponentName ? options.paperComponentName : componentName;

    if (options != null && options.paperComponentNameDeprecated != null) {
      if (_UIManager.default.getViewManagerConfig(componentName)) {
        componentNameInUse = componentName;
      } else if (options.paperComponentNameDeprecated != null && _UIManager.default.getViewManagerConfig(options.paperComponentNameDeprecated)) {
        componentNameInUse = options.paperComponentNameDeprecated;
      } else {
        throw new Error("Failed to find native component for either " + componentName + " or " + (options.paperComponentNameDeprecated || '(unknown)'));
      }
    }

    return (0, _requireNativeComponent.default)(componentNameInUse);
  }

  var _default = codegenNativeComponent;
  exports.default = _default;
},55,[3,56,43],"node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var requireNativeComponent = function requireNativeComponent(uiViewClassName) {
    return _$$_REQUIRE(_dependencyMap[0], "../Renderer/shims/createReactNativeComponentClass")(uiViewClassName, function () {
      return _$$_REQUIRE(_dependencyMap[1], "./getNativeComponentAttributes")(uiViewClassName);
    });
  };

  module.exports = requireNativeComponent;
},56,[57,206],"node_modules/react-native/Libraries/ReactNative/requireNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var register = _$$_REQUIRE(_dependencyMap[0], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").ReactNativeViewConfigRegistry.register;

  var createReactNativeComponentClass = function createReactNativeComponentClass(name, callback) {
    return register(name, callback);
  };

  module.exports = createReactNativeComponentClass;
},57,[58],"node_modules/react-native/Libraries/Renderer/shims/createReactNativeComponentClass.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get BatchedBridge() {
      return _$$_REQUIRE(_dependencyMap[0], "../BatchedBridge/BatchedBridge");
    },

    get ExceptionsManager() {
      return _$$_REQUIRE(_dependencyMap[1], "../Core/ExceptionsManager");
    },

    get Platform() {
      return _$$_REQUIRE(_dependencyMap[2], "../Utilities/Platform");
    },

    get RCTEventEmitter() {
      return _$$_REQUIRE(_dependencyMap[3], "../EventEmitter/RCTEventEmitter");
    },

    get ReactNativeViewConfigRegistry() {
      return _$$_REQUIRE(_dependencyMap[4], "../Renderer/shims/ReactNativeViewConfigRegistry");
    },

    get TextInputState() {
      return _$$_REQUIRE(_dependencyMap[5], "../Components/TextInput/TextInputState");
    },

    get UIManager() {
      return _$$_REQUIRE(_dependencyMap[6], "../ReactNative/UIManager");
    },

    get deepDiffer() {
      return _$$_REQUIRE(_dependencyMap[7], "../Utilities/differ/deepDiffer");
    },

    get deepFreezeAndThrowOnMutationInDev() {
      return _$$_REQUIRE(_dependencyMap[8], "../Utilities/deepFreezeAndThrowOnMutationInDev");
    },

    get flattenStyle() {
      return _$$_REQUIRE(_dependencyMap[9], "../StyleSheet/flattenStyle");
    },

    get ReactFiberErrorDialog() {
      return _$$_REQUIRE(_dependencyMap[10], "../Core/ReactFiberErrorDialog");
    }

  };
},58,[14,59,80,82,83,84,43,204,22,184,205],"node_modules/react-native/Libraries/ReactPrivate/ReactNativePrivateInterface.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/createClass"));

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/classCallCheck"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/getPrototypeOf"));

  var _wrapNativeSuper2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/wrapNativeSuper"));

  var LogBoxData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7], "../LogBox/Data/LogBoxData"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var SyntheticError = function (_Error) {
    (0, _inherits2.default)(SyntheticError, _Error);

    var _super = _createSuper(SyntheticError);

    function SyntheticError() {
      var _this;

      (0, _classCallCheck2.default)(this, SyntheticError);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.name = '';
      return _this;
    }

    return (0, _createClass2.default)(SyntheticError);
  }((0, _wrapNativeSuper2.default)(Error));

  var userExceptionDecorator;
  var inUserExceptionDecorator = false;

  function unstable_setExceptionDecorator(exceptionDecorator) {
    userExceptionDecorator = exceptionDecorator;
  }

  function preprocessException(data) {
    if (userExceptionDecorator && !inUserExceptionDecorator) {
      inUserExceptionDecorator = true;

      try {
        return userExceptionDecorator(data);
      } catch (_unused) {} finally {
        inUserExceptionDecorator = false;
      }
    }

    return data;
  }

  var exceptionID = 0;

  function reportException(e, isFatal, reportToConsole) {
    var NativeExceptionsManager = _$$_REQUIRE(_dependencyMap[8], "./NativeExceptionsManager").default;

    if (NativeExceptionsManager) {
      var parseErrorStack = _$$_REQUIRE(_dependencyMap[9], "./Devtools/parseErrorStack");

      var stack = parseErrorStack(e);
      var currentExceptionID = ++exceptionID;
      var originalMessage = e.message || '';
      var message = originalMessage;

      if (e.componentStack != null) {
        message += "\n\nThis error is located at:" + e.componentStack;
      }

      var namePrefix = e.name == null || e.name === '' ? '' : e.name + ": ";

      if (!message.startsWith(namePrefix)) {
        message = namePrefix + message;
      }

      message = e.jsEngine == null ? message : message + ", js engine: " + e.jsEngine;
      var isHandledByLogBox = e.forceRedbox !== true;
      var data = preprocessException({
        message: message,
        originalMessage: message === originalMessage ? null : originalMessage,
        name: e.name == null || e.name === '' ? null : e.name,
        componentStack: typeof e.componentStack === 'string' ? e.componentStack : null,
        stack: stack,
        id: currentExceptionID,
        isFatal: isFatal,
        extraData: {
          jsEngine: e.jsEngine,
          rawStack: e.stack,
          suppressRedBox: isHandledByLogBox
        }
      });

      if (reportToConsole) {
        console.error(data.message);
      }

      if (isHandledByLogBox) {
        LogBoxData.addException(Object.assign({}, data, {
          isComponentError: !!e.isComponentError
        }));
      }

      NativeExceptionsManager.reportException(data);

      if (__DEV__) {
        if (e.preventSymbolication === true) {
          return;
        }

        var symbolicateStackTrace = _$$_REQUIRE(_dependencyMap[10], "./Devtools/symbolicateStackTrace");

        symbolicateStackTrace(stack).then(function (_ref) {
          var prettyStack = _ref.stack;

          if (prettyStack) {
            NativeExceptionsManager.updateExceptionMessage(data.message, prettyStack, currentExceptionID);
          } else {
            throw new Error('The stack is null');
          }
        }).catch(function (error) {
          console.log('Unable to symbolicate stack trace: ' + error.message);
        });
      }
    } else if (reportToConsole) {
      console.error(e);
    }
  }

  var inExceptionHandler = false;

  function handleException(e, isFatal) {
    var error;

    if (e instanceof Error) {
      error = e;
    } else {
      error = new SyntheticError(e);
    }

    try {
      inExceptionHandler = true;
      reportException(error, isFatal, true);
    } finally {
      inExceptionHandler = false;
    }
  }

  function reactConsoleErrorHandler() {
    console._errorOriginal.apply(console, arguments);

    if (!console.reportErrorsAsExceptions) {
      return;
    }

    if (inExceptionHandler) {
      return;
    }

    if (arguments[0] && arguments[0].stack) {
      reportException(arguments[0], false, false);
    } else {
      var stringifySafe = _$$_REQUIRE(_dependencyMap[11], "../Utilities/stringifySafe").default;

      var str = Array.prototype.map.call(arguments, function (value) {
        return typeof value === 'string' ? value : stringifySafe(value);
      }).join(' ');

      if (str.slice(0, 9) === 'Warning: ') {
        return;
      }

      var _error = new SyntheticError(str);

      _error.name = 'console.error';
      reportException(_error, false, false);
    }
  }

  function installConsoleErrorReporter() {
    if (console._errorOriginal) {
      return;
    }

    console._errorOriginal = console.error.bind(console);
    console.error = reactConsoleErrorHandler;

    if (console.reportErrorsAsExceptions === undefined) {
      console.reportErrorsAsExceptions = true;
    }
  }

  module.exports = {
    handleException: handleException,
    installConsoleErrorReporter: installConsoleErrorReporter,
    SyntheticError: SyntheticError,
    unstable_setExceptionDecorator: unstable_setExceptionDecorator
  };
},59,[3,17,16,35,32,31,60,64,79,73,67,21],"node_modules/react-native/Libraries/Core/ExceptionsManager.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_$$_REQUIRE(_dependencyMap[0], "./isNativeFunction.js")(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _$$_REQUIRE(_dependencyMap[1], "./construct.js")(Class, arguments, _$$_REQUIRE(_dependencyMap[2], "./getPrototypeOf.js")(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _$$_REQUIRE(_dependencyMap[3], "./setPrototypeOf.js")(Wrapper, Class);
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _wrapNativeSuper(Class);
  }

  module.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports["default"] = module.exports;
},60,[61,62,31,36],"node_modules/@babel/runtime/helpers/wrapNativeSuper.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  module.exports = _isNativeFunction, module.exports.__esModule = true, module.exports["default"] = module.exports;
},61,[],"node_modules/@babel/runtime/helpers/isNativeFunction.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _construct(Parent, args, Class) {
    if (_$$_REQUIRE(_dependencyMap[0], "./isNativeReflectConstruct.js")()) {
      module.exports = _construct = Reflect.construct.bind(), module.exports.__esModule = true, module.exports["default"] = module.exports;
    } else {
      module.exports = _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _$$_REQUIRE(_dependencyMap[1], "./setPrototypeOf.js")(instance, Class.prototype);
        return instance;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }

    return _construct.apply(null, arguments);
  }

  module.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
},62,[63,36],"node_modules/@babel/runtime/helpers/construct.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;
},63,[],"node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.addException = addException;
  exports.addIgnorePatterns = addIgnorePatterns;
  exports.addLog = addLog;
  exports.checkWarningFilter = checkWarningFilter;
  exports.clear = clear;
  exports.clearErrors = clearErrors;
  exports.clearWarnings = clearWarnings;
  exports.dismiss = dismiss;
  exports.getAppInfo = getAppInfo;
  exports.isDisabled = isDisabled;
  exports.isLogBoxErrorMessage = isLogBoxErrorMessage;
  exports.isMessageIgnored = isMessageIgnored;
  exports.observe = observe;
  exports.reportLogBoxError = reportLogBoxError;
  exports.retrySymbolicateLogNow = retrySymbolicateLogNow;
  exports.setAppInfo = setAppInfo;
  exports.setDisabled = setDisabled;
  exports.setSelectedLog = setSelectedLog;
  exports.setWarningFilter = setWarningFilter;
  exports.symbolicateLogLazy = symbolicateLogLazy;
  exports.symbolicateLogNow = symbolicateLogNow;
  exports.withSubscription = withSubscription;

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/getPrototypeOf"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6], "react"));

  var _LogBoxLog = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "./LogBoxLog"));

  var _parseErrorStack = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[8], "../../Core/Devtools/parseErrorStack"));

  var _NativeLogBox = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[9], "../../NativeModules/specs/NativeLogBox"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/LogBox/Data/LogBoxData.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  'use strict';

  var observers = new Set();
  var ignorePatterns = new Set();
  var appInfo = null;
  var logs = new Set();
  var updateTimeout = null;
  var _isDisabled = false;

  var _selectedIndex = -1;

  var warningFilter = function warningFilter(format) {
    return {
      finalFormat: format,
      forceDialogImmediately: false,
      suppressDialog_LEGACY: true,
      suppressCompletely: false,
      monitorEvent: 'unknown',
      monitorListVersion: 0,
      monitorSampleRate: 1
    };
  };

  var LOGBOX_ERROR_MESSAGE = 'An error was thrown when attempting to render log messages via LogBox.';

  function getNextState() {
    return {
      logs: logs,
      isDisabled: _isDisabled,
      selectedLogIndex: _selectedIndex
    };
  }

  function reportLogBoxError(error, componentStack) {
    var ExceptionsManager = _$$_REQUIRE(_dependencyMap[10], "../../Core/ExceptionsManager");

    error.forceRedbox = true;
    error.message = LOGBOX_ERROR_MESSAGE + "\n\n" + error.message;

    if (componentStack != null) {
      error.componentStack = componentStack;
    }

    ExceptionsManager.handleException(error, true);
  }

  function isLogBoxErrorMessage(message) {
    return typeof message === 'string' && message.includes(LOGBOX_ERROR_MESSAGE);
  }

  function isMessageIgnored(message) {
    for (var pattern of ignorePatterns) {
      if (pattern instanceof RegExp && pattern.test(message) || typeof pattern === 'string' && message.includes(pattern)) {
        return true;
      }
    }

    return false;
  }

  function handleUpdate() {
    if (updateTimeout == null) {
      updateTimeout = setImmediate(function () {
        updateTimeout = null;
        var nextState = getNextState();
        observers.forEach(function (_ref) {
          var observer = _ref.observer;
          return observer(nextState);
        });
      });
    }
  }

  function appendNewLog(newLog) {
    if (isMessageIgnored(newLog.message.content)) {
      return;
    }

    var lastLog = Array.from(logs).pop();

    if (lastLog && lastLog.category === newLog.category) {
      lastLog.incrementCount();
      handleUpdate();
      return;
    }

    if (newLog.level === 'fatal') {
      var OPTIMISTIC_WAIT_TIME = 1000;

      var _addPendingLog = function addPendingLog() {
        logs.add(newLog);

        if (_selectedIndex <= 0) {
          setSelectedLog(logs.size - 1);
        } else {
          handleUpdate();
        }

        _addPendingLog = null;
      };

      var optimisticTimeout = setTimeout(function () {
        if (_addPendingLog) {
          _addPendingLog();
        }
      }, OPTIMISTIC_WAIT_TIME);
      newLog.symbolicate(function (status) {
        if (_addPendingLog && status !== 'PENDING') {
          _addPendingLog();

          clearTimeout(optimisticTimeout);
        } else if (status !== 'PENDING') {
          handleUpdate();
        }
      });
    } else if (newLog.level === 'syntax') {
      logs.add(newLog);
      setSelectedLog(logs.size - 1);
    } else {
      logs.add(newLog);
      handleUpdate();
    }
  }

  function addLog(log) {
    var errorForStackTrace = new Error();
    setImmediate(function () {
      try {
        var stack = (0, _parseErrorStack.default)(errorForStackTrace);
        appendNewLog(new _LogBoxLog.default({
          level: log.level,
          message: log.message,
          isComponentError: false,
          stack: stack,
          category: log.category,
          componentStack: log.componentStack
        }));
      } catch (error) {
        reportLogBoxError(error);
      }
    });
  }

  function addException(error) {
    setImmediate(function () {
      try {
        appendNewLog(new _LogBoxLog.default((0, _$$_REQUIRE(_dependencyMap[11], "./parseLogBoxLog").parseLogBoxException)(error)));
      } catch (loggingError) {
        reportLogBoxError(loggingError);
      }
    });
  }

  function symbolicateLogNow(log) {
    log.symbolicate(function () {
      handleUpdate();
    });
  }

  function retrySymbolicateLogNow(log) {
    log.retrySymbolicate(function () {
      handleUpdate();
    });
  }

  function symbolicateLogLazy(log) {
    log.symbolicate();
  }

  function clear() {
    if (logs.size > 0) {
      logs = new Set();
      setSelectedLog(-1);
    }
  }

  function setSelectedLog(proposedNewIndex) {
    var oldIndex = _selectedIndex;
    var newIndex = proposedNewIndex;
    var logArray = Array.from(logs);
    var index = logArray.length - 1;

    while (index >= 0) {
      if (logArray[index].level === 'syntax') {
        newIndex = index;
        break;
      }

      index -= 1;
    }

    _selectedIndex = newIndex;
    handleUpdate();

    if (_NativeLogBox.default) {
      setTimeout(function () {
        if (oldIndex < 0 && newIndex >= 0) {
          _NativeLogBox.default.show();
        } else if (oldIndex >= 0 && newIndex < 0) {
          _NativeLogBox.default.hide();
        }
      }, 0);
    }
  }

  function clearWarnings() {
    var newLogs = Array.from(logs).filter(function (log) {
      return log.level !== 'warn';
    });

    if (newLogs.length !== logs.size) {
      logs = new Set(newLogs);
      setSelectedLog(-1);
      handleUpdate();
    }
  }

  function clearErrors() {
    var newLogs = Array.from(logs).filter(function (log) {
      return log.level !== 'error' && log.level !== 'fatal';
    });

    if (newLogs.length !== logs.size) {
      logs = new Set(newLogs);
      setSelectedLog(-1);
    }
  }

  function dismiss(log) {
    if (logs.has(log)) {
      logs.delete(log);
      handleUpdate();
    }
  }

  function setWarningFilter(filter) {
    warningFilter = filter;
  }

  function setAppInfo(info) {
    appInfo = info;
  }

  function getAppInfo() {
    return appInfo != null ? appInfo() : null;
  }

  function checkWarningFilter(format) {
    return warningFilter(format);
  }

  function addIgnorePatterns(patterns) {
    var newPatterns = patterns.filter(function (pattern) {
      if (pattern instanceof RegExp) {
        for (var existingPattern of ignorePatterns.entries()) {
          if (existingPattern instanceof RegExp && existingPattern.toString() === pattern.toString()) {
            return false;
          }
        }

        return true;
      }

      return !ignorePatterns.has(pattern);
    });

    if (newPatterns.length === 0) {
      return;
    }

    for (var pattern of newPatterns) {
      ignorePatterns.add(pattern);
      logs = new Set(Array.from(logs).filter(function (log) {
        return !isMessageIgnored(log.message.content);
      }));
    }

    handleUpdate();
  }

  function setDisabled(value) {
    if (value === _isDisabled) {
      return;
    }

    _isDisabled = value;
    handleUpdate();
  }

  function isDisabled() {
    return _isDisabled;
  }

  function observe(observer) {
    var subscription = {
      observer: observer
    };
    observers.add(subscription);
    observer(getNextState());
    return {
      unsubscribe: function unsubscribe() {
        observers.delete(subscription);
      }
    };
  }

  function withSubscription(WrappedComponent) {
    var LogBoxStateSubscription = function (_React$Component) {
      (0, _inherits2.default)(LogBoxStateSubscription, _React$Component);

      var _super = _createSuper(LogBoxStateSubscription);

      function LogBoxStateSubscription() {
        var _this;

        (0, _classCallCheck2.default)(this, LogBoxStateSubscription);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));
        _this.state = {
          logs: new Set(),
          isDisabled: false,
          hasError: false,
          selectedLogIndex: -1
        };

        _this._handleDismiss = function () {
          var _this$state = _this.state,
              selectedLogIndex = _this$state.selectedLogIndex,
              stateLogs = _this$state.logs;
          var logsArray = Array.from(stateLogs);

          if (selectedLogIndex != null) {
            if (logsArray.length - 1 <= 0) {
              setSelectedLog(-1);
            } else if (selectedLogIndex >= logsArray.length - 1) {
              setSelectedLog(selectedLogIndex - 1);
            }

            dismiss(logsArray[selectedLogIndex]);
          }
        };

        _this._handleMinimize = function () {
          setSelectedLog(-1);
        };

        _this._handleSetSelectedLog = function (index) {
          setSelectedLog(index);
        };

        return _this;
      }

      (0, _createClass2.default)(LogBoxStateSubscription, [{
        key: "componentDidCatch",
        value: function componentDidCatch(err, errorInfo) {
          reportLogBoxError(err, errorInfo.componentStack);
        }
      }, {
        key: "render",
        value: function render() {
          if (this.state.hasError) {
            return null;
          }

          return React.createElement(WrappedComponent, {
            logs: Array.from(this.state.logs),
            isDisabled: this.state.isDisabled,
            selectedLogIndex: this.state.selectedLogIndex,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 433,
              columnNumber: 9
            }
          });
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;

          this._subscription = observe(function (data) {
            _this2.setState(data);
          });
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (this._subscription != null) {
            this._subscription.unsubscribe();
          }
        }
      }], [{
        key: "getDerivedStateFromError",
        value: function getDerivedStateFromError() {
          return {
            hasError: true
          };
        }
      }]);
      return LogBoxStateSubscription;
    }(React.Component);

    return LogBoxStateSubscription;
  }
},64,[3,16,17,35,32,31,49,65,73,76,59,77],"node_modules/react-native/Libraries/LogBox/Data/LogBoxData.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var LogBoxSymbolication = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3], "./LogBoxSymbolication"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var LogBoxLog = function () {
    function LogBoxLog(data) {
      (0, _classCallCheck2.default)(this, LogBoxLog);
      this.symbolicated = {
        error: null,
        stack: null,
        status: 'NONE'
      };
      this.level = data.level;
      this.type = data.type;
      this.message = data.message;
      this.stack = data.stack;
      this.category = data.category;
      this.componentStack = data.componentStack;
      this.codeFrame = data.codeFrame;
      this.isComponentError = data.isComponentError;
      this.count = 1;
    }

    (0, _createClass2.default)(LogBoxLog, [{
      key: "incrementCount",
      value: function incrementCount() {
        this.count += 1;
      }
    }, {
      key: "getAvailableStack",
      value: function getAvailableStack() {
        return this.symbolicated.status === 'COMPLETE' ? this.symbolicated.stack : this.stack;
      }
    }, {
      key: "retrySymbolicate",
      value: function retrySymbolicate(callback) {
        if (this.symbolicated.status !== 'COMPLETE') {
          LogBoxSymbolication.deleteStack(this.stack);
          this.handleSymbolicate(callback);
        }
      }
    }, {
      key: "symbolicate",
      value: function symbolicate(callback) {
        if (this.symbolicated.status === 'NONE') {
          this.handleSymbolicate(callback);
        }
      }
    }, {
      key: "handleSymbolicate",
      value: function handleSymbolicate(callback) {
        var _this = this;

        if (this.symbolicated.status !== 'PENDING') {
          this.updateStatus(null, null, null, callback);
          LogBoxSymbolication.symbolicate(this.stack).then(function (data) {
            _this.updateStatus(null, data == null ? void 0 : data.stack, data == null ? void 0 : data.codeFrame, callback);
          }, function (error) {
            _this.updateStatus(error, null, null, callback);
          });
        }
      }
    }, {
      key: "updateStatus",
      value: function updateStatus(error, stack, codeFrame, callback) {
        var lastStatus = this.symbolicated.status;

        if (error != null) {
          this.symbolicated = {
            error: error,
            stack: null,
            status: 'FAILED'
          };
        } else if (stack != null) {
          if (codeFrame) {
            this.codeFrame = codeFrame;
          }

          this.symbolicated = {
            error: null,
            stack: stack,
            status: 'COMPLETE'
          };
        } else {
          this.symbolicated = {
            error: null,
            stack: null,
            status: 'PENDING'
          };
        }

        if (callback && lastStatus !== this.symbolicated.status) {
          callback(this.symbolicated.status);
        }
      }
    }]);
    return LogBoxLog;
  }();

  var _default = LogBoxLog;
  exports.default = _default;
},65,[3,16,17,66],"node_modules/react-native/Libraries/LogBox/Data/LogBoxLog.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.deleteStack = deleteStack;
  exports.symbolicate = symbolicate;

  var _symbolicateStackTrace = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../Core/Devtools/symbolicateStackTrace"));

  var cache = new Map();

  var sanitize = function sanitize(_ref) {
    var maybeStack = _ref.stack,
        codeFrame = _ref.codeFrame;

    if (!Array.isArray(maybeStack)) {
      throw new Error('Expected stack to be an array.');
    }

    var stack = [];

    for (var maybeFrame of maybeStack) {
      var collapse = false;

      if ('collapse' in maybeFrame) {
        if (typeof maybeFrame.collapse !== 'boolean') {
          throw new Error('Expected stack frame `collapse` to be a boolean.');
        }

        collapse = maybeFrame.collapse;
      }

      stack.push({
        column: maybeFrame.column,
        file: maybeFrame.file,
        lineNumber: maybeFrame.lineNumber,
        methodName: maybeFrame.methodName,
        collapse: collapse
      });
    }

    return {
      stack: stack,
      codeFrame: codeFrame
    };
  };

  function deleteStack(stack) {
    cache.delete(stack);
  }

  function symbolicate(stack) {
    var promise = cache.get(stack);

    if (promise == null) {
      promise = (0, _symbolicateStackTrace.default)(stack).then(sanitize);
      cache.set(stack, promise);
    }

    return promise;
  }
},66,[3,67],"node_modules/react-native/Libraries/LogBox/Data/LogBoxSymbolication.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _asyncToGenerator2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/asyncToGenerator"));

  var _NativeSourceCode = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../NativeModules/specs/NativeSourceCode"));

  var fetch;

  function isSourcedFromDisk(sourcePath) {
    return !/^http/.test(sourcePath) && /[\\/]/.test(sourcePath);
  }

  function symbolicateStackTrace(_x) {
    return _symbolicateStackTrace.apply(this, arguments);
  }

  function _symbolicateStackTrace() {
    _symbolicateStackTrace = (0, _asyncToGenerator2.default)(function* (stack) {
      if (!fetch) {
        fetch = global.fetch || _$$_REQUIRE(_dependencyMap[3], "../../Network/fetch").fetch;
      }

      var devServer = _$$_REQUIRE(_dependencyMap[4], "./getDevServer")();

      if (!devServer.bundleLoadedFromServer) {
        throw new Error('Bundle was not loaded from the packager');
      }

      var stackCopy = stack;

      var _NativeSourceCode$get = _NativeSourceCode.default.getConstants(),
          scriptURL = _NativeSourceCode$get.scriptURL;

      if (scriptURL) {
        var foundInternalSource = false;
        stackCopy = stack.map(function (frame) {
          if (frame.file == null) {
            return frame;
          }

          if (!foundInternalSource && isSourcedFromDisk(frame.file)) {
            return Object.assign({}, frame, {
              file: scriptURL
            });
          }

          foundInternalSource = true;
          return frame;
        });
      }

      var response = yield fetch(devServer.url + 'symbolicate', {
        method: 'POST',
        body: JSON.stringify({
          stack: stackCopy
        })
      });
      return yield response.json();
    });
    return _symbolicateStackTrace.apply(this, arguments);
  }

  module.exports = symbolicateStackTrace;
},67,[3,68,69,70,72],"node_modules/react-native/Libraries/Core/Devtools/symbolicateStackTrace.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
},68,[],"node_modules/@babel/runtime/helpers/asyncToGenerator.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.getEnforcing('SourceCode');

  exports.default = _default;
},69,[5],"node_modules/react-native/Libraries/NativeModules/specs/NativeSourceCode.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  _$$_REQUIRE(_dependencyMap[0], "whatwg-fetch");

  module.exports = {
    fetch: fetch,
    Headers: Headers,
    Request: Request,
    Response: Response
  };
},70,[71],"node_modules/react-native/Libraries/Network/fetch.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  (function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.WHATWGFetch = {});
  })(this, function (exports) {
    'use strict';

    var global = typeof globalThis !== 'undefined' && globalThis || typeof self !== 'undefined' && self || typeof global !== 'undefined' && global;
    var support = {
      searchParams: 'URLSearchParams' in global,
      iterable: 'Symbol' in global && 'iterator' in Symbol,
      blob: 'FileReader' in global && 'Blob' in global && function () {
        try {
          new Blob();
          return true;
        } catch (e) {
          return false;
        }
      }(),
      formData: 'FormData' in global,
      arrayBuffer: 'ArrayBuffer' in global
    };

    function isDataView(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj);
    }

    if (support.arrayBuffer) {
      var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

      var isArrayBufferView = ArrayBuffer.isView || function (obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
      };
    }

    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name);
      }

      if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
        throw new TypeError('Invalid character in header field name: "' + name + '"');
      }

      return name.toLowerCase();
    }

    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value);
      }

      return value;
    }

    function iteratorFor(items) {
      var iterator = {
        next: function next() {
          var value = items.shift();
          return {
            done: value === undefined,
            value: value
          };
        }
      };

      if (support.iterable) {
        iterator[Symbol.iterator] = function () {
          return iterator;
        };
      }

      return iterator;
    }

    function Headers(headers) {
      this.map = {};

      if (headers instanceof Headers) {
        headers.forEach(function (value, name) {
          this.append(name, value);
        }, this);
      } else if (Array.isArray(headers)) {
        headers.forEach(function (header) {
          this.append(header[0], header[1]);
        }, this);
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function (name) {
          this.append(name, headers[name]);
        }, this);
      }
    }

    Headers.prototype.append = function (name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var oldValue = this.map[name];
      this.map[name] = oldValue ? oldValue + ', ' + value : value;
    };

    Headers.prototype['delete'] = function (name) {
      delete this.map[normalizeName(name)];
    };

    Headers.prototype.get = function (name) {
      name = normalizeName(name);
      return this.has(name) ? this.map[name] : null;
    };

    Headers.prototype.has = function (name) {
      return this.map.hasOwnProperty(normalizeName(name));
    };

    Headers.prototype.set = function (name, value) {
      this.map[normalizeName(name)] = normalizeValue(value);
    };

    Headers.prototype.forEach = function (callback, thisArg) {
      for (var name in this.map) {
        if (this.map.hasOwnProperty(name)) {
          callback.call(thisArg, this.map[name], name, this);
        }
      }
    };

    Headers.prototype.keys = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push(name);
      });
      return iteratorFor(items);
    };

    Headers.prototype.values = function () {
      var items = [];
      this.forEach(function (value) {
        items.push(value);
      });
      return iteratorFor(items);
    };

    Headers.prototype.entries = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items);
    };

    if (support.iterable) {
      Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
    }

    function consumed(body) {
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'));
      }

      body.bodyUsed = true;
    }

    function fileReaderReady(reader) {
      return new Promise(function (resolve, reject) {
        reader.onload = function () {
          resolve(reader.result);
        };

        reader.onerror = function () {
          reject(reader.error);
        };
      });
    }

    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise;
    }

    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsText(blob);
      return promise;
    }

    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);

      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i]);
      }

      return chars.join('');
    }

    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0);
      } else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer;
      }
    }

    function Body() {
      this.bodyUsed = false;

      this._initBody = function (body) {
        this.bodyUsed = this.bodyUsed;
        this._bodyInit = body;

        if (!body) {
          this._bodyText = '';
        } else if (typeof body === 'string') {
          this._bodyText = body;
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body;
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body;
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString();
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer);
          this._bodyInit = new Blob([this._bodyArrayBuffer]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body);
        } else {
          this._bodyText = body = Object.prototype.toString.call(body);
        }

        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8');
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type);
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          }
        }
      };

      if (support.blob) {
        this.blob = function () {
          var rejected = consumed(this);

          if (rejected) {
            return rejected;
          }

          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]));
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob');
          } else {
            return Promise.resolve(new Blob([this._bodyText]));
          }
        };

        this.arrayBuffer = function () {
          if (this._bodyArrayBuffer) {
            var isConsumed = consumed(this);

            if (isConsumed) {
              return isConsumed;
            }

            if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
              return Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength));
            } else {
              return Promise.resolve(this._bodyArrayBuffer);
            }
          } else {
            return this.blob().then(readBlobAsArrayBuffer);
          }
        };
      }

      this.text = function () {
        var rejected = consumed(this);

        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text');
        } else {
          return Promise.resolve(this._bodyText);
        }
      };

      if (support.formData) {
        this.formData = function () {
          return this.text().then(decode);
        };
      }

      this.json = function () {
        return this.text().then(JSON.parse);
      };

      return this;
    }

    var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return methods.indexOf(upcased) > -1 ? upcased : method;
    }

    function Request(input, options) {
      if (!(this instanceof Request)) {
        throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
      }

      options = options || {};
      var body = options.body;

      if (input instanceof Request) {
        if (input.bodyUsed) {
          throw new TypeError('Already read');
        }

        this.url = input.url;
        this.credentials = input.credentials;

        if (!options.headers) {
          this.headers = new Headers(input.headers);
        }

        this.method = input.method;
        this.mode = input.mode;
        this.signal = input.signal;

        if (!body && input._bodyInit != null) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      } else {
        this.url = String(input);
      }

      this.credentials = options.credentials || this.credentials || 'same-origin';

      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers);
      }

      this.method = normalizeMethod(options.method || this.method || 'GET');
      this.mode = options.mode || this.mode || null;
      this.signal = options.signal || this.signal;
      this.referrer = null;

      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests');
      }

      this._initBody(body);

      if (this.method === 'GET' || this.method === 'HEAD') {
        if (options.cache === 'no-store' || options.cache === 'no-cache') {
          var reParamSearch = /([?&])_=[^&]*/;

          if (reParamSearch.test(this.url)) {
            this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
          } else {
            var reQueryString = /\?/;
            this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
          }
        }
      }
    }

    Request.prototype.clone = function () {
      return new Request(this, {
        body: this._bodyInit
      });
    };

    function decode(body) {
      var form = new FormData();
      body.trim().split('&').forEach(function (bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
      return form;
    }

    function parseHeaders(rawHeaders) {
      var headers = new Headers();
      var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
      preProcessedHeaders.split('\r').map(function (header) {
        return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header;
      }).forEach(function (line) {
        var parts = line.split(':');
        var key = parts.shift().trim();

        if (key) {
          var value = parts.join(':').trim();
          headers.append(key, value);
        }
      });
      return headers;
    }

    Body.call(Request.prototype);

    function Response(bodyInit, options) {
      if (!(this instanceof Response)) {
        throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
      }

      if (!options) {
        options = {};
      }

      this.type = 'default';
      this.status = options.status === undefined ? 200 : options.status;
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
      this.headers = new Headers(options.headers);
      this.url = options.url || '';

      this._initBody(bodyInit);
    }

    Body.call(Response.prototype);

    Response.prototype.clone = function () {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      });
    };

    Response.error = function () {
      var response = new Response(null, {
        status: 0,
        statusText: ''
      });
      response.type = 'error';
      return response;
    };

    var redirectStatuses = [301, 302, 303, 307, 308];

    Response.redirect = function (url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code');
      }

      return new Response(null, {
        status: status,
        headers: {
          location: url
        }
      });
    };

    exports.DOMException = global.DOMException;

    try {
      new exports.DOMException();
    } catch (err) {
      exports.DOMException = function (message, name) {
        this.message = message;
        this.name = name;
        var error = Error(message);
        this.stack = error.stack;
      };

      exports.DOMException.prototype = Object.create(Error.prototype);
      exports.DOMException.prototype.constructor = exports.DOMException;
    }

    function fetch(input, init) {
      return new Promise(function (resolve, reject) {
        var request = new Request(input, init);

        if (request.signal && request.signal.aborted) {
          return reject(new exports.DOMException('Aborted', 'AbortError'));
        }

        var xhr = new XMLHttpRequest();

        function abortXhr() {
          xhr.abort();
        }

        xhr.onload = function () {
          var options = {
            status: xhr.status,
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          };
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
          var body = 'response' in xhr ? xhr.response : xhr.responseText;
          setTimeout(function () {
            resolve(new Response(body, options));
          }, 0);
        };

        xhr.onerror = function () {
          setTimeout(function () {
            reject(new TypeError('Network request failed'));
          }, 0);
        };

        xhr.ontimeout = function () {
          setTimeout(function () {
            reject(new TypeError('Network request failed'));
          }, 0);
        };

        xhr.onabort = function () {
          setTimeout(function () {
            reject(new exports.DOMException('Aborted', 'AbortError'));
          }, 0);
        };

        function fixUrl(url) {
          try {
            return url === '' && global.location.href ? global.location.href : url;
          } catch (e) {
            return url;
          }
        }

        xhr.open(request.method, fixUrl(request.url), true);

        if (request.credentials === 'include') {
          xhr.withCredentials = true;
        } else if (request.credentials === 'omit') {
          xhr.withCredentials = false;
        }

        if ('responseType' in xhr) {
          if (support.blob) {
            xhr.responseType = 'blob';
          } else if (support.arrayBuffer && request.headers.get('Content-Type') && request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1) {
            xhr.responseType = 'arraybuffer';
          }
        }

        if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {
          Object.getOwnPropertyNames(init.headers).forEach(function (name) {
            xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
          });
        } else {
          request.headers.forEach(function (value, name) {
            xhr.setRequestHeader(name, value);
          });
        }

        if (request.signal) {
          request.signal.addEventListener('abort', abortXhr);

          xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
              request.signal.removeEventListener('abort', abortXhr);
            }
          };
        }

        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
      });
    }

    fetch.polyfill = true;

    if (!global.fetch) {
      global.fetch = fetch;
      global.Headers = Headers;
      global.Request = Request;
      global.Response = Response;
    }

    exports.Headers = Headers;
    exports.Request = Request;
    exports.Response = Response;
    exports.fetch = fetch;
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
  });
},71,[],"node_modules/whatwg-fetch/dist/fetch.umd.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeSourceCode = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../NativeModules/specs/NativeSourceCode"));

  var _cachedDevServerURL;

  var FALLBACK = 'http://localhost:8081/';

  function getDevServer() {
    if (_cachedDevServerURL === undefined) {
      var match = _NativeSourceCode.default.getConstants().scriptURL.match(/^https?:\/\/.*?\//);

      _cachedDevServerURL = match ? match[0] : null;
    }

    return {
      url: _cachedDevServerURL || FALLBACK,
      bundleLoadedFromServer: _cachedDevServerURL !== null
    };
  }

  module.exports = getDevServer;
},72,[3,69],"node_modules/react-native/Libraries/Core/Devtools/getDevServer.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function convertHermesStack(stack) {
    var frames = [];

    for (var entry of stack.entries) {
      if (entry.type !== 'FRAME') {
        continue;
      }

      var location = entry.location,
          functionName = entry.functionName;

      if (location.type === 'NATIVE') {
        continue;
      }

      frames.push({
        methodName: functionName,
        file: location.sourceUrl,
        lineNumber: location.line1Based,
        column: location.type === 'SOURCE' ? location.column1Based - 1 : location.virtualOffset0Based
      });
    }

    return frames;
  }

  function parseErrorStack(e) {
    if (!e || !e.stack) {
      return [];
    }

    var stacktraceParser = _$$_REQUIRE(_dependencyMap[0], "stacktrace-parser");

    var stack = Array.isArray(e.stack) ? e.stack : global.HermesInternal ? convertHermesStack(_$$_REQUIRE(_dependencyMap[1], "./parseHermesStack")(e.stack)) : stacktraceParser.parse(e.stack).map(function (frame) {
      return Object.assign({}, frame, {
        column: frame.column != null ? frame.column - 1 : null
      });
    });
    return stack;
  }

  module.exports = parseErrorStack;
},73,[74,75],"node_modules/react-native/Libraries/Core/Devtools/parseErrorStack.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  var UNKNOWN_FUNCTION = '<unknown>';

  function parse(stackString) {
    var lines = stackString.split('\n');
    return lines.reduce(function (stack, line) {
      var parseResult = parseChrome(line) || parseWinjs(line) || parseGecko(line) || parseNode(line) || parseJSC(line);

      if (parseResult) {
        stack.push(parseResult);
      }

      return stack;
    }, []);
  }

  var chromeRe = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
  var chromeEvalRe = /\((\S*)(?::(\d+))(?::(\d+))\)/;

  function parseChrome(line) {
    var parts = chromeRe.exec(line);

    if (!parts) {
      return null;
    }

    var isNative = parts[2] && parts[2].indexOf('native') === 0;
    var isEval = parts[2] && parts[2].indexOf('eval') === 0;
    var submatch = chromeEvalRe.exec(parts[2]);

    if (isEval && submatch != null) {
      parts[2] = submatch[1];
      parts[3] = submatch[2];
      parts[4] = submatch[3];
    }

    return {
      file: !isNative ? parts[2] : null,
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: isNative ? [parts[2]] : [],
      lineNumber: parts[3] ? +parts[3] : null,
      column: parts[4] ? +parts[4] : null
    };
  }

  var winjsRe = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i;

  function parseWinjs(line) {
    var parts = winjsRe.exec(line);

    if (!parts) {
      return null;
    }

    return {
      file: parts[2],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: [],
      lineNumber: +parts[3],
      column: parts[4] ? +parts[4] : null
    };
  }

  var geckoRe = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\[native).*?|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i;
  var geckoEvalRe = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;

  function parseGecko(line) {
    var parts = geckoRe.exec(line);

    if (!parts) {
      return null;
    }

    var isEval = parts[3] && parts[3].indexOf(' > eval') > -1;
    var submatch = geckoEvalRe.exec(parts[3]);

    if (isEval && submatch != null) {
      parts[3] = submatch[1];
      parts[4] = submatch[2];
      parts[5] = null;
    }

    return {
      file: parts[3],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: parts[2] ? parts[2].split(',') : [],
      lineNumber: parts[4] ? +parts[4] : null,
      column: parts[5] ? +parts[5] : null
    };
  }

  var javaScriptCoreRe = /^\s*(?:([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i;

  function parseJSC(line) {
    var parts = javaScriptCoreRe.exec(line);

    if (!parts) {
      return null;
    }

    return {
      file: parts[3],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: [],
      lineNumber: +parts[4],
      column: parts[5] ? +parts[5] : null
    };
  }

  var nodeRe = /^\s*at (?:((?:\[object object\])?[^\\/]+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i;

  function parseNode(line) {
    var parts = nodeRe.exec(line);

    if (!parts) {
      return null;
    }

    return {
      file: parts[2],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: [],
      lineNumber: +parts[3],
      column: parts[4] ? +parts[4] : null
    };
  }

  exports.parse = parse;
},74,[],"node_modules/stacktrace-parser/dist/stack-trace-parser.cjs.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var RE_FRAME = /^ {4}at (.+?)(?: \((native)\)?| \((address at )?(.+?):(\d+):(\d+)\))$/;
  var RE_SKIPPED = /^ {4}... skipping (\d+) frames$/;

  function parseLine(line) {
    var asFrame = line.match(RE_FRAME);

    if (asFrame) {
      return {
        type: 'FRAME',
        functionName: asFrame[1],
        location: asFrame[2] === 'native' ? {
          type: 'NATIVE'
        } : asFrame[3] === 'address at ' ? {
          type: 'BYTECODE',
          sourceUrl: asFrame[4],
          line1Based: Number.parseInt(asFrame[5], 10),
          virtualOffset0Based: Number.parseInt(asFrame[6], 10)
        } : {
          type: 'SOURCE',
          sourceUrl: asFrame[4],
          line1Based: Number.parseInt(asFrame[5], 10),
          column1Based: Number.parseInt(asFrame[6], 10)
        }
      };
    }

    var asSkipped = line.match(RE_SKIPPED);

    if (asSkipped) {
      return {
        type: 'SKIPPED',
        count: Number.parseInt(asSkipped[1], 10)
      };
    }
  }

  module.exports = function parseHermesStack(stack) {
    var lines = stack.split(/\n/);
    var entries = [];
    var lastMessageLine = -1;

    for (var i = 0; i < lines.length; ++i) {
      var line = lines[i];

      if (!line) {
        continue;
      }

      var entry = parseLine(line);

      if (entry) {
        entries.push(entry);
        continue;
      }

      lastMessageLine = i;
      entries = [];
    }

    var message = lines.slice(0, lastMessageLine + 1).join('\n');
    return {
      message: message,
      entries: entries
    };
  };
},75,[],"node_modules/react-native/Libraries/Core/Devtools/parseHermesStack.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react-native/Libraries/TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('LogBox');

  exports.default = _default;
},76,[5],"node_modules/react-native/Libraries/NativeModules/specs/NativeLogBox.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.parseComponentStack = parseComponentStack;
  exports.parseInterpolation = parseInterpolation;
  exports.parseLogBoxException = parseLogBoxException;
  exports.parseLogBoxLog = parseLogBoxLog;

  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/slicedToArray"));

  var _toConsumableArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/toConsumableArray"));

  var _UTFSequence = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../UTFSequence"));

  var _stringifySafe = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../Utilities/stringifySafe"));

  var BABEL_TRANSFORM_ERROR_FORMAT = /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \((\d+):(\d+)\)\n\n([\s\S]+)/;
  var BABEL_CODE_FRAME_ERROR_FORMAT = /^(?:TransformError )?(?:(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*):? (?:(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?)(\/(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*): ((?:[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+?)\n([ >]{2}[\t-\r 0-9\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+ \|(?:[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+|\x1B(?:[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)/;
  var METRO_ERROR_FORMAT = /^(?:InternalError Metro has encountered an error:) ((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*): ((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*) \(([0-9]+):([0-9]+)\)\n\n((?:[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)/;
  var SUBSTITUTION = _UTFSequence.default.BOM + '%s';

  function parseInterpolation(args) {
    var categoryParts = [];
    var contentParts = [];
    var substitutionOffsets = [];
    var remaining = (0, _toConsumableArray2.default)(args);

    if (typeof remaining[0] === 'string') {
      var formatString = String(remaining.shift());
      var formatStringParts = formatString.split('%s');
      var substitutionCount = formatStringParts.length - 1;
      var substitutions = remaining.splice(0, substitutionCount);
      var categoryString = '';
      var contentString = '';
      var substitutionIndex = 0;

      for (var formatStringPart of formatStringParts) {
        categoryString += formatStringPart;
        contentString += formatStringPart;

        if (substitutionIndex < substitutionCount) {
          if (substitutionIndex < substitutions.length) {
            var substitution = typeof substitutions[substitutionIndex] === 'string' ? substitutions[substitutionIndex] : (0, _stringifySafe.default)(substitutions[substitutionIndex]);
            substitutionOffsets.push({
              length: substitution.length,
              offset: contentString.length
            });
            categoryString += SUBSTITUTION;
            contentString += substitution;
          } else {
            substitutionOffsets.push({
              length: 2,
              offset: contentString.length
            });
            categoryString += '%s';
            contentString += '%s';
          }

          substitutionIndex++;
        }
      }

      categoryParts.push(categoryString);
      contentParts.push(contentString);
    }

    var remainingArgs = remaining.map(function (arg) {
      return typeof arg === 'string' ? arg : (0, _stringifySafe.default)(arg);
    });
    categoryParts.push.apply(categoryParts, (0, _toConsumableArray2.default)(remainingArgs));
    contentParts.push.apply(contentParts, (0, _toConsumableArray2.default)(remainingArgs));
    return {
      category: categoryParts.join(' '),
      message: {
        content: contentParts.join(' '),
        substitutions: substitutionOffsets
      }
    };
  }

  function parseComponentStack(message) {
    return message.split(/\n {4}in /g).map(function (s) {
      if (!s) {
        return null;
      }

      var match = s.match(/(.*) \(at (.*\.js):([\d]+)\)/);

      if (!match) {
        return null;
      }

      var _match$slice = match.slice(1),
          _match$slice2 = (0, _slicedToArray2.default)(_match$slice, 3),
          content = _match$slice2[0],
          fileName = _match$slice2[1],
          row = _match$slice2[2];

      return {
        content: content,
        fileName: fileName,
        location: {
          column: -1,
          row: parseInt(row, 10)
        }
      };
    }).filter(Boolean);
  }

  function parseLogBoxException(error) {
    var message = error.originalMessage != null ? error.originalMessage : 'Unknown';
    var metroInternalError = message.match(METRO_ERROR_FORMAT);

    if (metroInternalError) {
      var _metroInternalError$s = metroInternalError.slice(1),
          _metroInternalError$s2 = (0, _slicedToArray2.default)(_metroInternalError$s, 5),
          content = _metroInternalError$s2[0],
          fileName = _metroInternalError$s2[1],
          row = _metroInternalError$s2[2],
          column = _metroInternalError$s2[3],
          codeFrame = _metroInternalError$s2[4];

      return {
        level: 'fatal',
        type: 'Metro Error',
        stack: [],
        isComponentError: false,
        componentStack: [],
        codeFrame: {
          fileName: fileName,
          location: {
            row: parseInt(row, 10),
            column: parseInt(column, 10)
          },
          content: codeFrame
        },
        message: {
          content: content,
          substitutions: []
        },
        category: fileName + "-" + row + "-" + column
      };
    }

    var babelTransformError = message.match(BABEL_TRANSFORM_ERROR_FORMAT);

    if (babelTransformError) {
      var _babelTransformError$ = babelTransformError.slice(1),
          _babelTransformError$2 = (0, _slicedToArray2.default)(_babelTransformError$, 5),
          _fileName = _babelTransformError$2[0],
          _content = _babelTransformError$2[1],
          _row = _babelTransformError$2[2],
          _column = _babelTransformError$2[3],
          _codeFrame = _babelTransformError$2[4];

      return {
        level: 'syntax',
        stack: [],
        isComponentError: false,
        componentStack: [],
        codeFrame: {
          fileName: _fileName,
          location: {
            row: parseInt(_row, 10),
            column: parseInt(_column, 10)
          },
          content: _codeFrame
        },
        message: {
          content: _content,
          substitutions: []
        },
        category: _fileName + "-" + _row + "-" + _column
      };
    }

    var babelCodeFrameError = message.match(BABEL_CODE_FRAME_ERROR_FORMAT);

    if (babelCodeFrameError) {
      var _babelCodeFrameError$ = babelCodeFrameError.slice(1),
          _babelCodeFrameError$2 = (0, _slicedToArray2.default)(_babelCodeFrameError$, 3),
          _fileName2 = _babelCodeFrameError$2[0],
          _content2 = _babelCodeFrameError$2[1],
          _codeFrame2 = _babelCodeFrameError$2[2];

      return {
        level: 'syntax',
        stack: [],
        isComponentError: false,
        componentStack: [],
        codeFrame: {
          fileName: _fileName2,
          location: null,
          content: _codeFrame2
        },
        message: {
          content: _content2,
          substitutions: []
        },
        category: _fileName2 + "-" + 1 + "-" + 1
      };
    }

    if (message.match(/^TransformError /)) {
      return {
        level: 'syntax',
        stack: error.stack,
        isComponentError: error.isComponentError,
        componentStack: [],
        message: {
          content: message,
          substitutions: []
        },
        category: message
      };
    }

    var componentStack = error.componentStack;

    if (error.isFatal || error.isComponentError) {
      return Object.assign({
        level: 'fatal',
        stack: error.stack,
        isComponentError: error.isComponentError,
        componentStack: componentStack != null ? parseComponentStack(componentStack) : []
      }, parseInterpolation([message]));
    }

    if (componentStack != null) {
      return Object.assign({
        level: 'error',
        stack: error.stack,
        isComponentError: error.isComponentError,
        componentStack: parseComponentStack(componentStack)
      }, parseInterpolation([message]));
    }

    return Object.assign({
      level: 'error',
      stack: error.stack,
      isComponentError: error.isComponentError
    }, parseLogBoxLog([message]));
  }

  function parseLogBoxLog(args) {
    var message = args[0];
    var argsWithoutComponentStack = [];
    var componentStack = [];

    if (typeof message === 'string' && message.slice(-2) === '%s' && args.length > 0) {
      var lastArg = args[args.length - 1];

      if (typeof lastArg === 'string' && /\s{4}in/.test(lastArg)) {
        argsWithoutComponentStack = args.slice(0, -1);
        argsWithoutComponentStack[0] = message.slice(0, -2);
        componentStack = parseComponentStack(lastArg);
      }
    }

    if (componentStack.length === 0) {
      for (var arg of args) {
        if (typeof arg === 'string' && /\n {4}in /.exec(arg)) {
          var messageEndIndex = arg.indexOf('\n    in ');

          if (messageEndIndex > 0) {
            argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));
          }

          componentStack = parseComponentStack(arg);
        } else {
          argsWithoutComponentStack.push(arg);
        }
      }
    }

    return Object.assign({}, parseInterpolation(argsWithoutComponentStack), {
      componentStack: componentStack
    });
  }
},77,[3,8,25,78,21],"node_modules/react-native/Libraries/LogBox/Data/parseLogBoxLog.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var UTFSequence = _$$_REQUIRE(_dependencyMap[0], "./Utilities/deepFreezeAndThrowOnMutationInDev")({
    BOM: "\uFEFF",
    BULLET: "\u2022",
    BULLET_SP: "\xA0\u2022\xA0",
    MIDDOT: "\xB7",
    MIDDOT_SP: "\xA0\xB7\xA0",
    MIDDOT_KATAKANA: "\u30FB",
    MDASH: "\u2014",
    MDASH_SP: "\xA0\u2014\xA0",
    NDASH: "\u2013",
    NDASH_SP: "\xA0\u2013\xA0",
    NBSP: "\xA0",
    PIZZA: "\uD83C\uDF55",
    TRIANGLE_LEFT: "\u25C0",
    TRIANGLE_RIGHT: "\u25B6"
  });

  module.exports = UTFSequence;
},78,[22],"node_modules/react-native/Libraries/UTFSequence.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var NativeModule = TurboModuleRegistry.getEnforcing('ExceptionsManager');
  var ExceptionsManager = {
    reportFatalException: function reportFatalException(message, stack, exceptionId) {
      NativeModule.reportFatalException(message, stack, exceptionId);
    },
    reportSoftException: function reportSoftException(message, stack, exceptionId) {
      NativeModule.reportSoftException(message, stack, exceptionId);
    },
    updateExceptionMessage: function updateExceptionMessage(message, stack, exceptionId) {
      NativeModule.updateExceptionMessage(message, stack, exceptionId);
    },
    dismissRedbox: function dismissRedbox() {
      if ("android" !== 'ios' && NativeModule.dismissRedbox) {
        NativeModule.dismissRedbox();
      }
    },
    reportException: function reportException(data) {
      if (NativeModule.reportException) {
        NativeModule.reportException(data);
        return;
      }

      if (data.isFatal) {
        ExceptionsManager.reportFatalException(data.message, data.stack, data.id);
      } else {
        ExceptionsManager.reportSoftException(data.message, data.stack, data.id);
      }
    }
  };
  var _default = ExceptionsManager;
  exports.default = _default;
},79,[5],"node_modules/react-native/Libraries/Core/NativeExceptionsManager.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativePlatformConstantsAndroid = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./NativePlatformConstantsAndroid"));

  var Platform = {
    __constants: null,
    OS: 'android',

    get Version() {
      return this.constants.Version;
    },

    get constants() {
      if (this.__constants == null) {
        this.__constants = _NativePlatformConstantsAndroid.default.getConstants();
      }

      return this.__constants;
    },

    get isTesting() {
      if (__DEV__) {
        return this.constants.isTesting;
      }

      return false;
    },

    get isTV() {
      return this.constants.uiMode === 'tv';
    },

    select: function select(spec) {
      return 'android' in spec ? spec.android : 'native' in spec ? spec.native : spec.default;
    }
  };
  module.exports = Platform;
},80,[3,81],"node_modules/react-native/Libraries/Utilities/Platform.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.getEnforcing('PlatformConstants');

  exports.default = _default;
},81,[5],"node_modules/react-native/Libraries/Utilities/NativePlatformConstantsAndroid.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var RCTEventEmitter = {
    register: function register(eventEmitter) {
      _$$_REQUIRE(_dependencyMap[0], "../BatchedBridge/BatchedBridge").registerCallableModule('RCTEventEmitter', eventEmitter);
    }
  };
  module.exports = RCTEventEmitter;
},82,[14],"node_modules/react-native/Libraries/EventEmitter/RCTEventEmitter.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var customBubblingEventTypes = {};
  var customDirectEventTypes = {};
  exports.customBubblingEventTypes = customBubblingEventTypes;
  exports.customDirectEventTypes = customDirectEventTypes;
  var viewConfigCallbacks = new Map();
  var viewConfigs = new Map();

  function processEventTypes(viewConfig) {
    var bubblingEventTypes = viewConfig.bubblingEventTypes,
        directEventTypes = viewConfig.directEventTypes;

    if (__DEV__) {
      if (bubblingEventTypes != null && directEventTypes != null) {
        for (var topLevelType in directEventTypes) {
          _$$_REQUIRE(_dependencyMap[0], "invariant")(bubblingEventTypes[topLevelType] == null, 'Event cannot be both direct and bubbling: %s', topLevelType);
        }
      }
    }

    if (bubblingEventTypes != null) {
      for (var _topLevelType in bubblingEventTypes) {
        if (customBubblingEventTypes[_topLevelType] == null) {
          customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
        }
      }
    }

    if (directEventTypes != null) {
      for (var _topLevelType2 in directEventTypes) {
        if (customDirectEventTypes[_topLevelType2] == null) {
          customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
        }
      }
    }
  }

  exports.register = function (name, callback) {
    _$$_REQUIRE(_dependencyMap[0], "invariant")(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);

    _$$_REQUIRE(_dependencyMap[0], "invariant")(typeof callback === 'function', 'View config getter callback for component `%s` must be a function (received `%s`)', name, callback === null ? 'null' : typeof callback);

    viewConfigCallbacks.set(name, callback);
    return name;
  };

  exports.get = function (name) {
    var viewConfig;

    if (!viewConfigs.has(name)) {
      var callback = viewConfigCallbacks.get(name);

      if (typeof callback !== 'function') {
        _$$_REQUIRE(_dependencyMap[0], "invariant")(false, 'View config getter callback for component `%s` must be a function (received `%s`).%s', name, callback === null ? 'null' : typeof callback, typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');
      }

      viewConfig = callback();
      processEventTypes(viewConfig);
      viewConfigs.set(name, viewConfig);
      viewConfigCallbacks.set(name, null);
    } else {
      viewConfig = viewConfigs.get(name);
    }

    _$$_REQUIRE(_dependencyMap[0], "invariant")(viewConfig, 'View config not found for name %s', name);

    return viewConfig;
  };
},83,[6],"node_modules/react-native/Libraries/Renderer/shims/ReactNativeViewConfigRegistry.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _$$_REQUIRE(_dependencyMap[0], "react");

  var currentlyFocusedInputRef = null;
  var inputs = new Set();

  function currentlyFocusedInput() {
    return currentlyFocusedInputRef;
  }

  function currentlyFocusedField() {
    if (__DEV__) {
      console.error('currentlyFocusedField is deprecated and will be removed in a future release. Use currentlyFocusedInput');
    }

    return _$$_REQUIRE(_dependencyMap[1], "../../Renderer/shims/ReactNative").findNodeHandle(currentlyFocusedInputRef);
  }

  function focusInput(textField) {
    if (currentlyFocusedInputRef !== textField && textField != null) {
      currentlyFocusedInputRef = textField;
    }
  }

  function blurInput(textField) {
    if (currentlyFocusedInputRef === textField && textField != null) {
      currentlyFocusedInputRef = null;
    }
  }

  function focusField(textFieldID) {
    if (__DEV__) {
      console.error('focusField no longer works. Use focusInput');
    }

    return;
  }

  function blurField(textFieldID) {
    if (__DEV__) {
      console.error('blurField no longer works. Use blurInput');
    }

    return;
  }

  function focusTextInput(textField) {
    if (typeof textField === 'number') {
      if (__DEV__) {
        console.error('focusTextInput must be called with a host component. Passing a react tag is deprecated.');
      }

      return;
    }

    if (currentlyFocusedInputRef !== textField && textField != null) {
      focusInput(textField);

      if ("android" === 'ios') {
        _$$_REQUIRE(_dependencyMap[2], "../../Components/TextInput/RCTSingelineTextInputNativeComponent").Commands.focus(textField);
      } else if ("android" === 'android') {
        _$$_REQUIRE(_dependencyMap[3], "../../Components/TextInput/AndroidTextInputNativeComponent").Commands.focus(textField);
      }
    }
  }

  function blurTextInput(textField) {
    if (typeof textField === 'number') {
      if (__DEV__) {
        console.error('focusTextInput must be called with a host component. Passing a react tag is deprecated.');
      }

      return;
    }

    if (currentlyFocusedInputRef === textField && textField != null) {
      blurInput(textField);

      if ("android" === 'ios') {
        _$$_REQUIRE(_dependencyMap[2], "../../Components/TextInput/RCTSingelineTextInputNativeComponent").Commands.blur(textField);
      } else if ("android" === 'android') {
        _$$_REQUIRE(_dependencyMap[3], "../../Components/TextInput/AndroidTextInputNativeComponent").Commands.blur(textField);
      }
    }
  }

  function registerInput(textField) {
    if (typeof textField === 'number') {
      if (__DEV__) {
        console.error('registerInput must be called with a host component. Passing a react tag is deprecated.');
      }

      return;
    }

    inputs.add(textField);
  }

  function unregisterInput(textField) {
    if (typeof textField === 'number') {
      if (__DEV__) {
        console.error('unregisterInput must be called with a host component. Passing a react tag is deprecated.');
      }

      return;
    }

    inputs.delete(textField);
  }

  function isTextInput(textField) {
    if (typeof textField === 'number') {
      if (__DEV__) {
        console.error('isTextInput must be called with a host component. Passing a react tag is deprecated.');
      }

      return false;
    }

    return inputs.has(textField);
  }

  module.exports = {
    currentlyFocusedInput: currentlyFocusedInput,
    focusInput: focusInput,
    blurInput: blurInput,
    currentlyFocusedField: currentlyFocusedField,
    focusField: focusField,
    blurField: blurField,
    focusTextInput: focusTextInput,
    blurTextInput: blurTextInput,
    registerInput: registerInput,
    unregisterInput: unregisterInput,
    isTextInput: isTextInput
  };
},84,[49,85,199,202],"node_modules/react-native/Libraries/Components/TextInput/TextInputState.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactNative;

  if (__DEV__) {
    ReactNative = _$$_REQUIRE(_dependencyMap[0], "../implementations/ReactNativeRenderer-dev");
  } else {
    ReactNative = _$$_REQUIRE(_dependencyMap[1], "../implementations/ReactNativeRenderer-prod");
  }

  module.exports = ReactNative;
},85,[86,198],"node_modules/react-native/Libraries/Renderer/shims/ReactNative.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (__DEV__) {
    (function () {
      "use strict";

      var React = _$$_REQUIRE(_dependencyMap[0], "react");

      _$$_REQUIRE(_dependencyMap[1], "react-native/Libraries/ReactPrivate/ReactNativePrivateInitializeCore");

      var ReactNativePrivateInterface = _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface");

      var Scheduler = _$$_REQUIRE(_dependencyMap[3], "scheduler");

      var tracing = _$$_REQUIRE(_dependencyMap[4], "scheduler/tracing");

      var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

      if (!ReactSharedInternals.hasOwnProperty("ReactCurrentDispatcher")) {
        ReactSharedInternals.ReactCurrentDispatcher = {
          current: null
        };
      }

      if (!ReactSharedInternals.hasOwnProperty("ReactCurrentBatchConfig")) {
        ReactSharedInternals.ReactCurrentBatchConfig = {
          suspense: null
        };
      }

      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          printWarning("warn", format, args);
        }
      }

      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          printWarning("error", format, args);
        }
      }

      function printWarning(level, format, args) {
        {
          var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === "string" && args[args.length - 1].indexOf("\n    in") === 0;

          if (!hasExistingStack) {
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();

            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
          }

          var argsWithFormat = args.map(function (item) {
            return "" + item;
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);

          try {
            var argIndex = 0;
            var message = "Warning: " + format.replace(/%s/g, function () {
              return args[argIndex++];
            });
            throw new Error(message);
          } catch (x) {}
        }
      }

      var FunctionComponent = 0;
      var ClassComponent = 1;
      var IndeterminateComponent = 2;
      var HostRoot = 3;
      var HostPortal = 4;
      var HostComponent = 5;
      var HostText = 6;
      var Fragment = 7;
      var Mode = 8;
      var ContextConsumer = 9;
      var ContextProvider = 10;
      var ForwardRef = 11;
      var Profiler = 12;
      var SuspenseComponent = 13;
      var MemoComponent = 14;
      var SimpleMemoComponent = 15;
      var LazyComponent = 16;
      var IncompleteClassComponent = 17;
      var DehydratedFragment = 18;
      var SuspenseListComponent = 19;
      var FundamentalComponent = 20;
      var ScopeComponent = 21;
      var Block = 22;

      function getParent(inst) {
        do {
          inst = inst.return;
        } while (inst && inst.tag !== HostComponent);

        if (inst) {
          return inst;
        }

        return null;
      }

      function getLowestCommonAncestor(instA, instB) {
        var depthA = 0;

        for (var tempA = instA; tempA; tempA = getParent(tempA)) {
          depthA++;
        }

        var depthB = 0;

        for (var tempB = instB; tempB; tempB = getParent(tempB)) {
          depthB++;
        }

        while (depthA - depthB > 0) {
          instA = getParent(instA);
          depthA--;
        }

        while (depthB - depthA > 0) {
          instB = getParent(instB);
          depthB--;
        }

        var depth = depthA;

        while (depth--) {
          if (instA === instB || instA === instB.alternate) {
            return instA;
          }

          instA = getParent(instA);
          instB = getParent(instB);
        }

        return null;
      }

      function isAncestor(instA, instB) {
        while (instB) {
          if (instA === instB || instA === instB.alternate) {
            return true;
          }

          instB = getParent(instB);
        }

        return false;
      }

      function getParentInstance(inst) {
        return getParent(inst);
      }

      function traverseTwoPhase(inst, fn, arg) {
        var path = [];

        while (inst) {
          path.push(inst);
          inst = getParent(inst);
        }

        var i;

        for (i = path.length; i-- > 0;) {
          fn(path[i], "captured", arg);
        }

        for (i = 0; i < path.length; i++) {
          fn(path[i], "bubbled", arg);
        }
      }

      var invokeGuardedCallbackImpl = function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);

        try {
          func.apply(context, funcArgs);
        } catch (error) {
          this.onError(error);
        }
      };

      {
        if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
          var fakeNode = document.createElement("react");

          var invokeGuardedCallbackDev = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            if (!(typeof document !== "undefined")) {
              throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            }

            var evt = document.createEvent("Event");
            var didError = true;
            var windowEvent = window.event;
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
            var funcArgs = Array.prototype.slice.call(arguments, 3);

            function callCallback() {
              fakeNode.removeEventListener(evtType, callCallback, false);

              if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                window.event = windowEvent;
              }

              func.apply(context, funcArgs);
              didError = false;
            }

            var error;
            var didSetError = false;
            var isCrossOriginError = false;

            function handleWindowError(event) {
              error = event.error;
              didSetError = true;

              if (error === null && event.colno === 0 && event.lineno === 0) {
                isCrossOriginError = true;
              }

              if (event.defaultPrevented) {
                if (error != null && typeof error === "object") {
                  try {
                    error._suppressLogging = true;
                  } catch (inner) {}
                }
              }
            }

            var evtType = "react-" + (name ? name : "invokeguardedcallback");
            window.addEventListener("error", handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);

            if (windowEventDescriptor) {
              Object.defineProperty(window, "event", windowEventDescriptor);
            }

            if (didError) {
              if (!didSetError) {
                error = new Error("An error was thrown inside one of your components, but React " + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + "your browser. Try triggering the error in production mode, " + "or switching to a modern browser. If you suspect that this is " + "actually an issue with React, please file an issue.");
              } else if (isCrossOriginError) {
                error = new Error("A cross-origin error was thrown. React doesn't have access to " + "the actual error object in development. " + "See https://fb.me/react-crossorigin-error for more information.");
              }

              this.onError(error);
            }

            window.removeEventListener("error", handleWindowError);
          };

          invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
        }
      }
      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
      var hasError = false;
      var caughtError = null;
      var hasRethrowError = false;
      var rethrowError = null;
      var reporter = {
        onError: function onError(error) {
          hasError = true;
          caughtError = error;
        }
      };

      function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
      }

      function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);

        if (hasError) {
          var error = clearCaughtError();

          if (!hasRethrowError) {
            hasRethrowError = true;
            rethrowError = error;
          }
        }
      }

      function rethrowCaughtError() {
        if (hasRethrowError) {
          var error = rethrowError;
          hasRethrowError = false;
          rethrowError = null;
          throw error;
        }
      }

      function hasCaughtError() {
        return hasError;
      }

      function clearCaughtError() {
        if (hasError) {
          var error = caughtError;
          hasError = false;
          caughtError = null;
          return error;
        } else {
          {
            throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }

      var getFiberCurrentPropsFromNode = null;
      var getInstanceFromNode = null;
      var getNodeFromInstance = null;

      function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
        getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
        getInstanceFromNode = getInstanceFromNodeImpl;
        getNodeFromInstance = getNodeFromInstanceImpl;
        {
          if (!getNodeFromInstance || !getInstanceFromNode) {
            error("EventPluginUtils.setComponentTree(...): Injected " + "module is missing getNodeFromInstance or getInstanceFromNode.");
          }
        }
      }

      var validateEventDispatches;
      {
        validateEventDispatches = function validateEventDispatches(event) {
          var dispatchListeners = event._dispatchListeners;
          var dispatchInstances = event._dispatchInstances;
          var listenersIsArr = Array.isArray(dispatchListeners);
          var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
          var instancesIsArr = Array.isArray(dispatchInstances);
          var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

          if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {
            error("EventPluginUtils: Invalid `event`.");
          }
        };
      }

      function executeDispatch(event, listener, inst) {
        var type = event.type || "unknown-event";
        event.currentTarget = getNodeFromInstance(inst);
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
      }

      function executeDispatchesInOrder(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        {
          validateEventDispatches(event);
        }

        if (Array.isArray(dispatchListeners)) {
          for (var i = 0; i < dispatchListeners.length; i++) {
            if (event.isPropagationStopped()) {
              break;
            }

            executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
          }
        } else if (dispatchListeners) {
          executeDispatch(event, dispatchListeners, dispatchInstances);
        }

        event._dispatchListeners = null;
        event._dispatchInstances = null;
      }

      function executeDispatchesInOrderStopAtTrueImpl(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        {
          validateEventDispatches(event);
        }

        if (Array.isArray(dispatchListeners)) {
          for (var i = 0; i < dispatchListeners.length; i++) {
            if (event.isPropagationStopped()) {
              break;
            }

            if (dispatchListeners[i](event, dispatchInstances[i])) {
              return dispatchInstances[i];
            }
          }
        } else if (dispatchListeners) {
          if (dispatchListeners(event, dispatchInstances)) {
            return dispatchInstances;
          }
        }

        return null;
      }

      function executeDispatchesInOrderStopAtTrue(event) {
        var ret = executeDispatchesInOrderStopAtTrueImpl(event);
        event._dispatchInstances = null;
        event._dispatchListeners = null;
        return ret;
      }

      function executeDirectDispatch(event) {
        {
          validateEventDispatches(event);
        }
        var dispatchListener = event._dispatchListeners;
        var dispatchInstance = event._dispatchInstances;

        if (!!Array.isArray(dispatchListener)) {
          throw Error("executeDirectDispatch(...): Invalid `event`.");
        }

        event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
        var res = dispatchListener ? dispatchListener(event) : null;
        event.currentTarget = null;
        event._dispatchListeners = null;
        event._dispatchInstances = null;
        return res;
      }

      function hasDispatches(event) {
        return !!event._dispatchListeners;
      }

      function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
      }

      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            return !!(props.disabled && isInteractive(type));

          default:
            return false;
        }
      }

      function getListener(inst, registrationName) {
        var listener;
        var stateNode = inst.stateNode;

        if (!stateNode) {
          return null;
        }

        var props = getFiberCurrentPropsFromNode(stateNode);

        if (!props) {
          return null;
        }

        listener = props[registrationName];

        if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
          return null;
        }

        if (!(!listener || typeof listener === "function")) {
          throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        }

        return listener;
      }

      function accumulateInto(current, next) {
        if (!(next != null)) {
          throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
        }

        if (current == null) {
          return next;
        }

        if (Array.isArray(current)) {
          if (Array.isArray(next)) {
            current.push.apply(current, next);
            return current;
          }

          current.push(next);
          return current;
        }

        if (Array.isArray(next)) {
          return [current].concat(next);
        }

        return [current, next];
      }

      function forEachAccumulated(arr, cb, scope) {
        if (Array.isArray(arr)) {
          arr.forEach(cb, scope);
        } else if (arr) {
          cb.call(scope, arr);
        }
      }

      function listenerAtPhase(inst, event, propagationPhase) {
        var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
        return getListener(inst, registrationName);
      }

      function accumulateDirectionalDispatches(inst, phase, event) {
        {
          if (!inst) {
            error("Dispatching inst must not be null");
          }
        }
        var listener = listenerAtPhase(inst, event, phase);

        if (listener) {
          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
        }
      }

      function accumulateTwoPhaseDispatchesSingle(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
        }
      }

      function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          var targetInst = event._targetInst;
          var parentInst = targetInst ? getParentInstance(targetInst) : null;
          traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
        }
      }

      function accumulateDispatches(inst, ignoredDirection, event) {
        if (inst && event && event.dispatchConfig.registrationName) {
          var registrationName = event.dispatchConfig.registrationName;
          var listener = getListener(inst, registrationName);

          if (listener) {
            event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
            event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
          }
        }
      }

      function accumulateDirectDispatchesSingle(event) {
        if (event && event.dispatchConfig.registrationName) {
          accumulateDispatches(event._targetInst, null, event);
        }
      }

      function accumulateTwoPhaseDispatches(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
      }

      function accumulateTwoPhaseDispatchesSkipTarget(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
      }

      function accumulateDirectDispatches(events) {
        forEachAccumulated(events, accumulateDirectDispatchesSingle);
      }

      var EVENT_POOL_SIZE = 10;
      var EventInterface = {
        type: null,
        target: null,
        currentTarget: function currentTarget() {
          return null;
        },
        eventPhase: null,
        bubbles: null,
        cancelable: null,
        timeStamp: function timeStamp(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: null,
        isTrusted: null
      };

      function functionThatReturnsTrue() {
        return true;
      }

      function functionThatReturnsFalse() {
        return false;
      }

      function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
        {
          delete this.nativeEvent;
          delete this.preventDefault;
          delete this.stopPropagation;
          delete this.isDefaultPrevented;
          delete this.isPropagationStopped;
        }
        this.dispatchConfig = dispatchConfig;
        this._targetInst = targetInst;
        this.nativeEvent = nativeEvent;
        var Interface = this.constructor.Interface;

        for (var propName in Interface) {
          if (!Interface.hasOwnProperty(propName)) {
            continue;
          }

          {
            delete this[propName];
          }
          var normalize = Interface[propName];

          if (normalize) {
            this[propName] = normalize(nativeEvent);
          } else {
            if (propName === "target") {
              this.target = nativeEventTarget;
            } else {
              this[propName] = nativeEvent[propName];
            }
          }
        }

        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

        if (defaultPrevented) {
          this.isDefaultPrevented = functionThatReturnsTrue;
        } else {
          this.isDefaultPrevented = functionThatReturnsFalse;
        }

        this.isPropagationStopped = functionThatReturnsFalse;
        return this;
      }

      Object.assign(SyntheticEvent.prototype, {
        preventDefault: function preventDefault() {
          this.defaultPrevented = true;
          var event = this.nativeEvent;

          if (!event) {
            return;
          }

          if (event.preventDefault) {
            event.preventDefault();
          } else if (typeof event.returnValue !== "unknown") {
            event.returnValue = false;
          }

          this.isDefaultPrevented = functionThatReturnsTrue;
        },
        stopPropagation: function stopPropagation() {
          var event = this.nativeEvent;

          if (!event) {
            return;
          }

          if (event.stopPropagation) {
            event.stopPropagation();
          } else if (typeof event.cancelBubble !== "unknown") {
            event.cancelBubble = true;
          }

          this.isPropagationStopped = functionThatReturnsTrue;
        },
        persist: function persist() {
          this.isPersistent = functionThatReturnsTrue;
        },
        isPersistent: functionThatReturnsFalse,
        destructor: function destructor() {
          var Interface = this.constructor.Interface;

          for (var propName in Interface) {
            {
              Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
            }
          }

          this.dispatchConfig = null;
          this._targetInst = null;
          this.nativeEvent = null;
          this.isDefaultPrevented = functionThatReturnsFalse;
          this.isPropagationStopped = functionThatReturnsFalse;
          this._dispatchListeners = null;
          this._dispatchInstances = null;
          {
            Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null));
            Object.defineProperty(this, "isDefaultPrevented", getPooledWarningPropertyDefinition("isDefaultPrevented", functionThatReturnsFalse));
            Object.defineProperty(this, "isPropagationStopped", getPooledWarningPropertyDefinition("isPropagationStopped", functionThatReturnsFalse));
            Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", function () {}));
            Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", function () {}));
          }
        }
      });
      SyntheticEvent.Interface = EventInterface;

      SyntheticEvent.extend = function (Interface) {
        var Super = this;

        var E = function E() {};

        E.prototype = Super.prototype;
        var prototype = new E();

        function Class() {
          return Super.apply(this, arguments);
        }

        Object.assign(prototype, Class.prototype);
        Class.prototype = prototype;
        Class.prototype.constructor = Class;
        Class.Interface = Object.assign({}, Super.Interface, Interface);
        Class.extend = Super.extend;
        addEventPoolingTo(Class);
        return Class;
      };

      addEventPoolingTo(SyntheticEvent);

      function getPooledWarningPropertyDefinition(propName, getVal) {
        var isFunction = typeof getVal === "function";
        return {
          configurable: true,
          set: set,
          get: get
        };

        function set(val) {
          var action = isFunction ? "setting the method" : "setting the property";
          warn(action, "This is effectively a no-op");
          return val;
        }

        function get() {
          var action = isFunction ? "accessing the method" : "accessing the property";
          var result = isFunction ? "This is a no-op function" : "This is set to null";
          warn(action, result);
          return getVal;
        }

        function warn(action, result) {
          {
            error("This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + "If you must keep the original synthetic event around, use event.persist(). " + "See https://fb.me/react-event-pooling for more information.", action, propName, result);
          }
        }
      }

      function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
        var EventConstructor = this;

        if (EventConstructor.eventPool.length) {
          var instance = EventConstructor.eventPool.pop();
          EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
          return instance;
        }

        return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
      }

      function releasePooledEvent(event) {
        var EventConstructor = this;

        if (!(event instanceof EventConstructor)) {
          throw Error("Trying to release an event instance into a pool of a different type.");
        }

        event.destructor();

        if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
          EventConstructor.eventPool.push(event);
        }
      }

      function addEventPoolingTo(EventConstructor) {
        EventConstructor.eventPool = [];
        EventConstructor.getPooled = getPooledEvent;
        EventConstructor.release = releasePooledEvent;
      }

      var ResponderSyntheticEvent = SyntheticEvent.extend({
        touchHistory: function touchHistory(nativeEvent) {
          return null;
        }
      });
      var TOP_TOUCH_START = "topTouchStart";
      var TOP_TOUCH_MOVE = "topTouchMove";
      var TOP_TOUCH_END = "topTouchEnd";
      var TOP_TOUCH_CANCEL = "topTouchCancel";
      var TOP_SCROLL = "topScroll";
      var TOP_SELECTION_CHANGE = "topSelectionChange";

      function isStartish(topLevelType) {
        return topLevelType === TOP_TOUCH_START;
      }

      function isMoveish(topLevelType) {
        return topLevelType === TOP_TOUCH_MOVE;
      }

      function isEndish(topLevelType) {
        return topLevelType === TOP_TOUCH_END || topLevelType === TOP_TOUCH_CANCEL;
      }

      var startDependencies = [TOP_TOUCH_START];
      var moveDependencies = [TOP_TOUCH_MOVE];
      var endDependencies = [TOP_TOUCH_CANCEL, TOP_TOUCH_END];
      var MAX_TOUCH_BANK = 20;
      var touchBank = [];
      var touchHistory = {
        touchBank: touchBank,
        numberActiveTouches: 0,
        indexOfSingleActiveTouch: -1,
        mostRecentTimeStamp: 0
      };

      function timestampForTouch(touch) {
        return touch.timeStamp || touch.timestamp;
      }

      function createTouchRecord(touch) {
        return {
          touchActive: true,
          startPageX: touch.pageX,
          startPageY: touch.pageY,
          startTimeStamp: timestampForTouch(touch),
          currentPageX: touch.pageX,
          currentPageY: touch.pageY,
          currentTimeStamp: timestampForTouch(touch),
          previousPageX: touch.pageX,
          previousPageY: touch.pageY,
          previousTimeStamp: timestampForTouch(touch)
        };
      }

      function resetTouchRecord(touchRecord, touch) {
        touchRecord.touchActive = true;
        touchRecord.startPageX = touch.pageX;
        touchRecord.startPageY = touch.pageY;
        touchRecord.startTimeStamp = timestampForTouch(touch);
        touchRecord.currentPageX = touch.pageX;
        touchRecord.currentPageY = touch.pageY;
        touchRecord.currentTimeStamp = timestampForTouch(touch);
        touchRecord.previousPageX = touch.pageX;
        touchRecord.previousPageY = touch.pageY;
        touchRecord.previousTimeStamp = timestampForTouch(touch);
      }

      function getTouchIdentifier(_ref) {
        var identifier = _ref.identifier;

        if (!(identifier != null)) {
          throw Error("Touch object is missing identifier.");
        }

        {
          if (identifier > MAX_TOUCH_BANK) {
            error("Touch identifier %s is greater than maximum supported %s which causes " + "performance issues backfilling array locations for all of the indices.", identifier, MAX_TOUCH_BANK);
          }
        }
        return identifier;
      }

      function recordTouchStart(touch) {
        var identifier = getTouchIdentifier(touch);
        var touchRecord = touchBank[identifier];

        if (touchRecord) {
          resetTouchRecord(touchRecord, touch);
        } else {
          touchBank[identifier] = createTouchRecord(touch);
        }

        touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
      }

      function recordTouchMove(touch) {
        var touchRecord = touchBank[getTouchIdentifier(touch)];

        if (touchRecord) {
          touchRecord.touchActive = true;
          touchRecord.previousPageX = touchRecord.currentPageX;
          touchRecord.previousPageY = touchRecord.currentPageY;
          touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
          touchRecord.currentPageX = touch.pageX;
          touchRecord.currentPageY = touch.pageY;
          touchRecord.currentTimeStamp = timestampForTouch(touch);
          touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
        } else {
          {
            warn("Cannot record touch move without a touch start.\n" + "Touch Move: %s\n" + "Touch Bank: %s", printTouch(touch), printTouchBank());
          }
        }
      }

      function recordTouchEnd(touch) {
        var touchRecord = touchBank[getTouchIdentifier(touch)];

        if (touchRecord) {
          touchRecord.touchActive = false;
          touchRecord.previousPageX = touchRecord.currentPageX;
          touchRecord.previousPageY = touchRecord.currentPageY;
          touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
          touchRecord.currentPageX = touch.pageX;
          touchRecord.currentPageY = touch.pageY;
          touchRecord.currentTimeStamp = timestampForTouch(touch);
          touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
        } else {
          {
            warn("Cannot record touch end without a touch start.\n" + "Touch End: %s\n" + "Touch Bank: %s", printTouch(touch), printTouchBank());
          }
        }
      }

      function printTouch(touch) {
        return JSON.stringify({
          identifier: touch.identifier,
          pageX: touch.pageX,
          pageY: touch.pageY,
          timestamp: timestampForTouch(touch)
        });
      }

      function printTouchBank() {
        var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));

        if (touchBank.length > MAX_TOUCH_BANK) {
          printed += " (original size: " + touchBank.length + ")";
        }

        return printed;
      }

      var ResponderTouchHistoryStore = {
        recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
          if (isMoveish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchMove);
          } else if (isStartish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchStart);
            touchHistory.numberActiveTouches = nativeEvent.touches.length;

            if (touchHistory.numberActiveTouches === 1) {
              touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;
            }
          } else if (isEndish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchEnd);
            touchHistory.numberActiveTouches = nativeEvent.touches.length;

            if (touchHistory.numberActiveTouches === 1) {
              for (var i = 0; i < touchBank.length; i++) {
                var touchTrackToCheck = touchBank[i];

                if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {
                  touchHistory.indexOfSingleActiveTouch = i;
                  break;
                }
              }

              {
                var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];

                if (activeRecord == null || !activeRecord.touchActive) {
                  error("Cannot find single active touch.");
                }
              }
            }
          }
        },
        touchHistory: touchHistory
      };

      function accumulate(current, next) {
        if (!(next != null)) {
          throw Error("accumulate(...): Accumulated items must not be null or undefined.");
        }

        if (current == null) {
          return next;
        }

        if (Array.isArray(current)) {
          return current.concat(next);
        }

        if (Array.isArray(next)) {
          return [current].concat(next);
        }

        return [current, next];
      }

      var responderInst = null;
      var trackedTouchCount = 0;

      var changeResponder = function changeResponder(nextResponderInst, blockHostResponder) {
        var oldResponderInst = responderInst;
        responderInst = nextResponderInst;

        if (ResponderEventPlugin.GlobalResponderHandler !== null) {
          ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
        }
      };

      var eventTypes = {
        startShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onStartShouldSetResponder",
            captured: "onStartShouldSetResponderCapture"
          },
          dependencies: startDependencies
        },
        scrollShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onScrollShouldSetResponder",
            captured: "onScrollShouldSetResponderCapture"
          },
          dependencies: [TOP_SCROLL]
        },
        selectionChangeShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onSelectionChangeShouldSetResponder",
            captured: "onSelectionChangeShouldSetResponderCapture"
          },
          dependencies: [TOP_SELECTION_CHANGE]
        },
        moveShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onMoveShouldSetResponder",
            captured: "onMoveShouldSetResponderCapture"
          },
          dependencies: moveDependencies
        },
        responderStart: {
          registrationName: "onResponderStart",
          dependencies: startDependencies
        },
        responderMove: {
          registrationName: "onResponderMove",
          dependencies: moveDependencies
        },
        responderEnd: {
          registrationName: "onResponderEnd",
          dependencies: endDependencies
        },
        responderRelease: {
          registrationName: "onResponderRelease",
          dependencies: endDependencies
        },
        responderTerminationRequest: {
          registrationName: "onResponderTerminationRequest",
          dependencies: []
        },
        responderGrant: {
          registrationName: "onResponderGrant",
          dependencies: []
        },
        responderReject: {
          registrationName: "onResponderReject",
          dependencies: []
        },
        responderTerminate: {
          registrationName: "onResponderTerminate",
          dependencies: []
        }
      };

      function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : topLevelType === TOP_SELECTION_CHANGE ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        var bubbleShouldSetFrom = !responderInst ? targetInst : getLowestCommonAncestor(responderInst, targetInst);
        var skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst;
        var shouldSetEvent = ResponderSyntheticEvent.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);
        shouldSetEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;

        if (skipOverBubbleShouldSetFrom) {
          accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent);
        } else {
          accumulateTwoPhaseDispatches(shouldSetEvent);
        }

        var wantsResponderInst = executeDispatchesInOrderStopAtTrue(shouldSetEvent);

        if (!shouldSetEvent.isPersistent()) {
          shouldSetEvent.constructor.release(shouldSetEvent);
        }

        if (!wantsResponderInst || wantsResponderInst === responderInst) {
          return null;
        }

        var extracted;
        var grantEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);
        grantEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
        accumulateDirectDispatches(grantEvent);
        var blockHostResponder = executeDirectDispatch(grantEvent) === true;

        if (responderInst) {
          var terminationRequestEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);
          terminationRequestEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
          accumulateDirectDispatches(terminationRequestEvent);
          var shouldSwitch = !hasDispatches(terminationRequestEvent) || executeDirectDispatch(terminationRequestEvent);

          if (!terminationRequestEvent.isPersistent()) {
            terminationRequestEvent.constructor.release(terminationRequestEvent);
          }

          if (shouldSwitch) {
            var terminateEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
            terminateEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(terminateEvent);
            extracted = accumulate(extracted, [grantEvent, terminateEvent]);
            changeResponder(wantsResponderInst, blockHostResponder);
          } else {
            var rejectEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);
            rejectEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(rejectEvent);
            extracted = accumulate(extracted, rejectEvent);
          }
        } else {
          extracted = accumulate(extracted, grantEvent);
          changeResponder(wantsResponderInst, blockHostResponder);
        }

        return extracted;
      }

      function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
        return topLevelInst && (topLevelType === TOP_SCROLL && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && topLevelType === TOP_SELECTION_CHANGE || isStartish(topLevelType) || isMoveish(topLevelType));
      }

      function noResponderTouches(nativeEvent) {
        var touches = nativeEvent.touches;

        if (!touches || touches.length === 0) {
          return true;
        }

        for (var i = 0; i < touches.length; i++) {
          var activeTouch = touches[i];
          var target = activeTouch.target;

          if (target !== null && target !== undefined && target !== 0) {
            var targetInst = getInstanceFromNode(target);

            if (isAncestor(responderInst, targetInst)) {
              return false;
            }
          }
        }

        return true;
      }

      var ResponderEventPlugin = {
        _getResponder: function _getResponder() {
          return responderInst;
        },
        eventTypes: eventTypes,
        extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
          if (isStartish(topLevelType)) {
            trackedTouchCount += 1;
          } else if (isEndish(topLevelType)) {
            if (trackedTouchCount >= 0) {
              trackedTouchCount -= 1;
            } else {
              {
                warn("Ended a touch event which was not counted in `trackedTouchCount`.");
              }
              return null;
            }
          }

          ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);
          var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null;
          var isResponderTouchStart = responderInst && isStartish(topLevelType);
          var isResponderTouchMove = responderInst && isMoveish(topLevelType);
          var isResponderTouchEnd = responderInst && isEndish(topLevelType);
          var incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;

          if (incrementalTouch) {
            var gesture = ResponderSyntheticEvent.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);
            gesture.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(gesture);
            extracted = accumulate(extracted, gesture);
          }

          var isResponderTerminate = responderInst && topLevelType === TOP_TOUCH_CANCEL;
          var isResponderRelease = responderInst && !isResponderTerminate && isEndish(topLevelType) && noResponderTouches(nativeEvent);
          var finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;

          if (finalTouch) {
            var finalEvent = ResponderSyntheticEvent.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);
            finalEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(finalEvent);
            extracted = accumulate(extracted, finalEvent);
            changeResponder(null);
          }

          return extracted;
        },
        GlobalResponderHandler: null,
        injection: {
          injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
            ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
          }
        }
      };
      var eventPluginOrder = null;
      var namesToPlugins = {};

      function recomputePluginOrdering() {
        if (!eventPluginOrder) {
          return;
        }

        for (var pluginName in namesToPlugins) {
          var pluginModule = namesToPlugins[pluginName];
          var pluginIndex = eventPluginOrder.indexOf(pluginName);

          if (!(pluginIndex > -1)) {
            throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`.");
          }

          if (plugins[pluginIndex]) {
            continue;
          }

          if (!pluginModule.extractEvents) {
            throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not.");
          }

          plugins[pluginIndex] = pluginModule;
          var publishedEvents = pluginModule.eventTypes;

          for (var eventName in publishedEvents) {
            if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
              throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
            }
          }
        }
      }

      function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
        if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
          throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName + "`.");
        }

        eventNameDispatchConfigs[eventName] = dispatchConfig;
        var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

        if (phasedRegistrationNames) {
          for (var phaseName in phasedRegistrationNames) {
            if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
              var phasedRegistrationName = phasedRegistrationNames[phaseName];
              publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
            }
          }

          return true;
        } else if (dispatchConfig.registrationName) {
          publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
          return true;
        }

        return false;
      }

      function publishRegistrationName(registrationName, pluginModule, eventName) {
        if (!!registrationNameModules[registrationName]) {
          throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`.");
        }

        registrationNameModules[registrationName] = pluginModule;
        registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
        }
      }

      var plugins = [];
      var eventNameDispatchConfigs = {};
      var registrationNameModules = {};
      var registrationNameDependencies = {};

      function injectEventPluginOrder(injectedEventPluginOrder) {
        if (!!eventPluginOrder) {
          throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
        }

        eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
        recomputePluginOrdering();
      }

      function injectEventPluginsByName(injectedNamesToPlugins) {
        var isOrderingDirty = false;

        for (var pluginName in injectedNamesToPlugins) {
          if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
            continue;
          }

          var pluginModule = injectedNamesToPlugins[pluginName];

          if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
            if (!!namesToPlugins[pluginName]) {
              throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`.");
            }

            namesToPlugins[pluginName] = pluginModule;
            isOrderingDirty = true;
          }
        }

        if (isOrderingDirty) {
          recomputePluginOrdering();
        }
      }

      var customBubblingEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customBubblingEventTypes,
          customDirectEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customDirectEventTypes;
      var ReactNativeBridgeEventPlugin = {
        eventTypes: {},
        extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
          if (targetInst == null) {
            return null;
          }

          var bubbleDispatchConfig = customBubblingEventTypes[topLevelType];
          var directDispatchConfig = customDirectEventTypes[topLevelType];

          if (!(bubbleDispatchConfig || directDispatchConfig)) {
            throw Error('Unsupported top level event type "' + topLevelType + '" dispatched');
          }

          var event = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);

          if (bubbleDispatchConfig) {
            accumulateTwoPhaseDispatches(event);
          } else if (directDispatchConfig) {
            accumulateDirectDispatches(event);
          } else {
            return null;
          }

          return event;
        }
      };
      var ReactNativeEventPluginOrder = ["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"];
      injectEventPluginOrder(ReactNativeEventPluginOrder);
      injectEventPluginsByName({
        ResponderEventPlugin: ResponderEventPlugin,
        ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin
      });
      var instanceCache = new Map();
      var instanceProps = new Map();

      function precacheFiberNode(hostInst, tag) {
        instanceCache.set(tag, hostInst);
      }

      function uncacheFiberNode(tag) {
        instanceCache.delete(tag);
        instanceProps.delete(tag);
      }

      function getInstanceFromTag(tag) {
        return instanceCache.get(tag) || null;
      }

      function getTagFromInstance(inst) {
        var nativeInstance = inst.stateNode;
        var tag = nativeInstance._nativeTag;

        if (tag === undefined) {
          nativeInstance = nativeInstance.canonical;
          tag = nativeInstance._nativeTag;
        }

        if (!tag) {
          throw Error("All native instances should have a tag.");
        }

        return nativeInstance;
      }

      function getFiberCurrentPropsFromNode$1(stateNode) {
        return instanceProps.get(stateNode._nativeTag) || null;
      }

      function updateFiberProps(tag, props) {
        instanceProps.set(tag, props);
      }

      var PLUGIN_EVENT_SYSTEM = 1;
      var enableProfilerTimer = true;
      var enableFundamentalAPI = false;
      var warnAboutStringRefs = false;

      var batchedUpdatesImpl = function batchedUpdatesImpl(fn, bookkeeping) {
        return fn(bookkeeping);
      };

      var isInsideEventHandler = false;

      function batchedUpdates(fn, bookkeeping) {
        if (isInsideEventHandler) {
          return fn(bookkeeping);
        }

        isInsideEventHandler = true;

        try {
          return batchedUpdatesImpl(fn, bookkeeping);
        } finally {
          isInsideEventHandler = false;
        }
      }

      function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
      }

      var eventQueue = null;

      var executeDispatchesAndRelease = function executeDispatchesAndRelease(event) {
        if (event) {
          executeDispatchesInOrder(event);

          if (!event.isPersistent()) {
            event.constructor.release(event);
          }
        }
      };

      var executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
        return executeDispatchesAndRelease(e);
      };

      function runEventsInBatch(events) {
        if (events !== null) {
          eventQueue = accumulateInto(eventQueue, events);
        }

        var processingEventQueue = eventQueue;
        eventQueue = null;

        if (!processingEventQueue) {
          return;
        }

        forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);

        if (!!eventQueue) {
          throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
        }

        rethrowCaughtError();
      }

      var EMPTY_NATIVE_EVENT = {};

      var touchSubsequence = function touchSubsequence(touches, indices) {
        var ret = [];

        for (var i = 0; i < indices.length; i++) {
          ret.push(touches[indices[i]]);
        }

        return ret;
      };

      var removeTouchesAtIndices = function removeTouchesAtIndices(touches, indices) {
        var rippedOut = [];
        var temp = touches;

        for (var i = 0; i < indices.length; i++) {
          var index = indices[i];
          rippedOut.push(touches[index]);
          temp[index] = null;
        }

        var fillAt = 0;

        for (var j = 0; j < temp.length; j++) {
          var cur = temp[j];

          if (cur !== null) {
            temp[fillAt++] = cur;
          }
        }

        temp.length = fillAt;
        return rippedOut;
      };

      function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
        var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT;
        var inst = getInstanceFromTag(rootNodeID);
        var target = null;

        if (inst != null) {
          target = inst.stateNode;
        }

        batchedUpdates(function () {
          runExtractedPluginEventsInBatch(topLevelType, inst, nativeEvent, target, PLUGIN_EVENT_SYSTEM);
        });
      }

      function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
        var events = null;

        for (var i = 0; i < plugins.length; i++) {
          var possiblePlugin = plugins[i];

          if (possiblePlugin) {
            var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);

            if (extractedEvents) {
              events = accumulateInto(events, extractedEvents);
            }
          }
        }

        return events;
      }

      function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
        var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        runEventsInBatch(events);
      }

      function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {
        _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
      }

      function receiveTouches(eventTopLevelType, touches, changedIndices) {
        var changedTouches = eventTopLevelType === "topTouchEnd" || eventTopLevelType === "topTouchCancel" ? removeTouchesAtIndices(touches, changedIndices) : touchSubsequence(touches, changedIndices);

        for (var jj = 0; jj < changedTouches.length; jj++) {
          var touch = changedTouches[jj];
          touch.changedTouches = changedTouches;
          touch.touches = touches;
          var nativeEvent = touch;
          var rootNodeID = null;
          var target = nativeEvent.target;

          if (target !== null && target !== undefined) {
            if (target < 1) {
              {
                error("A view is reporting that a touch occurred on tag zero.");
              }
            } else {
              rootNodeID = target;
            }
          }

          _receiveRootNodeIDEvent(rootNodeID, eventTopLevelType, nativeEvent);
        }
      }

      var ReactNativeGlobalResponderHandler = {
        onChange: function onChange(from, to, blockNativeResponder) {
          if (to !== null) {
            var tag = to.stateNode._nativeTag;
            ReactNativePrivateInterface.UIManager.setJSResponder(tag, blockNativeResponder);
          } else {
            ReactNativePrivateInterface.UIManager.clearJSResponder();
          }
        }
      };
      ReactNativePrivateInterface.RCTEventEmitter.register({
        receiveEvent: receiveEvent,
        receiveTouches: receiveTouches
      });
      setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromTag, getTagFromInstance);
      ResponderEventPlugin.injection.injectGlobalResponderHandler(ReactNativeGlobalResponderHandler);

      function get(key) {
        return key._reactInternalFiber;
      }

      function set(key, value) {
        key._reactInternalFiber = value;
      }

      var hasSymbol = typeof Symbol === "function" && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 0xeac7;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 0xeacc;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 0xead2;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 0xeace;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 0xeacf;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 0xead0;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 0xead1;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 0xead8;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 0xead3;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 0xead4;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 0xead9;
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";

      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }

        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }

        return null;
      }

      var Uninitialized = -1;
      var Pending = 0;
      var Resolved = 1;
      var Rejected = 2;

      function refineResolvedLazyComponent(lazyComponent) {
        return lazyComponent._status === Resolved ? lazyComponent._result : null;
      }

      function initializeLazyComponentType(lazyComponent) {
        if (lazyComponent._status === Uninitialized) {
          var ctor = lazyComponent._result;

          if (!ctor) {
            ctor = lazyComponent._ctor;
          }

          var thenable = ctor();
          var pending = lazyComponent;
          pending._status = Pending;
          pending._result = thenable;
          thenable.then(function (moduleObject) {
            if (lazyComponent._status === Pending) {
              var defaultExport = moduleObject.default;
              {
                if (defaultExport === undefined) {
                  error("lazy: Expected the result of a dynamic import() call. " + "Instead received: %s\n\nYour code should look like: \n  " + "const MyComponent = lazy(() => imp" + "ort('./MyComponent'))", moduleObject);
                }
              }
              var resolved = lazyComponent;
              resolved._status = Resolved;
              resolved._result = defaultExport;
            }
          }, function (error) {
            if (lazyComponent._status === Pending) {
              var rejected = lazyComponent;
              rejected._status = Rejected;
              rejected._result = error;
            }
          });
        }
      }

      function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }

      function getContextName(type) {
        return type.displayName || "Context";
      }

      function getComponentName(type) {
        if (type == null) {
          return null;
        }

        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentName(). " + "This is likely a bug in React. Please file an issue.");
          }
        }

        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }

        if (typeof type === "string") {
          return type;
        }

        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";

          case REACT_PORTAL_TYPE:
            return "Portal";

          case REACT_PROFILER_TYPE:
            return "Profiler";

          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";

          case REACT_SUSPENSE_TYPE:
            return "Suspense";

          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }

        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";

            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";

            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");

            case REACT_MEMO_TYPE:
              return getComponentName(type.type);

            case REACT_BLOCK_TYPE:
              return getComponentName(type.render);

            case REACT_LAZY_TYPE:
              {
                var thenable = type;
                var resolvedThenable = refineResolvedLazyComponent(thenable);

                if (resolvedThenable) {
                  return getComponentName(resolvedThenable);
                }

                break;
              }
          }
        }

        return null;
      }

      var NoEffect = 0;
      var PerformedWork = 1;
      var Placement = 2;
      var Update = 4;
      var PlacementAndUpdate = 6;
      var Deletion = 8;
      var ContentReset = 16;
      var Callback = 32;
      var DidCapture = 64;
      var Ref = 128;
      var Snapshot = 256;
      var Passive = 512;
      var Hydrating = 1024;
      var HydratingAndUpdate = 1028;
      var LifecycleEffectMask = 932;
      var HostEffectMask = 2047;
      var Incomplete = 2048;
      var ShouldCapture = 4096;
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;

      function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;

        if (!fiber.alternate) {
          var nextNode = node;

          do {
            node = nextNode;

            if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
              nearestMounted = node.return;
            }

            nextNode = node.return;
          } while (nextNode);
        } else {
          while (node.return) {
            node = node.return;
          }
        }

        if (node.tag === HostRoot) {
          return nearestMounted;
        }

        return null;
      }

      function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
      }

      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current;

          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;

            if (!instance._warnedAboutRefsInRender) {
              error("%s is accessing isMounted inside its render() function. " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
            }

            instance._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get(component);

        if (!fiber) {
          return false;
        }

        return getNearestMountedFiber(fiber) === fiber;
      }

      function assertIsMounted(fiber) {
        if (!(getNearestMountedFiber(fiber) === fiber)) {
          throw Error("Unable to find node on an unmounted component.");
        }
      }

      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;

        if (!alternate) {
          var nearestMounted = getNearestMountedFiber(fiber);

          if (!(nearestMounted !== null)) {
            throw Error("Unable to find node on an unmounted component.");
          }

          if (nearestMounted !== fiber) {
            return null;
          }

          return fiber;
        }

        var a = fiber;
        var b = alternate;

        while (true) {
          var parentA = a.return;

          if (parentA === null) {
            break;
          }

          var parentB = parentA.alternate;

          if (parentB === null) {
            var nextParent = parentA.return;

            if (nextParent !== null) {
              a = b = nextParent;
              continue;
            }

            break;
          }

          if (parentA.child === parentB.child) {
            var child = parentA.child;

            while (child) {
              if (child === a) {
                assertIsMounted(parentA);
                return fiber;
              }

              if (child === b) {
                assertIsMounted(parentA);
                return alternate;
              }

              child = child.sibling;
            }

            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }

          if (a.return !== b.return) {
            a = parentA;
            b = parentB;
          } else {
            var didFindChild = false;
            var _child = parentA.child;

            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentA;
                b = parentB;
                break;
              }

              if (_child === b) {
                didFindChild = true;
                b = parentA;
                a = parentB;
                break;
              }

              _child = _child.sibling;
            }

            if (!didFindChild) {
              _child = parentB.child;

              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentB;
                  b = parentA;
                  break;
                }

                if (_child === b) {
                  didFindChild = true;
                  b = parentB;
                  a = parentA;
                  break;
                }

                _child = _child.sibling;
              }

              if (!didFindChild) {
                throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
              }
            }
          }

          if (!(a.alternate === b)) {
            throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
          }
        }

        if (!(a.tag === HostRoot)) {
          throw Error("Unable to find node on an unmounted component.");
        }

        if (a.stateNode.current === a) {
          return fiber;
        }

        return alternate;
      }

      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);

        if (!currentParent) {
          return null;
        }

        var node = currentParent;

        while (true) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          } else if (node.child) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === currentParent) {
            return null;
          }

          while (!node.sibling) {
            if (!node.return || node.return === currentParent) {
              return null;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }

        return null;
      }

      var emptyObject = {};
      var removedKeys = null;
      var removedKeyCount = 0;
      var deepDifferOptions = {
        unsafelyIgnoreFunctions: true
      };

      function defaultDiffer(prevProp, nextProp) {
        if (typeof nextProp !== "object" || nextProp === null) {
          return true;
        } else {
          return ReactNativePrivateInterface.deepDiffer(prevProp, nextProp, deepDifferOptions);
        }
      }

      function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
        if (Array.isArray(node)) {
          var i = node.length;

          while (i-- && removedKeyCount > 0) {
            restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
          }
        } else if (node && removedKeyCount > 0) {
          var obj = node;

          for (var propKey in removedKeys) {
            if (!removedKeys[propKey]) {
              continue;
            }

            var nextProp = obj[propKey];

            if (nextProp === undefined) {
              continue;
            }

            var attributeConfig = validAttributes[propKey];

            if (!attributeConfig) {
              continue;
            }

            if (typeof nextProp === "function") {
              nextProp = true;
            }

            if (typeof nextProp === "undefined") {
              nextProp = null;
            }

            if (typeof attributeConfig !== "object") {
              updatePayload[propKey] = nextProp;
            } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
              var nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;
              updatePayload[propKey] = nextValue;
            }

            removedKeys[propKey] = false;
            removedKeyCount--;
          }
        }
      }

      function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
        var minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
        var i;

        for (i = 0; i < minLength; i++) {
          updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
        }

        for (; i < prevArray.length; i++) {
          updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
        }

        for (; i < nextArray.length; i++) {
          updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
        }

        return updatePayload;
      }

      function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
        if (!updatePayload && prevProp === nextProp) {
          return updatePayload;
        }

        if (!prevProp || !nextProp) {
          if (nextProp) {
            return addNestedProperty(updatePayload, nextProp, validAttributes);
          }

          if (prevProp) {
            return clearNestedProperty(updatePayload, prevProp, validAttributes);
          }

          return updatePayload;
        }

        if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) {
          return diffProperties(updatePayload, prevProp, nextProp, validAttributes);
        }

        if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
          return diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes);
        }

        if (Array.isArray(prevProp)) {
          return diffProperties(updatePayload, ReactNativePrivateInterface.flattenStyle(prevProp), nextProp, validAttributes);
        }

        return diffProperties(updatePayload, prevProp, ReactNativePrivateInterface.flattenStyle(nextProp), validAttributes);
      }

      function addNestedProperty(updatePayload, nextProp, validAttributes) {
        if (!nextProp) {
          return updatePayload;
        }

        if (!Array.isArray(nextProp)) {
          return addProperties(updatePayload, nextProp, validAttributes);
        }

        for (var i = 0; i < nextProp.length; i++) {
          updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
        }

        return updatePayload;
      }

      function clearNestedProperty(updatePayload, prevProp, validAttributes) {
        if (!prevProp) {
          return updatePayload;
        }

        if (!Array.isArray(prevProp)) {
          return clearProperties(updatePayload, prevProp, validAttributes);
        }

        for (var i = 0; i < prevProp.length; i++) {
          updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
        }

        return updatePayload;
      }

      function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
        var attributeConfig;
        var nextProp;
        var prevProp;

        for (var propKey in nextProps) {
          attributeConfig = validAttributes[propKey];

          if (!attributeConfig) {
            continue;
          }

          prevProp = prevProps[propKey];
          nextProp = nextProps[propKey];

          if (typeof nextProp === "function") {
            nextProp = true;

            if (typeof prevProp === "function") {
              prevProp = true;
            }
          }

          if (typeof nextProp === "undefined") {
            nextProp = null;

            if (typeof prevProp === "undefined") {
              prevProp = null;
            }
          }

          if (removedKeys) {
            removedKeys[propKey] = false;
          }

          if (updatePayload && updatePayload[propKey] !== undefined) {
            if (typeof attributeConfig !== "object") {
              updatePayload[propKey] = nextProp;
            } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
              var nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;
              updatePayload[propKey] = nextValue;
            }

            continue;
          }

          if (prevProp === nextProp) {
            continue;
          }

          if (typeof attributeConfig !== "object") {
            if (defaultDiffer(prevProp, nextProp)) {
              (updatePayload || (updatePayload = {}))[propKey] = nextProp;
            }
          } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
            var shouldUpdate = prevProp === undefined || (typeof attributeConfig.diff === "function" ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));

            if (shouldUpdate) {
              var _nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;

              (updatePayload || (updatePayload = {}))[propKey] = _nextValue;
            }
          } else {
            removedKeys = null;
            removedKeyCount = 0;
            updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig);

            if (removedKeyCount > 0 && updatePayload) {
              restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig);
              removedKeys = null;
            }
          }
        }

        for (var _propKey in prevProps) {
          if (nextProps[_propKey] !== undefined) {
            continue;
          }

          attributeConfig = validAttributes[_propKey];

          if (!attributeConfig) {
            continue;
          }

          if (updatePayload && updatePayload[_propKey] !== undefined) {
            continue;
          }

          prevProp = prevProps[_propKey];

          if (prevProp === undefined) {
            continue;
          }

          if (typeof attributeConfig !== "object" || typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
            (updatePayload || (updatePayload = {}))[_propKey] = null;

            if (!removedKeys) {
              removedKeys = {};
            }

            if (!removedKeys[_propKey]) {
              removedKeys[_propKey] = true;
              removedKeyCount++;
            }
          } else {
            updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig);
          }
        }

        return updatePayload;
      }

      function addProperties(updatePayload, props, validAttributes) {
        return diffProperties(updatePayload, emptyObject, props, validAttributes);
      }

      function clearProperties(updatePayload, prevProps, validAttributes) {
        return diffProperties(updatePayload, prevProps, emptyObject, validAttributes);
      }

      function create(props, validAttributes) {
        return addProperties(null, props, validAttributes);
      }

      function diff(prevProps, nextProps, validAttributes) {
        return diffProperties(null, prevProps, nextProps, validAttributes);
      }

      function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
        return function () {
          if (!callback) {
            return undefined;
          }

          if (typeof context.__isMounted === "boolean") {
            if (!context.__isMounted) {
              return undefined;
            }
          }

          return callback.apply(context, arguments);
        };
      }

      function warnForStyleProps(props, validAttributes) {
        {
          for (var key in validAttributes.style) {
            if (!(validAttributes[key] || props[key] === undefined)) {
              error("You are setting the style `{ %s" + ": ... }` as a prop. You " + "should nest it in a style object. " + "E.g. `{ style: { %s" + ": ... } }`", key, key);
            }
          }
        }
      }

      var ReactNativeFiberHostComponent = function () {
        function ReactNativeFiberHostComponent(tag, viewConfig, internalInstanceHandleDEV) {
          this._nativeTag = tag;
          this._children = [];
          this.viewConfig = viewConfig;
          {
            this._internalFiberInstanceHandleDEV = internalInstanceHandleDEV;
          }
        }

        var _proto = ReactNativeFiberHostComponent.prototype;

        _proto.blur = function blur() {
          ReactNativePrivateInterface.TextInputState.blurTextInput(this);
        };

        _proto.focus = function focus() {
          ReactNativePrivateInterface.TextInputState.focusTextInput(this);
        };

        _proto.measure = function measure(callback) {
          ReactNativePrivateInterface.UIManager.measure(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
        };

        _proto.measureInWindow = function measureInWindow(callback) {
          ReactNativePrivateInterface.UIManager.measureInWindow(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
        };

        _proto.measureLayout = function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          var relativeNode;

          if (typeof relativeToNativeNode === "number") {
            relativeNode = relativeToNativeNode;
          } else {
            var nativeNode = relativeToNativeNode;

            if (nativeNode._nativeTag) {
              relativeNode = nativeNode._nativeTag;
            }
          }

          if (relativeNode == null) {
            {
              error("Warning: ref.measureLayout must be called with a node handle or a ref to a native component.");
            }
            return;
          }

          ReactNativePrivateInterface.UIManager.measureLayout(this._nativeTag, relativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
        };

        _proto.setNativeProps = function setNativeProps(nativeProps) {
          {
            warnForStyleProps(nativeProps, this.viewConfig.validAttributes);
          }
          var updatePayload = create(nativeProps, this.viewConfig.validAttributes);

          if (updatePayload != null) {
            ReactNativePrivateInterface.UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, updatePayload);
          }
        };

        return ReactNativeFiberHostComponent;
      }();

      function shim() {
        {
          throw Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      var isSuspenseInstancePending = shim;
      var isSuspenseInstanceFallback = shim;
      var hydrateTextInstance = shim;
      var getViewConfigForType = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get;
      var UPDATE_SIGNAL = {};
      {
        Object.freeze(UPDATE_SIGNAL);
      }
      var nextReactTag = 3;

      function allocateTag() {
        var tag = nextReactTag;

        if (tag % 10 === 1) {
          tag += 2;
        }

        nextReactTag = tag + 2;
        return tag;
      }

      function recursivelyUncacheFiberNode(node) {
        if (typeof node === "number") {
          uncacheFiberNode(node);
        } else {
          uncacheFiberNode(node._nativeTag);

          node._children.forEach(recursivelyUncacheFiberNode);
        }
      }

      function appendInitialChild(parentInstance, child) {
        parentInstance._children.push(child);
      }

      function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var tag = allocateTag();
        var viewConfig = getViewConfigForType(type);
        {
          for (var key in viewConfig.validAttributes) {
            if (props.hasOwnProperty(key)) {
              ReactNativePrivateInterface.deepFreezeAndThrowOnMutationInDev(props[key]);
            }
          }
        }
        var updatePayload = create(props, viewConfig.validAttributes);
        ReactNativePrivateInterface.UIManager.createView(tag, viewConfig.uiViewClassName, rootContainerInstance, updatePayload);
        var component = new ReactNativeFiberHostComponent(tag, viewConfig, internalInstanceHandle);
        precacheFiberNode(internalInstanceHandle, tag);
        updateFiberProps(tag, props);
        return component;
      }

      function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        if (!hostContext.isInAParentText) {
          throw Error("Text strings must be rendered within a <Text> component.");
        }

        var tag = allocateTag();
        ReactNativePrivateInterface.UIManager.createView(tag, "RCTRawText", rootContainerInstance, {
          text: text
        });
        precacheFiberNode(internalInstanceHandle, tag);
        return tag;
      }

      function finalizeInitialChildren(parentInstance, type, props, rootContainerInstance, hostContext) {
        if (parentInstance._children.length === 0) {
          return false;
        }

        var nativeTags = parentInstance._children.map(function (child) {
          return typeof child === "number" ? child : child._nativeTag;
        });

        ReactNativePrivateInterface.UIManager.setChildren(parentInstance._nativeTag, nativeTags);
        return false;
      }

      function getRootHostContext(rootContainerInstance) {
        return {
          isInAParentText: false
        };
      }

      function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var prevIsInAParentText = parentHostContext.isInAParentText;
        var isInAParentText = type === "AndroidTextInput" || type === "RCTMultilineTextInputView" || type === "RCTSinglelineTextInputView" || type === "RCTText" || type === "RCTVirtualText";

        if (prevIsInAParentText !== isInAParentText) {
          return {
            isInAParentText: isInAParentText
          };
        } else {
          return parentHostContext;
        }
      }

      function getPublicInstance(instance) {
        return instance;
      }

      function prepareForCommit(containerInfo) {}

      function prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, hostContext) {
        return UPDATE_SIGNAL;
      }

      function resetAfterCommit(containerInfo) {}

      var scheduleTimeout = setTimeout;
      var cancelTimeout = clearTimeout;
      var noTimeout = -1;

      function shouldDeprioritizeSubtree(type, props) {
        return false;
      }

      function shouldSetTextContent(type, props) {
        return false;
      }

      function appendChild(parentInstance, child) {
        var childTag = typeof child === "number" ? child : child._nativeTag;
        var children = parentInstance._children;
        var index = children.indexOf(child);

        if (index >= 0) {
          children.splice(index, 1);
          children.push(child);
          ReactNativePrivateInterface.UIManager.manageChildren(parentInstance._nativeTag, [index], [children.length - 1], [], [], []);
        } else {
          children.push(child);
          ReactNativePrivateInterface.UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [children.length - 1], []);
        }
      }

      function appendChildToContainer(parentInstance, child) {
        var childTag = typeof child === "number" ? child : child._nativeTag;
        ReactNativePrivateInterface.UIManager.setChildren(parentInstance, [childTag]);
      }

      function commitTextUpdate(textInstance, oldText, newText) {
        ReactNativePrivateInterface.UIManager.updateView(textInstance, "RCTRawText", {
          text: newText
        });
      }

      function commitUpdate(instance, updatePayloadTODO, type, oldProps, newProps, internalInstanceHandle) {
        var viewConfig = instance.viewConfig;
        updateFiberProps(instance._nativeTag, newProps);
        var updatePayload = diff(oldProps, newProps, viewConfig.validAttributes);

        if (updatePayload != null) {
          ReactNativePrivateInterface.UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);
        }
      }

      function insertBefore(parentInstance, child, beforeChild) {
        var children = parentInstance._children;
        var index = children.indexOf(child);

        if (index >= 0) {
          children.splice(index, 1);
          var beforeChildIndex = children.indexOf(beforeChild);
          children.splice(beforeChildIndex, 0, child);
          ReactNativePrivateInterface.UIManager.manageChildren(parentInstance._nativeTag, [index], [beforeChildIndex], [], [], []);
        } else {
          var _beforeChildIndex = children.indexOf(beforeChild);

          children.splice(_beforeChildIndex, 0, child);
          var childTag = typeof child === "number" ? child : child._nativeTag;
          ReactNativePrivateInterface.UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [_beforeChildIndex], []);
        }
      }

      function insertInContainerBefore(parentInstance, child, beforeChild) {
        if (!(typeof parentInstance !== "number")) {
          throw Error("Container does not support insertBefore operation");
        }
      }

      function removeChild(parentInstance, child) {
        recursivelyUncacheFiberNode(child);
        var children = parentInstance._children;
        var index = children.indexOf(child);
        children.splice(index, 1);
        ReactNativePrivateInterface.UIManager.manageChildren(parentInstance._nativeTag, [], [], [], [], [index]);
      }

      function removeChildFromContainer(parentInstance, child) {
        recursivelyUncacheFiberNode(child);
        ReactNativePrivateInterface.UIManager.manageChildren(parentInstance, [], [], [], [], [0]);
      }

      function resetTextContent(instance) {}

      function hideInstance(instance) {
        var viewConfig = instance.viewConfig;
        var updatePayload = create({
          style: {
            display: "none"
          }
        }, viewConfig.validAttributes);
        ReactNativePrivateInterface.UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);
      }

      function hideTextInstance(textInstance) {
        throw new Error("Not yet implemented.");
      }

      function unhideInstance(instance, props) {
        var viewConfig = instance.viewConfig;
        var updatePayload = diff(Object.assign({}, props, {
          style: [props.style, {
            display: "none"
          }]
        }), props, viewConfig.validAttributes);
        ReactNativePrivateInterface.UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);
      }

      function unhideTextInstance(textInstance, text) {
        throw new Error("Not yet implemented.");
      }

      var loggedTypeFailures = {};

      function checkPropTypes(typeSpecs, values, location, componentName) {
        {
          var has = Function.call.bind(Object.prototype.hasOwnProperty);

          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;

              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }

                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }

              if (error$1 && !(error$1 instanceof Error)) {
                error("%s: type specification of %s" + " `%s` is invalid; the type checker " + "function must return `null` or an `Error` but returned a %s. " + "You may have forgotten to pass an argument to the type checker " + "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " + "shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
              }

              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                error("Failed %s type: %s", location, error$1.message);
              }
            }
          }
        }
      }

      var reactEmoji = "\u269B";
      var warningEmoji = "\u26D4";
      var supportsUserTiming = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function" && typeof performance.measure === "function" && typeof performance.clearMeasures === "function";
      var currentFiber = null;
      var currentPhase = null;
      var currentPhaseFiber = null;
      var isCommitting = false;
      var hasScheduledUpdateInCurrentCommit = false;
      var hasScheduledUpdateInCurrentPhase = false;
      var commitCountInCurrentWorkLoop = 0;
      var effectCountInCurrentCommit = 0;
      var labelsInCurrentCommit = new Set();

      var formatMarkName = function formatMarkName(markName) {
        return reactEmoji + " " + markName;
      };

      var formatLabel = function formatLabel(label, warning) {
        var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
        var suffix = warning ? " Warning: " + warning : "";
        return "" + prefix + label + suffix;
      };

      var beginMark = function beginMark(markName) {
        performance.mark(formatMarkName(markName));
      };

      var clearMark = function clearMark(markName) {
        performance.clearMarks(formatMarkName(markName));
      };

      var endMark = function endMark(label, markName, warning) {
        var formattedMarkName = formatMarkName(markName);
        var formattedLabel = formatLabel(label, warning);

        try {
          performance.measure(formattedLabel, formattedMarkName);
        } catch (err) {}

        performance.clearMarks(formattedMarkName);
        performance.clearMeasures(formattedLabel);
      };

      var getFiberMarkName = function getFiberMarkName(label, debugID) {
        return label + " (#" + debugID + ")";
      };

      var getFiberLabel = function getFiberLabel(componentName, isMounted, phase) {
        if (phase === null) {
          return componentName + " [" + (isMounted ? "update" : "mount") + "]";
        } else {
          return componentName + "." + phase;
        }
      };

      var beginFiberMark = function beginFiberMark(fiber, phase) {
        var componentName = getComponentName(fiber.type) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);

        if (isCommitting && labelsInCurrentCommit.has(label)) {
          return false;
        }

        labelsInCurrentCommit.add(label);
        var markName = getFiberMarkName(label, debugID);
        beginMark(markName);
        return true;
      };

      var clearFiberMark = function clearFiberMark(fiber, phase) {
        var componentName = getComponentName(fiber.type) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        var markName = getFiberMarkName(label, debugID);
        clearMark(markName);
      };

      var endFiberMark = function endFiberMark(fiber, phase, warning) {
        var componentName = getComponentName(fiber.type) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        var markName = getFiberMarkName(label, debugID);
        endMark(label, markName, warning);
      };

      var shouldIgnoreFiber = function shouldIgnoreFiber(fiber) {
        switch (fiber.tag) {
          case HostRoot:
          case HostComponent:
          case HostText:
          case HostPortal:
          case Fragment:
          case ContextProvider:
          case ContextConsumer:
          case Mode:
            return true;

          default:
            return false;
        }
      };

      var clearPendingPhaseMeasurement = function clearPendingPhaseMeasurement() {
        if (currentPhase !== null && currentPhaseFiber !== null) {
          clearFiberMark(currentPhaseFiber, currentPhase);
        }

        currentPhaseFiber = null;
        currentPhase = null;
        hasScheduledUpdateInCurrentPhase = false;
      };

      var pauseTimers = function pauseTimers() {
        var fiber = currentFiber;

        while (fiber) {
          if (fiber._debugIsCurrentlyTiming) {
            endFiberMark(fiber, null, null);
          }

          fiber = fiber.return;
        }
      };

      var resumeTimersRecursively = function resumeTimersRecursively(fiber) {
        if (fiber.return !== null) {
          resumeTimersRecursively(fiber.return);
        }

        if (fiber._debugIsCurrentlyTiming) {
          beginFiberMark(fiber, null);
        }
      };

      var resumeTimers = function resumeTimers() {
        if (currentFiber !== null) {
          resumeTimersRecursively(currentFiber);
        }
      };

      function recordEffect() {
        {
          effectCountInCurrentCommit++;
        }
      }

      function recordScheduleUpdate() {
        {
          if (isCommitting) {
            hasScheduledUpdateInCurrentCommit = true;
          }

          if (currentPhase !== null && currentPhase !== "componentWillMount" && currentPhase !== "componentWillReceiveProps") {
            hasScheduledUpdateInCurrentPhase = true;
          }
        }
      }

      function startWorkTimer(fiber) {
        {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          currentFiber = fiber;

          if (!beginFiberMark(fiber, null)) {
            return;
          }

          fiber._debugIsCurrentlyTiming = true;
        }
      }

      function cancelWorkTimer(fiber) {
        {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          fiber._debugIsCurrentlyTiming = false;
          clearFiberMark(fiber, null);
        }
      }

      function stopWorkTimer(fiber) {
        {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          currentFiber = fiber.return;

          if (!fiber._debugIsCurrentlyTiming) {
            return;
          }

          fiber._debugIsCurrentlyTiming = false;
          endFiberMark(fiber, null, null);
        }
      }

      function stopFailedWorkTimer(fiber) {
        {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          currentFiber = fiber.return;

          if (!fiber._debugIsCurrentlyTiming) {
            return;
          }

          fiber._debugIsCurrentlyTiming = false;
          var warning = fiber.tag === SuspenseComponent ? "Rendering was suspended" : "An error was thrown inside this error boundary";
          endFiberMark(fiber, null, warning);
        }
      }

      function startPhaseTimer(fiber, phase) {
        {
          if (!supportsUserTiming) {
            return;
          }

          clearPendingPhaseMeasurement();

          if (!beginFiberMark(fiber, phase)) {
            return;
          }

          currentPhaseFiber = fiber;
          currentPhase = phase;
        }
      }

      function stopPhaseTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }

          if (currentPhase !== null && currentPhaseFiber !== null) {
            var warning = hasScheduledUpdateInCurrentPhase ? "Scheduled a cascading update" : null;
            endFiberMark(currentPhaseFiber, currentPhase, warning);
          }

          currentPhase = null;
          currentPhaseFiber = null;
        }
      }

      function startWorkLoopTimer(nextUnitOfWork) {
        {
          currentFiber = nextUnitOfWork;

          if (!supportsUserTiming) {
            return;
          }

          commitCountInCurrentWorkLoop = 0;
          beginMark("(React Tree Reconciliation)");
          resumeTimers();
        }
      }

      function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
        {
          if (!supportsUserTiming) {
            return;
          }

          var warning = null;

          if (interruptedBy !== null) {
            if (interruptedBy.tag === HostRoot) {
              warning = "A top-level update interrupted the previous render";
            } else {
              var componentName = getComponentName(interruptedBy.type) || "Unknown";
              warning = "An update to " + componentName + " interrupted the previous render";
            }
          } else if (commitCountInCurrentWorkLoop > 1) {
            warning = "There were cascading updates";
          }

          commitCountInCurrentWorkLoop = 0;
          var label = didCompleteRoot ? "(React Tree Reconciliation: Completed Root)" : "(React Tree Reconciliation: Yielded)";
          pauseTimers();
          endMark(label, "(React Tree Reconciliation)", warning);
        }
      }

      function startCommitTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }

          isCommitting = true;
          hasScheduledUpdateInCurrentCommit = false;
          labelsInCurrentCommit.clear();
          beginMark("(Committing Changes)");
        }
      }

      function stopCommitTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }

          var warning = null;

          if (hasScheduledUpdateInCurrentCommit) {
            warning = "Lifecycle hook scheduled a cascading update";
          } else if (commitCountInCurrentWorkLoop > 0) {
            warning = "Caused by a cascading update in earlier commit";
          }

          hasScheduledUpdateInCurrentCommit = false;
          commitCountInCurrentWorkLoop++;
          isCommitting = false;
          labelsInCurrentCommit.clear();
          endMark("(Committing Changes)", "(Committing Changes)", warning);
        }
      }

      function startCommitSnapshotEffectsTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }

          effectCountInCurrentCommit = 0;
          beginMark("(Committing Snapshot Effects)");
        }
      }

      function stopCommitSnapshotEffectsTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }

          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark("(Committing Snapshot Effects: " + count + " Total)", "(Committing Snapshot Effects)", null);
        }
      }

      function startCommitHostEffectsTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }

          effectCountInCurrentCommit = 0;
          beginMark("(Committing Host Effects)");
        }
      }

      function stopCommitHostEffectsTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }

          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark("(Committing Host Effects: " + count + " Total)", "(Committing Host Effects)", null);
        }
      }

      function startCommitLifeCyclesTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }

          effectCountInCurrentCommit = 0;
          beginMark("(Calling Lifecycle Methods)");
        }
      }

      function stopCommitLifeCyclesTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }

          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark("(Calling Lifecycle Methods: " + count + " Total)", "(Calling Lifecycle Methods)", null);
        }
      }

      var valueStack = [];
      var fiberStack;
      {
        fiberStack = [];
      }
      var index = -1;

      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }

      function pop(cursor, fiber) {
        if (index < 0) {
          {
            error("Unexpected pop.");
          }
          return;
        }

        {
          if (fiber !== fiberStack[index]) {
            error("Unexpected Fiber popped.");
          }
        }
        cursor.current = valueStack[index];
        valueStack[index] = null;
        {
          fiberStack[index] = null;
        }
        index--;
      }

      function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        {
          fiberStack[index] = fiber;
        }
        cursor.current = value;
      }

      var warnedAboutMissingGetChildContext;
      {
        warnedAboutMissingGetChildContext = {};
      }
      var emptyContextObject = {};
      {
        Object.freeze(emptyContextObject);
      }
      var contextStackCursor = createCursor(emptyContextObject);
      var didPerformWorkStackCursor = createCursor(false);
      var previousContext = emptyContextObject;

      function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        {
          if (didPushOwnContextIfProvider && isContextProvider(Component)) {
            return previousContext;
          }

          return contextStackCursor.current;
        }
      }

      function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        {
          var instance = workInProgress.stateNode;
          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
          instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
      }

      function getMaskedContext(workInProgress, unmaskedContext) {
        {
          var type = workInProgress.type;
          var contextTypes = type.contextTypes;

          if (!contextTypes) {
            return emptyContextObject;
          }

          var instance = workInProgress.stateNode;

          if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
            return instance.__reactInternalMemoizedMaskedChildContext;
          }

          var context = {};

          for (var key in contextTypes) {
            context[key] = unmaskedContext[key];
          }

          {
            var name = getComponentName(type) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
          }

          if (instance) {
            cacheContext(workInProgress, unmaskedContext, context);
          }

          return context;
        }
      }

      function hasContextChanged() {
        {
          return didPerformWorkStackCursor.current;
        }
      }

      function isContextProvider(type) {
        {
          var childContextTypes = type.childContextTypes;
          return childContextTypes !== null && childContextTypes !== undefined;
        }
      }

      function popContext(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }

      function popTopLevelContextObject(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }

      function pushTopLevelContextObject(fiber, context, didChange) {
        {
          if (!(contextStackCursor.current === emptyContextObject)) {
            throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
          }

          push(contextStackCursor, context, fiber);
          push(didPerformWorkStackCursor, didChange, fiber);
        }
      }

      function processChildContext(fiber, type, parentContext) {
        {
          var instance = fiber.stateNode;
          var childContextTypes = type.childContextTypes;

          if (typeof instance.getChildContext !== "function") {
            {
              var componentName = getComponentName(type) || "Unknown";

              if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method " + "on the instance. You can either define getChildContext() on %s or remove " + "childContextTypes from it.", componentName, componentName);
              }
            }
            return parentContext;
          }

          var childContext;
          startPhaseTimer(fiber, "getChildContext");
          childContext = instance.getChildContext();
          stopPhaseTimer();

          for (var contextKey in childContext) {
            if (!(contextKey in childContextTypes)) {
              throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
            }
          }

          {
            var name = getComponentName(type) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return Object.assign({}, parentContext, {}, childContext);
        }
      }

      function pushContextProvider(workInProgress) {
        {
          var instance = workInProgress.stateNode;
          var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
          previousContext = contextStackCursor.current;
          push(contextStackCursor, memoizedMergedChildContext, workInProgress);
          push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
          return true;
        }
      }

      function invalidateContextProvider(workInProgress, type, didChange) {
        {
          var instance = workInProgress.stateNode;

          if (!instance) {
            throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
          }

          if (didChange) {
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress);
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
          } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
          }
        }
      }

      function findCurrentUnmaskedContext(fiber) {
        {
          if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
            throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
          }

          var node = fiber;

          do {
            switch (node.tag) {
              case HostRoot:
                return node.stateNode.context;

              case ClassComponent:
                {
                  var Component = node.type;

                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }

                  break;
                }
            }

            node = node.return;
          } while (node !== null);

          {
            throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }

      var LegacyRoot = 0;
      var BlockingRoot = 1;
      var ConcurrentRoot = 2;
      var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
          Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
          Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
          Scheduler_shouldYield = Scheduler.unstable_shouldYield,
          Scheduler_requestPaint = Scheduler.unstable_requestPaint,
          Scheduler_now = Scheduler.unstable_now,
          Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
          Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
          Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
          Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
          Scheduler_LowPriority = Scheduler.unstable_LowPriority,
          Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
      {
        if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
          throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling");
        }
      }
      var fakeCallbackNode = {};
      var ImmediatePriority = 99;
      var UserBlockingPriority = 98;
      var NormalPriority = 97;
      var LowPriority = 96;
      var IdlePriority = 95;
      var NoPriority = 90;
      var shouldYield = Scheduler_shouldYield;
      var requestPaint = Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
      var syncQueue = null;
      var immediateQueueCallbackNode = null;
      var isFlushingSyncQueue = false;
      var initialTimeMs = Scheduler_now();
      var now = initialTimeMs < 10000 ? Scheduler_now : function () {
        return Scheduler_now() - initialTimeMs;
      };

      function getCurrentPriorityLevel() {
        switch (Scheduler_getCurrentPriorityLevel()) {
          case Scheduler_ImmediatePriority:
            return ImmediatePriority;

          case Scheduler_UserBlockingPriority:
            return UserBlockingPriority;

          case Scheduler_NormalPriority:
            return NormalPriority;

          case Scheduler_LowPriority:
            return LowPriority;

          case Scheduler_IdlePriority:
            return IdlePriority;

          default:
            {
              throw Error("Unknown priority level.");
            }
        }
      }

      function reactPriorityToSchedulerPriority(reactPriorityLevel) {
        switch (reactPriorityLevel) {
          case ImmediatePriority:
            return Scheduler_ImmediatePriority;

          case UserBlockingPriority:
            return Scheduler_UserBlockingPriority;

          case NormalPriority:
            return Scheduler_NormalPriority;

          case LowPriority:
            return Scheduler_LowPriority;

          case IdlePriority:
            return Scheduler_IdlePriority;

          default:
            {
              throw Error("Unknown priority level.");
            }
        }
      }

      function runWithPriority(reactPriorityLevel, fn) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_runWithPriority(priorityLevel, fn);
      }

      function scheduleCallback(reactPriorityLevel, callback, options) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_scheduleCallback(priorityLevel, callback, options);
      }

      function scheduleSyncCallback(callback) {
        if (syncQueue === null) {
          syncQueue = [callback];
          immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
        } else {
          syncQueue.push(callback);
        }

        return fakeCallbackNode;
      }

      function cancelCallback(callbackNode) {
        if (callbackNode !== fakeCallbackNode) {
          Scheduler_cancelCallback(callbackNode);
        }
      }

      function flushSyncCallbackQueue() {
        if (immediateQueueCallbackNode !== null) {
          var node = immediateQueueCallbackNode;
          immediateQueueCallbackNode = null;
          Scheduler_cancelCallback(node);
        }

        flushSyncCallbackQueueImpl();
      }

      function flushSyncCallbackQueueImpl() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
          isFlushingSyncQueue = true;
          var i = 0;

          try {
            var _isSync = true;
            var queue = syncQueue;
            runWithPriority(ImmediatePriority, function () {
              for (; i < queue.length; i++) {
                var callback = queue[i];

                do {
                  callback = callback(_isSync);
                } while (callback !== null);
              }
            });
            syncQueue = null;
          } catch (error) {
            if (syncQueue !== null) {
              syncQueue = syncQueue.slice(i + 1);
            }

            Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
            throw error;
          } finally {
            isFlushingSyncQueue = false;
          }
        }
      }

      var NoMode = 0;
      var StrictMode = 1;
      var BlockingMode = 2;
      var ConcurrentMode = 4;
      var ProfileMode = 8;
      var MAX_SIGNED_31_BIT_INT = 1073741823;
      var NoWork = 0;
      var Never = 1;
      var Idle = 2;
      var Sync = MAX_SIGNED_31_BIT_INT;
      var Batched = Sync - 1;
      var UNIT_SIZE = 10;
      var MAGIC_NUMBER_OFFSET = Batched - 1;

      function msToExpirationTime(ms) {
        return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
      }

      function expirationTimeToMs(expirationTime) {
        return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
      }

      function ceiling(num, precision) {
        return ((num / precision | 0) + 1) * precision;
      }

      function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
        return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
      }

      var LOW_PRIORITY_EXPIRATION = 5000;
      var LOW_PRIORITY_BATCH_SIZE = 250;

      function computeAsyncExpiration(currentTime) {
        return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
      }

      function computeSuspenseExpiration(currentTime, timeoutMs) {
        return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
      }

      var HIGH_PRIORITY_EXPIRATION = 500;
      var HIGH_PRIORITY_BATCH_SIZE = 100;

      function computeInteractiveExpiration(currentTime) {
        return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
      }

      function inferPriorityFromExpirationTime(currentTime, expirationTime) {
        if (expirationTime === Sync) {
          return ImmediatePriority;
        }

        if (expirationTime === Never || expirationTime === Idle) {
          return IdlePriority;
        }

        var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);

        if (msUntil <= 0) {
          return ImmediatePriority;
        }

        if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
          return UserBlockingPriority;
        }

        if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
          return NormalPriority;
        }

        return IdlePriority;
      }

      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }

      var objectIs = typeof Object.is === "function" ? Object.is : is;
      var hasOwnProperty = Object.prototype.hasOwnProperty;

      function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) {
          return true;
        }

        if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
          return false;
        }

        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);

        if (keysA.length !== keysB.length) {
          return false;
        }

        for (var i = 0; i < keysA.length; i++) {
          if (!hasOwnProperty.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
            return false;
          }
        }

        return true;
      }

      var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

      function describeComponentFrame(name, source, ownerName) {
        var sourceInfo = "";

        if (source) {
          var path = source.fileName;
          var fileName = path.replace(BEFORE_SLASH_RE, "");
          {
            if (/^index\./.test(fileName)) {
              var match = path.match(BEFORE_SLASH_RE);

              if (match) {
                var pathBeforeSlash = match[1];

                if (pathBeforeSlash) {
                  var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                  fileName = folderName + "/" + fileName;
                }
              }
            }
          }
          sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
        } else if (ownerName) {
          sourceInfo = " (created by " + ownerName + ")";
        }

        return "\n    in " + (name || "Unknown") + sourceInfo;
      }

      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

      function describeFiber(fiber) {
        switch (fiber.tag) {
          case HostRoot:
          case HostPortal:
          case HostText:
          case Fragment:
          case ContextProvider:
          case ContextConsumer:
            return "";

          default:
            var owner = fiber._debugOwner;
            var source = fiber._debugSource;
            var name = getComponentName(fiber.type);
            var ownerName = null;

            if (owner) {
              ownerName = getComponentName(owner.type);
            }

            return describeComponentFrame(name, source, ownerName);
        }
      }

      function getStackByFiberInDevAndProd(workInProgress) {
        var info = "";
        var node = workInProgress;

        do {
          info += describeFiber(node);
          node = node.return;
        } while (node);

        return info;
      }

      var current = null;
      var isRendering = false;

      function getCurrentFiberOwnerNameInDevOrNull() {
        {
          if (current === null) {
            return null;
          }

          var owner = current._debugOwner;

          if (owner !== null && typeof owner !== "undefined") {
            return getComponentName(owner.type);
          }
        }
        return null;
      }

      function getCurrentFiberStackInDev() {
        {
          if (current === null) {
            return "";
          }

          return getStackByFiberInDevAndProd(current);
        }
      }

      function resetCurrentFiber() {
        {
          ReactDebugCurrentFrame.getCurrentStack = null;
          current = null;
          isRendering = false;
        }
      }

      function setCurrentFiber(fiber) {
        {
          ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
          current = fiber;
          isRendering = false;
        }
      }

      function setIsRendering(rendering) {
        {
          isRendering = rendering;
        }
      }

      var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function recordUnsafeLifecycleWarnings(fiber, instance) {},
        flushPendingUnsafeLifecycleWarnings: function flushPendingUnsafeLifecycleWarnings() {},
        recordLegacyContextWarning: function recordLegacyContextWarning(fiber, instance) {},
        flushLegacyContextWarning: function flushLegacyContextWarning() {},
        discardPendingWarnings: function discardPendingWarnings() {}
      };
      {
        var findStrictRoot = function findStrictRoot(fiber) {
          var maybeStrictRoot = null;
          var node = fiber;

          while (node !== null) {
            if (node.mode & StrictMode) {
              maybeStrictRoot = node;
            }

            node = node.return;
          }

          return maybeStrictRoot;
        };

        var setToSortedString = function setToSortedString(set) {
          var array = [];
          set.forEach(function (value) {
            array.push(value);
          });
          return array.sort().join(", ");
        };

        var pendingComponentWillMountWarnings = [];
        var pendingUNSAFE_ComponentWillMountWarnings = [];
        var pendingComponentWillReceivePropsWarnings = [];
        var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        var pendingComponentWillUpdateWarnings = [];
        var pendingUNSAFE_ComponentWillUpdateWarnings = [];
        var didWarnAboutUnsafeLifecycles = new Set();

        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
            return;
          }

          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            pendingComponentWillMountWarnings.push(fiber);
          }

          if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
            pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
          }

          if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            pendingComponentWillReceivePropsWarnings.push(fiber);
          }

          if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
          }

          if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            pendingComponentWillUpdateWarnings.push(fiber);
          }

          if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
            pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
          }
        };

        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
          var componentWillMountUniqueNames = new Set();

          if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function (fiber) {
              componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
          }

          var UNSAFE_componentWillMountUniqueNames = new Set();

          if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
              UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
          }

          var componentWillReceivePropsUniqueNames = new Set();

          if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
              componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
          }

          var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

          if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
              UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          }

          var componentWillUpdateUniqueNames = new Set();

          if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function (fiber) {
              componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
          }

          var UNSAFE_componentWillUpdateUniqueNames = new Set();

          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
              UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
          }

          if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. " + "See https://fb.me/react-unsafe-component-lifecycles for details.\n\n" + "* Move code with side effects to componentDidMount, and set initial state in the constructor.\n" + "\nPlease update the following components: %s", sortedNames);
          }

          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended " + "and may indicate bugs in your code. " + "See https://fb.me/react-unsafe-component-lifecycles for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "* If you're updating state whenever props change, " + "refactor your code to use memoization techniques or move it to " + "static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n" + "\nPlease update the following components: %s", _sortedNames);
          }

          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended " + "and may indicate bugs in your code. " + "See https://fb.me/react-unsafe-component-lifecycles for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "\nPlease update the following components: %s", _sortedNames2);
          }

          if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

            warn("componentWillMount has been renamed, and is not recommended for use. " + "See https://fb.me/react-unsafe-component-lifecycles for details.\n\n" + "* Move code with side effects to componentDidMount, and set initial state in the constructor.\n" + "* Rename componentWillMount to UNSAFE_componentWillMount to suppress " + "this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + "\nPlease update the following components: %s", _sortedNames3);
          }

          if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

            warn("componentWillReceiveProps has been renamed, and is not recommended for use. " + "See https://fb.me/react-unsafe-component-lifecycles for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "* If you're updating state whenever props change, refactor your " + "code to use memoization techniques or move it to " + "static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n" + "* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress " + "this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + "\nPlease update the following components: %s", _sortedNames4);
          }

          if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

            warn("componentWillUpdate has been renamed, and is not recommended for use. " + "See https://fb.me/react-unsafe-component-lifecycles for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress " + "this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + "\nPlease update the following components: %s", _sortedNames5);
          }
        };

        var pendingLegacyContextWarning = new Map();
        var didWarnAboutLegacyContext = new Set();

        ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
          var strictRoot = findStrictRoot(fiber);

          if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. " + "This error is likely caused by a bug in React. Please file an issue.");
            return;
          }

          if (didWarnAboutLegacyContext.has(fiber.type)) {
            return;
          }

          var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

          if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
            if (warningsForRoot === undefined) {
              warningsForRoot = [];
              pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }

            warningsForRoot.push(fiber);
          }
        };

        ReactStrictModeWarnings.flushLegacyContextWarning = function () {
          pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
            if (fiberArray.length === 0) {
              return;
            }

            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function (fiber) {
              uniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            var firstComponentStack = getStackByFiberInDevAndProd(firstFiber);
            error("Legacy context API has been detected within a strict-mode tree." + "\n\nThe old API will be supported in all 16.x releases, but applications " + "using it should migrate to the new version." + "\n\nPlease update the following components: %s" + "\n\nLearn more about this warning here: https://fb.me/react-legacy-context" + "%s", sortedNames, firstComponentStack);
          });
        };

        ReactStrictModeWarnings.discardPendingWarnings = function () {
          pendingComponentWillMountWarnings = [];
          pendingUNSAFE_ComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
          pendingLegacyContextWarning = new Map();
        };
      }
      var resolveFamily = null;
      var failedBoundaries = null;

      var setRefreshHandler = function setRefreshHandler(handler) {
        {
          resolveFamily = handler;
        }
      };

      function resolveFunctionForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }

          var family = resolveFamily(type);

          if (family === undefined) {
            return type;
          }

          return family.current;
        }
      }

      function resolveClassForHotReloading(type) {
        return resolveFunctionForHotReloading(type);
      }

      function resolveForwardRefForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }

          var family = resolveFamily(type);

          if (family === undefined) {
            if (type !== null && type !== undefined && typeof type.render === "function") {
              var currentRender = resolveFunctionForHotReloading(type.render);

              if (type.render !== currentRender) {
                var syntheticType = {
                  $$typeof: REACT_FORWARD_REF_TYPE,
                  render: currentRender
                };

                if (type.displayName !== undefined) {
                  syntheticType.displayName = type.displayName;
                }

                return syntheticType;
              }
            }

            return type;
          }

          return family.current;
        }
      }

      function isCompatibleFamilyForHotReloading(fiber, element) {
        {
          if (resolveFamily === null) {
            return false;
          }

          var prevType = fiber.elementType;
          var nextType = element.type;
          var needsCompareFamilies = false;
          var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;

          switch (fiber.tag) {
            case ClassComponent:
              {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }

                break;
              }

            case FunctionComponent:
              {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }

                break;
              }

            case ForwardRef:
              {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }

                break;
              }

            case MemoComponent:
            case SimpleMemoComponent:
              {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }

                break;
              }

            default:
              return false;
          }

          if (needsCompareFamilies) {
            var prevFamily = resolveFamily(prevType);

            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
              return true;
            }
          }

          return false;
        }
      }

      function markFailedErrorBoundaryForHotReloading(fiber) {
        {
          if (resolveFamily === null) {
            return;
          }

          if (typeof WeakSet !== "function") {
            return;
          }

          if (failedBoundaries === null) {
            failedBoundaries = new WeakSet();
          }

          failedBoundaries.add(fiber);
        }
      }

      var scheduleRefresh = function scheduleRefresh(root, update) {
        {
          if (resolveFamily === null) {
            return;
          }

          var staleFamilies = update.staleFamilies,
              updatedFamilies = update.updatedFamilies;
          flushPassiveEffects();
          flushSync(function () {
            scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
          });
        }
      };

      var scheduleRoot = function scheduleRoot(root, element) {
        {
          if (root.context !== emptyContextObject) {
            return;
          }

          flushPassiveEffects();
          syncUpdates(function () {
            updateContainer(element, root, null, null);
          });
        }
      };

      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        {
          var alternate = fiber.alternate,
              child = fiber.child,
              sibling = fiber.sibling,
              tag = fiber.tag,
              type = fiber.type;
          var candidateType = null;

          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;

            case ForwardRef:
              candidateType = type.render;
              break;
          }

          if (resolveFamily === null) {
            throw new Error("Expected resolveFamily to be set during hot reload.");
          }

          var needsRender = false;
          var needsRemount = false;

          if (candidateType !== null) {
            var family = resolveFamily(candidateType);

            if (family !== undefined) {
              if (staleFamilies.has(family)) {
                needsRemount = true;
              } else if (updatedFamilies.has(family)) {
                if (tag === ClassComponent) {
                  needsRemount = true;
                } else {
                  needsRender = true;
                }
              }
            }
          }

          if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
              needsRemount = true;
            }
          }

          if (needsRemount) {
            fiber._debugNeedsRemount = true;
          }

          if (needsRemount || needsRender) {
            scheduleWork(fiber, Sync);
          }

          if (child !== null && !needsRemount) {
            scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
          }

          if (sibling !== null) {
            scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
          }
        }
      }

      var findHostInstancesForRefresh = function findHostInstancesForRefresh(root, families) {
        {
          var hostInstances = new Set();
          var types = new Set(families.map(function (family) {
            return family.current;
          }));
          findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
          return hostInstances;
        }
      };

      function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        {
          var child = fiber.child,
              sibling = fiber.sibling,
              tag = fiber.tag,
              type = fiber.type;
          var candidateType = null;

          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;

            case ForwardRef:
              candidateType = type.render;
              break;
          }

          var didMatch = false;

          if (candidateType !== null) {
            if (types.has(candidateType)) {
              didMatch = true;
            }
          }

          if (didMatch) {
            findHostInstancesForFiberShallowly(fiber, hostInstances);
          } else {
            if (child !== null) {
              findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
            }
          }

          if (sibling !== null) {
            findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
          }
        }
      }

      function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

          if (foundHostInstances) {
            return;
          }

          var node = fiber;

          while (true) {
            switch (node.tag) {
              case HostComponent:
                hostInstances.add(node.stateNode);
                return;

              case HostPortal:
                hostInstances.add(node.stateNode.containerInfo);
                return;

              case HostRoot:
                hostInstances.add(node.stateNode.containerInfo);
                return;
            }

            if (node.return === null) {
              throw new Error("Expected to reach root first.");
            }

            node = node.return;
          }
        }
      }

      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var node = fiber;
          var foundHostInstances = false;

          while (true) {
            if (node.tag === HostComponent) {
              foundHostInstances = true;
              hostInstances.add(node.stateNode);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            if (node === fiber) {
              return foundHostInstances;
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === fiber) {
                return foundHostInstances;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        return false;
      }

      function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
          var props = Object.assign({}, baseProps);
          var defaultProps = Component.defaultProps;

          for (var propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }

          return props;
        }

        return baseProps;
      }

      function readLazyComponentType(lazyComponent) {
        initializeLazyComponentType(lazyComponent);

        if (lazyComponent._status !== Resolved) {
          throw lazyComponent._result;
        }

        return lazyComponent._result;
      }

      var valueCursor = createCursor(null);
      var rendererSigil;
      {
        rendererSigil = {};
      }
      var currentlyRenderingFiber = null;
      var lastContextDependency = null;
      var lastContextWithAllBitsObserved = null;
      var isDisallowedContextReadInDEV = false;

      function resetContextDependencies() {
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        {
          isDisallowedContextReadInDEV = false;
        }
      }

      function enterDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = true;
        }
      }

      function exitDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = false;
        }
      }

      function pushProvider(providerFiber, nextValue) {
        var context = providerFiber.type._context;
        {
          push(valueCursor, context._currentValue, providerFiber);
          context._currentValue = nextValue;
          {
            if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
              error("Detected multiple renderers concurrently rendering the " + "same context provider. This is currently unsupported.");
            }

            context._currentRenderer = rendererSigil;
          }
        }
      }

      function popProvider(providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        var context = providerFiber.type._context;
        {
          context._currentValue = currentValue;
        }
      }

      function calculateChangedBits(context, newValue, oldValue) {
        if (objectIs(oldValue, newValue)) {
          return 0;
        } else {
          var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
          {
            if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
              error("calculateChangedBits: Expected the return value to be a " + "31-bit integer. Instead received: %s", changedBits);
            }
          }
          return changedBits | 0;
        }
      }

      function scheduleWorkOnParentPath(parent, renderExpirationTime) {
        var node = parent;

        while (node !== null) {
          var alternate = node.alternate;

          if (node.childExpirationTime < renderExpirationTime) {
            node.childExpirationTime = renderExpirationTime;

            if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
              alternate.childExpirationTime = renderExpirationTime;
            }
          } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
            alternate.childExpirationTime = renderExpirationTime;
          } else {
            break;
          }

          node = node.return;
        }
      }

      function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
        var fiber = workInProgress.child;

        if (fiber !== null) {
          fiber.return = workInProgress;
        }

        while (fiber !== null) {
          var nextFiber = void 0;
          var list = fiber.dependencies;

          if (list !== null) {
            nextFiber = fiber.child;
            var dependency = list.firstContext;

            while (dependency !== null) {
              if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                if (fiber.tag === ClassComponent) {
                  var update = createUpdate(renderExpirationTime, null);
                  update.tag = ForceUpdate;
                  enqueueUpdate(fiber, update);
                }

                if (fiber.expirationTime < renderExpirationTime) {
                  fiber.expirationTime = renderExpirationTime;
                }

                var alternate = fiber.alternate;

                if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
                  alternate.expirationTime = renderExpirationTime;
                }

                scheduleWorkOnParentPath(fiber.return, renderExpirationTime);

                if (list.expirationTime < renderExpirationTime) {
                  list.expirationTime = renderExpirationTime;
                }

                break;
              }

              dependency = dependency.next;
            }
          } else if (fiber.tag === ContextProvider) {
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
          } else {
            nextFiber = fiber.child;
          }

          if (nextFiber !== null) {
            nextFiber.return = fiber;
          } else {
            nextFiber = fiber;

            while (nextFiber !== null) {
              if (nextFiber === workInProgress) {
                nextFiber = null;
                break;
              }

              var sibling = nextFiber.sibling;

              if (sibling !== null) {
                sibling.return = nextFiber.return;
                nextFiber = sibling;
                break;
              }

              nextFiber = nextFiber.return;
            }
          }

          fiber = nextFiber;
        }
      }

      function prepareToReadContext(workInProgress, renderExpirationTime) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        var dependencies = workInProgress.dependencies;

        if (dependencies !== null) {
          var firstContext = dependencies.firstContext;

          if (firstContext !== null) {
            if (dependencies.expirationTime >= renderExpirationTime) {
              markWorkInProgressReceivedUpdate();
            }

            dependencies.firstContext = null;
          }
        }
      }

      function _readContext(context, observedBits) {
        {
          if (isDisallowedContextReadInDEV) {
            error("Context can only be read while React is rendering. " + "In classes, you can read it in the render method or getDerivedStateFromProps. " + "In function components, you can read it directly in the function body, but not " + "inside Hooks like useReducer() or useMemo().");
          }
        }
        if (lastContextWithAllBitsObserved === context) ;else if (observedBits === false || observedBits === 0) ;else {
          var resolvedObservedBits;

          if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
            lastContextWithAllBitsObserved = context;
            resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
          } else {
            resolvedObservedBits = observedBits;
          }

          var contextItem = {
            context: context,
            observedBits: resolvedObservedBits,
            next: null
          };

          if (lastContextDependency === null) {
            if (!(currentlyRenderingFiber !== null)) {
              throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }

            lastContextDependency = contextItem;
            currentlyRenderingFiber.dependencies = {
              expirationTime: NoWork,
              firstContext: contextItem,
              responders: null
            };
          } else {
            lastContextDependency = lastContextDependency.next = contextItem;
          }
        }
        return context._currentValue;
      }

      var UpdateState = 0;
      var ReplaceState = 1;
      var ForceUpdate = 2;
      var CaptureUpdate = 3;
      var hasForceUpdate = false;
      var didWarnUpdateInsideUpdate;
      var currentlyProcessingQueue;
      {
        didWarnUpdateInsideUpdate = false;
        currentlyProcessingQueue = null;
      }

      function initializeUpdateQueue(fiber) {
        var queue = {
          baseState: fiber.memoizedState,
          baseQueue: null,
          shared: {
            pending: null
          },
          effects: null
        };
        fiber.updateQueue = queue;
      }

      function cloneUpdateQueue(current, workInProgress) {
        var queue = workInProgress.updateQueue;
        var currentQueue = current.updateQueue;

        if (queue === currentQueue) {
          var clone = {
            baseState: currentQueue.baseState,
            baseQueue: currentQueue.baseQueue,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress.updateQueue = clone;
        }
      }

      function createUpdate(expirationTime, suspenseConfig) {
        var update = {
          expirationTime: expirationTime,
          suspenseConfig: suspenseConfig,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null
        };
        update.next = update;
        {
          update.priority = getCurrentPriorityLevel();
        }
        return update;
      }

      function enqueueUpdate(fiber, update) {
        var updateQueue = fiber.updateQueue;

        if (updateQueue === null) {
          return;
        }

        var sharedQueue = updateQueue.shared;
        var pending = sharedQueue.pending;

        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }

        sharedQueue.pending = update;
        {
          if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled " + "from inside an update function. Update functions should be pure, " + "with zero side-effects. Consider using componentDidUpdate or a " + "callback.");
            didWarnUpdateInsideUpdate = true;
          }
        }
      }

      function enqueueCapturedUpdate(workInProgress, update) {
        var current = workInProgress.alternate;

        if (current !== null) {
          cloneUpdateQueue(current, workInProgress);
        }

        var queue = workInProgress.updateQueue;
        var last = queue.baseQueue;

        if (last === null) {
          queue.baseQueue = update.next = update;
          update.next = update;
        } else {
          update.next = last.next;
          last.next = update;
        }
      }

      function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch (update.tag) {
          case ReplaceState:
            {
              var payload = update.payload;

              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }

              return payload;
            }

          case CaptureUpdate:
            {
              workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
            }

          case UpdateState:
            {
              var _payload = update.payload;
              var partialState;

              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }

              if (partialState === null || partialState === undefined) {
                return prevState;
              }

              return Object.assign({}, prevState, partialState);
            }

          case ForceUpdate:
            {
              hasForceUpdate = true;
              return prevState;
            }
        }

        return prevState;
      }

      function processUpdateQueue(workInProgress, props, instance, renderExpirationTime) {
        var queue = workInProgress.updateQueue;
        hasForceUpdate = false;
        {
          currentlyProcessingQueue = queue.shared;
        }
        var baseQueue = queue.baseQueue;
        var pendingQueue = queue.shared.pending;

        if (pendingQueue !== null) {
          if (baseQueue !== null) {
            var baseFirst = baseQueue.next;
            var pendingFirst = pendingQueue.next;
            baseQueue.next = pendingFirst;
            pendingQueue.next = baseFirst;
          }

          baseQueue = pendingQueue;
          queue.shared.pending = null;
          var current = workInProgress.alternate;

          if (current !== null) {
            var currentQueue = current.updateQueue;

            if (currentQueue !== null) {
              currentQueue.baseQueue = pendingQueue;
            }
          }
        }

        if (baseQueue !== null) {
          var first = baseQueue.next;
          var newState = queue.baseState;
          var newExpirationTime = NoWork;
          var newBaseState = null;
          var newBaseQueueFirst = null;
          var newBaseQueueLast = null;

          if (first !== null) {
            var update = first;

            do {
              var updateExpirationTime = update.expirationTime;

              if (updateExpirationTime < renderExpirationTime) {
                var clone = {
                  expirationTime: update.expirationTime,
                  suspenseConfig: update.suspenseConfig,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };

                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }

                if (updateExpirationTime > newExpirationTime) {
                  newExpirationTime = updateExpirationTime;
                }
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    expirationTime: Sync,
                    suspenseConfig: update.suspenseConfig,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }

                markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);
                newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                var callback = update.callback;

                if (callback !== null) {
                  workInProgress.effectTag |= Callback;
                  var effects = queue.effects;

                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }

              update = update.next;

              if (update === null || update === first) {
                pendingQueue = queue.shared.pending;

                if (pendingQueue === null) {
                  break;
                } else {
                  update = baseQueue.next = pendingQueue.next;
                  pendingQueue.next = first;
                  queue.baseQueue = baseQueue = pendingQueue;
                  queue.shared.pending = null;
                }
              }
            } while (true);
          }

          if (newBaseQueueLast === null) {
            newBaseState = newState;
          } else {
            newBaseQueueLast.next = newBaseQueueFirst;
          }

          queue.baseState = newBaseState;
          queue.baseQueue = newBaseQueueLast;
          markUnprocessedUpdateTime(newExpirationTime);
          workInProgress.expirationTime = newExpirationTime;
          workInProgress.memoizedState = newState;
        }

        {
          currentlyProcessingQueue = null;
        }
      }

      function callCallback(callback, context) {
        if (!(typeof callback === "function")) {
          throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        }

        callback.call(context);
      }

      function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
      }

      function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
      }

      function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;

        if (effects !== null) {
          for (var i = 0; i < effects.length; i++) {
            var effect = effects[i];
            var callback = effect.callback;

            if (callback !== null) {
              effect.callback = null;
              callCallback(callback, instance);
            }
          }
        }
      }

      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;

      function requestCurrentSuspenseConfig() {
        return ReactCurrentBatchConfig.suspense;
      }

      var fakeInternalInstance = {};
      var isArray = Array.isArray;
      var emptyRefsObject = new React.Component().refs;
      var didWarnAboutStateAssignmentForComponent;
      var didWarnAboutUninitializedState;
      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
      var didWarnAboutLegacyLifecyclesAndDerivedState;
      var didWarnAboutUndefinedDerivedState;
      var warnOnUndefinedDerivedState;
      var warnOnInvalidCallback;
      var didWarnAboutDirectlyAssigningPropsToState;
      var didWarnAboutContextTypeAndContextTypes;
      var didWarnAboutInvalidateContextType;
      {
        didWarnAboutStateAssignmentForComponent = new Set();
        didWarnAboutUninitializedState = new Set();
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
        didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
        didWarnAboutDirectlyAssigningPropsToState = new Set();
        didWarnAboutUndefinedDerivedState = new Set();
        didWarnAboutContextTypeAndContextTypes = new Set();
        didWarnAboutInvalidateContextType = new Set();
        var didWarnOnInvalidCallback = new Set();

        warnOnInvalidCallback = function warnOnInvalidCallback(callback, callerName) {
          if (callback === null || typeof callback === "function") {
            return;
          }

          var key = callerName + "_" + callback;

          if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callerName, callback);
          }
        };

        warnOnUndefinedDerivedState = function warnOnUndefinedDerivedState(type, partialState) {
          if (partialState === undefined) {
            var componentName = getComponentName(type) || "Component";

            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
              didWarnAboutUndefinedDerivedState.add(componentName);
              error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. " + "You have returned undefined.", componentName);
            }
          }
        };

        Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: false,
          value: function value() {
            {
              throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          }
        });
        Object.freeze(fakeInternalInstance);
      }

      function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        {
          warnOnUndefinedDerivedState(ctor, partialState);
        }
        var memoizedState = partialState === null || partialState === undefined ? prevState : Object.assign({}, prevState, partialState);
        workInProgress.memoizedState = memoizedState;

        if (workInProgress.expirationTime === NoWork) {
          var updateQueue = workInProgress.updateQueue;
          updateQueue.baseState = memoizedState;
        }
      }

      var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function enqueueSetState(inst, payload, callback) {
          var fiber = get(inst);
          var currentTime = requestCurrentTimeForUpdate();
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
          var update = createUpdate(expirationTime, suspenseConfig);
          update.payload = payload;

          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "setState");
            }
            update.callback = callback;
          }

          enqueueUpdate(fiber, update);
          scheduleWork(fiber, expirationTime);
        },
        enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
          var fiber = get(inst);
          var currentTime = requestCurrentTimeForUpdate();
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
          var update = createUpdate(expirationTime, suspenseConfig);
          update.tag = ReplaceState;
          update.payload = payload;

          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "replaceState");
            }
            update.callback = callback;
          }

          enqueueUpdate(fiber, update);
          scheduleWork(fiber, expirationTime);
        },
        enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
          var fiber = get(inst);
          var currentTime = requestCurrentTimeForUpdate();
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
          var update = createUpdate(expirationTime, suspenseConfig);
          update.tag = ForceUpdate;

          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "forceUpdate");
            }
            update.callback = callback;
          }

          enqueueUpdate(fiber, update);
          scheduleWork(fiber, expirationTime);
        }
      };

      function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;

        if (typeof instance.shouldComponentUpdate === "function") {
          startPhaseTimer(workInProgress, "shouldComponentUpdate");
          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
          stopPhaseTimer();
          {
            if (shouldUpdate === undefined) {
              error("%s.shouldComponentUpdate(): Returned undefined instead of a " + "boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
            }
          }
          return shouldUpdate;
        }

        if (ctor.prototype && ctor.prototype.isPureReactComponent) {
          return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        }

        return true;
      }

      function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        {
          var name = getComponentName(ctor) || "Component";
          var renderPresent = instance.render;

          if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === "function") {
              error("%s(...): No `render` method found on the returned component " + "instance: did you accidentally return an object from the constructor?", name);
            } else {
              error("%s(...): No `render` method found on the returned component " + "instance: you may have forgotten to define `render`.", name);
            }
          }

          if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
            error("getInitialState was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Did you mean to define a state property instead?", name);
          }

          if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Use a static property to define defaultProps instead.", name);
          }

          if (instance.propTypes) {
            error("propTypes was defined as an instance property on %s. Use a static " + "property to define propTypes instead.", name);
          }

          if (instance.contextType) {
            error("contextType was defined as an instance property on %s. Use a static " + "property to define contextType instead.", name);
          }

          {
            if (instance.contextTypes) {
              error("contextTypes was defined as an instance property on %s. Use a static " + "property to define contextTypes instead.", name);
            }

            if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
              didWarnAboutContextTypeAndContextTypes.add(ctor);
              error("%s declares both contextTypes and contextType static properties. " + "The legacy contextTypes property will be ignored.", name);
            }
          }

          if (typeof instance.componentShouldUpdate === "function") {
            error("%s has a method called " + "componentShouldUpdate(). Did you mean shouldComponentUpdate()? " + "The name is phrased as a question because the function is " + "expected to return a value.", name);
          }

          if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
            error("%s has a method called shouldComponentUpdate(). " + "shouldComponentUpdate should not be used when extending React.PureComponent. " + "Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
          }

          if (typeof instance.componentDidUnmount === "function") {
            error("%s has a method called " + "componentDidUnmount(). But there is no such lifecycle method. " + "Did you mean componentWillUnmount()?", name);
          }

          if (typeof instance.componentDidReceiveProps === "function") {
            error("%s has a method called " + "componentDidReceiveProps(). But there is no such lifecycle method. " + "If you meant to update the state in response to changing props, " + "use componentWillReceiveProps(). If you meant to fetch data or " + "run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
          }

          if (typeof instance.componentWillRecieveProps === "function") {
            error("%s has a method called " + "componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
          }

          if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
            error("%s has a method called " + "UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          }

          var hasMutatedProps = instance.props !== newProps;

          if (instance.props !== undefined && hasMutatedProps) {
            error("%s(...): When calling super() in `%s`, make sure to pass " + "up the same props that your component's constructor was passed.", name, name);
          }

          if (instance.defaultProps) {
            error("Setting defaultProps as an instance property on %s is not supported and will be ignored." + " Instead, define defaultProps as a static property on %s.", name, name);
          }

          if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). " + "This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
          }

          if (typeof instance.getDerivedStateFromProps === "function") {
            error("%s: getDerivedStateFromProps() is defined as an instance method " + "and will be ignored. Instead, declare it as a static method.", name);
          }

          if (typeof instance.getDerivedStateFromError === "function") {
            error("%s: getDerivedStateFromError() is defined as an instance method " + "and will be ignored. Instead, declare it as a static method.", name);
          }

          if (typeof ctor.getSnapshotBeforeUpdate === "function") {
            error("%s: getSnapshotBeforeUpdate() is defined as a static method " + "and will be ignored. Instead, declare it as an instance method.", name);
          }

          var _state = instance.state;

          if (_state && (typeof _state !== "object" || isArray(_state))) {
            error("%s.state: must be set to an object or null", name);
          }

          if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
            error("%s.getChildContext(): childContextTypes must be defined in order to " + "use getChildContext().", name);
          }
        }
      }

      function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance;
        set(instance, workInProgress);
        {
          instance._reactInternalInstance = fakeInternalInstance;
        }
      }

      function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        {
          if ("contextType" in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined;

            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
              didWarnAboutInvalidateContextType.add(ctor);
              var addendum = "";

              if (contextType === undefined) {
                addendum = " However, it is set to undefined. " + "This can be caused by a typo or by mixing up named and default imports. " + "This can also happen due to a circular dependency, so " + "try moving the createContext() call to a separate file.";
              } else if (typeof contextType !== "object") {
                addendum = " However, it is set to a " + typeof contextType + ".";
              } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                addendum = " Did you accidentally pass the Context.Provider instead?";
              } else if (contextType._context !== undefined) {
                addendum = " Did you accidentally pass the Context.Consumer instead?";
              } else {
                addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
              }

              error("%s defines an invalid contextType. " + "contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
            }
          }
        }

        if (typeof contextType === "object" && contextType !== null) {
          context = _readContext(contextType);
        } else {
          unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
          var contextTypes = ctor.contextTypes;
          isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
          context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        }

        var instance = new ctor(props, context);
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        {
          if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
            var componentName = getComponentName(ctor) || "Component";

            if (!didWarnAboutUninitializedState.has(componentName)) {
              didWarnAboutUninitializedState.add(componentName);
              error("`%s` uses `getDerivedStateFromProps` but its initial state is " + "%s. This is not recommended. Instead, define the initial state by " + "assigning an object to `this.state` in the constructor of `%s`. " + "This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
            }
          }

          if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;

            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              foundWillMountName = "componentWillMount";
            } else if (typeof instance.UNSAFE_componentWillMount === "function") {
              foundWillMountName = "UNSAFE_componentWillMount";
            }

            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              foundWillReceivePropsName = "componentWillReceiveProps";
            } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
            }

            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              foundWillUpdateName = "componentWillUpdate";
            } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              foundWillUpdateName = "UNSAFE_componentWillUpdate";
            }

            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentName(ctor) || "Component";

              var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";

              if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n" + "%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n" + "The above lifecycles should be removed. Learn more about this warning here:\n" + "https://fb.me/react-unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
              }
            }
          }
        }

        if (isLegacyContextConsumer) {
          cacheContext(workInProgress, unmaskedContext, context);
        }

        return instance;
      }

      function callComponentWillMount(workInProgress, instance) {
        startPhaseTimer(workInProgress, "componentWillMount");
        var oldState = instance.state;

        if (typeof instance.componentWillMount === "function") {
          instance.componentWillMount();
        }

        if (typeof instance.UNSAFE_componentWillMount === "function") {
          instance.UNSAFE_componentWillMount();
        }

        stopPhaseTimer();

        if (oldState !== instance.state) {
          {
            error("%s.componentWillMount(): Assigning directly to this.state is " + "deprecated (except inside a component's " + "constructor). Use setState instead.", getComponentName(workInProgress.type) || "Component");
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }

      function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        startPhaseTimer(workInProgress, "componentWillReceiveProps");

        if (typeof instance.componentWillReceiveProps === "function") {
          instance.componentWillReceiveProps(newProps, nextContext);
        }

        if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
          instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        }

        stopPhaseTimer();

        if (instance.state !== oldState) {
          {
            var componentName = getComponentName(workInProgress.type) || "Component";

            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
              didWarnAboutStateAssignmentForComponent.add(componentName);
              error("%s.componentWillReceiveProps(): Assigning directly to " + "this.state is deprecated (except inside a component's " + "constructor). Use setState instead.", componentName);
            }
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }

      function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
        {
          checkClassInstance(workInProgress, ctor, newProps);
        }
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress);
        var contextType = ctor.contextType;

        if (typeof contextType === "object" && contextType !== null) {
          instance.context = _readContext(contextType);
        } else {
          var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
          instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }

        {
          if (instance.state === newProps) {
            var componentName = getComponentName(ctor) || "Component";

            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
              didWarnAboutDirectlyAssigningPropsToState.add(componentName);
              error("%s: It is not recommended to assign props directly to state " + "because updates to props won't be reflected in state. " + "In most cases, it is better to use props directly.", componentName);
            }
          }

          if (workInProgress.mode & StrictMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
          }

          {
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
          }
        }
        processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
        instance.state = workInProgress.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
          instance.state = workInProgress.memoizedState;
        }

        if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
          callComponentWillMount(workInProgress, instance);
          processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
          instance.state = workInProgress.memoizedState;
        }

        if (typeof instance.componentDidMount === "function") {
          workInProgress.effectTag |= Update;
        }
      }

      function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;

        if (typeof contextType === "object" && contextType !== null) {
          nextContext = _readContext(contextType);
        } else {
          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
          nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }

        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";

        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (oldProps !== newProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
          }
        }

        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
        newState = workInProgress.memoizedState;

        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidMount === "function") {
            workInProgress.effectTag |= Update;
          }

          return false;
        }

        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress.memoizedState;
        }

        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            startPhaseTimer(workInProgress, "componentWillMount");

            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }

            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }

            stopPhaseTimer();
          }

          if (typeof instance.componentDidMount === "function") {
            workInProgress.effectTag |= Update;
          }
        } else {
          if (typeof instance.componentDidMount === "function") {
            workInProgress.effectTag |= Update;
          }

          workInProgress.memoizedProps = newProps;
          workInProgress.memoizedState = newState;
        }

        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }

      function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
        var instance = workInProgress.stateNode;
        cloneUpdateQueue(current, workInProgress);
        var oldProps = workInProgress.memoizedProps;
        instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;

        if (typeof contextType === "object" && contextType !== null) {
          nextContext = _readContext(contextType);
        } else {
          var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
          nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }

        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";

        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (oldProps !== newProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
          }
        }

        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
        newState = workInProgress.memoizedState;

        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidUpdate === "function") {
            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.effectTag |= Update;
            }
          }

          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.effectTag |= Snapshot;
            }
          }

          return false;
        }

        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress.memoizedState;
        }

        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
            startPhaseTimer(workInProgress, "componentWillUpdate");

            if (typeof instance.componentWillUpdate === "function") {
              instance.componentWillUpdate(newProps, newState, nextContext);
            }

            if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }

            stopPhaseTimer();
          }

          if (typeof instance.componentDidUpdate === "function") {
            workInProgress.effectTag |= Update;
          }

          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            workInProgress.effectTag |= Snapshot;
          }
        } else {
          if (typeof instance.componentDidUpdate === "function") {
            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.effectTag |= Update;
            }
          }

          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.effectTag |= Snapshot;
            }
          }

          workInProgress.memoizedProps = newProps;
          workInProgress.memoizedState = newState;
        }

        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }

      var didWarnAboutMaps;
      var didWarnAboutGenerators;
      var didWarnAboutStringRefs;
      var ownerHasKeyUseWarning;
      var ownerHasFunctionTypeWarning;

      var warnForMissingKey = function warnForMissingKey(child) {};

      {
        didWarnAboutMaps = false;
        didWarnAboutGenerators = false;
        didWarnAboutStringRefs = {};
        ownerHasKeyUseWarning = {};
        ownerHasFunctionTypeWarning = {};

        warnForMissingKey = function warnForMissingKey(child) {
          if (child === null || typeof child !== "object") {
            return;
          }

          if (!child._store || child._store.validated || child.key != null) {
            return;
          }

          if (!(typeof child._store === "object")) {
            throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
          }

          child._store.validated = true;
          var currentComponentErrorInfo = "Each child in a list should have a unique " + '"key" prop. See https://fb.me/react-warning-keys for ' + "more information." + getCurrentFiberStackInDev();

          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }

          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          error("Each child in a list should have a unique " + '"key" prop. See https://fb.me/react-warning-keys for ' + "more information.");
        };
      }
      var isArray$1 = Array.isArray;

      function coerceRef(returnFiber, current, element) {
        var mixedRef = element.ref;

        if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
          {
            if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
              var componentName = getComponentName(returnFiber.type) || "Component";

              if (!didWarnAboutStringRefs[componentName]) {
                {
                  error('A string ref, "%s", has been found within a strict mode tree. ' + "String refs are a source of potential bugs and should be avoided. " + "We recommend using useRef() or createRef() instead. " + "Learn more about using refs safely here: " + "https://fb.me/react-strict-mode-string-ref%s", mixedRef, getStackByFiberInDevAndProd(returnFiber));
                }
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }

          if (element._owner) {
            var owner = element._owner;
            var inst;

            if (owner) {
              var ownerFiber = owner;

              if (!(ownerFiber.tag === ClassComponent)) {
                throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref");
              }

              inst = ownerFiber.stateNode;
            }

            if (!inst) {
              throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
            }

            var stringRef = "" + mixedRef;

            if (current !== null && current.ref !== null && typeof current.ref === "function" && current.ref._stringRef === stringRef) {
              return current.ref;
            }

            var ref = function ref(value) {
              var refs = inst.refs;

              if (refs === emptyRefsObject) {
                refs = inst.refs = {};
              }

              if (value === null) {
                delete refs[stringRef];
              } else {
                refs[stringRef] = value;
              }
            };

            ref._stringRef = stringRef;
            return ref;
          } else {
            if (!(typeof mixedRef === "string")) {
              throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
            }

            if (!element._owner) {
              throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.");
            }
          }
        }

        return mixedRef;
      }

      function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== "textarea") {
          var addendum = "";
          {
            addendum = " If you meant to render a collection of children, use an array " + "instead." + getCurrentFiberStackInDev();
          }
          {
            throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + ")." + addendum);
          }
        }
      }

      function warnOnFunctionType() {
        {
          var currentComponentErrorInfo = "Functions are not valid as a React child. This may happen if " + "you return a Component instead of <Component /> from render. " + "Or maybe you meant to call this function rather than return it." + getCurrentFiberStackInDev();

          if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
            return;
          }

          ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
          error("Functions are not valid as a React child. This may happen if " + "you return a Component instead of <Component /> from render. " + "Or maybe you meant to call this function rather than return it.");
        }
      }

      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            return;
          }

          var last = returnFiber.lastEffect;

          if (last !== null) {
            last.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }

          childToDelete.nextEffect = null;
          childToDelete.effectTag = Deletion;
        }

        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            return null;
          }

          var childToDelete = currentFirstChild;

          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete);
            childToDelete = childToDelete.sibling;
          }

          return null;
        }

        function mapRemainingChildren(returnFiber, currentFirstChild) {
          var existingChildren = new Map();
          var existingChild = currentFirstChild;

          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild);
            } else {
              existingChildren.set(existingChild.index, existingChild);
            }

            existingChild = existingChild.sibling;
          }

          return existingChildren;
        }

        function useFiber(fiber, pendingProps) {
          var clone = createWorkInProgress(fiber, pendingProps);
          clone.index = 0;
          clone.sibling = null;
          return clone;
        }

        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;

          if (!shouldTrackSideEffects) {
            return lastPlacedIndex;
          }

          var current = newFiber.alternate;

          if (current !== null) {
            var oldIndex = current.index;

            if (oldIndex < lastPlacedIndex) {
              newFiber.effectTag = Placement;
              return lastPlacedIndex;
            } else {
              return oldIndex;
            }
          } else {
            newFiber.effectTag = Placement;
            return lastPlacedIndex;
          }
        }

        function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.effectTag = Placement;
          }

          return newFiber;
        }

        function updateTextNode(returnFiber, current, textContent, expirationTime) {
          if (current === null || current.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, textContent);
            existing.return = returnFiber;
            return existing;
          }
        }

        function updateElement(returnFiber, current, element, expirationTime) {
          if (current !== null) {
            if (current.elementType === element.type || isCompatibleFamilyForHotReloading(current, element)) {
              var existing = useFiber(current, element.props);
              existing.ref = coerceRef(returnFiber, current, element);
              existing.return = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            }
          }

          var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
          created.ref = coerceRef(returnFiber, current, element);
          created.return = returnFiber;
          return created;
        }

        function updatePortal(returnFiber, current, portal, expirationTime) {
          if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, portal.children || []);
            existing.return = returnFiber;
            return existing;
          }
        }

        function updateFragment(returnFiber, current, fragment, expirationTime, key) {
          if (current === null || current.tag !== Fragment) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, fragment);
            existing.return = returnFiber;
            return existing;
          }
        }

        function createChild(returnFiber, newChild, expirationTime) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }

              case REACT_PORTAL_TYPE:
                {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

                  _created2.return = returnFiber;
                  return _created2;
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

              _created3.return = returnFiber;
              return _created3;
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }

        function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
          var key = oldFiber !== null ? oldFiber.key : null;

          if (typeof newChild === "string" || typeof newChild === "number") {
            if (key !== null) {
              return null;
            }

            return updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  if (newChild.key === key) {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                    }

                    return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }

              case REACT_PORTAL_TYPE:
                {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              if (key !== null) {
                return null;
              }

              return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }

        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, expirationTime);
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                  }

                  return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
                }

              case REACT_PORTAL_TYPE:
                {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;

              return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }

        function warnOnInvalidKey(child, knownKeys) {
          {
            if (typeof child !== "object" || child === null) {
              return knownKeys;
            }

            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child);
                var key = child.key;

                if (typeof key !== "string") {
                  break;
                }

                if (knownKeys === null) {
                  knownKeys = new Set();
                  knownKeys.add(key);
                  break;
                }

                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }

                error("Encountered two children with the same key, `%s`. " + "Keys should be unique so that components maintain their identity " + "across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted — the behavior is unsupported and " + "could change in a future version.", key);
                break;
            }
          }
          return knownKeys;
        }

        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
          {
            var knownKeys = null;

            for (var i = 0; i < newChildren.length; i++) {
              var child = newChildren[i];
              knownKeys = warnOnInvalidKey(child, knownKeys);
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;

          for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }

            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }

              break;
            }

            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }

            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }

            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }

          if (newIdx === newChildren.length) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }

          if (oldFiber === null) {
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

              if (_newFiber === null) {
                continue;
              }

              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber;
              } else {
                previousNewFiber.sibling = _newFiber;
              }

              previousNewFiber = _newFiber;
            }

            return resultingFirstChild;
          }

          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

            if (_newFiber2 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                }
              }

              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2;
              } else {
                previousNewFiber.sibling = _newFiber2;
              }

              previousNewFiber = _newFiber2;
            }
          }

          if (shouldTrackSideEffects) {
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child);
            });
          }

          return resultingFirstChild;
        }

        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
          var iteratorFn = getIteratorFn(newChildrenIterable);

          if (!(typeof iteratorFn === "function")) {
            throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
          }

          {
            if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield " + "unexpected results because enumerating a generator mutates it. " + "You may convert it to an array with `Array.from()` or the " + "`[...spread]` operator before rendering. Keep in mind " + "you might need to polyfill these features for older browsers.");
              }

              didWarnAboutGenerators = true;
            }

            if (newChildrenIterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is unsupported and will likely yield " + "unexpected results. Convert it to a sequence/iterable of keyed " + "ReactElements instead.");
              }

              didWarnAboutMaps = true;
            }

            var _newChildren = iteratorFn.call(newChildrenIterable);

            if (_newChildren) {
              var knownKeys = null;

              var _step = _newChildren.next();

              for (; !_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys);
              }
            }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);

          if (!(newChildren != null)) {
            throw Error("An iterable object provided no iterator.");
          }

          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          var step = newChildren.next();

          for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }

            var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }

              break;
            }

            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }

            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }

            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }

          if (step.done) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }

          if (oldFiber === null) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

              if (_newFiber3 === null) {
                continue;
              }

              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber3;
              } else {
                previousNewFiber.sibling = _newFiber3;
              }

              previousNewFiber = _newFiber3;
            }

            return resultingFirstChild;
          }

          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                }
              }

              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4;
              } else {
                previousNewFiber.sibling = _newFiber4;
              }

              previousNewFiber = _newFiber4;
            }
          }

          if (shouldTrackSideEffects) {
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child);
            });
          }

          return resultingFirstChild;
        }

        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent);
            existing.return = returnFiber;
            return existing;
          }

          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        }

        function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
          var key = element.key;
          var child = currentFirstChild;

          while (child !== null) {
            if (child.key === key) {
              switch (child.tag) {
                case Fragment:
                  {
                    if (element.type === REACT_FRAGMENT_TYPE) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }

                    break;
                  }

                case Block:
                default:
                  {
                    if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                      deleteRemainingChildren(returnFiber, child.sibling);

                      var _existing3 = useFiber(child, element.props);

                      _existing3.ref = coerceRef(returnFiber, child, element);
                      _existing3.return = returnFiber;
                      {
                        _existing3._debugSource = element._source;
                        _existing3._debugOwner = element._owner;
                      }
                      return _existing3;
                    }

                    break;
                  }
              }

              deleteRemainingChildren(returnFiber, child);
              break;
            } else {
              deleteChild(returnFiber, child);
            }

            child = child.sibling;
          }

          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
            created.return = returnFiber;
            return created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
            _created4.return = returnFiber;
            return _created4;
          }
        }

        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
          var key = portal.key;
          var child = currentFirstChild;

          while (child !== null) {
            if (child.key === key) {
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || []);
                existing.return = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }

            child = child.sibling;
          }

          var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        }

        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
          var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

          if (isUnkeyedTopLevelFragment) {
            newChild = newChild.props.children;
          }

          var isObject = typeof newChild === "object" && newChild !== null;

          if (isObject) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
            }
          }

          if (typeof newChild === "string" || typeof newChild === "number") {
            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, expirationTime));
          }

          if (isArray$1(newChild)) {
            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
          }

          if (getIteratorFn(newChild)) {
            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
          }

          if (isObject) {
            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }

          if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
            switch (returnFiber.tag) {
              case ClassComponent:
                {
                  {
                    var instance = returnFiber.stateNode;

                    if (instance.render._isMockFunction) {
                      break;
                    }
                  }
                }

              case FunctionComponent:
                {
                  var Component = returnFiber.type;
                  {
                    throw Error((Component.displayName || Component.name || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                  }
                }
            }
          }

          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }

        return reconcileChildFibers;
      }

      var reconcileChildFibers = ChildReconciler(true);
      var mountChildFibers = ChildReconciler(false);

      function cloneChildFibers(current, workInProgress) {
        if (!(current === null || workInProgress.child === current.child)) {
          throw Error("Resuming work not yet implemented.");
        }

        if (workInProgress.child === null) {
          return;
        }

        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress.child = newChild;
        newChild.return = workInProgress;

        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling;
          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
          newChild.return = workInProgress;
        }

        newChild.sibling = null;
      }

      function resetChildFibers(workInProgress, renderExpirationTime) {
        var child = workInProgress.child;

        while (child !== null) {
          resetWorkInProgress(child, renderExpirationTime);
          child = child.sibling;
        }
      }

      var NO_CONTEXT = {};
      var contextStackCursor$1 = createCursor(NO_CONTEXT);
      var contextFiberStackCursor = createCursor(NO_CONTEXT);
      var rootInstanceStackCursor = createCursor(NO_CONTEXT);

      function requiredContext(c) {
        if (!(c !== NO_CONTEXT)) {
          throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        }

        return c;
      }

      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }

      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext();
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
      }

      function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      }

      function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
      }

      function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type);

        if (context === nextContext) {
          return;
        }

        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
      }

      function popHostContext(fiber) {
        if (contextFiberStackCursor.current !== fiber) {
          return;
        }

        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
      }

      var DefaultSuspenseContext = 0;
      var SubtreeSuspenseContextMask = 1;
      var InvisibleParentSuspenseContext = 1;
      var ForceSuspenseFallback = 2;
      var suspenseStackCursor = createCursor(DefaultSuspenseContext);

      function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
      }

      function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
      }

      function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
      }

      function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
      }

      function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
      }

      function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
      }

      function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        var nextState = workInProgress.memoizedState;

        if (nextState !== null) {
          if (nextState.dehydrated !== null) {
            return true;
          }

          return false;
        }

        var props = workInProgress.memoizedProps;

        if (props.fallback === undefined) {
          return false;
        }

        if (props.unstable_avoidThisFallback !== true) {
          return true;
        }

        if (hasInvisibleParent) {
          return false;
        }

        return true;
      }

      function findFirstSuspended(row) {
        var node = row;

        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;

            if (state !== null) {
              var dehydrated = state.dehydrated;

              if (dehydrated === null || isSuspenseInstancePending() || isSuspenseInstanceFallback()) {
                return node;
              }
            }
          } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== undefined) {
            var didSuspend = (node.effectTag & DidCapture) !== NoEffect;

            if (didSuspend) {
              return node;
            }
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === row) {
            return null;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === row) {
              return null;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }

        return null;
      }

      function createDeprecatedResponderListener(responder, props) {
        var eventResponderListener = {
          responder: responder,
          props: props
        };
        {
          Object.freeze(eventResponderListener);
        }
        return eventResponderListener;
      }

      var HasEffect = 1;
      var Layout = 2;
      var Passive$1 = 4;
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,
          ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
      var didWarnAboutMismatchedHooksForComponent;
      {
        didWarnAboutMismatchedHooksForComponent = new Set();
      }
      var renderExpirationTime = NoWork;
      var currentlyRenderingFiber$1 = null;
      var currentHook = null;
      var workInProgressHook = null;
      var didScheduleRenderPhaseUpdate = false;
      var RE_RENDER_LIMIT = 25;
      var currentHookNameInDev = null;
      var hookTypesDev = null;
      var hookTypesUpdateIndexDev = -1;
      var ignorePreviousDependencies = false;

      function mountHookTypesDev() {
        {
          var hookName = currentHookNameInDev;

          if (hookTypesDev === null) {
            hookTypesDev = [hookName];
          } else {
            hookTypesDev.push(hookName);
          }
        }
      }

      function updateHookTypesDev() {
        {
          var hookName = currentHookNameInDev;

          if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;

            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
              warnOnHookMismatchInDev(hookName);
            }
          }
        }
      }

      function checkDepsAreArrayDev(deps) {
        {
          if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
            error("%s received a final argument that is not an array (instead, received `%s`). When " + "specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
          }
        }
      }

      function warnOnHookMismatchInDev(currentHookName) {
        {
          var componentName = getComponentName(currentlyRenderingFiber$1.type);

          if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);

            if (hookTypesDev !== null) {
              var table = "";
              var secondColumnStart = 30;

              for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                var oldHookName = hookTypesDev[i];
                var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                var row = i + 1 + ". " + oldHookName;

                while (row.length < secondColumnStart) {
                  row += " ";
                }

                row += newHookName + "\n";
                table += row;
              }

              error("React has detected a change in the order of Hooks called by %s. " + "This will lead to bugs and errors if not fixed. " + "For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n" + "   Previous render            Next render\n" + "   ------------------------------------------------------\n" + "%s" + "   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
          }
        }
      }

      function throwInvalidHookError() {
        {
          throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
        }
      }

      function areHookInputsEqual(nextDeps, prevDeps) {
        {
          if (ignorePreviousDependencies) {
            return false;
          }
        }

        if (prevDeps === null) {
          {
            error("%s received a final argument during this render, but not during " + "the previous render. Even though the final argument is optional, " + "its type cannot change between renders.", currentHookNameInDev);
          }
          return false;
        }

        {
          if (nextDeps.length !== prevDeps.length) {
            error("The final argument passed to %s changed size between renders. The " + "order and size of this array must remain constant.\n\n" + "Previous: %s\n" + "Incoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
          }
        }

        for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
          if (objectIs(nextDeps[i], prevDeps[i])) {
            continue;
          }

          return false;
        }

        return true;
      }

      function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderExpirationTime) {
        renderExpirationTime = nextRenderExpirationTime;
        currentlyRenderingFiber$1 = workInProgress;
        {
          hookTypesDev = current !== null ? current._debugHookTypes : null;
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
        }
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.expirationTime = NoWork;
        {
          if (current !== null && current.memoizedState !== null) {
            ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;
          } else if (hookTypesDev !== null) {
            ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;
          } else {
            ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;
          }
        }
        var children = Component(props, secondArg);

        if (workInProgress.expirationTime === renderExpirationTime) {
          var numberOfReRenders = 0;

          do {
            workInProgress.expirationTime = NoWork;

            if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
              throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            }

            numberOfReRenders += 1;
            {
              ignorePreviousDependencies = false;
            }
            currentHook = null;
            workInProgressHook = null;
            workInProgress.updateQueue = null;
            {
              hookTypesUpdateIndexDev = -1;
            }
            ReactCurrentDispatcher.current = HooksDispatcherOnRerenderInDEV;
            children = Component(props, secondArg);
          } while (workInProgress.expirationTime === renderExpirationTime);
        }

        ReactCurrentDispatcher.current = ContextOnlyDispatcher;
        {
          workInProgress._debugHookTypes = hookTypesDev;
        }
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderExpirationTime = NoWork;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          currentHookNameInDev = null;
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
        }
        didScheduleRenderPhaseUpdate = false;

        if (!!didRenderTooFewHooks) {
          throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        }

        return children;
      }

      function bailoutHooks(current, workInProgress, expirationTime) {
        workInProgress.updateQueue = current.updateQueue;
        workInProgress.effectTag &= ~(Passive | Update);

        if (current.expirationTime <= expirationTime) {
          current.expirationTime = NoWork;
        }
      }

      function resetHooksAfterThrow() {
        ReactCurrentDispatcher.current = ContextOnlyDispatcher;

        if (didScheduleRenderPhaseUpdate) {
          var hook = currentlyRenderingFiber$1.memoizedState;

          while (hook !== null) {
            var queue = hook.queue;

            if (queue !== null) {
              queue.pending = null;
            }

            hook = hook.next;
          }
        }

        renderExpirationTime = NoWork;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          currentHookNameInDev = null;
        }
        didScheduleRenderPhaseUpdate = false;
      }

      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };

        if (workInProgressHook === null) {
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        } else {
          workInProgressHook = workInProgressHook.next = hook;
        }

        return workInProgressHook;
      }

      function updateWorkInProgressHook() {
        var nextCurrentHook;

        if (currentHook === null) {
          var current = currentlyRenderingFiber$1.alternate;

          if (current !== null) {
            nextCurrentHook = current.memoizedState;
          } else {
            nextCurrentHook = null;
          }
        } else {
          nextCurrentHook = currentHook.next;
        }

        var nextWorkInProgressHook;

        if (workInProgressHook === null) {
          nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        } else {
          nextWorkInProgressHook = workInProgressHook.next;
        }

        if (nextWorkInProgressHook !== null) {
          workInProgressHook = nextWorkInProgressHook;
          nextWorkInProgressHook = workInProgressHook.next;
          currentHook = nextCurrentHook;
        } else {
          if (!(nextCurrentHook !== null)) {
            throw Error("Rendered more hooks than during the previous render.");
          }

          currentHook = nextCurrentHook;
          var newHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };

          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
          } else {
            workInProgressHook = workInProgressHook.next = newHook;
          }
        }

        return workInProgressHook;
      }

      function createFunctionComponentUpdateQueue() {
        return {
          lastEffect: null
        };
      }

      function basicStateReducer(state, action) {
        return typeof action === "function" ? action(state) : action;
      }

      function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;

        if (init !== undefined) {
          initialState = init(initialArg);
        } else {
          initialState = initialArg;
        }

        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
          pending: null,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }

      function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;

        if (!(queue !== null)) {
          throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }

        queue.lastRenderedReducer = reducer;
        var current = currentHook;
        var baseQueue = current.baseQueue;
        var pendingQueue = queue.pending;

        if (pendingQueue !== null) {
          if (baseQueue !== null) {
            var baseFirst = baseQueue.next;
            var pendingFirst = pendingQueue.next;
            baseQueue.next = pendingFirst;
            pendingQueue.next = baseFirst;
          }

          current.baseQueue = baseQueue = pendingQueue;
          queue.pending = null;
        }

        if (baseQueue !== null) {
          var first = baseQueue.next;
          var newState = current.baseState;
          var newBaseState = null;
          var newBaseQueueFirst = null;
          var newBaseQueueLast = null;
          var update = first;

          do {
            var updateExpirationTime = update.expirationTime;

            if (updateExpirationTime < renderExpirationTime) {
              var clone = {
                expirationTime: update.expirationTime,
                suspenseConfig: update.suspenseConfig,
                action: update.action,
                eagerReducer: update.eagerReducer,
                eagerState: update.eagerState,
                next: null
              };

              if (newBaseQueueLast === null) {
                newBaseQueueFirst = newBaseQueueLast = clone;
                newBaseState = newState;
              } else {
                newBaseQueueLast = newBaseQueueLast.next = clone;
              }

              if (updateExpirationTime > currentlyRenderingFiber$1.expirationTime) {
                currentlyRenderingFiber$1.expirationTime = updateExpirationTime;
                markUnprocessedUpdateTime(updateExpirationTime);
              }
            } else {
              if (newBaseQueueLast !== null) {
                var _clone = {
                  expirationTime: Sync,
                  suspenseConfig: update.suspenseConfig,
                  action: update.action,
                  eagerReducer: update.eagerReducer,
                  eagerState: update.eagerState,
                  next: null
                };
                newBaseQueueLast = newBaseQueueLast.next = _clone;
              }

              markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);

              if (update.eagerReducer === reducer) {
                newState = update.eagerState;
              } else {
                var action = update.action;
                newState = reducer(newState, action);
              }
            }

            update = update.next;
          } while (update !== null && update !== first);

          if (newBaseQueueLast === null) {
            newBaseState = newState;
          } else {
            newBaseQueueLast.next = newBaseQueueFirst;
          }

          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }

          hook.memoizedState = newState;
          hook.baseState = newBaseState;
          hook.baseQueue = newBaseQueueLast;
          queue.lastRenderedState = newState;
        }

        var dispatch = queue.dispatch;
        return [hook.memoizedState, dispatch];
      }

      function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;

        if (!(queue !== null)) {
          throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }

        queue.lastRenderedReducer = reducer;
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;

        if (lastRenderPhaseUpdate !== null) {
          queue.pending = null;
          var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          var update = firstRenderPhaseUpdate;

          do {
            var action = update.action;
            newState = reducer(newState, action);
            update = update.next;
          } while (update !== firstRenderPhaseUpdate);

          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }

          hook.memoizedState = newState;

          if (hook.baseQueue === null) {
            hook.baseState = newState;
          }

          queue.lastRenderedState = newState;
        }

        return [newState, dispatch];
      }

      function mountState(initialState) {
        var hook = mountWorkInProgressHook();

        if (typeof initialState === "function") {
          initialState = initialState();
        }

        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
          pending: null,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }

      function updateState(initialState) {
        return updateReducer(basicStateReducer);
      }

      function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
      }

      function pushEffect(tag, create, destroy, deps) {
        var effect = {
          tag: tag,
          create: create,
          destroy: destroy,
          deps: deps,
          next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var lastEffect = componentUpdateQueue.lastEffect;

          if (lastEffect === null) {
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var firstEffect = lastEffect.next;
            lastEffect.next = effect;
            effect.next = firstEffect;
            componentUpdateQueue.lastEffect = effect;
          }
        }

        return effect;
      }

      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var ref = {
          current: initialValue
        };
        {
          Object.seal(ref);
        }
        hook.memoizedState = ref;
        return ref;
      }

      function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
      }

      function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
        hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, undefined, nextDeps);
      }

      function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;

        if (currentHook !== null) {
          var prevEffect = currentHook.memoizedState;
          destroy = prevEffect.destroy;

          if (nextDeps !== null) {
            var prevDeps = prevEffect.deps;

            if (areHookInputsEqual(nextDeps, prevDeps)) {
              pushEffect(hookEffectTag, create, destroy, nextDeps);
              return;
            }
          }
        }

        currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
        hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, destroy, nextDeps);
      }

      function mountEffect(create, deps) {
        {
          if ("undefined" !== typeof jest) {
            warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
          }
        }
        return mountEffectImpl(Update | Passive, Passive$1, create, deps);
      }

      function updateEffect(create, deps) {
        {
          if ("undefined" !== typeof jest) {
            warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
          }
        }
        return updateEffectImpl(Update | Passive, Passive$1, create, deps);
      }

      function mountLayoutEffect(create, deps) {
        return mountEffectImpl(Update, Layout, create, deps);
      }

      function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
      }

      function imperativeHandleEffect(create, ref) {
        if (typeof ref === "function") {
          var refCallback = ref;

          var _inst = create();

          refCallback(_inst);
          return function () {
            refCallback(null);
          };
        } else if (ref !== null && ref !== undefined) {
          var refObject = ref;
          {
            if (!refObject.hasOwnProperty("current")) {
              error("Expected useImperativeHandle() first argument to either be a " + "ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
            }
          }

          var _inst2 = create();

          refObject.current = _inst2;
          return function () {
            refObject.current = null;
          };
        }
      }

      function mountImperativeHandle(ref, create, deps) {
        {
          if (typeof create !== "function") {
            error("Expected useImperativeHandle() second argument to be a function " + "that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
          }
        }
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }

      function updateImperativeHandle(ref, create, deps) {
        {
          if (typeof create !== "function") {
            error("Expected useImperativeHandle() second argument to be a function " + "that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
          }
        }
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }

      function mountDebugValue(value, formatterFn) {}

      var updateDebugValue = mountDebugValue;

      function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }

      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;

        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];

            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }

        hook.memoizedState = [callback, nextDeps];
        return callback;
      }

      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }

      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;

        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];

            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }

        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }

      function mountDeferredValue(value, config) {
        var _mountState = mountState(value),
            prevValue = _mountState[0],
            setValue = _mountState[1];

        mountEffect(function () {
          var previousConfig = ReactCurrentBatchConfig$1.suspense;
          ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

          try {
            setValue(value);
          } finally {
            ReactCurrentBatchConfig$1.suspense = previousConfig;
          }
        }, [value, config]);
        return prevValue;
      }

      function updateDeferredValue(value, config) {
        var _updateState = updateState(),
            prevValue = _updateState[0],
            setValue = _updateState[1];

        updateEffect(function () {
          var previousConfig = ReactCurrentBatchConfig$1.suspense;
          ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

          try {
            setValue(value);
          } finally {
            ReactCurrentBatchConfig$1.suspense = previousConfig;
          }
        }, [value, config]);
        return prevValue;
      }

      function rerenderDeferredValue(value, config) {
        var _rerenderState = rerenderState(),
            prevValue = _rerenderState[0],
            setValue = _rerenderState[1];

        updateEffect(function () {
          var previousConfig = ReactCurrentBatchConfig$1.suspense;
          ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

          try {
            setValue(value);
          } finally {
            ReactCurrentBatchConfig$1.suspense = previousConfig;
          }
        }, [value, config]);
        return prevValue;
      }

      function startTransition(setPending, config, callback) {
        var priorityLevel = getCurrentPriorityLevel();
        runWithPriority(priorityLevel < UserBlockingPriority ? UserBlockingPriority : priorityLevel, function () {
          setPending(true);
        });
        runWithPriority(priorityLevel > NormalPriority ? NormalPriority : priorityLevel, function () {
          var previousConfig = ReactCurrentBatchConfig$1.suspense;
          ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

          try {
            setPending(false);
            callback();
          } finally {
            ReactCurrentBatchConfig$1.suspense = previousConfig;
          }
        });
      }

      function mountTransition(config) {
        var _mountState2 = mountState(false),
            isPending = _mountState2[0],
            setPending = _mountState2[1];

        var start = mountCallback(startTransition.bind(null, setPending, config), [setPending, config]);
        return [start, isPending];
      }

      function updateTransition(config) {
        var _updateState2 = updateState(),
            isPending = _updateState2[0],
            setPending = _updateState2[1];

        var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
        return [start, isPending];
      }

      function rerenderTransition(config) {
        var _rerenderState2 = rerenderState(),
            isPending = _rerenderState2[0],
            setPending = _rerenderState2[1];

        var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
        return [start, isPending];
      }

      function dispatchAction(fiber, queue, action) {
        {
          if (typeof arguments[3] === "function") {
            error("State updates from the useState() and useReducer() Hooks don't support the " + "second callback argument. To execute a side effect after " + "rendering, declare it in the component body with useEffect().");
          }
        }
        var currentTime = requestCurrentTimeForUpdate();
        var suspenseConfig = requestCurrentSuspenseConfig();
        var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
        var update = {
          expirationTime: expirationTime,
          suspenseConfig: suspenseConfig,
          action: action,
          eagerReducer: null,
          eagerState: null,
          next: null
        };
        {
          update.priority = getCurrentPriorityLevel();
        }
        var pending = queue.pending;

        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }

        queue.pending = update;
        var alternate = fiber.alternate;

        if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
          didScheduleRenderPhaseUpdate = true;
          update.expirationTime = renderExpirationTime;
          currentlyRenderingFiber$1.expirationTime = renderExpirationTime;
        } else {
          if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
            var lastRenderedReducer = queue.lastRenderedReducer;

            if (lastRenderedReducer !== null) {
              var prevDispatcher;
              {
                prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              }

              try {
                var currentState = queue.lastRenderedState;
                var eagerState = lastRenderedReducer(currentState, action);
                update.eagerReducer = lastRenderedReducer;
                update.eagerState = eagerState;

                if (objectIs(eagerState, currentState)) {
                  return;
                }
              } catch (error) {} finally {
                {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              }
            }
          }

          {
            if ("undefined" !== typeof jest) {
              warnIfNotScopedWithMatchingAct(fiber);
              warnIfNotCurrentlyActingUpdatesInDev(fiber);
            }
          }
          scheduleWork(fiber, expirationTime);
        }
      }

      function mountEventListener(event) {
        return undefined;
      }

      function updateEventListener(event) {
        return undefined;
      }

      var ContextOnlyDispatcher = {
        readContext: _readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useResponder: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useEvent: throwInvalidHookError
      };
      var HooksDispatcherOnMountInDEV = null;
      var HooksDispatcherOnMountWithHookTypesInDEV = null;
      var HooksDispatcherOnUpdateInDEV = null;
      var HooksDispatcherOnRerenderInDEV = null;
      var InvalidNestedHooksDispatcherOnMountInDEV = null;
      var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
      var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
      {
        var warnInvalidContextAccess = function warnInvalidContextAccess() {
          error("Context can only be read while React is rendering. " + "In classes, you can read it in the render method or getDerivedStateFromProps. " + "In function components, you can read it directly in the function body, but not " + "inside Hooks like useReducer() or useMemo().");
        };

        var warnInvalidHookAccess = function warnInvalidHookAccess() {
          error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. " + "You can only call Hooks at the top level of your React function. " + "For more information, see " + "https://fb.me/rules-of-hooks");
        };

        HooksDispatcherOnMountInDEV = {
          readContext: function readContext(context, observedBits) {
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
            return mountDebugValue();
          },
          useResponder: function useResponder(responder, props) {
            currentHookNameInDev = "useResponder";
            mountHookTypesDev();
            return createDeprecatedResponderListener(responder, props);
          },
          useDeferredValue: function useDeferredValue(value, config) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value, config);
          },
          useTransition: function useTransition(config) {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition(config);
          },
          useEvent: function useEvent(event) {
            currentHookNameInDev = "useEvent";
            mountHookTypesDev();
            return mountEventListener();
          }
        };
        HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function readContext(context, observedBits) {
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return mountDebugValue();
          },
          useResponder: function useResponder(responder, props) {
            currentHookNameInDev = "useResponder";
            updateHookTypesDev();
            return createDeprecatedResponderListener(responder, props);
          },
          useDeferredValue: function useDeferredValue(value, config) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value, config);
          },
          useTransition: function useTransition(config) {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition(config);
          },
          useEvent: function useEvent(event) {
            currentHookNameInDev = "useEvent";
            updateHookTypesDev();
            return mountEventListener();
          }
        };
        HooksDispatcherOnUpdateInDEV = {
          readContext: function readContext(context, observedBits) {
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useResponder: function useResponder(responder, props) {
            currentHookNameInDev = "useResponder";
            updateHookTypesDev();
            return createDeprecatedResponderListener(responder, props);
          },
          useDeferredValue: function useDeferredValue(value, config) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value, config);
          },
          useTransition: function useTransition(config) {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition(config);
          },
          useEvent: function useEvent(event) {
            currentHookNameInDev = "useEvent";
            updateHookTypesDev();
            return updateEventListener();
          }
        };
        HooksDispatcherOnRerenderInDEV = {
          readContext: function readContext(context, observedBits) {
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useResponder: function useResponder(responder, props) {
            currentHookNameInDev = "useResponder";
            updateHookTypesDev();
            return createDeprecatedResponderListener(responder, props);
          },
          useDeferredValue: function useDeferredValue(value, config) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return rerenderDeferredValue(value, config);
          },
          useTransition: function useTransition(config) {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return rerenderTransition(config);
          },
          useEvent: function useEvent(event) {
            currentHookNameInDev = "useEvent";
            updateHookTypesDev();
            return updateEventListener();
          }
        };
        InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function readContext(context, observedBits) {
            warnInvalidContextAccess();
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
          },
          useResponder: function useResponder(responder, props) {
            currentHookNameInDev = "useResponder";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return createDeprecatedResponderListener(responder, props);
          },
          useDeferredValue: function useDeferredValue(value, config) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value, config);
          },
          useTransition: function useTransition(config) {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition(config);
          },
          useEvent: function useEvent(event) {
            currentHookNameInDev = "useEvent";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEventListener();
          }
        };
        InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function readContext(context, observedBits) {
            warnInvalidContextAccess();
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useResponder: function useResponder(responder, props) {
            currentHookNameInDev = "useResponder";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return createDeprecatedResponderListener(responder, props);
          },
          useDeferredValue: function useDeferredValue(value, config) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value, config);
          },
          useTransition: function useTransition(config) {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition(config);
          },
          useEvent: function useEvent(event) {
            currentHookNameInDev = "useEvent";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEventListener();
          }
        };
        InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function readContext(context, observedBits) {
            warnInvalidContextAccess();
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useResponder: function useResponder(responder, props) {
            currentHookNameInDev = "useResponder";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return createDeprecatedResponderListener(responder, props);
          },
          useDeferredValue: function useDeferredValue(value, config) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value, config);
          },
          useTransition: function useTransition(config) {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition(config);
          },
          useEvent: function useEvent(event) {
            currentHookNameInDev = "useEvent";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEventListener();
          }
        };
      }
      var now$1 = Scheduler.unstable_now;
      var commitTime = 0;
      var profilerStartTime = -1;

      function getCommitTime() {
        return commitTime;
      }

      function recordCommitTime() {
        commitTime = now$1();
      }

      function startProfilerTimer(fiber) {
        profilerStartTime = now$1();

        if (fiber.actualStartTime < 0) {
          fiber.actualStartTime = now$1();
        }
      }

      function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
      }

      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
          var elapsedTime = now$1() - profilerStartTime;
          fiber.actualDuration += elapsedTime;

          if (overrideBaseTime) {
            fiber.selfBaseDuration = elapsedTime;
          }

          profilerStartTime = -1;
        }
      }

      function enterHydrationState(fiber) {
        {
          return false;
        }
      }

      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        {
          {
            throw Error("Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }

      function prepareToHydrateHostTextInstance(fiber) {
        {
          {
            throw Error("Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var shouldUpdate = hydrateTextInstance();
      }

      function popHydrationState(fiber) {
        {
          return false;
        }
      }

      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var didReceiveUpdate = false;
      var didWarnAboutBadClass;
      var didWarnAboutModulePatternComponent;
      var didWarnAboutContextTypeOnFunctionComponent;
      var didWarnAboutGetDerivedStateOnFunctionComponent;
      var didWarnAboutFunctionRefs;
      var didWarnAboutReassigningProps;
      var didWarnAboutRevealOrder;
      var didWarnAboutTailOptions;
      {
        didWarnAboutBadClass = {};
        didWarnAboutModulePatternComponent = {};
        didWarnAboutContextTypeOnFunctionComponent = {};
        didWarnAboutGetDerivedStateOnFunctionComponent = {};
        didWarnAboutFunctionRefs = {};
        didWarnAboutReassigningProps = false;
        didWarnAboutRevealOrder = {};
        didWarnAboutTailOptions = {};
      }

      function reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime) {
        if (current === null) {
          workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
        } else {
          workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
        }
      }

      function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime) {
        workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderExpirationTime);
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      }

      function updateForwardRef(current, workInProgress, Component, nextProps, renderExpirationTime) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var innerPropTypes = Component.propTypes;

            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
            }
          }
        }
        var render = Component.render;
        var ref = workInProgress.ref;
        var nextChildren;
        prepareToReadContext(workInProgress, renderExpirationTime);
        {
          ReactCurrentOwner$1.current = workInProgress;
          setIsRendering(true);
          nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);
          setIsRendering(false);
        }

        if (current !== null && !didReceiveUpdate) {
          bailoutHooks(current, workInProgress, renderExpirationTime);
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
        }

        workInProgress.effectTag |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
      }

      function updateMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
        if (current === null) {
          var type = Component.type;

          if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
            var resolvedType = type;
            {
              resolvedType = resolveFunctionForHotReloading(type);
            }
            workInProgress.tag = SimpleMemoComponent;
            workInProgress.type = resolvedType;
            {
              validateFunctionComponentInDev(workInProgress, type);
            }
            return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateExpirationTime, renderExpirationTime);
          }

          {
            var innerPropTypes = type.propTypes;

            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
            }
          }
          var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
          child.ref = workInProgress.ref;
          child.return = workInProgress;
          workInProgress.child = child;
          return child;
        }

        {
          var _type = Component.type;
          var _innerPropTypes = _type.propTypes;

          if (_innerPropTypes) {
            checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
          }
        }
        var currentChild = current.child;

        if (updateExpirationTime < renderExpirationTime) {
          var prevProps = currentChild.memoizedProps;
          var compare = Component.compare;
          compare = compare !== null ? compare : shallowEqual;

          if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
          }
        }

        workInProgress.effectTag |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
      }

      function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerMemoType = workInProgress.elementType;

            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
              outerMemoType = refineResolvedLazyComponent(outerMemoType);
            }

            var outerPropTypes = outerMemoType && outerMemoType.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
            }
          }
        }

        if (current !== null) {
          var prevProps = current.memoizedProps;

          if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && workInProgress.type === current.type) {
            didReceiveUpdate = false;

            if (updateExpirationTime < renderExpirationTime) {
              workInProgress.expirationTime = current.expirationTime;
              return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
            }
          }
        }

        return updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime);
      }

      function updateFragment(current, workInProgress, renderExpirationTime) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
      }

      function updateMode(current, workInProgress, renderExpirationTime) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
      }

      function updateProfiler(current, workInProgress, renderExpirationTime) {
        {
          workInProgress.effectTag |= Update;
          var stateNode = workInProgress.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
        }
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
      }

      function markRef(current, workInProgress) {
        var ref = workInProgress.ref;

        if (current === null && ref !== null || current !== null && current.ref !== ref) {
          workInProgress.effectTag |= Ref;
        }
      }

      function updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var innerPropTypes = Component.propTypes;

            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
            }
          }
        }
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
          context = getMaskedContext(workInProgress, unmaskedContext);
        }
        var nextChildren;
        prepareToReadContext(workInProgress, renderExpirationTime);
        {
          ReactCurrentOwner$1.current = workInProgress;
          setIsRendering(true);
          nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);
          setIsRendering(false);
        }

        if (current !== null && !didReceiveUpdate) {
          bailoutHooks(current, workInProgress, renderExpirationTime);
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
        }

        workInProgress.effectTag |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
      }

      function updateClassComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var innerPropTypes = Component.propTypes;

            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
            }
          }
        }
        var hasContext;

        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress);
        } else {
          hasContext = false;
        }

        prepareToReadContext(workInProgress, renderExpirationTime);
        var instance = workInProgress.stateNode;
        var shouldUpdate;

        if (instance === null) {
          if (current !== null) {
            current.alternate = null;
            workInProgress.alternate = null;
            workInProgress.effectTag |= Placement;
          }

          constructClassInstance(workInProgress, Component, nextProps);
          mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
          shouldUpdate = true;
        } else if (current === null) {
          shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        } else {
          shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderExpirationTime);
        }

        var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);
        {
          var inst = workInProgress.stateNode;

          if (inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) {
              error("It looks like %s is reassigning its own `this.props` while rendering. " + "This is not supported and can lead to confusing bugs.", getComponentName(workInProgress.type) || "a component");
            }

            didWarnAboutReassigningProps = true;
          }
        }
        return nextUnitOfWork;
      }

      function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
        markRef(current, workInProgress);
        var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

        if (!shouldUpdate && !didCaptureError) {
          if (hasContext) {
            invalidateContextProvider(workInProgress, Component, false);
          }

          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
        }

        var instance = workInProgress.stateNode;
        ReactCurrentOwner$1.current = workInProgress;
        var nextChildren;

        if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
          nextChildren = null;
          {
            stopProfilerTimerIfRunning();
          }
        } else {
          {
            setIsRendering(true);
            nextChildren = instance.render();
            setIsRendering(false);
          }
        }

        workInProgress.effectTag |= PerformedWork;

        if (current !== null && didCaptureError) {
          forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime);
        } else {
          reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
        }

        workInProgress.memoizedState = instance.state;

        if (hasContext) {
          invalidateContextProvider(workInProgress, Component, true);
        }

        return workInProgress.child;
      }

      function pushHostRootContext(workInProgress) {
        var root = workInProgress.stateNode;

        if (root.pendingContext) {
          pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
        } else if (root.context) {
          pushTopLevelContextObject(workInProgress, root.context, false);
        }

        pushHostContainer(workInProgress, root.containerInfo);
      }

      function updateHostRoot(current, workInProgress, renderExpirationTime) {
        pushHostRootContext(workInProgress);
        var updateQueue = workInProgress.updateQueue;

        if (!(current !== null && updateQueue !== null)) {
          throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
        }

        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState !== null ? prevState.element : null;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderExpirationTime);
        var nextState = workInProgress.memoizedState;
        var nextChildren = nextState.element;

        if (nextChildren === prevChildren) {
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
        }

        var root = workInProgress.stateNode;

        if (root.hydrate && enterHydrationState()) {
          var child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
          workInProgress.child = child;
          var node = child;

          while (node) {
            node.effectTag = node.effectTag & ~Placement | Hydrating;
            node = node.sibling;
          }
        } else {
          reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
        }

        return workInProgress.child;
      }

      function updateHostComponent(current, workInProgress, renderExpirationTime) {
        pushHostContext(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current !== null ? current.memoizedProps : null;
        var nextChildren = nextProps.children;

        if (prevProps !== null && shouldSetTextContent()) {
          workInProgress.effectTag |= ContentReset;
        }

        markRef(current, workInProgress);

        if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree()) {
          {
            markSpawnedWork(Never);
          }
          workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
          return null;
        }

        reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
      }

      function updateHostText(current, workInProgress) {
        return null;
      }

      function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress.alternate = null;
          workInProgress.effectTag |= Placement;
        }

        var props = workInProgress.pendingProps;
        cancelWorkTimer(workInProgress);
        var Component = readLazyComponentType(elementType);
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        startWorkTimer(workInProgress);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;

        switch (resolvedTag) {
          case FunctionComponent:
            {
              {
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
              return child;
            }

          case ClassComponent:
            {
              {
                workInProgress.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
              return child;
            }

          case ForwardRef:
            {
              {
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
              return child;
            }

          case MemoComponent:
            {
              {
                if (workInProgress.type !== workInProgress.elementType) {
                  var outerPropTypes = Component.propTypes;

                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component));
                  }
                }
              }
              child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), updateExpirationTime, renderExpirationTime);
              return child;
            }
        }

        var hint = "";
        {
          if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
            hint = " Did you wrap a component in React.lazy() more than once?";
          }
        }
        {
          throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
        }
      }

      function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress.alternate = null;
          workInProgress.effectTag |= Placement;
        }

        workInProgress.tag = ClassComponent;
        var hasContext;

        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress);
        } else {
          hasContext = false;
        }

        prepareToReadContext(workInProgress, renderExpirationTime);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
      }

      function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress.alternate = null;
          workInProgress.effectTag |= Placement;
        }

        var props = workInProgress.pendingProps;
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
          context = getMaskedContext(workInProgress, unmaskedContext);
        }
        prepareToReadContext(workInProgress, renderExpirationTime);
        var value;
        {
          if (Component.prototype && typeof Component.prototype.render === "function") {
            var componentName = getComponentName(Component) || "Unknown";

            if (!didWarnAboutBadClass[componentName]) {
              error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + "This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
              didWarnAboutBadClass[componentName] = true;
            }
          }

          if (workInProgress.mode & StrictMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
          }

          ReactCurrentOwner$1.current = workInProgress;
          value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
        }
        workInProgress.effectTag |= PerformedWork;

        if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
          {
            var _componentName = getComponentName(Component) || "Unknown";

            if (!didWarnAboutModulePatternComponent[_componentName]) {
              error("The <%s /> component appears to be a function component that returns a class instance. " + "Change %s to a class that extends React.Component instead. " + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + "cannot be called with `new` by React.", _componentName, _componentName, _componentName);
              didWarnAboutModulePatternComponent[_componentName] = true;
            }
          }
          workInProgress.tag = ClassComponent;
          workInProgress.memoizedState = null;
          workInProgress.updateQueue = null;
          var hasContext = false;

          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
          } else {
            hasContext = false;
          }

          workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
          initializeUpdateQueue(workInProgress);
          var getDerivedStateFromProps = Component.getDerivedStateFromProps;

          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
          }

          adoptClassInstance(workInProgress, value);
          mountClassInstance(workInProgress, Component, props, renderExpirationTime);
          return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
        } else {
          workInProgress.tag = FunctionComponent;
          reconcileChildren(null, workInProgress, value, renderExpirationTime);
          {
            validateFunctionComponentInDev(workInProgress, Component);
          }
          return workInProgress.child;
        }
      }

      function validateFunctionComponentInDev(workInProgress, Component) {
        {
          if (Component) {
            if (Component.childContextTypes) {
              error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
            }
          }

          if (workInProgress.ref !== null) {
            var info = "";
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();

            if (ownerName) {
              info += "\n\nCheck the render method of `" + ownerName + "`.";
            }

            var warningKey = ownerName || workInProgress._debugID || "";
            var debugSource = workInProgress._debugSource;

            if (debugSource) {
              warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
            }

            if (!didWarnAboutFunctionRefs[warningKey]) {
              didWarnAboutFunctionRefs[warningKey] = true;
              error("Function components cannot be given refs. " + "Attempts to access this ref will fail. " + "Did you mean to use React.forwardRef()?%s", info);
            }
          }

          if (typeof Component.getDerivedStateFromProps === "function") {
            var _componentName2 = getComponentName(Component) || "Unknown";

            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
              error("%s: Function components do not support getDerivedStateFromProps.", _componentName2);
              didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
            }
          }

          if (typeof Component.contextType === "object" && Component.contextType !== null) {
            var _componentName3 = getComponentName(Component) || "Unknown";

            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
              error("%s: Function components do not support contextType.", _componentName3);
              didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
            }
          }
        }
      }

      var SUSPENDED_MARKER = {
        dehydrated: null,
        retryTime: NoWork
      };

      function shouldRemainOnFallback(suspenseContext, current, workInProgress) {
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current === null || current.memoizedState !== null);
      }

      function updateSuspenseComponent(current, workInProgress, renderExpirationTime) {
        var mode = workInProgress.mode;
        var nextProps = workInProgress.pendingProps;
        {
          if (shouldSuspend(workInProgress)) {
            workInProgress.effectTag |= DidCapture;
          }
        }
        var suspenseContext = suspenseStackCursor.current;
        var nextDidTimeout = false;
        var didSuspend = (workInProgress.effectTag & DidCapture) !== NoEffect;

        if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
          nextDidTimeout = true;
          workInProgress.effectTag &= ~DidCapture;
        } else {
          if (current === null || current.memoizedState !== null) {
            if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
              suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
          }
        }

        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext);

        if (current === null) {
          if (nextProps.fallback !== undefined) ;

          if (nextDidTimeout) {
            var nextFallbackChildren = nextProps.fallback;
            var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
            primaryChildFragment.return = workInProgress;

            if ((workInProgress.mode & BlockingMode) === NoMode) {
              var progressedState = workInProgress.memoizedState;
              var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
              primaryChildFragment.child = progressedPrimaryChild;
              var progressedChild = progressedPrimaryChild;

              while (progressedChild !== null) {
                progressedChild.return = primaryChildFragment;
                progressedChild = progressedChild.sibling;
              }
            }

            var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
            fallbackChildFragment.return = workInProgress;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress.memoizedState = SUSPENDED_MARKER;
            workInProgress.child = primaryChildFragment;
            return fallbackChildFragment;
          } else {
            var nextPrimaryChildren = nextProps.children;
            workInProgress.memoizedState = null;
            return workInProgress.child = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
          }
        } else {
          var prevState = current.memoizedState;

          if (prevState !== null) {
            var currentPrimaryChildFragment = current.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;

            if (nextDidTimeout) {
              var _nextFallbackChildren2 = nextProps.fallback;

              var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps);

              _primaryChildFragment2.return = workInProgress;

              if ((workInProgress.mode & BlockingMode) === NoMode) {
                var _progressedState = workInProgress.memoizedState;

                var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;

                if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
                  _primaryChildFragment2.child = _progressedPrimaryChild;
                  var _progressedChild2 = _progressedPrimaryChild;

                  while (_progressedChild2 !== null) {
                    _progressedChild2.return = _primaryChildFragment2;
                    _progressedChild2 = _progressedChild2.sibling;
                  }
                }
              }

              if (workInProgress.mode & ProfileMode) {
                var _treeBaseDuration = 0;
                var _hiddenChild = _primaryChildFragment2.child;

                while (_hiddenChild !== null) {
                  _treeBaseDuration += _hiddenChild.treeBaseDuration;
                  _hiddenChild = _hiddenChild.sibling;
                }

                _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
              }

              var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2);

              _fallbackChildFragment2.return = workInProgress;
              _primaryChildFragment2.sibling = _fallbackChildFragment2;
              _primaryChildFragment2.childExpirationTime = NoWork;
              workInProgress.memoizedState = SUSPENDED_MARKER;
              workInProgress.child = _primaryChildFragment2;
              return _fallbackChildFragment2;
            } else {
              var _nextPrimaryChildren = nextProps.children;
              var currentPrimaryChild = currentPrimaryChildFragment.child;
              var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime);
              workInProgress.memoizedState = null;
              return workInProgress.child = primaryChild;
            }
          } else {
            var _currentPrimaryChild = current.child;

            if (nextDidTimeout) {
              var _nextFallbackChildren3 = nextProps.fallback;

              var _primaryChildFragment3 = createFiberFromFragment(null, mode, NoWork, null);

              _primaryChildFragment3.return = workInProgress;
              _primaryChildFragment3.child = _currentPrimaryChild;

              if (_currentPrimaryChild !== null) {
                _currentPrimaryChild.return = _primaryChildFragment3;
              }

              if ((workInProgress.mode & BlockingMode) === NoMode) {
                var _progressedState2 = workInProgress.memoizedState;

                var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;

                _primaryChildFragment3.child = _progressedPrimaryChild2;
                var _progressedChild3 = _progressedPrimaryChild2;

                while (_progressedChild3 !== null) {
                  _progressedChild3.return = _primaryChildFragment3;
                  _progressedChild3 = _progressedChild3.sibling;
                }
              }

              if (workInProgress.mode & ProfileMode) {
                var _treeBaseDuration2 = 0;
                var _hiddenChild2 = _primaryChildFragment3.child;

                while (_hiddenChild2 !== null) {
                  _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
                  _hiddenChild2 = _hiddenChild2.sibling;
                }

                _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
              }

              var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime, null);

              _fallbackChildFragment3.return = workInProgress;
              _primaryChildFragment3.sibling = _fallbackChildFragment3;
              _fallbackChildFragment3.effectTag |= Placement;
              _primaryChildFragment3.childExpirationTime = NoWork;
              workInProgress.memoizedState = SUSPENDED_MARKER;
              workInProgress.child = _primaryChildFragment3;
              return _fallbackChildFragment3;
            } else {
              workInProgress.memoizedState = null;
              var _nextPrimaryChildren2 = nextProps.children;
              return workInProgress.child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
            }
          }
        }
      }

      function scheduleWorkOnFiber(fiber, renderExpirationTime) {
        if (fiber.expirationTime < renderExpirationTime) {
          fiber.expirationTime = renderExpirationTime;
        }

        var alternate = fiber.alternate;

        if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
          alternate.expirationTime = renderExpirationTime;
        }

        scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
      }

      function propagateSuspenseContextChange(workInProgress, firstChild, renderExpirationTime) {
        var node = firstChild;

        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;

            if (state !== null) {
              scheduleWorkOnFiber(node, renderExpirationTime);
            }
          } else if (node.tag === SuspenseListComponent) {
            scheduleWorkOnFiber(node, renderExpirationTime);
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === workInProgress) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress) {
              return;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      }

      function findLastContentRow(firstChild) {
        var row = firstChild;
        var lastContentRow = null;

        while (row !== null) {
          var currentRow = row.alternate;

          if (currentRow !== null && findFirstSuspended(currentRow) === null) {
            lastContentRow = row;
          }

          row = row.sibling;
        }

        return lastContentRow;
      }

      function validateRevealOrder(revealOrder) {
        {
          if (revealOrder !== undefined && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;

            if (typeof revealOrder === "string") {
              switch (revealOrder.toLowerCase()) {
                case "together":
                case "forwards":
                case "backwards":
                  {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }

                case "forward":
                case "backward":
                  {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }

                default:
                  error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
                  break;
              }
            } else {
              error("%s is not a supported value for revealOrder on <SuspenseList />. " + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
            }
          }
        }
      }

      function validateTailOptions(tailMode, revealOrder) {
        {
          if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== "collapsed" && tailMode !== "hidden") {
              didWarnAboutTailOptions[tailMode] = true;
              error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
              didWarnAboutTailOptions[tailMode] = true;
              error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
            }
          }
        }
      }

      function validateSuspenseListNestedChild(childSlot, index) {
        {
          var isArray = Array.isArray(childSlot);
          var isIterable = !isArray && typeof getIteratorFn(childSlot) === "function";

          if (isArray || isIterable) {
            var type = isArray ? "array" : "iterable";
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in " + "an additional SuspenseList to configure its revealOrder: " + "<SuspenseList revealOrder=...> ... " + "<SuspenseList revealOrder=...>{%s}</SuspenseList> ... " + "</SuspenseList>", type, index, type);
            return false;
          }
        }
        return true;
      }

      function validateSuspenseListChildren(children, revealOrder) {
        {
          if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== undefined && children !== null && children !== false) {
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                if (!validateSuspenseListNestedChild(children[i], i)) {
                  return;
                }
              }
            } else {
              var iteratorFn = getIteratorFn(children);

              if (typeof iteratorFn === "function") {
                var childrenIterator = iteratorFn.call(children);

                if (childrenIterator) {
                  var step = childrenIterator.next();
                  var _i = 0;

                  for (; !step.done; step = childrenIterator.next()) {
                    if (!validateSuspenseListNestedChild(step.value, _i)) {
                      return;
                    }

                    _i++;
                  }
                }
              } else {
                error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + "This is not useful since it needs multiple rows. " + "Did you mean to pass multiple children or an array?", revealOrder);
              }
            }
          }
        }
      }

      function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
        var renderState = workInProgress.memoizedState;

        if (renderState === null) {
          workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailExpiration: 0,
            tailMode: tailMode,
            lastEffect: lastEffectBeforeRendering
          };
        } else {
          renderState.isBackwards = isBackwards;
          renderState.rendering = null;
          renderState.renderingStartTime = 0;
          renderState.last = lastContentRow;
          renderState.tail = tail;
          renderState.tailExpiration = 0;
          renderState.tailMode = tailMode;
          renderState.lastEffect = lastEffectBeforeRendering;
        }
      }

      function updateSuspenseListComponent(current, workInProgress, renderExpirationTime) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

        if (shouldForceFallback) {
          suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          workInProgress.effectTag |= DidCapture;
        } else {
          var didSuspendBefore = current !== null && (current.effectTag & DidCapture) !== NoEffect;

          if (didSuspendBefore) {
            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderExpirationTime);
          }

          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }

        pushSuspenseContext(workInProgress, suspenseContext);

        if ((workInProgress.mode & BlockingMode) === NoMode) {
          workInProgress.memoizedState = null;
        } else {
          switch (revealOrder) {
            case "forwards":
              {
                var lastContentRow = findLastContentRow(workInProgress.child);
                var tail;

                if (lastContentRow === null) {
                  tail = workInProgress.child;
                  workInProgress.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }

                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode, workInProgress.lastEffect);
                break;
              }

            case "backwards":
              {
                var _tail = null;
                var row = workInProgress.child;
                workInProgress.child = null;

                while (row !== null) {
                  var currentRow = row.alternate;

                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress.child = row;
                    break;
                  }

                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }

                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode, workInProgress.lastEffect);
                break;
              }

            case "together":
              {
                initSuspenseListRenderState(workInProgress, false, null, null, undefined, workInProgress.lastEffect);
                break;
              }

            default:
              {
                workInProgress.memoizedState = null;
              }
          }
        }

        return workInProgress.child;
      }

      function updatePortalComponent(current, workInProgress, renderExpirationTime) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;

        if (current === null) {
          workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
        } else {
          reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
        }

        return workInProgress.child;
      }

      function updateContextProvider(current, workInProgress, renderExpirationTime) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        {
          var providerPropTypes = workInProgress.type.propTypes;

          if (providerPropTypes) {
            checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
          }
        }
        pushProvider(workInProgress, newValue);

        if (oldProps !== null) {
          var oldValue = oldProps.value;
          var changedBits = calculateChangedBits(context, newValue, oldValue);

          if (changedBits === 0) {
            if (oldProps.children === newProps.children && !hasContextChanged()) {
              return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
            }
          } else {
            propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
          }
        }

        var newChildren = newProps.children;
        reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
        return workInProgress.child;
      }

      var hasWarnedAboutUsingContextAsConsumer = false;

      function updateContextConsumer(current, workInProgress, renderExpirationTime) {
        var context = workInProgress.type;
        {
          if (context._context === undefined) {
            if (context !== context.Consumer) {
              if (!hasWarnedAboutUsingContextAsConsumer) {
                hasWarnedAboutUsingContextAsConsumer = true;
                error("Rendering <Context> directly is not supported and will be removed in " + "a future major release. Did you mean to render <Context.Consumer> instead?");
              }
            }
          } else {
            context = context._context;
          }
        }
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        {
          if (typeof render !== "function") {
            error("A context consumer was rendered with multiple children, or a child " + "that isn't a function. A context consumer expects a single child " + "that is a function. If you did pass a function, make sure there " + "is no trailing or leading whitespace around it.");
          }
        }
        prepareToReadContext(workInProgress, renderExpirationTime);

        var newValue = _readContext(context, newProps.unstable_observedBits);

        var newChildren;
        {
          ReactCurrentOwner$1.current = workInProgress;
          setIsRendering(true);
          newChildren = render(newValue);
          setIsRendering(false);
        }
        workInProgress.effectTag |= PerformedWork;
        reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
        return workInProgress.child;
      }

      function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
      }

      function bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime) {
        cancelWorkTimer(workInProgress);

        if (current !== null) {
          workInProgress.dependencies = current.dependencies;
        }

        {
          stopProfilerTimerIfRunning();
        }
        var updateExpirationTime = workInProgress.expirationTime;

        if (updateExpirationTime !== NoWork) {
          markUnprocessedUpdateTime(updateExpirationTime);
        }

        var childExpirationTime = workInProgress.childExpirationTime;

        if (childExpirationTime < renderExpirationTime) {
          return null;
        } else {
          cloneChildFibers(current, workInProgress);
          return workInProgress.child;
        }
      }

      function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
        {
          var returnFiber = oldWorkInProgress.return;

          if (returnFiber === null) {
            throw new Error("Cannot swap the root fiber.");
          }

          current.alternate = null;
          oldWorkInProgress.alternate = null;
          newWorkInProgress.index = oldWorkInProgress.index;
          newWorkInProgress.sibling = oldWorkInProgress.sibling;
          newWorkInProgress.return = oldWorkInProgress.return;
          newWorkInProgress.ref = oldWorkInProgress.ref;

          if (oldWorkInProgress === returnFiber.child) {
            returnFiber.child = newWorkInProgress;
          } else {
            var prevSibling = returnFiber.child;

            if (prevSibling === null) {
              throw new Error("Expected parent to have a child.");
            }

            while (prevSibling.sibling !== oldWorkInProgress) {
              prevSibling = prevSibling.sibling;

              if (prevSibling === null) {
                throw new Error("Expected to find the previous sibling.");
              }
            }

            prevSibling.sibling = newWorkInProgress;
          }

          var last = returnFiber.lastEffect;

          if (last !== null) {
            last.nextEffect = current;
            returnFiber.lastEffect = current;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = current;
          }

          current.nextEffect = null;
          current.effectTag = Deletion;
          newWorkInProgress.effectTag |= Placement;
          return newWorkInProgress;
        }
      }

      function beginWork(current, workInProgress, renderExpirationTime) {
        var updateExpirationTime = workInProgress.expirationTime;
        {
          if (workInProgress._debugNeedsRemount && current !== null) {
            return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.expirationTime));
          }
        }

        if (current !== null) {
          var oldProps = current.memoizedProps;
          var newProps = workInProgress.pendingProps;

          if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current.type) {
            didReceiveUpdate = true;
          } else if (updateExpirationTime < renderExpirationTime) {
            didReceiveUpdate = false;

            switch (workInProgress.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress);
                break;

              case HostComponent:
                pushHostContext(workInProgress);

                if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(workInProgress.type)) {
                  {
                    markSpawnedWork(Never);
                  }
                  workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
                  return null;
                }

                break;

              case ClassComponent:
                {
                  var Component = workInProgress.type;

                  if (isContextProvider(Component)) {
                    pushContextProvider(workInProgress);
                  }

                  break;
                }

              case HostPortal:
                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                break;

              case ContextProvider:
                {
                  var newValue = workInProgress.memoizedProps.value;
                  pushProvider(workInProgress, newValue);
                  break;
                }

              case Profiler:
                {
                  var hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

                  if (hasChildWork) {
                    workInProgress.effectTag |= Update;
                  }

                  var stateNode = workInProgress.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
                break;

              case SuspenseComponent:
                {
                  var state = workInProgress.memoizedState;

                  if (state !== null) {
                    var primaryChildFragment = workInProgress.child;
                    var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;

                    if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
                      return updateSuspenseComponent(current, workInProgress, renderExpirationTime);
                    } else {
                      pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                      var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);

                      if (child !== null) {
                        return child.sibling;
                      } else {
                        return null;
                      }
                    }
                  } else {
                    pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  }

                  break;
                }

              case SuspenseListComponent:
                {
                  var didSuspendBefore = (current.effectTag & DidCapture) !== NoEffect;

                  var _hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

                  if (didSuspendBefore) {
                    if (_hasChildWork) {
                      return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
                    }

                    workInProgress.effectTag |= DidCapture;
                  }

                  var renderState = workInProgress.memoizedState;

                  if (renderState !== null) {
                    renderState.rendering = null;
                    renderState.tail = null;
                  }

                  pushSuspenseContext(workInProgress, suspenseStackCursor.current);

                  if (_hasChildWork) {
                    break;
                  } else {
                    return null;
                  }
                }
            }

            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
          } else {
            didReceiveUpdate = false;
          }
        } else {
          didReceiveUpdate = false;
        }

        workInProgress.expirationTime = NoWork;

        switch (workInProgress.tag) {
          case IndeterminateComponent:
            {
              return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderExpirationTime);
            }

          case LazyComponent:
            {
              var elementType = workInProgress.elementType;
              return mountLazyComponent(current, workInProgress, elementType, updateExpirationTime, renderExpirationTime);
            }

          case FunctionComponent:
            {
              var _Component = workInProgress.type;
              var unresolvedProps = workInProgress.pendingProps;
              var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
              return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderExpirationTime);
            }

          case ClassComponent:
            {
              var _Component2 = workInProgress.type;
              var _unresolvedProps = workInProgress.pendingProps;

              var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

              return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
            }

          case HostRoot:
            return updateHostRoot(current, workInProgress, renderExpirationTime);

          case HostComponent:
            return updateHostComponent(current, workInProgress, renderExpirationTime);

          case HostText:
            return updateHostText();

          case SuspenseComponent:
            return updateSuspenseComponent(current, workInProgress, renderExpirationTime);

          case HostPortal:
            return updatePortalComponent(current, workInProgress, renderExpirationTime);

          case ForwardRef:
            {
              var type = workInProgress.type;
              var _unresolvedProps2 = workInProgress.pendingProps;

              var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

              return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderExpirationTime);
            }

          case Fragment:
            return updateFragment(current, workInProgress, renderExpirationTime);

          case Mode:
            return updateMode(current, workInProgress, renderExpirationTime);

          case Profiler:
            return updateProfiler(current, workInProgress, renderExpirationTime);

          case ContextProvider:
            return updateContextProvider(current, workInProgress, renderExpirationTime);

          case ContextConsumer:
            return updateContextConsumer(current, workInProgress, renderExpirationTime);

          case MemoComponent:
            {
              var _type2 = workInProgress.type;
              var _unresolvedProps3 = workInProgress.pendingProps;

              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

              {
                if (workInProgress.type !== workInProgress.elementType) {
                  var outerPropTypes = _type2.propTypes;

                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
            }

          case SimpleMemoComponent:
            {
              return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
            }

          case IncompleteClassComponent:
            {
              var _Component3 = workInProgress.type;
              var _unresolvedProps4 = workInProgress.pendingProps;

              var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

              return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
            }

          case SuspenseListComponent:
            {
              return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
            }
        }

        {
          throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function markUpdate(workInProgress) {
        workInProgress.effectTag |= Update;
      }

      function markRef$1(workInProgress) {
        workInProgress.effectTag |= Ref;
      }

      var appendAllChildren;
      var updateHostContainer;
      var updateHostComponent$1;
      var updateHostText$1;
      {
        appendAllChildren = function appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {
          var node = workInProgress.child;

          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText) {
              appendInitialChild(parent, node.stateNode);
            } else if (node.tag === HostPortal) ;else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            if (node === workInProgress) {
              return;
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress) {
                return;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }
        };

        updateHostContainer = function updateHostContainer(workInProgress) {};

        updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance) {
          var oldProps = current.memoizedProps;

          if (oldProps === newProps) {
            return;
          }

          var instance = workInProgress.stateNode;
          var currentHostContext = getHostContext();
          var updatePayload = prepareUpdate();
          workInProgress.updateQueue = updatePayload;

          if (updatePayload) {
            markUpdate(workInProgress);
          }
        };

        updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
          if (oldText !== newText) {
            markUpdate(workInProgress);
          }
        };
      }

      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        switch (renderState.tailMode) {
          case "hidden":
            {
              var tailNode = renderState.tail;
              var lastTailNode = null;

              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }

                tailNode = tailNode.sibling;
              }

              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }

              break;
            }

          case "collapsed":
            {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;

              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }

                _tailNode = _tailNode.sibling;
              }

              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }

              break;
            }
        }
      }

      function completeWork(current, workInProgress, renderExpirationTime) {
        var newProps = workInProgress.pendingProps;

        switch (workInProgress.tag) {
          case IndeterminateComponent:
          case LazyComponent:
          case SimpleMemoComponent:
          case FunctionComponent:
          case ForwardRef:
          case Fragment:
          case Mode:
          case Profiler:
          case ContextConsumer:
          case MemoComponent:
            return null;

          case ClassComponent:
            {
              var Component = workInProgress.type;

              if (isContextProvider(Component)) {
                popContext(workInProgress);
              }

              return null;
            }

          case HostRoot:
            {
              popHostContainer(workInProgress);
              popTopLevelContextObject(workInProgress);
              var fiberRoot = workInProgress.stateNode;

              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }

              if (current === null || current.child === null) {
                var wasHydrated = popHydrationState();

                if (wasHydrated) {
                  markUpdate(workInProgress);
                }
              }

              updateHostContainer(workInProgress);
              return null;
            }

          case HostComponent:
            {
              popHostContext(workInProgress);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress.type;

              if (current !== null && workInProgress.stateNode != null) {
                updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

                if (current.ref !== workInProgress.ref) {
                  markRef$1(workInProgress);
                }
              } else {
                if (!newProps) {
                  if (!(workInProgress.stateNode !== null)) {
                    throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }

                  return null;
                }

                var currentHostContext = getHostContext();

                var _wasHydrated = popHydrationState();

                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance()) {
                    markUpdate(workInProgress);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                  appendAllChildren(instance, workInProgress, false, false);
                  workInProgress.stateNode = instance;

                  if (finalizeInitialChildren(instance)) {
                    markUpdate(workInProgress);
                  }
                }

                if (workInProgress.ref !== null) {
                  markRef$1(workInProgress);
                }
              }

              return null;
            }

          case HostText:
            {
              var newText = newProps;

              if (current && workInProgress.stateNode != null) {
                var oldText = current.memoizedProps;
                updateHostText$1(current, workInProgress, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (!(workInProgress.stateNode !== null)) {
                    throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }

                var _rootContainerInstance = getRootHostContainer();

                var _currentHostContext = getHostContext();

                var _wasHydrated2 = popHydrationState();

                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance()) {
                    markUpdate(workInProgress);
                  }
                } else {
                  workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
              }

              return null;
            }

          case SuspenseComponent:
            {
              popSuspenseContext(workInProgress);
              var nextState = workInProgress.memoizedState;

              if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
                workInProgress.expirationTime = renderExpirationTime;
                return workInProgress;
              }

              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = false;

              if (current === null) {
                if (workInProgress.memoizedProps.fallback !== undefined) ;
              } else {
                var prevState = current.memoizedState;
                prevDidTimeout = prevState !== null;

                if (!nextDidTimeout && prevState !== null) {
                  var currentFallbackChild = current.child.sibling;

                  if (currentFallbackChild !== null) {
                    var first = workInProgress.firstEffect;

                    if (first !== null) {
                      workInProgress.firstEffect = currentFallbackChild;
                      currentFallbackChild.nextEffect = first;
                    } else {
                      workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                      currentFallbackChild.nextEffect = null;
                    }

                    currentFallbackChild.effectTag = Deletion;
                  }
                }
              }

              if (nextDidTimeout && !prevDidTimeout) {
                if ((workInProgress.mode & BlockingMode) !== NoMode) {
                  var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }

              {
                if (nextDidTimeout || prevDidTimeout) {
                  workInProgress.effectTag |= Update;
                }
              }
              return null;
            }

          case HostPortal:
            popHostContainer(workInProgress);
            updateHostContainer(workInProgress);
            return null;

          case ContextProvider:
            popProvider(workInProgress);
            return null;

          case IncompleteClassComponent:
            {
              var _Component = workInProgress.type;

              if (isContextProvider(_Component)) {
                popContext(workInProgress);
              }

              return null;
            }

          case SuspenseListComponent:
            {
              popSuspenseContext(workInProgress);
              var renderState = workInProgress.memoizedState;

              if (renderState === null) {
                return null;
              }

              var didSuspendAlready = (workInProgress.effectTag & DidCapture) !== NoEffect;
              var renderedTail = renderState.rendering;

              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.effectTag & DidCapture) === NoEffect);

                  if (!cannotBeSuspended) {
                    var row = workInProgress.child;

                    while (row !== null) {
                      var suspended = findFirstSuspended(row);

                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress.effectTag |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThennables = suspended.updateQueue;

                        if (newThennables !== null) {
                          workInProgress.updateQueue = newThennables;
                          workInProgress.effectTag |= Update;
                        }

                        if (renderState.lastEffect === null) {
                          workInProgress.firstEffect = null;
                        }

                        workInProgress.lastEffect = renderState.lastEffect;
                        resetChildFibers(workInProgress, renderExpirationTime);
                        pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress.child;
                      }

                      row = row.sibling;
                    }
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);

                  if (_suspended !== null) {
                    workInProgress.effectTag |= DidCapture;
                    didSuspendAlready = true;
                    var _newThennables = _suspended.updateQueue;

                    if (_newThennables !== null) {
                      workInProgress.updateQueue = _newThennables;
                      workInProgress.effectTag |= Update;
                    }

                    cutOffTailIfNeeded(renderState, true);

                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate) {
                      var lastEffect = workInProgress.lastEffect = renderState.lastEffect;

                      if (lastEffect !== null) {
                        lastEffect.nextEffect = null;
                      }

                      return null;
                    }
                  } else if (now() * 2 - renderState.renderingStartTime > renderState.tailExpiration && renderExpirationTime > Never) {
                    workInProgress.effectTag |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    var nextPriority = renderExpirationTime - 1;
                    workInProgress.expirationTime = workInProgress.childExpirationTime = nextPriority;
                    {
                      markSpawnedWork(nextPriority);
                    }
                  }
                }

                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress.child;
                  workInProgress.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;

                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress.child = renderedTail;
                  }

                  renderState.last = renderedTail;
                }
              }

              if (renderState.tail !== null) {
                if (renderState.tailExpiration === 0) {
                  var TAIL_EXPIRATION_TIMEOUT_MS = 500;
                  renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS;
                }

                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.lastEffect = workInProgress.lastEffect;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;

                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }

                pushSuspenseContext(workInProgress, suspenseContext);
                return next;
              }

              return null;
            }
        }

        {
          throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function unwindWork(workInProgress, renderExpirationTime) {
        switch (workInProgress.tag) {
          case ClassComponent:
            {
              var Component = workInProgress.type;

              if (isContextProvider(Component)) {
                popContext(workInProgress);
              }

              var effectTag = workInProgress.effectTag;

              if (effectTag & ShouldCapture) {
                workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
                return workInProgress;
              }

              return null;
            }

          case HostRoot:
            {
              popHostContainer(workInProgress);
              popTopLevelContextObject(workInProgress);
              var _effectTag = workInProgress.effectTag;

              if (!((_effectTag & DidCapture) === NoEffect)) {
                throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
              }

              workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
              return workInProgress;
            }

          case HostComponent:
            {
              popHostContext(workInProgress);
              return null;
            }

          case SuspenseComponent:
            {
              popSuspenseContext(workInProgress);
              var _effectTag2 = workInProgress.effectTag;

              if (_effectTag2 & ShouldCapture) {
                workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
                return workInProgress;
              }

              return null;
            }

          case SuspenseListComponent:
            {
              popSuspenseContext(workInProgress);
              return null;
            }

          case HostPortal:
            popHostContainer(workInProgress);
            return null;

          case ContextProvider:
            popProvider(workInProgress);
            return null;

          default:
            return null;
        }
      }

      function unwindInterruptedWork(interruptedWork) {
        switch (interruptedWork.tag) {
          case ClassComponent:
            {
              var childContextTypes = interruptedWork.type.childContextTypes;

              if (childContextTypes !== null && childContextTypes !== undefined) {
                popContext(interruptedWork);
              }

              break;
            }

          case HostRoot:
            {
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              break;
            }

          case HostComponent:
            {
              popHostContext(interruptedWork);
              break;
            }

          case HostPortal:
            popHostContainer(interruptedWork);
            break;

          case SuspenseComponent:
            popSuspenseContext(interruptedWork);
            break;

          case SuspenseListComponent:
            popSuspenseContext(interruptedWork);
            break;

          case ContextProvider:
            popProvider(interruptedWork);
            break;
        }
      }

      function createCapturedValue(value, source) {
        return {
          value: value,
          source: source,
          stack: getStackByFiberInDevAndProd(source)
        };
      }

      if (!(typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog === "function")) {
        throw Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function.");
      }

      function showErrorDialog(capturedError) {
        return ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog(capturedError);
      }

      function logCapturedError(capturedError) {
        var logError = showErrorDialog(capturedError);

        if (logError === false) {
          return;
        }

        var error = capturedError.error;
        {
          var componentName = capturedError.componentName,
              componentStack = capturedError.componentStack,
              errorBoundaryName = capturedError.errorBoundaryName,
              errorBoundaryFound = capturedError.errorBoundaryFound,
              willRetry = capturedError.willRetry;

          if (error != null && error._suppressLogging) {
            if (errorBoundaryFound && willRetry) {
              return;
            }

            console["error"](error);
          }

          var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
          var errorBoundaryMessage;

          if (errorBoundaryFound && errorBoundaryName) {
            if (willRetry) {
              errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            } else {
              errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
            }
          } else {
            errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\n" + "Visit https://fb.me/react-error-boundaries to learn more about error boundaries.";
          }

          var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage);
          console["error"](combinedMessage);
        }
      }

      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      {
        didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
      }
      var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;

      function logError(boundary, errorInfo) {
        var source = errorInfo.source;
        var stack = errorInfo.stack;

        if (stack === null && source !== null) {
          stack = getStackByFiberInDevAndProd(source);
        }

        var capturedError = {
          componentName: source !== null ? getComponentName(source.type) : null,
          componentStack: stack !== null ? stack : "",
          error: errorInfo.value,
          errorBoundary: null,
          errorBoundaryName: null,
          errorBoundaryFound: false,
          willRetry: false
        };

        if (boundary !== null && boundary.tag === ClassComponent) {
          capturedError.errorBoundary = boundary.stateNode;
          capturedError.errorBoundaryName = getComponentName(boundary.type);
          capturedError.errorBoundaryFound = true;
          capturedError.willRetry = true;
        }

        try {
          logCapturedError(capturedError);
        } catch (e) {
          setTimeout(function () {
            throw e;
          });
        }
      }

      var callComponentWillUnmountWithTimer = function callComponentWillUnmountWithTimer(current, instance) {
        startPhaseTimer(current, "componentWillUnmount");
        instance.props = current.memoizedProps;
        instance.state = current.memoizedState;
        {
          instance.componentWillUnmount();
        }
        stopPhaseTimer();
      };

      function safelyCallComponentWillUnmount(current, instance) {
        {
          invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);

          if (hasCaughtError()) {
            var unmountError = clearCaughtError();
            captureCommitPhaseError(current, unmountError);
          }
        }
      }

      function safelyDetachRef(current) {
        var ref = current.ref;

        if (ref !== null) {
          if (typeof ref === "function") {
            {
              invokeGuardedCallback(null, ref, null, null);

              if (hasCaughtError()) {
                var refError = clearCaughtError();
                captureCommitPhaseError(current, refError);
              }
            }
          } else {
            ref.current = null;
          }
        }
      }

      function safelyCallDestroy(current, destroy) {
        {
          invokeGuardedCallback(null, destroy, null);

          if (hasCaughtError()) {
            var error = clearCaughtError();
            captureCommitPhaseError(current, error);
          }
        }
      }

      function commitBeforeMutationLifeCycles(current, finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
          case Block:
            {
              return;
            }

          case ClassComponent:
            {
              if (finishedWork.effectTag & Snapshot) {
                if (current !== null) {
                  var prevProps = current.memoizedProps;
                  var prevState = current.memoizedState;
                  startPhaseTimer(finishedWork, "getSnapshotBeforeUpdate");
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before " + "getSnapshotBeforeUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }

                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before " + "getSnapshotBeforeUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

                    if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) " + "must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  stopPhaseTimer();
                }
              }

              return;
            }

          case HostRoot:
          case HostComponent:
          case HostText:
          case HostPortal:
          case IncompleteClassComponent:
            return;
        }

        {
          throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function commitHookEffectListUnmount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;

          do {
            if ((effect.tag & tag) === tag) {
              var destroy = effect.destroy;
              effect.destroy = undefined;

              if (destroy !== undefined) {
                destroy();
              }
            }

            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }

      function commitHookEffectListMount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;

          do {
            if ((effect.tag & tag) === tag) {
              var create = effect.create;
              effect.destroy = create();
              {
                var destroy = effect.destroy;

                if (destroy !== undefined && typeof destroy !== "function") {
                  var addendum = void 0;

                  if (destroy === null) {
                    addendum = " You returned null. If your effect does not require clean " + "up, return undefined (or nothing).";
                  } else if (typeof destroy.then === "function") {
                    addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. " + "Instead, write the async function inside your effect " + "and call it immediately:\n\n" + "useEffect(() => {\n" + "  async function fetchData() {\n" + "    // You can await here\n" + "    const response = await MyAPI.getData(someId);\n" + "    // ...\n" + "  }\n" + "  fetchData();\n" + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + "Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching";
                  } else {
                    addendum = " You returned: " + destroy;
                  }

                  error("An effect function must not return anything besides a function, " + "which is used for clean-up.%s%s", addendum, getStackByFiberInDevAndProd(finishedWork));
                }
              }
            }

            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }

      function commitPassiveHookEffects(finishedWork) {
        if ((finishedWork.effectTag & Passive) !== NoEffect) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
              {
                {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork);
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
          }
        }
      }

      function commitLifeCycles(finishedRoot, current, finishedWork, committedExpirationTime) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
          case Block:
            {
              {
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
              }
              return;
            }

          case ClassComponent:
            {
              var instance = finishedWork.stateNode;

              if (finishedWork.effectTag & Update) {
                if (current === null) {
                  startPhaseTimer(finishedWork, "componentDidMount");
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before " + "componentDidMount. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }

                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before " + "componentDidMount. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  {
                    instance.componentDidMount();
                  }
                  stopPhaseTimer();
                } else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                  var prevState = current.memoizedState;
                  startPhaseTimer(finishedWork, "componentDidUpdate");
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before " + "componentDidUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }

                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before " + "componentDidUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  {
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                  }
                  stopPhaseTimer();
                }
              }

              var updateQueue = finishedWork.updateQueue;

              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before " + "processing the update queue. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }

                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before " + "processing the update queue. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance);
              }

              return;
            }

          case HostRoot:
            {
              var _updateQueue = finishedWork.updateQueue;

              if (_updateQueue !== null) {
                var _instance = null;

                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;

                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }

                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }

              return;
            }

          case HostComponent:
            {
              var _instance2 = finishedWork.stateNode;

              if (current === null && finishedWork.effectTag & Update) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
              }

              return;
            }

          case HostText:
            {
              return;
            }

          case HostPortal:
            {
              return;
            }

          case Profiler:
            {
              {
                var _finishedWork$memoize2 = finishedWork.memoizedProps,
                    onCommit = _finishedWork$memoize2.onCommit,
                    onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime = getCommitTime();

                if (typeof onRender === "function") {
                  {
                    onRender(finishedWork.memoizedProps.id, current === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime, finishedRoot.memoizedInteractions);
                  }
                }
              }
              return;
            }

          case SuspenseComponent:
            {
              return;
            }

          case SuspenseListComponent:
          case IncompleteClassComponent:
          case FundamentalComponent:
          case ScopeComponent:
            return;
        }

        {
          throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function hideOrUnhideAllChildren(finishedWork, isHidden) {
        {
          var node = finishedWork;

          while (true) {
            if (node.tag === HostComponent) {
              var instance = node.stateNode;

              if (isHidden) {
                hideInstance(instance);
              } else {
                unhideInstance(node.stateNode, node.memoizedProps);
              }
            } else if (node.tag === HostText) {
              var _instance3 = node.stateNode;

              if (isHidden) {
                hideTextInstance();
              } else {
                unhideTextInstance(_instance3, node.memoizedProps);
              }
            } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
              var fallbackChildFragment = node.child.sibling;
              fallbackChildFragment.return = node;
              node = fallbackChildFragment;
              continue;
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            if (node === finishedWork) {
              return;
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
      }

      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;

        if (ref !== null) {
          var instance = finishedWork.stateNode;
          var instanceToUse;

          switch (finishedWork.tag) {
            case HostComponent:
              instanceToUse = getPublicInstance(instance);
              break;

            default:
              instanceToUse = instance;
          }

          if (typeof ref === "function") {
            ref(instanceToUse);
          } else {
            {
              if (!ref.hasOwnProperty("current")) {
                error("Unexpected ref object provided for %s. " + "Use either a ref-setter function or React.createRef().%s", getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
              }
            }
            ref.current = instanceToUse;
          }
        }
      }

      function commitDetachRef(current) {
        var currentRef = current.ref;

        if (currentRef !== null) {
          if (typeof currentRef === "function") {
            currentRef(null);
          } else {
            currentRef.current = null;
          }
        }
      }

      function commitUnmount(finishedRoot, current, renderPriorityLevel) {
        onCommitUnmount(current);

        switch (current.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent:
          case Block:
            {
              var updateQueue = current.updateQueue;

              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;

                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  {
                    var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
                    runWithPriority(priorityLevel, function () {
                      var effect = firstEffect;

                      do {
                        var _effect3 = effect,
                            _destroy = _effect3.destroy,
                            _tag = _effect3.tag;

                        if (_destroy !== undefined) {
                          {
                            safelyCallDestroy(current, _destroy);
                          }
                        }

                        effect = effect.next;
                      } while (effect !== firstEffect);
                    });
                  }
                }
              }

              return;
            }

          case ClassComponent:
            {
              safelyDetachRef(current);
              var instance = current.stateNode;

              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(current, instance);
              }

              return;
            }

          case HostComponent:
            {
              safelyDetachRef(current);
              return;
            }

          case HostPortal:
            {
              {
                unmountHostComponents(finishedRoot, current, renderPriorityLevel);
              }
              return;
            }

          case FundamentalComponent:
            {
              return;
            }

          case DehydratedFragment:
            {
              return;
            }

          case ScopeComponent:
            {
              return;
            }
        }
      }

      function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
        var node = root;

        while (true) {
          commitUnmount(finishedRoot, node, renderPriorityLevel);

          if (node.child !== null && node.tag !== HostPortal) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === root) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === root) {
              return;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      }

      function detachFiber(current) {
        var alternate = current.alternate;
        current.return = null;
        current.child = null;
        current.memoizedState = null;
        current.updateQueue = null;
        current.dependencies = null;
        current.alternate = null;
        current.firstEffect = null;
        current.lastEffect = null;
        current.pendingProps = null;
        current.memoizedProps = null;
        current.stateNode = null;

        if (alternate !== null) {
          detachFiber(alternate);
        }
      }

      function getHostParentFiber(fiber) {
        var parent = fiber.return;

        while (parent !== null) {
          if (isHostParent(parent)) {
            return parent;
          }

          parent = parent.return;
        }

        {
          throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
      }

      function getHostSibling(fiber) {
        var node = fiber;

        siblings: while (true) {
          while (node.sibling === null) {
            if (node.return === null || isHostParent(node.return)) {
              return null;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;

          while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
            if (node.effectTag & Placement) {
              continue siblings;
            }

            if (node.child === null || node.tag === HostPortal) {
              continue siblings;
            } else {
              node.child.return = node;
              node = node.child;
            }
          }

          if (!(node.effectTag & Placement)) {
            return node.stateNode;
          }
        }
      }

      function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork);
        var parent;
        var isContainer;
        var parentStateNode = parentFiber.stateNode;

        switch (parentFiber.tag) {
          case HostComponent:
            parent = parentStateNode;
            isContainer = false;
            break;

          case HostRoot:
            parent = parentStateNode.containerInfo;
            isContainer = true;
            break;

          case HostPortal:
            parent = parentStateNode.containerInfo;
            isContainer = true;
            break;

          case FundamentalComponent:
          default:
            {
              throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
        }

        if (parentFiber.effectTag & ContentReset) {
          parentFiber.effectTag &= ~ContentReset;
        }

        var before = getHostSibling(finishedWork);

        if (isContainer) {
          insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
        } else {
          insertOrAppendPlacementNode(finishedWork, before, parent);
        }
      }

      function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;

        if (isHost || enableFundamentalAPI) {
          var stateNode = isHost ? node.stateNode : node.stateNode.instance;

          if (before) {
            insertInContainerBefore(parent);
          } else {
            appendChildToContainer(parent, stateNode);
          }
        } else if (tag === HostPortal) ;else {
          var child = node.child;

          if (child !== null) {
            insertOrAppendPlacementNodeIntoContainer(child, before, parent);
            var sibling = child.sibling;

            while (sibling !== null) {
              insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }

      function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;

        if (isHost || enableFundamentalAPI) {
          var stateNode = isHost ? node.stateNode : node.stateNode.instance;

          if (before) {
            insertBefore(parent, stateNode, before);
          } else {
            appendChild(parent, stateNode);
          }
        } else if (tag === HostPortal) ;else {
          var child = node.child;

          if (child !== null) {
            insertOrAppendPlacementNode(child, before, parent);
            var sibling = child.sibling;

            while (sibling !== null) {
              insertOrAppendPlacementNode(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }

      function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
        var node = current;
        var currentParentIsValid = false;
        var currentParent;
        var currentParentIsContainer;

        while (true) {
          if (!currentParentIsValid) {
            var parent = node.return;

            findParent: while (true) {
              if (!(parent !== null)) {
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }

              var parentStateNode = parent.stateNode;

              switch (parent.tag) {
                case HostComponent:
                  currentParent = parentStateNode;
                  currentParentIsContainer = false;
                  break findParent;

                case HostRoot:
                  currentParent = parentStateNode.containerInfo;
                  currentParentIsContainer = true;
                  break findParent;

                case HostPortal:
                  currentParent = parentStateNode.containerInfo;
                  currentParentIsContainer = true;
                  break findParent;
              }

              parent = parent.return;
            }

            currentParentIsValid = true;
          }

          if (node.tag === HostComponent || node.tag === HostText) {
            commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);

            if (currentParentIsContainer) {
              removeChildFromContainer(currentParent, node.stateNode);
            } else {
              removeChild(currentParent, node.stateNode);
            }
          } else if (node.tag === HostPortal) {
            if (node.child !== null) {
              currentParent = node.stateNode.containerInfo;
              currentParentIsContainer = true;
              node.child.return = node;
              node = node.child;
              continue;
            }
          } else {
            commitUnmount(finishedRoot, node, renderPriorityLevel);

            if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
          }

          if (node === current) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === current) {
              return;
            }

            node = node.return;

            if (node.tag === HostPortal) {
              currentParentIsValid = false;
            }
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      }

      function commitDeletion(finishedRoot, current, renderPriorityLevel) {
        {
          unmountHostComponents(finishedRoot, current, renderPriorityLevel);
        }
        detachFiber(current);
      }

      function commitWork(current, finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent:
          case Block:
            {
              {
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
              }
              return;
            }

          case ClassComponent:
            {
              return;
            }

          case HostComponent:
            {
              var instance = finishedWork.stateNode;

              if (instance != null) {
                var newProps = finishedWork.memoizedProps;
                var oldProps = current !== null ? current.memoizedProps : newProps;
                var type = finishedWork.type;
                var updatePayload = finishedWork.updateQueue;
                finishedWork.updateQueue = null;

                if (updatePayload !== null) {
                  commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
              }

              return;
            }

          case HostText:
            {
              if (!(finishedWork.stateNode !== null)) {
                throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
              }

              var textInstance = finishedWork.stateNode;
              var newText = finishedWork.memoizedProps;
              var oldText = current !== null ? current.memoizedProps : newText;
              commitTextUpdate(textInstance, oldText, newText);
              return;
            }

          case HostRoot:
            {
              return;
            }

          case Profiler:
            {
              return;
            }

          case SuspenseComponent:
            {
              commitSuspenseComponent(finishedWork);
              attachSuspenseRetryListeners(finishedWork);
              return;
            }

          case SuspenseListComponent:
            {
              attachSuspenseRetryListeners(finishedWork);
              return;
            }

          case IncompleteClassComponent:
            {
              return;
            }
        }

        {
          throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function commitSuspenseComponent(finishedWork) {
        var newState = finishedWork.memoizedState;
        var newDidTimeout;
        var primaryChildParent = finishedWork;

        if (newState === null) {
          newDidTimeout = false;
        } else {
          newDidTimeout = true;
          primaryChildParent = finishedWork.child;
          markCommitTimeOfFallback();
        }

        if (primaryChildParent !== null) {
          hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
        }
      }

      function attachSuspenseRetryListeners(finishedWork) {
        var thenables = finishedWork.updateQueue;

        if (thenables !== null) {
          finishedWork.updateQueue = null;
          var retryCache = finishedWork.stateNode;

          if (retryCache === null) {
            retryCache = finishedWork.stateNode = new PossiblyWeakSet();
          }

          thenables.forEach(function (thenable) {
            var retry = resolveRetryThenable.bind(null, finishedWork, thenable);

            if (!retryCache.has(thenable)) {
              {
                if (thenable.__reactDoNotTraceInteractions !== true) {
                  retry = tracing.unstable_wrap(retry);
                }
              }
              retryCache.add(thenable);
              thenable.then(retry, retry);
            }
          });
        }
      }

      function commitResetTextContent(current) {
        resetTextContent(current.stateNode);
      }

      var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;

      function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
        var update = createUpdate(expirationTime, null);
        update.tag = CaptureUpdate;
        update.payload = {
          element: null
        };
        var error = errorInfo.value;

        update.callback = function () {
          onUncaughtError(error);
          logError(fiber, errorInfo);
        };

        return update;
      }

      function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
        var update = createUpdate(expirationTime, null);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

        if (typeof getDerivedStateFromError === "function") {
          var error$1 = errorInfo.value;

          update.payload = function () {
            logError(fiber, errorInfo);
            return getDerivedStateFromError(error$1);
          };
        }

        var inst = fiber.stateNode;

        if (inst !== null && typeof inst.componentDidCatch === "function") {
          update.callback = function callback() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }

            if (typeof getDerivedStateFromError !== "function") {
              markLegacyErrorBoundaryAsFailed(this);
              logError(fiber, errorInfo);
            }

            var error$1 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$1, {
              componentStack: stack !== null ? stack : ""
            });
            {
              if (typeof getDerivedStateFromError !== "function") {
                if (fiber.expirationTime !== Sync) {
                  error("%s: Error boundaries should implement getDerivedStateFromError(). " + "In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                }
              }
            }
          };
        } else {
          update.callback = function () {
            markFailedErrorBoundaryForHotReloading(fiber);
          };
        }

        return update;
      }

      function attachPingListener(root, renderExpirationTime, thenable) {
        var pingCache = root.pingCache;
        var threadIDs;

        if (pingCache === null) {
          pingCache = root.pingCache = new PossiblyWeakMap();
          threadIDs = new Set();
          pingCache.set(thenable, threadIDs);
        } else {
          threadIDs = pingCache.get(thenable);

          if (threadIDs === undefined) {
            threadIDs = new Set();
            pingCache.set(thenable, threadIDs);
          }
        }

        if (!threadIDs.has(renderExpirationTime)) {
          threadIDs.add(renderExpirationTime);
          var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);
          thenable.then(ping, ping);
        }
      }

      function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
        sourceFiber.effectTag |= Incomplete;
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;

        if (value !== null && typeof value === "object" && typeof value.then === "function") {
          var thenable = value;

          if ((sourceFiber.mode & BlockingMode) === NoMode) {
            var currentSource = sourceFiber.alternate;

            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.expirationTime = currentSource.expirationTime;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }

          var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
          var _workInProgress = returnFiber;

          do {
            if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
              var thenables = _workInProgress.updateQueue;

              if (thenables === null) {
                var updateQueue = new Set();
                updateQueue.add(thenable);
                _workInProgress.updateQueue = updateQueue;
              } else {
                thenables.add(thenable);
              }

              if ((_workInProgress.mode & BlockingMode) === NoMode) {
                _workInProgress.effectTag |= DidCapture;
                sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;

                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(Sync, null);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update);
                  }
                }

                sourceFiber.expirationTime = Sync;
                return;
              }

              attachPingListener(root, renderExpirationTime, thenable);
              _workInProgress.effectTag |= ShouldCapture;
              _workInProgress.expirationTime = renderExpirationTime;
              return;
            }

            _workInProgress = _workInProgress.return;
          } while (_workInProgress !== null);

          value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n" + "\n" + "Add a <Suspense fallback=...> component higher in the tree to " + "provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber));
        }

        renderDidError();
        value = createCapturedValue(value, sourceFiber);
        var workInProgress = returnFiber;

        do {
          switch (workInProgress.tag) {
            case HostRoot:
              {
                var _errorInfo = value;
                workInProgress.effectTag |= ShouldCapture;
                workInProgress.expirationTime = renderExpirationTime;

                var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);

                enqueueCapturedUpdate(workInProgress, _update);
                return;
              }

            case ClassComponent:
              var errorInfo = value;
              var ctor = workInProgress.type;
              var instance = workInProgress.stateNode;

              if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                workInProgress.effectTag |= ShouldCapture;
                workInProgress.expirationTime = renderExpirationTime;

                var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);

                enqueueCapturedUpdate(workInProgress, _update2);
                return;
              }

              break;
          }

          workInProgress = workInProgress.return;
        } while (workInProgress !== null);
      }

      var ceil = Math.ceil;
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
          ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
          IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
      var NoContext = 0;
      var BatchedContext = 1;
      var DiscreteEventContext = 4;
      var LegacyUnbatchedContext = 8;
      var RenderContext = 16;
      var CommitContext = 32;
      var RootIncomplete = 0;
      var RootFatalErrored = 1;
      var RootErrored = 2;
      var RootSuspended = 3;
      var RootSuspendedWithDelay = 4;
      var RootCompleted = 5;
      var executionContext = NoContext;
      var workInProgressRoot = null;
      var workInProgress = null;
      var renderExpirationTime$1 = NoWork;
      var workInProgressRootExitStatus = RootIncomplete;
      var workInProgressRootFatalError = null;
      var workInProgressRootLatestProcessedExpirationTime = Sync;
      var workInProgressRootLatestSuspenseTimeout = Sync;
      var workInProgressRootCanSuspendUsingConfig = null;
      var workInProgressRootNextUnprocessedUpdateTime = NoWork;
      var workInProgressRootHasPendingPing = false;
      var globalMostRecentFallbackTime = 0;
      var FALLBACK_THROTTLE_MS = 500;
      var nextEffect = null;
      var hasUncaughtError = false;
      var firstUncaughtError = null;
      var legacyErrorBoundariesThatAlreadyFailed = null;
      var rootDoesHavePassiveEffects = false;
      var rootWithPendingPassiveEffects = null;
      var pendingPassiveEffectsRenderPriority = NoPriority;
      var pendingPassiveEffectsExpirationTime = NoWork;
      var rootsWithPendingDiscreteUpdates = null;
      var NESTED_UPDATE_LIMIT = 50;
      var nestedUpdateCount = 0;
      var rootWithNestedUpdates = null;
      var NESTED_PASSIVE_UPDATE_LIMIT = 50;
      var nestedPassiveUpdateCount = 0;
      var interruptedBy = null;
      var spawnedWorkDuringRender = null;
      var currentEventTime = NoWork;

      function requestCurrentTimeForUpdate() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          return msToExpirationTime(now());
        }

        if (currentEventTime !== NoWork) {
          return currentEventTime;
        }

        currentEventTime = msToExpirationTime(now());
        return currentEventTime;
      }

      function getCurrentTime() {
        return msToExpirationTime(now());
      }

      function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
        var mode = fiber.mode;

        if ((mode & BlockingMode) === NoMode) {
          return Sync;
        }

        var priorityLevel = getCurrentPriorityLevel();

        if ((mode & ConcurrentMode) === NoMode) {
          return priorityLevel === ImmediatePriority ? Sync : Batched;
        }

        if ((executionContext & RenderContext) !== NoContext) {
          return renderExpirationTime$1;
        }

        var expirationTime;

        if (suspenseConfig !== null) {
          expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
        } else {
          switch (priorityLevel) {
            case ImmediatePriority:
              expirationTime = Sync;
              break;

            case UserBlockingPriority:
              expirationTime = computeInteractiveExpiration(currentTime);
              break;

            case NormalPriority:
            case LowPriority:
              expirationTime = computeAsyncExpiration(currentTime);
              break;

            case IdlePriority:
              expirationTime = Idle;
              break;

            default:
              {
                throw Error("Expected a valid priority level");
              }
          }
        }

        if (workInProgressRoot !== null && expirationTime === renderExpirationTime$1) {
          expirationTime -= 1;
        }

        return expirationTime;
      }

      function scheduleUpdateOnFiber(fiber, expirationTime) {
        checkForNestedUpdates();
        warnAboutRenderPhaseUpdatesInDEV(fiber);
        var root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

        if (root === null) {
          warnAboutUpdateOnUnmountedFiberInDEV(fiber);
          return;
        }

        checkForInterruption(fiber, expirationTime);
        recordScheduleUpdate();
        var priorityLevel = getCurrentPriorityLevel();

        if (expirationTime === Sync) {
          if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            schedulePendingInteractions(root, expirationTime);
            performSyncWorkOnRoot(root);
          } else {
            ensureRootIsScheduled(root);
            schedulePendingInteractions(root, expirationTime);

            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        } else {
          ensureRootIsScheduled(root);
          schedulePendingInteractions(root, expirationTime);
        }

        if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority || priorityLevel === ImmediatePriority)) {
          if (rootsWithPendingDiscreteUpdates === null) {
            rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);
          } else {
            var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);

            if (lastDiscreteTime === undefined || lastDiscreteTime > expirationTime) {
              rootsWithPendingDiscreteUpdates.set(root, expirationTime);
            }
          }
        }
      }

      var scheduleWork = scheduleUpdateOnFiber;

      function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
        if (fiber.expirationTime < expirationTime) {
          fiber.expirationTime = expirationTime;
        }

        var alternate = fiber.alternate;

        if (alternate !== null && alternate.expirationTime < expirationTime) {
          alternate.expirationTime = expirationTime;
        }

        var node = fiber.return;
        var root = null;

        if (node === null && fiber.tag === HostRoot) {
          root = fiber.stateNode;
        } else {
          while (node !== null) {
            alternate = node.alternate;

            if (node.childExpirationTime < expirationTime) {
              node.childExpirationTime = expirationTime;

              if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                alternate.childExpirationTime = expirationTime;
              }
            } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
              alternate.childExpirationTime = expirationTime;
            }

            if (node.return === null && node.tag === HostRoot) {
              root = node.stateNode;
              break;
            }

            node = node.return;
          }
        }

        if (root !== null) {
          if (workInProgressRoot === root) {
            markUnprocessedUpdateTime(expirationTime);

            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
              markRootSuspendedAtTime(root, renderExpirationTime$1);
            }
          }

          markRootUpdatedAtTime(root, expirationTime);
        }

        return root;
      }

      function getNextRootExpirationTimeToWorkOn(root) {
        var lastExpiredTime = root.lastExpiredTime;

        if (lastExpiredTime !== NoWork) {
          return lastExpiredTime;
        }

        var firstPendingTime = root.firstPendingTime;

        if (!isRootSuspendedAtTime(root, firstPendingTime)) {
          return firstPendingTime;
        }

        var lastPingedTime = root.lastPingedTime;
        var nextKnownPendingLevel = root.nextKnownPendingLevel;
        var nextLevel = lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;

        if (nextLevel <= Idle && firstPendingTime !== nextLevel) {
          return NoWork;
        }

        return nextLevel;
      }

      function ensureRootIsScheduled(root) {
        var lastExpiredTime = root.lastExpiredTime;

        if (lastExpiredTime !== NoWork) {
          root.callbackExpirationTime = Sync;
          root.callbackPriority = ImmediatePriority;
          root.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
          return;
        }

        var expirationTime = getNextRootExpirationTimeToWorkOn(root);
        var existingCallbackNode = root.callbackNode;

        if (expirationTime === NoWork) {
          if (existingCallbackNode !== null) {
            root.callbackNode = null;
            root.callbackExpirationTime = NoWork;
            root.callbackPriority = NoPriority;
          }

          return;
        }

        var currentTime = requestCurrentTimeForUpdate();
        var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);

        if (existingCallbackNode !== null) {
          var existingCallbackPriority = root.callbackPriority;
          var existingCallbackExpirationTime = root.callbackExpirationTime;

          if (existingCallbackExpirationTime === expirationTime && existingCallbackPriority >= priorityLevel) {
            return;
          }

          cancelCallback(existingCallbackNode);
        }

        root.callbackExpirationTime = expirationTime;
        root.callbackPriority = priorityLevel;
        var callbackNode;

        if (expirationTime === Sync) {
          callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
        } else {
          callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root), {
            timeout: expirationTimeToMs(expirationTime) - now()
          });
        }

        root.callbackNode = callbackNode;
      }

      function performConcurrentWorkOnRoot(root, didTimeout) {
        currentEventTime = NoWork;

        if (didTimeout) {
          var currentTime = requestCurrentTimeForUpdate();
          markRootExpiredAtTime(root, currentTime);
          ensureRootIsScheduled(root);
          return null;
        }

        var expirationTime = getNextRootExpirationTimeToWorkOn(root);

        if (expirationTime === NoWork) {
          return null;
        }

        var originalCallbackNode = root.callbackNode;

        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          throw Error("Should not already be working.");
        }

        flushPassiveEffects();
        var exitStatus = renderRootConcurrent(root, expirationTime);

        if (exitStatus !== RootIncomplete) {
          if (exitStatus === RootErrored) {
            expirationTime = expirationTime > Idle ? Idle : expirationTime;
            exitStatus = renderRootSync(root, expirationTime);
          }

          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root, expirationTime);
            markRootSuspendedAtTime(root, expirationTime);
            ensureRootIsScheduled(root);
            throw fatalError;
          }

          var finishedWork = root.finishedWork = root.current.alternate;
          root.finishedExpirationTime = expirationTime;
          finishConcurrentRender(root, finishedWork, exitStatus, expirationTime);
        }

        ensureRootIsScheduled(root);

        if (root.callbackNode === originalCallbackNode) {
          return performConcurrentWorkOnRoot.bind(null, root);
        }

        return null;
      }

      function finishConcurrentRender(root, finishedWork, exitStatus, expirationTime) {
        switch (exitStatus) {
          case RootIncomplete:
          case RootFatalErrored:
            {
              {
                throw Error("Root did not complete. This is a bug in React.");
              }
            }

          case RootErrored:
            {
              commitRoot(root);
              break;
            }

          case RootSuspended:
            {
              markRootSuspendedAtTime(root, expirationTime);
              var lastSuspendedTime = root.lastSuspendedTime;

              if (expirationTime === lastSuspendedTime) {
                root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
              }

              var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;

              if (hasNotProcessedNewUpdates && !IsThisRendererActing.current) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();

                if (msUntilTimeout > 10) {
                  if (workInProgressRootHasPendingPing) {
                    var lastPingedTime = root.lastPingedTime;

                    if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                      root.lastPingedTime = expirationTime;
                      prepareFreshStack(root, expirationTime);
                      break;
                    }
                  }

                  var nextTime = getNextRootExpirationTimeToWorkOn(root);

                  if (nextTime !== NoWork && nextTime !== expirationTime) {
                    break;
                  }

                  if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
                    root.lastPingedTime = lastSuspendedTime;
                    break;
                  }

                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
                  break;
                }
              }

              commitRoot(root);
              break;
            }

          case RootSuspendedWithDelay:
            {
              markRootSuspendedAtTime(root, expirationTime);
              var _lastSuspendedTime = root.lastSuspendedTime;

              if (expirationTime === _lastSuspendedTime) {
                root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
              }

              {
                if (workInProgressRootHasPendingPing) {
                  var _lastPingedTime = root.lastPingedTime;

                  if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
                    root.lastPingedTime = expirationTime;
                    prepareFreshStack(root, expirationTime);
                    break;
                  }
                }

                var _nextTime = getNextRootExpirationTimeToWorkOn(root);

                if (_nextTime !== NoWork && _nextTime !== expirationTime) {
                  break;
                }

                if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
                  root.lastPingedTime = _lastSuspendedTime;
                  break;
                }

                var _msUntilTimeout;

                if (workInProgressRootLatestSuspenseTimeout !== Sync) {
                  _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
                } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
                  _msUntilTimeout = 0;
                } else {
                  var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
                  var currentTimeMs = now();
                  var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
                  var timeElapsed = currentTimeMs - eventTimeMs;

                  if (timeElapsed < 0) {
                    timeElapsed = 0;
                  }

                  _msUntilTimeout = jnd(timeElapsed) - timeElapsed;

                  if (timeUntilExpirationMs < _msUntilTimeout) {
                    _msUntilTimeout = timeUntilExpirationMs;
                  }
                }

                if (_msUntilTimeout > 10) {
                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root);
              break;
            }

          case RootCompleted:
            {
              if (workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
                var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);

                if (_msUntilTimeout2 > 10) {
                  markRootSuspendedAtTime(root, expirationTime);
                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout2);
                  break;
                }
              }

              commitRoot(root);
              break;
            }

          default:
            {
              {
                throw Error("Unknown root exit status.");
              }
            }
        }
      }

      function performSyncWorkOnRoot(root) {
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          throw Error("Should not already be working.");
        }

        flushPassiveEffects();
        var lastExpiredTime = root.lastExpiredTime;
        var expirationTime;

        if (lastExpiredTime !== NoWork) {
          if (root === workInProgressRoot && renderExpirationTime$1 >= lastExpiredTime) {
            expirationTime = renderExpirationTime$1;
          } else {
            expirationTime = lastExpiredTime;
          }
        } else {
          expirationTime = Sync;
        }

        var exitStatus = renderRootSync(root, expirationTime);

        if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
          expirationTime = expirationTime > Idle ? Idle : expirationTime;
          exitStatus = renderRootSync(root, expirationTime);
        }

        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          prepareFreshStack(root, expirationTime);
          markRootSuspendedAtTime(root, expirationTime);
          ensureRootIsScheduled(root);
          throw fatalError;
        }

        root.finishedWork = root.current.alternate;
        root.finishedExpirationTime = expirationTime;
        commitRoot(root);
        ensureRootIsScheduled(root);
        return null;
      }

      function syncUpdates(fn, a, b, c) {
        return runWithPriority(ImmediatePriority, fn.bind(null, a, b, c));
      }

      function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;

        try {
          return fn(a);
        } finally {
          executionContext = prevExecutionContext;

          if (executionContext === NoContext) {
            flushSyncCallbackQueue();
          }
        }
      }

      function flushSync(fn, a) {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          {
            throw Error("flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
          }
        }

        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;

        try {
          return runWithPriority(ImmediatePriority, fn.bind(null, a));
        } finally {
          executionContext = prevExecutionContext;
          flushSyncCallbackQueue();
        }
      }

      function prepareFreshStack(root, expirationTime) {
        root.finishedWork = null;
        root.finishedExpirationTime = NoWork;
        var timeoutHandle = root.timeoutHandle;

        if (timeoutHandle !== noTimeout) {
          root.timeoutHandle = noTimeout;
          cancelTimeout(timeoutHandle);
        }

        if (workInProgress !== null) {
          var interruptedWork = workInProgress.return;

          while (interruptedWork !== null) {
            unwindInterruptedWork(interruptedWork);
            interruptedWork = interruptedWork.return;
          }
        }

        workInProgressRoot = root;
        workInProgress = createWorkInProgress(root.current, null);
        renderExpirationTime$1 = expirationTime;
        workInProgressRootExitStatus = RootIncomplete;
        workInProgressRootFatalError = null;
        workInProgressRootLatestProcessedExpirationTime = Sync;
        workInProgressRootLatestSuspenseTimeout = Sync;
        workInProgressRootCanSuspendUsingConfig = null;
        workInProgressRootNextUnprocessedUpdateTime = NoWork;
        workInProgressRootHasPendingPing = false;
        {
          spawnedWorkDuringRender = null;
        }
        {
          ReactStrictModeWarnings.discardPendingWarnings();
        }
      }

      function handleError(root, thrownValue) {
        do {
          try {
            resetContextDependencies();
            resetHooksAfterThrow();
            resetCurrentFiber();

            if (workInProgress === null || workInProgress.return === null) {
              workInProgressRootExitStatus = RootFatalErrored;
              workInProgressRootFatalError = thrownValue;
              workInProgress = null;
              return null;
            }

            if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
              stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
            }

            throwException(root, workInProgress.return, workInProgress, thrownValue, renderExpirationTime$1);
            workInProgress = completeUnitOfWork(workInProgress);
          } catch (yetAnotherThrownValue) {
            thrownValue = yetAnotherThrownValue;
            continue;
          }

          return;
        } while (true);
      }

      function pushDispatcher(root) {
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

        if (prevDispatcher === null) {
          return ContextOnlyDispatcher;
        } else {
          return prevDispatcher;
        }
      }

      function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }

      function pushInteractions(root) {
        {
          var prevInteractions = tracing.__interactionsRef.current;
          tracing.__interactionsRef.current = root.memoizedInteractions;
          return prevInteractions;
        }
      }

      function popInteractions(prevInteractions) {
        {
          tracing.__interactionsRef.current = prevInteractions;
        }
      }

      function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
      }

      function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
        if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
          workInProgressRootLatestProcessedExpirationTime = expirationTime;
        }

        if (suspenseConfig !== null) {
          if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
            workInProgressRootLatestSuspenseTimeout = expirationTime;
            workInProgressRootCanSuspendUsingConfig = suspenseConfig;
          }
        }
      }

      function markUnprocessedUpdateTime(expirationTime) {
        if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
          workInProgressRootNextUnprocessedUpdateTime = expirationTime;
        }
      }

      function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootIncomplete) {
          workInProgressRootExitStatus = RootSuspended;
        }
      }

      function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
          workInProgressRootExitStatus = RootSuspendedWithDelay;
        }

        if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
          markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1);
          markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
        }
      }

      function renderDidError() {
        if (workInProgressRootExitStatus !== RootCompleted) {
          workInProgressRootExitStatus = RootErrored;
        }
      }

      function renderHasNotSuspendedYet() {
        return workInProgressRootExitStatus === RootIncomplete;
      }

      function inferTimeFromExpirationTime(expirationTime) {
        var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
        return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
      }

      function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
        var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
        return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
      }

      function renderRootSync(root, expirationTime) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();

        if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
          prepareFreshStack(root, expirationTime);
          startWorkOnPendingInteractions(root, expirationTime);
        }

        var prevInteractions = pushInteractions(root);
        startWorkLoopTimer(workInProgress);

        do {
          try {
            workLoopSync();
            break;
          } catch (thrownValue) {
            handleError(root, thrownValue);
          }
        } while (true);

        resetContextDependencies();
        {
          popInteractions(prevInteractions);
        }
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);

        if (workInProgress !== null) {
          {
            throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
        }

        stopFinishedWorkLoopTimer();
        workInProgressRoot = null;
        return workInProgressRootExitStatus;
      }

      function workLoopSync() {
        while (workInProgress !== null) {
          workInProgress = performUnitOfWork(workInProgress);
        }
      }

      function renderRootConcurrent(root, expirationTime) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();

        if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
          prepareFreshStack(root, expirationTime);
          startWorkOnPendingInteractions(root, expirationTime);
        }

        var prevInteractions = pushInteractions(root);
        startWorkLoopTimer(workInProgress);

        do {
          try {
            workLoopConcurrent();
            break;
          } catch (thrownValue) {
            handleError(root, thrownValue);
          }
        } while (true);

        resetContextDependencies();
        {
          popInteractions(prevInteractions);
        }
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;

        if (workInProgress !== null) {
          stopInterruptedWorkLoopTimer();
          return RootIncomplete;
        } else {
          stopFinishedWorkLoopTimer();
          workInProgressRoot = null;
          return workInProgressRootExitStatus;
        }
      }

      function workLoopConcurrent() {
        while (workInProgress !== null && !shouldYield()) {
          workInProgress = performUnitOfWork(workInProgress);
        }
      }

      function performUnitOfWork(unitOfWork) {
        var current = unitOfWork.alternate;
        startWorkTimer(unitOfWork);
        setCurrentFiber(unitOfWork);
        var next;

        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
          startProfilerTimer(unitOfWork);
          next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
          stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else {
          next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
        }

        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;

        if (next === null) {
          next = completeUnitOfWork(unitOfWork);
        }

        ReactCurrentOwner$2.current = null;
        return next;
      }

      function completeUnitOfWork(unitOfWork) {
        workInProgress = unitOfWork;

        do {
          var current = workInProgress.alternate;
          var returnFiber = workInProgress.return;

          if ((workInProgress.effectTag & Incomplete) === NoEffect) {
            setCurrentFiber(workInProgress);
            var next = void 0;

            if ((workInProgress.mode & ProfileMode) === NoMode) {
              next = completeWork(current, workInProgress, renderExpirationTime$1);
            } else {
              startProfilerTimer(workInProgress);
              next = completeWork(current, workInProgress, renderExpirationTime$1);
              stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
            }

            stopWorkTimer(workInProgress);
            resetCurrentFiber();
            resetChildExpirationTime(workInProgress);

            if (next !== null) {
              return next;
            }

            if (returnFiber !== null && (returnFiber.effectTag & Incomplete) === NoEffect) {
              if (returnFiber.firstEffect === null) {
                returnFiber.firstEffect = workInProgress.firstEffect;
              }

              if (workInProgress.lastEffect !== null) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                }

                returnFiber.lastEffect = workInProgress.lastEffect;
              }

              var effectTag = workInProgress.effectTag;

              if (effectTag > PerformedWork) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = workInProgress;
                } else {
                  returnFiber.firstEffect = workInProgress;
                }

                returnFiber.lastEffect = workInProgress;
              }
            }
          } else {
            var _next = unwindWork(workInProgress);

            if ((workInProgress.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
              var actualDuration = workInProgress.actualDuration;
              var child = workInProgress.child;

              while (child !== null) {
                actualDuration += child.actualDuration;
                child = child.sibling;
              }

              workInProgress.actualDuration = actualDuration;
            }

            if (_next !== null) {
              stopFailedWorkTimer(workInProgress);
              _next.effectTag &= HostEffectMask;
              return _next;
            }

            stopWorkTimer(workInProgress);

            if (returnFiber !== null) {
              returnFiber.firstEffect = returnFiber.lastEffect = null;
              returnFiber.effectTag |= Incomplete;
            }
          }

          var siblingFiber = workInProgress.sibling;

          if (siblingFiber !== null) {
            return siblingFiber;
          }

          workInProgress = returnFiber;
        } while (workInProgress !== null);

        if (workInProgressRootExitStatus === RootIncomplete) {
          workInProgressRootExitStatus = RootCompleted;
        }

        return null;
      }

      function getRemainingExpirationTime(fiber) {
        var updateExpirationTime = fiber.expirationTime;
        var childExpirationTime = fiber.childExpirationTime;
        return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
      }

      function resetChildExpirationTime(completedWork) {
        if (renderExpirationTime$1 !== Never && completedWork.childExpirationTime === Never) {
          return;
        }

        var newChildExpirationTime = NoWork;

        if ((completedWork.mode & ProfileMode) !== NoMode) {
          var actualDuration = completedWork.actualDuration;
          var treeBaseDuration = completedWork.selfBaseDuration;
          var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
          var child = completedWork.child;

          while (child !== null) {
            var childUpdateExpirationTime = child.expirationTime;
            var childChildExpirationTime = child.childExpirationTime;

            if (childUpdateExpirationTime > newChildExpirationTime) {
              newChildExpirationTime = childUpdateExpirationTime;
            }

            if (childChildExpirationTime > newChildExpirationTime) {
              newChildExpirationTime = childChildExpirationTime;
            }

            if (shouldBubbleActualDurations) {
              actualDuration += child.actualDuration;
            }

            treeBaseDuration += child.treeBaseDuration;
            child = child.sibling;
          }

          completedWork.actualDuration = actualDuration;
          completedWork.treeBaseDuration = treeBaseDuration;
        } else {
          var _child = completedWork.child;

          while (_child !== null) {
            var _childUpdateExpirationTime = _child.expirationTime;
            var _childChildExpirationTime = _child.childExpirationTime;

            if (_childUpdateExpirationTime > newChildExpirationTime) {
              newChildExpirationTime = _childUpdateExpirationTime;
            }

            if (_childChildExpirationTime > newChildExpirationTime) {
              newChildExpirationTime = _childChildExpirationTime;
            }

            _child = _child.sibling;
          }
        }

        completedWork.childExpirationTime = newChildExpirationTime;
      }

      function commitRoot(root) {
        var renderPriorityLevel = getCurrentPriorityLevel();
        runWithPriority(ImmediatePriority, commitRootImpl.bind(null, root, renderPriorityLevel));
        return null;
      }

      function commitRootImpl(root, renderPriorityLevel) {
        do {
          flushPassiveEffects();
        } while (rootWithPendingPassiveEffects !== null);

        flushRenderPhaseStrictModeWarningsInDEV();

        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          throw Error("Should not already be working.");
        }

        var finishedWork = root.finishedWork;
        var expirationTime = root.finishedExpirationTime;

        if (finishedWork === null) {
          return null;
        }

        root.finishedWork = null;
        root.finishedExpirationTime = NoWork;

        if (!(finishedWork !== root.current)) {
          throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
        }

        root.callbackNode = null;
        root.callbackExpirationTime = NoWork;
        root.callbackPriority = NoPriority;
        root.nextKnownPendingLevel = NoWork;
        startCommitTimer();
        var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
        markRootFinishedAtTime(root, expirationTime, remainingExpirationTimeBeforeCommit);

        if (root === workInProgressRoot) {
          workInProgressRoot = null;
          workInProgress = null;
          renderExpirationTime$1 = NoWork;
        }

        var firstEffect;

        if (finishedWork.effectTag > PerformedWork) {
          if (finishedWork.lastEffect !== null) {
            finishedWork.lastEffect.nextEffect = finishedWork;
            firstEffect = finishedWork.firstEffect;
          } else {
            firstEffect = finishedWork;
          }
        } else {
          firstEffect = finishedWork.firstEffect;
        }

        if (firstEffect !== null) {
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root);
          ReactCurrentOwner$2.current = null;
          startCommitSnapshotEffectsTimer();
          prepareForCommit(root.containerInfo);
          nextEffect = firstEffect;

          do {
            {
              invokeGuardedCallback(null, commitBeforeMutationEffects, null);

              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  throw Error("Should be working on an effect.");
                }

                var error = clearCaughtError();
                captureCommitPhaseError(nextEffect, error);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);

          stopCommitSnapshotEffectsTimer();
          {
            recordCommitTime();
          }
          startCommitHostEffectsTimer();
          nextEffect = firstEffect;

          do {
            {
              invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  throw Error("Should be working on an effect.");
                }

                var _error = clearCaughtError();

                captureCommitPhaseError(nextEffect, _error);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);

          stopCommitHostEffectsTimer();
          resetAfterCommit(root.containerInfo);
          root.current = finishedWork;
          startCommitLifeCyclesTimer();
          nextEffect = firstEffect;

          do {
            {
              invokeGuardedCallback(null, commitLayoutEffects, null, root, expirationTime);

              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  throw Error("Should be working on an effect.");
                }

                var _error2 = clearCaughtError();

                captureCommitPhaseError(nextEffect, _error2);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);

          stopCommitLifeCyclesTimer();
          nextEffect = null;
          requestPaint();
          {
            popInteractions(prevInteractions);
          }
          executionContext = prevExecutionContext;
        } else {
          root.current = finishedWork;
          startCommitSnapshotEffectsTimer();
          stopCommitSnapshotEffectsTimer();
          {
            recordCommitTime();
          }
          startCommitHostEffectsTimer();
          stopCommitHostEffectsTimer();
          startCommitLifeCyclesTimer();
          stopCommitLifeCyclesTimer();
        }

        stopCommitTimer();
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

        if (rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = false;
          rootWithPendingPassiveEffects = root;
          pendingPassiveEffectsExpirationTime = expirationTime;
          pendingPassiveEffectsRenderPriority = renderPriorityLevel;
        } else {
          nextEffect = firstEffect;

          while (nextEffect !== null) {
            var nextNextEffect = nextEffect.nextEffect;
            nextEffect.nextEffect = null;
            nextEffect = nextNextEffect;
          }
        }

        var remainingExpirationTime = root.firstPendingTime;

        if (remainingExpirationTime !== NoWork) {
          {
            if (spawnedWorkDuringRender !== null) {
              var expirationTimes = spawnedWorkDuringRender;
              spawnedWorkDuringRender = null;

              for (var i = 0; i < expirationTimes.length; i++) {
                scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
              }
            }

            schedulePendingInteractions(root, remainingExpirationTime);
          }
        } else {
          legacyErrorBoundariesThatAlreadyFailed = null;
        }

        {
          if (!rootDidHavePassiveEffects) {
            finishPendingInteractions(root, expirationTime);
          }
        }

        if (remainingExpirationTime === Sync) {
          if (root === rootWithNestedUpdates) {
            nestedUpdateCount++;
          } else {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = root;
          }
        } else {
          nestedUpdateCount = 0;
        }

        onCommitRoot(finishedWork.stateNode, expirationTime);
        ensureRootIsScheduled(root);

        if (hasUncaughtError) {
          hasUncaughtError = false;
          var _error3 = firstUncaughtError;
          firstUncaughtError = null;
          throw _error3;
        }

        if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
          return null;
        }

        flushSyncCallbackQueue();
        return null;
      }

      function commitBeforeMutationEffects() {
        while (nextEffect !== null) {
          var effectTag = nextEffect.effectTag;

          if ((effectTag & Snapshot) !== NoEffect) {
            setCurrentFiber(nextEffect);
            recordEffect();
            var current = nextEffect.alternate;
            commitBeforeMutationLifeCycles(current, nextEffect);
            resetCurrentFiber();
          }

          if ((effectTag & Passive) !== NoEffect) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority, function () {
                flushPassiveEffects();
                return null;
              });
            }
          }

          nextEffect = nextEffect.nextEffect;
        }
      }

      function commitMutationEffects(root, renderPriorityLevel) {
        while (nextEffect !== null) {
          setCurrentFiber(nextEffect);
          var effectTag = nextEffect.effectTag;

          if (effectTag & ContentReset) {
            commitResetTextContent(nextEffect);
          }

          if (effectTag & Ref) {
            var current = nextEffect.alternate;

            if (current !== null) {
              commitDetachRef(current);
            }
          }

          var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);

          switch (primaryEffectTag) {
            case Placement:
              {
                commitPlacement(nextEffect);
                nextEffect.effectTag &= ~Placement;
                break;
              }

            case PlacementAndUpdate:
              {
                commitPlacement(nextEffect);
                nextEffect.effectTag &= ~Placement;
                var _current = nextEffect.alternate;
                commitWork(_current, nextEffect);
                break;
              }

            case Hydrating:
              {
                nextEffect.effectTag &= ~Hydrating;
                break;
              }

            case HydratingAndUpdate:
              {
                nextEffect.effectTag &= ~Hydrating;
                var _current2 = nextEffect.alternate;
                commitWork(_current2, nextEffect);
                break;
              }

            case Update:
              {
                var _current3 = nextEffect.alternate;
                commitWork(_current3, nextEffect);
                break;
              }

            case Deletion:
              {
                commitDeletion(root, nextEffect, renderPriorityLevel);
                break;
              }
          }

          recordEffect();
          resetCurrentFiber();
          nextEffect = nextEffect.nextEffect;
        }
      }

      function commitLayoutEffects(root, committedExpirationTime) {
        while (nextEffect !== null) {
          setCurrentFiber(nextEffect);
          var effectTag = nextEffect.effectTag;

          if (effectTag & (Update | Callback)) {
            recordEffect();
            var current = nextEffect.alternate;
            commitLifeCycles(root, current, nextEffect);
          }

          if (effectTag & Ref) {
            recordEffect();
            commitAttachRef(nextEffect);
          }

          resetCurrentFiber();
          nextEffect = nextEffect.nextEffect;
        }
      }

      function flushPassiveEffects() {
        if (pendingPassiveEffectsRenderPriority !== NoPriority) {
          var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
          pendingPassiveEffectsRenderPriority = NoPriority;
          return runWithPriority(priorityLevel, flushPassiveEffectsImpl);
        }
      }

      function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) {
          return false;
        }

        var root = rootWithPendingPassiveEffects;
        var expirationTime = pendingPassiveEffectsExpirationTime;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsExpirationTime = NoWork;

        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          throw Error("Cannot flush passive effects while already rendering.");
        }

        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        var prevInteractions = pushInteractions(root);
        {
          var _effect2 = root.current.firstEffect;

          while (_effect2 !== null) {
            {
              setCurrentFiber(_effect2);
              invokeGuardedCallback(null, commitPassiveHookEffects, null, _effect2);

              if (hasCaughtError()) {
                if (!(_effect2 !== null)) {
                  throw Error("Should be working on an effect.");
                }

                var _error5 = clearCaughtError();

                captureCommitPhaseError(_effect2, _error5);
              }

              resetCurrentFiber();
            }
            var nextNextEffect = _effect2.nextEffect;
            _effect2.nextEffect = null;
            _effect2 = nextNextEffect;
          }
        }
        {
          popInteractions(prevInteractions);
          finishPendingInteractions(root, expirationTime);
        }
        executionContext = prevExecutionContext;
        flushSyncCallbackQueue();
        nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
        return true;
      }

      function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
      }

      function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) {
          legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
        } else {
          legacyErrorBoundariesThatAlreadyFailed.add(instance);
        }
      }

      function prepareToThrowUncaughtError(error) {
        if (!hasUncaughtError) {
          hasUncaughtError = true;
          firstUncaughtError = error;
        }
      }

      var onUncaughtError = prepareToThrowUncaughtError;

      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        var errorInfo = createCapturedValue(error, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
        enqueueUpdate(rootFiber, update);
        var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync);

        if (root !== null) {
          ensureRootIsScheduled(root);
          schedulePendingInteractions(root, Sync);
        }
      }

      function captureCommitPhaseError(sourceFiber, error) {
        if (sourceFiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
          return;
        }

        var fiber = sourceFiber.return;

        while (fiber !== null) {
          if (fiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
            return;
          } else if (fiber.tag === ClassComponent) {
            var ctor = fiber.type;
            var instance = fiber.stateNode;

            if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValue(error, sourceFiber);
              var update = createClassErrorUpdate(fiber, errorInfo, Sync);
              enqueueUpdate(fiber, update);
              var root = markUpdateTimeFromFiberToRoot(fiber, Sync);

              if (root !== null) {
                ensureRootIsScheduled(root);
                schedulePendingInteractions(root, Sync);
              }

              return;
            }
          }

          fiber = fiber.return;
        }
      }

      function pingSuspendedRoot(root, thenable, suspendedTime) {
        var pingCache = root.pingCache;

        if (pingCache !== null) {
          pingCache.delete(thenable);
        }

        if (workInProgressRoot === root && renderExpirationTime$1 === suspendedTime) {
          if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
            prepareFreshStack(root, renderExpirationTime$1);
          } else {
            workInProgressRootHasPendingPing = true;
          }

          return;
        }

        if (!isRootSuspendedAtTime(root, suspendedTime)) {
          return;
        }

        var lastPingedTime = root.lastPingedTime;

        if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
          return;
        }

        root.lastPingedTime = suspendedTime;
        ensureRootIsScheduled(root);
        schedulePendingInteractions(root, suspendedTime);
      }

      function retryTimedOutBoundary(boundaryFiber, retryTime) {
        if (retryTime === NoWork) {
          var suspenseConfig = null;
          var currentTime = requestCurrentTimeForUpdate();
          retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
        }

        var root = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);

        if (root !== null) {
          ensureRootIsScheduled(root);
          schedulePendingInteractions(root, retryTime);
        }
      }

      function resolveRetryThenable(boundaryFiber, thenable) {
        var retryTime = NoWork;
        var retryCache;
        {
          retryCache = boundaryFiber.stateNode;
        }

        if (retryCache !== null) {
          retryCache.delete(thenable);
        }

        retryTimedOutBoundary(boundaryFiber, retryTime);
      }

      function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
      }

      function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
        var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;

        if (busyMinDurationMs <= 0) {
          return 0;
        }

        var busyDelayMs = suspenseConfig.busyDelayMs | 0;
        var currentTimeMs = now();
        var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
        var timeElapsed = currentTimeMs - eventTimeMs;

        if (timeElapsed <= busyDelayMs) {
          return 0;
        }

        var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed;
        return msUntilTimeout;
      }

      function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = null;
          {
            throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
        }

        {
          if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            error("Maximum update depth exceeded. This can happen when a component " + "calls setState inside useEffect, but useEffect either doesn't " + "have a dependency array, or one of the dependencies changes on " + "every render.");
          }
        }
      }

      function flushRenderPhaseStrictModeWarningsInDEV() {
        {
          ReactStrictModeWarnings.flushLegacyContextWarning();
          {
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
          }
        }
      }

      function stopFinishedWorkLoopTimer() {
        var didCompleteRoot = true;
        stopWorkLoopTimer(interruptedBy, didCompleteRoot);
        interruptedBy = null;
      }

      function stopInterruptedWorkLoopTimer() {
        var didCompleteRoot = false;
        stopWorkLoopTimer(interruptedBy, didCompleteRoot);
        interruptedBy = null;
      }

      function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
        if (workInProgressRoot !== null && updateExpirationTime > renderExpirationTime$1) {
          interruptedBy = fiberThatReceivedUpdate;
        }
      }

      var didWarnStateUpdateForUnmountedComponent = null;

      function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
        {
          var tag = fiber.tag;

          if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
            return;
          }

          var componentName = getComponentName(fiber.type) || "ReactComponent";

          if (didWarnStateUpdateForUnmountedComponent !== null) {
            if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
              return;
            }

            didWarnStateUpdateForUnmountedComponent.add(componentName);
          } else {
            didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
          }

          error("Can't perform a React state update on an unmounted component. This " + "is a no-op, but it indicates a memory leak in your application. To " + "fix, cancel all subscriptions and asynchronous tasks in %s.%s", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function", getStackByFiberInDevAndProd(fiber));
        }
      }

      var beginWork$1;
      {
        var dummyFiber = null;

        beginWork$1 = function beginWork$1(current, unitOfWork, expirationTime) {
          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

          try {
            return beginWork(current, unitOfWork, expirationTime);
          } catch (originalError) {
            if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
              throw originalError;
            }

            resetContextDependencies();
            resetHooksAfterThrow();
            unwindInterruptedWork(unitOfWork);
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

            if (unitOfWork.mode & ProfileMode) {
              startProfilerTimer(unitOfWork);
            }

            invokeGuardedCallback(null, beginWork, null, current, unitOfWork, expirationTime);

            if (hasCaughtError()) {
              var replayError = clearCaughtError();
              throw replayError;
            } else {
              throw originalError;
            }
          }
        };
      }
      var didWarnAboutUpdateInRender = false;

      function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        {
          if ((executionContext & RenderContext) !== NoContext) {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
                {
                  error("Cannot update a component from inside the function body of a " + "different component.");
                  break;
                }

              case ClassComponent:
                {
                  if (isRendering && !didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as " + "within `render`). Render methods should be a pure " + "function of props and state.");
                    didWarnAboutUpdateInRender = true;
                    break;
                  }
                }
            }
          }
        }
      }

      var IsThisRendererActing = {
        current: false
      };

      function warnIfNotScopedWithMatchingAct(fiber) {
        {
          if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
            error("It looks like you're using the wrong act() around your test interactions.\n" + "Be sure to use the matching version of act() corresponding to your renderer:\n\n" + "// for react-dom:\n" + "import {act} fr" + "om 'react-dom/test-utils';\n" + "// ...\n" + "act(() => ...);\n\n" + "// for react-test-renderer:\n" + "import TestRenderer fr" + "om react-test-renderer';\n" + "const {act} = TestRenderer;\n" + "// ...\n" + "act(() => ...);" + "%s", getStackByFiberInDevAndProd(fiber));
          }
        }
      }

      function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
        {
          if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
            error("An update to %s ran an effect, but was not wrapped in act(...).\n\n" + "When testing, code that causes React state updates should be " + "wrapped into act(...):\n\n" + "act(() => {\n" + "  /* fire events that update state */\n" + "});\n" + "/* assert on the output */\n\n" + "This ensures that you're testing the behavior the user would see " + "in the browser." + " Learn more at https://fb.me/react-wrap-tests-with-act" + "%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
          }
        }
      }

      function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
        {
          if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
            error("An update to %s inside a test was not wrapped in act(...).\n\n" + "When testing, code that causes React state updates should be " + "wrapped into act(...):\n\n" + "act(() => {\n" + "  /* fire events that update state */\n" + "});\n" + "/* assert on the output */\n\n" + "This ensures that you're testing the behavior the user would see " + "in the browser." + " Learn more at https://fb.me/react-wrap-tests-with-act" + "%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
          }
        }
      }

      var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
      var didWarnAboutUnmockedScheduler = false;

      function warnIfUnmockedScheduler(fiber) {
        {
          if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
            if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
              didWarnAboutUnmockedScheduler = true;
              error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + "to guarantee consistent behaviour across tests and browsers. " + "For example, with jest: \n" + "jest.mock('scheduler', () => require" + "('scheduler/unstable_mock'));\n\n" + "For more info, visit https://fb.me/react-mock-scheduler");
            }
          }
        }
      }

      function computeThreadID(root, expirationTime) {
        return expirationTime * 1000 + root.interactionThreadID;
      }

      function markSpawnedWork(expirationTime) {
        if (spawnedWorkDuringRender === null) {
          spawnedWorkDuringRender = [expirationTime];
        } else {
          spawnedWorkDuringRender.push(expirationTime);
        }
      }

      function scheduleInteractions(root, expirationTime, interactions) {
        if (interactions.size > 0) {
          var pendingInteractionMap = root.pendingInteractionMap;
          var pendingInteractions = pendingInteractionMap.get(expirationTime);

          if (pendingInteractions != null) {
            interactions.forEach(function (interaction) {
              if (!pendingInteractions.has(interaction)) {
                interaction.__count++;
              }

              pendingInteractions.add(interaction);
            });
          } else {
            pendingInteractionMap.set(expirationTime, new Set(interactions));
            interactions.forEach(function (interaction) {
              interaction.__count++;
            });
          }

          var subscriber = tracing.__subscriberRef.current;

          if (subscriber !== null) {
            var threadID = computeThreadID(root, expirationTime);
            subscriber.onWorkScheduled(interactions, threadID);
          }
        }
      }

      function schedulePendingInteractions(root, expirationTime) {
        scheduleInteractions(root, expirationTime, tracing.__interactionsRef.current);
      }

      function startWorkOnPendingInteractions(root, expirationTime) {
        var interactions = new Set();
        root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
          if (scheduledExpirationTime >= expirationTime) {
            scheduledInteractions.forEach(function (interaction) {
              return interactions.add(interaction);
            });
          }
        });
        root.memoizedInteractions = interactions;

        if (interactions.size > 0) {
          var subscriber = tracing.__subscriberRef.current;

          if (subscriber !== null) {
            var threadID = computeThreadID(root, expirationTime);

            try {
              subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
              scheduleCallback(ImmediatePriority, function () {
                throw error;
              });
            }
          }
        }
      }

      function finishPendingInteractions(root, committedExpirationTime) {
        var earliestRemainingTimeAfterCommit = root.firstPendingTime;
        var subscriber;

        try {
          subscriber = tracing.__subscriberRef.current;

          if (subscriber !== null && root.memoizedInteractions.size > 0) {
            var threadID = computeThreadID(root, committedExpirationTime);
            subscriber.onWorkStopped(root.memoizedInteractions, threadID);
          }
        } catch (error) {
          scheduleCallback(ImmediatePriority, function () {
            throw error;
          });
        } finally {
          var pendingInteractionMap = root.pendingInteractionMap;
          pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
            if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
              pendingInteractionMap.delete(scheduledExpirationTime);
              scheduledInteractions.forEach(function (interaction) {
                interaction.__count--;

                if (subscriber !== null && interaction.__count === 0) {
                  try {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  } catch (error) {
                    scheduleCallback(ImmediatePriority, function () {
                      throw error;
                    });
                  }
                }
              });
            }
          });
        }
      }

      var onScheduleFiberRoot = null;
      var onCommitFiberRoot = null;
      var onCommitFiberUnmount = null;
      var hasLoggedError = false;
      var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";

      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
          return false;
        }

        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

        if (hook.isDisabled) {
          return true;
        }

        if (!hook.supportsFiber) {
          {
            error("The installed version of React DevTools is too old and will not work " + "with the current version of React. Please update React DevTools. " + "https://fb.me/react-devtools");
          }
          return true;
        }

        try {
          var rendererID = hook.inject(internals);

          if (true) {
            if (typeof hook.onScheduleFiberRoot === "function") {
              onScheduleFiberRoot = function onScheduleFiberRoot(root, children) {
                try {
                  hook.onScheduleFiberRoot(rendererID, root, children);
                } catch (err) {
                  if (true && !hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              };
            }
          }

          onCommitFiberRoot = function onCommitFiberRoot(root, expirationTime) {
            try {
              var didError = (root.current.effectTag & DidCapture) === DidCapture;

              if (enableProfilerTimer) {
                var currentTime = getCurrentTime();
                var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
                hook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
              } else {
                hook.onCommitFiberRoot(rendererID, root, undefined, didError);
              }
            } catch (err) {
              if (true) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          };

          onCommitFiberUnmount = function onCommitFiberUnmount(fiber) {
            try {
              hook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              if (true) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          };
        } catch (err) {
          {
            error("React instrumentation encountered an error: %s.", err);
          }
        }

        return true;
      }

      function onScheduleRoot(root, children) {
        if (typeof onScheduleFiberRoot === "function") {
          onScheduleFiberRoot(root, children);
        }
      }

      function onCommitRoot(root, expirationTime) {
        if (typeof onCommitFiberRoot === "function") {
          onCommitFiberRoot(root, expirationTime);
        }
      }

      function onCommitUnmount(fiber) {
        if (typeof onCommitFiberUnmount === "function") {
          onCommitFiberUnmount(fiber);
        }
      }

      var hasBadMapPolyfill;
      {
        hasBadMapPolyfill = false;

        try {
          var nonExtensibleObject = Object.preventExtensions({});
          var testMap = new Map([[nonExtensibleObject, null]]);
          var testSet = new Set([nonExtensibleObject]);
          testMap.set(0, 0);
          testSet.add(0);
        } catch (e) {
          hasBadMapPolyfill = true;
        }
      }
      var debugCounter = 1;

      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null;
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode;
        this.effectTag = NoEffect;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.expirationTime = NoWork;
        this.childExpirationTime = NoWork;
        this.alternate = null;
        {
          this.actualDuration = Number.NaN;
          this.actualStartTime = Number.NaN;
          this.selfBaseDuration = Number.NaN;
          this.treeBaseDuration = Number.NaN;
          this.actualDuration = 0;
          this.actualStartTime = -1;
          this.selfBaseDuration = 0;
          this.treeBaseDuration = 0;
        }
        {
          this._debugID = debugCounter++;
          this._debugIsCurrentlyTiming = false;
        }
        {
          this._debugSource = null;
          this._debugOwner = null;
          this._debugNeedsRemount = false;
          this._debugHookTypes = null;

          if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
            Object.preventExtensions(this);
          }
        }
      }

      var createFiber = function createFiber(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      };

      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }

      function isSimpleFunctionComponent(type) {
        return typeof type === "function" && !shouldConstruct(type) && type.defaultProps === undefined;
      }

      function resolveLazyComponentTag(Component) {
        if (typeof Component === "function") {
          return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
        } else if (Component !== undefined && Component !== null) {
          var $$typeof = Component.$$typeof;

          if ($$typeof === REACT_FORWARD_REF_TYPE) {
            return ForwardRef;
          }

          if ($$typeof === REACT_MEMO_TYPE) {
            return MemoComponent;
          }
        }

        return IndeterminateComponent;
      }

      function createWorkInProgress(current, pendingProps) {
        var workInProgress = current.alternate;

        if (workInProgress === null) {
          workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
          workInProgress.elementType = current.elementType;
          workInProgress.type = current.type;
          workInProgress.stateNode = current.stateNode;
          {
            {
              workInProgress._debugID = current._debugID;
            }
            workInProgress._debugSource = current._debugSource;
            workInProgress._debugOwner = current._debugOwner;
            workInProgress._debugHookTypes = current._debugHookTypes;
          }
          workInProgress.alternate = current;
          current.alternate = workInProgress;
        } else {
          workInProgress.pendingProps = pendingProps;
          workInProgress.effectTag = NoEffect;
          workInProgress.nextEffect = null;
          workInProgress.firstEffect = null;
          workInProgress.lastEffect = null;
          {
            workInProgress.actualDuration = 0;
            workInProgress.actualStartTime = -1;
          }
        }

        workInProgress.childExpirationTime = current.childExpirationTime;
        workInProgress.expirationTime = current.expirationTime;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue;
        var currentDependencies = current.dependencies;
        workInProgress.dependencies = currentDependencies === null ? null : {
          expirationTime: currentDependencies.expirationTime,
          firstContext: currentDependencies.firstContext,
          responders: currentDependencies.responders
        };
        workInProgress.sibling = current.sibling;
        workInProgress.index = current.index;
        workInProgress.ref = current.ref;
        {
          workInProgress.selfBaseDuration = current.selfBaseDuration;
          workInProgress.treeBaseDuration = current.treeBaseDuration;
        }
        {
          workInProgress._debugNeedsRemount = current._debugNeedsRemount;

          switch (workInProgress.tag) {
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
              workInProgress.type = resolveFunctionForHotReloading(current.type);
              break;

            case ClassComponent:
              workInProgress.type = resolveClassForHotReloading(current.type);
              break;

            case ForwardRef:
              workInProgress.type = resolveForwardRefForHotReloading(current.type);
              break;
          }
        }
        return workInProgress;
      }

      function resetWorkInProgress(workInProgress, renderExpirationTime) {
        workInProgress.effectTag &= Placement;
        workInProgress.nextEffect = null;
        workInProgress.firstEffect = null;
        workInProgress.lastEffect = null;
        var current = workInProgress.alternate;

        if (current === null) {
          workInProgress.childExpirationTime = NoWork;
          workInProgress.expirationTime = renderExpirationTime;
          workInProgress.child = null;
          workInProgress.memoizedProps = null;
          workInProgress.memoizedState = null;
          workInProgress.updateQueue = null;
          workInProgress.dependencies = null;
          {
            workInProgress.selfBaseDuration = 0;
            workInProgress.treeBaseDuration = 0;
          }
        } else {
          workInProgress.childExpirationTime = current.childExpirationTime;
          workInProgress.expirationTime = current.expirationTime;
          workInProgress.child = current.child;
          workInProgress.memoizedProps = current.memoizedProps;
          workInProgress.memoizedState = current.memoizedState;
          workInProgress.updateQueue = current.updateQueue;
          var currentDependencies = current.dependencies;
          workInProgress.dependencies = currentDependencies === null ? null : {
            expirationTime: currentDependencies.expirationTime,
            firstContext: currentDependencies.firstContext,
            responders: currentDependencies.responders
          };
          {
            workInProgress.selfBaseDuration = current.selfBaseDuration;
            workInProgress.treeBaseDuration = current.treeBaseDuration;
          }
        }

        return workInProgress;
      }

      function createHostRootFiber(tag) {
        var mode;

        if (tag === ConcurrentRoot) {
          mode = ConcurrentMode | BlockingMode | StrictMode;
        } else if (tag === BlockingRoot) {
          mode = BlockingMode | StrictMode;
        } else {
          mode = NoMode;
        }

        if (isDevToolsPresent) {
          mode |= ProfileMode;
        }

        return createFiber(HostRoot, null, null, mode);
      }

      function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
        var fiber;
        var fiberTag = IndeterminateComponent;
        var resolvedType = type;

        if (typeof type === "function") {
          if (shouldConstruct(type)) {
            fiberTag = ClassComponent;
            {
              resolvedType = resolveClassForHotReloading(resolvedType);
            }
          } else {
            {
              resolvedType = resolveFunctionForHotReloading(resolvedType);
            }
          }
        } else if (typeof type === "string") {
          fiberTag = HostComponent;
        } else {
          getTag: switch (type) {
            case REACT_FRAGMENT_TYPE:
              return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

            case REACT_CONCURRENT_MODE_TYPE:
              fiberTag = Mode;
              mode |= ConcurrentMode | BlockingMode | StrictMode;
              break;

            case REACT_STRICT_MODE_TYPE:
              fiberTag = Mode;
              mode |= StrictMode;
              break;

            case REACT_PROFILER_TYPE:
              return createFiberFromProfiler(pendingProps, mode, expirationTime, key);

            case REACT_SUSPENSE_TYPE:
              return createFiberFromSuspense(pendingProps, mode, expirationTime, key);

            case REACT_SUSPENSE_LIST_TYPE:
              return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);

            default:
              {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;

                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;

                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      {
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;

                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;

                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;

                    case REACT_BLOCK_TYPE:
                      fiberTag = Block;
                      break getTag;
                  }
                }

                var info = "";
                {
                  if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info += " You likely forgot to export your component from the file " + "it's defined in, or you might have mixed up default and " + "named imports.";
                  }

                  var ownerName = owner ? getComponentName(owner.type) : null;

                  if (ownerName) {
                    info += "\n\nCheck the render method of `" + ownerName + "`.";
                  }
                }
                {
                  throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                }
              }
          }
        }

        fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromElement(element, mode, expirationTime) {
        var owner = null;
        {
          owner = element._owner;
        }
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
        {
          fiber._debugSource = element._source;
          fiber._debugOwner = element._owner;
        }
        return fiber;
      }

      function createFiberFromFragment(elements, mode, expirationTime, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
        {
          if (typeof pendingProps.id !== "string") {
            error('Profiler must specify an "id" as a prop');
          }
        }
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.type = REACT_PROFILER_TYPE;
        fiber.expirationTime = expirationTime;
        {
          fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
          };
        }
        return fiber;
      }

      function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        fiber.type = REACT_SUSPENSE_TYPE;
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        {
          fiber.type = REACT_SUSPENSE_LIST_TYPE;
        }
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromText(content, mode, expirationTime) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromPortal(portal, mode, expirationTime) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.expirationTime = expirationTime;
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return fiber;
      }

      function assignFiberPropertiesInDEV(target, source) {
        if (target === null) {
          target = createFiber(IndeterminateComponent, null, null, NoMode);
        }

        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.effectTag = source.effectTag;
        target.nextEffect = source.nextEffect;
        target.firstEffect = source.firstEffect;
        target.lastEffect = source.lastEffect;
        target.expirationTime = source.expirationTime;
        target.childExpirationTime = source.childExpirationTime;
        target.alternate = source.alternate;
        {
          target.actualDuration = source.actualDuration;
          target.actualStartTime = source.actualStartTime;
          target.selfBaseDuration = source.selfBaseDuration;
          target.treeBaseDuration = source.treeBaseDuration;
        }
        {
          target._debugID = source._debugID;
          target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
        }
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
      }

      function FiberRootNode(containerInfo, tag, hydrate) {
        this.tag = tag;
        this.current = null;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.pingCache = null;
        this.finishedExpirationTime = NoWork;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.hydrate = hydrate;
        this.callbackNode = null;
        this.callbackPriority = NoPriority;
        this.firstPendingTime = NoWork;
        this.firstSuspendedTime = NoWork;
        this.lastSuspendedTime = NoWork;
        this.nextKnownPendingLevel = NoWork;
        this.lastPingedTime = NoWork;
        this.lastExpiredTime = NoWork;
        {
          this.interactionThreadID = tracing.unstable_getThreadID();
          this.memoizedInteractions = new Set();
          this.pendingInteractionMap = new Map();
        }
      }

      function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
        var root = new FiberRootNode(containerInfo, tag, hydrate);
        var uninitializedFiber = createHostRootFiber(tag);
        root.current = uninitializedFiber;
        uninitializedFiber.stateNode = root;
        initializeUpdateQueue(uninitializedFiber);
        return root;
      }

      function isRootSuspendedAtTime(root, expirationTime) {
        var firstSuspendedTime = root.firstSuspendedTime;
        var lastSuspendedTime = root.lastSuspendedTime;
        return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
      }

      function markRootSuspendedAtTime(root, expirationTime) {
        var firstSuspendedTime = root.firstSuspendedTime;
        var lastSuspendedTime = root.lastSuspendedTime;

        if (firstSuspendedTime < expirationTime) {
          root.firstSuspendedTime = expirationTime;
        }

        if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
          root.lastSuspendedTime = expirationTime;
        }

        if (expirationTime <= root.lastPingedTime) {
          root.lastPingedTime = NoWork;
        }

        if (expirationTime <= root.lastExpiredTime) {
          root.lastExpiredTime = NoWork;
        }
      }

      function markRootUpdatedAtTime(root, expirationTime) {
        var firstPendingTime = root.firstPendingTime;

        if (expirationTime > firstPendingTime) {
          root.firstPendingTime = expirationTime;
        }

        var firstSuspendedTime = root.firstSuspendedTime;

        if (firstSuspendedTime !== NoWork) {
          if (expirationTime >= firstSuspendedTime) {
            root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
          } else if (expirationTime >= root.lastSuspendedTime) {
            root.lastSuspendedTime = expirationTime + 1;
          }

          if (expirationTime > root.nextKnownPendingLevel) {
            root.nextKnownPendingLevel = expirationTime;
          }
        }
      }

      function markRootFinishedAtTime(root, finishedExpirationTime, remainingExpirationTime) {
        root.firstPendingTime = remainingExpirationTime;

        if (finishedExpirationTime <= root.lastSuspendedTime) {
          root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
        } else if (finishedExpirationTime <= root.firstSuspendedTime) {
          root.firstSuspendedTime = finishedExpirationTime - 1;
        }

        if (finishedExpirationTime <= root.lastPingedTime) {
          root.lastPingedTime = NoWork;
        }

        if (finishedExpirationTime <= root.lastExpiredTime) {
          root.lastExpiredTime = NoWork;
        }
      }

      function markRootExpiredAtTime(root, expirationTime) {
        var lastExpiredTime = root.lastExpiredTime;

        if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
          root.lastExpiredTime = expirationTime;
        }
      }

      var didWarnAboutNestedUpdates;
      var didWarnAboutFindNodeInStrictMode;
      {
        didWarnAboutNestedUpdates = false;
        didWarnAboutFindNodeInStrictMode = {};
      }

      function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
          return emptyContextObject;
        }

        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);

        if (fiber.tag === ClassComponent) {
          var Component = fiber.type;

          if (isContextProvider(Component)) {
            return processChildContext(fiber, Component, parentContext);
          }
        }

        return parentContext;
      }

      function findHostInstanceWithWarning(component, methodName) {
        {
          var fiber = get(component);

          if (fiber === undefined) {
            if (typeof component.render === "function") {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            } else {
              {
                throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
              }
            }
          }

          var hostFiber = findCurrentHostFiber(fiber);

          if (hostFiber === null) {
            return null;
          }

          if (hostFiber.mode & StrictMode) {
            var componentName = getComponentName(fiber.type) || "Component";

            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
              didWarnAboutFindNodeInStrictMode[componentName] = true;

              if (fiber.mode & StrictMode) {
                error("%s is deprecated in StrictMode. " + "%s was passed an instance of %s which is inside StrictMode. " + "Instead, add a ref directly to the element you want to reference. " + "Learn more about using refs safely here: " + "https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
              } else {
                error("%s is deprecated in StrictMode. " + "%s was passed an instance of %s which renders StrictMode children. " + "Instead, add a ref directly to the element you want to reference. " + "Learn more about using refs safely here: " + "https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
              }
            }
          }

          return hostFiber.stateNode;
        }
      }

      function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
        return createFiberRoot(containerInfo, tag, hydrate);
      }

      function updateContainer(element, container, parentComponent, callback) {
        {
          onScheduleRoot(container, element);
        }
        var current$1 = container.current;
        var currentTime = requestCurrentTimeForUpdate();
        {
          if ("undefined" !== typeof jest) {
            warnIfUnmockedScheduler(current$1);
            warnIfNotScopedWithMatchingAct(current$1);
          }
        }
        var suspenseConfig = requestCurrentSuspenseConfig();
        var expirationTime = computeExpirationForFiber(currentTime, current$1, suspenseConfig);
        var context = getContextForSubtree(parentComponent);

        if (container.context === null) {
          container.context = context;
        } else {
          container.pendingContext = context;
        }

        {
          if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; " + "triggering nested component updates from render is not allowed. " + "If necessary, trigger nested updates in componentDidUpdate.\n\n" + "Check the render method of %s.", getComponentName(current.type) || "Unknown");
          }
        }
        var update = createUpdate(expirationTime, suspenseConfig);
        update.payload = {
          element: element
        };
        callback = callback === undefined ? null : callback;

        if (callback !== null) {
          {
            if (typeof callback !== "function") {
              error("render(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callback);
            }
          }
          update.callback = callback;
        }

        enqueueUpdate(current$1, update);
        scheduleWork(current$1, expirationTime);
        return expirationTime;
      }

      function getPublicRootInstance(container) {
        var containerFiber = container.current;

        if (!containerFiber.child) {
          return null;
        }

        switch (containerFiber.child.tag) {
          case HostComponent:
            return getPublicInstance(containerFiber.child.stateNode);

          default:
            return containerFiber.child.stateNode;
        }
      }

      var shouldSuspendImpl = function shouldSuspendImpl(fiber) {
        return false;
      };

      function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
      }

      var overrideHookState = null;
      var overrideProps = null;
      var scheduleUpdate = null;
      var setSuspenseHandler = null;
      {
        var copyWithSetImpl = function copyWithSetImpl(obj, path, idx, value) {
          if (idx >= path.length) {
            return value;
          }

          var key = path[idx];
          var updated = Array.isArray(obj) ? obj.slice() : Object.assign({}, obj);
          updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
          return updated;
        };

        var copyWithSet = function copyWithSet(obj, path, value) {
          return copyWithSetImpl(obj, path, 0, value);
        };

        overrideHookState = function overrideHookState(fiber, id, path, value) {
          var currentHook = fiber.memoizedState;

          while (currentHook !== null && id > 0) {
            currentHook = currentHook.next;
            id--;
          }

          if (currentHook !== null) {
            var newState = copyWithSet(currentHook.memoizedState, path, value);
            currentHook.memoizedState = newState;
            currentHook.baseState = newState;
            fiber.memoizedProps = Object.assign({}, fiber.memoizedProps);
            scheduleWork(fiber, Sync);
          }
        };

        overrideProps = function overrideProps(fiber, path, value) {
          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }

          scheduleWork(fiber, Sync);
        };

        scheduleUpdate = function scheduleUpdate(fiber) {
          scheduleWork(fiber, Sync);
        };

        setSuspenseHandler = function setSuspenseHandler(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
      }

      function injectIntoDevTools(devToolsConfig) {
        var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
          bundleType: devToolsConfig.bundleType,
          version: devToolsConfig.version,
          rendererPackageName: devToolsConfig.rendererPackageName,
          rendererConfig: devToolsConfig.rendererConfig,
          overrideHookState: overrideHookState,
          overrideProps: overrideProps,
          setSuspenseHandler: setSuspenseHandler,
          scheduleUpdate: scheduleUpdate,
          currentDispatcherRef: ReactCurrentDispatcher,
          findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);

            if (hostFiber === null) {
              return null;
            }

            return hostFiber.stateNode;
          },
          findFiberByHostInstance: function findFiberByHostInstance(instance) {
            if (!_findFiberByHostInstance) {
              return null;
            }

            return _findFiberByHostInstance(instance);
          },
          findHostInstancesForRefresh: findHostInstancesForRefresh,
          scheduleRefresh: scheduleRefresh,
          scheduleRoot: scheduleRoot,
          setRefreshHandler: setRefreshHandler,
          getCurrentFiber: function getCurrentFiber() {
            return current;
          }
        });
      }

      var IsSomeRendererActing$1 = ReactSharedInternals.IsSomeRendererActing;

      function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : "" + key,
          children: children,
          containerInfo: containerInfo,
          implementation: implementation
        };
      }

      var ReactVersion = "16.13.0";
      var emptyObject$1 = {};
      {
        Object.freeze(emptyObject$1);
      }
      var getInspectorDataForViewTag;
      var getInspectorDataForViewAtPoint;
      {
        var traverseOwnerTreeUp = function traverseOwnerTreeUp(hierarchy, instance) {
          if (instance) {
            hierarchy.unshift(instance);
            traverseOwnerTreeUp(hierarchy, instance._debugOwner);
          }
        };

        var getOwnerHierarchy = function getOwnerHierarchy(instance) {
          var hierarchy = [];
          traverseOwnerTreeUp(hierarchy, instance);
          return hierarchy;
        };

        var lastNonHostInstance = function lastNonHostInstance(hierarchy) {
          for (var i = hierarchy.length - 1; i > 1; i--) {
            var instance = hierarchy[i];

            if (instance.tag !== HostComponent) {
              return instance;
            }
          }

          return hierarchy[0];
        };

        var getHostProps = function getHostProps(fiber) {
          var host = findCurrentHostFiber(fiber);

          if (host) {
            return host.memoizedProps || emptyObject$1;
          }

          return emptyObject$1;
        };

        var getHostNode = function getHostNode(fiber, findNodeHandle) {
          var hostNode;

          while (fiber) {
            if (fiber.stateNode !== null && fiber.tag === HostComponent) {
              hostNode = findNodeHandle(fiber.stateNode);
            }

            if (hostNode) {
              return hostNode;
            }

            fiber = fiber.child;
          }

          return null;
        };

        var createHierarchy = function createHierarchy(fiberHierarchy) {
          return fiberHierarchy.map(function (fiber) {
            return {
              name: getComponentName(fiber.type),
              getInspectorData: function getInspectorData(findNodeHandle) {
                return {
                  props: getHostProps(fiber),
                  source: fiber._debugSource,
                  measure: function measure(callback) {
                    var hostFiber = findCurrentHostFiber(fiber);
                    var shadowNode = hostFiber != null && hostFiber.stateNode !== null && hostFiber.stateNode.node;

                    if (shadowNode) {
                      nativeFabricUIManager.measure(shadowNode, callback);
                    } else {
                      return ReactNativePrivateInterface.UIManager.measure(getHostNode(fiber, findNodeHandle), callback);
                    }
                  }
                };
              }
            };
          });
        };

        var getInspectorDataForInstance = function getInspectorDataForInstance(closestInstance) {
          if (!closestInstance) {
            return {
              hierarchy: [],
              props: emptyObject$1,
              selectedIndex: null,
              source: null
            };
          }

          var fiber = findCurrentFiberUsingSlowPath(closestInstance);
          var fiberHierarchy = getOwnerHierarchy(fiber);
          var instance = lastNonHostInstance(fiberHierarchy);
          var hierarchy = createHierarchy(fiberHierarchy);
          var props = getHostProps(instance);
          var source = instance._debugSource;
          var selectedIndex = fiberHierarchy.indexOf(instance);
          return {
            hierarchy: hierarchy,
            props: props,
            selectedIndex: selectedIndex,
            source: source
          };
        };

        getInspectorDataForViewTag = function getInspectorDataForViewTag(viewTag) {
          var closestInstance = getInstanceFromTag(viewTag);

          if (!closestInstance) {
            return {
              hierarchy: [],
              props: emptyObject$1,
              selectedIndex: null,
              source: null
            };
          }

          var fiber = findCurrentFiberUsingSlowPath(closestInstance);
          var fiberHierarchy = getOwnerHierarchy(fiber);
          var instance = lastNonHostInstance(fiberHierarchy);
          var hierarchy = createHierarchy(fiberHierarchy);
          var props = getHostProps(instance);
          var source = instance._debugSource;
          var selectedIndex = fiberHierarchy.indexOf(instance);
          return {
            hierarchy: hierarchy,
            props: props,
            selectedIndex: selectedIndex,
            source: source
          };
        };

        getInspectorDataForViewAtPoint = function getInspectorDataForViewAtPoint(findNodeHandle, inspectedView, locationX, locationY, callback) {
          var closestInstance = null;

          if (inspectedView._internalInstanceHandle != null) {
            nativeFabricUIManager.findNodeAtPoint(inspectedView._internalInstanceHandle.stateNode.node, locationX, locationY, function (internalInstanceHandle) {
              if (internalInstanceHandle == null) {
                callback(Object.assign({
                  pointerY: locationY,
                  frame: {
                    left: 0,
                    top: 0,
                    width: 0,
                    height: 0
                  }
                }, getInspectorDataForInstance(closestInstance)));
              }

              closestInstance = internalInstanceHandle.stateNode.canonical._internalInstanceHandle;
              nativeFabricUIManager.measure(internalInstanceHandle.stateNode.node, function (x, y, width, height, pageX, pageY) {
                callback(Object.assign({
                  pointerY: locationY,
                  frame: {
                    left: pageX,
                    top: pageY,
                    width: width,
                    height: height
                  }
                }, getInspectorDataForInstance(closestInstance)));
              });
            });
          } else if (inspectedView._internalFiberInstanceHandleDEV != null) {
            ReactNativePrivateInterface.UIManager.findSubviewIn(findNodeHandle(inspectedView), [locationX, locationY], function (nativeViewTag, left, top, width, height) {
              var inspectorData = getInspectorDataForInstance(getInstanceFromTag(nativeViewTag));
              callback(Object.assign({}, inspectorData, {
                pointerY: locationY,
                frame: {
                  left: left,
                  top: top,
                  width: width,
                  height: height
                },
                touchedViewTag: nativeViewTag
              }));
            });
          } else {
            error("getInspectorDataForViewAtPoint expects to receieve a host component");
            return;
          }
        };
      }
      var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;

      function findHostInstance_DEPRECATED(componentOrHandle) {
        {
          var owner = ReactCurrentOwner$3.current;

          if (owner !== null && owner.stateNode !== null) {
            if (!owner.stateNode._warnedAboutRefsInRender) {
              error("%s is accessing findNodeHandle inside its render(). " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(owner.type) || "A component");
            }

            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }

        if (componentOrHandle == null) {
          return null;
        }

        if (componentOrHandle._nativeTag) {
          return componentOrHandle;
        }

        if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) {
          return componentOrHandle.canonical;
        }

        var hostInstance;
        {
          hostInstance = findHostInstanceWithWarning(componentOrHandle, "findHostInstance_DEPRECATED");
        }

        if (hostInstance == null) {
          return hostInstance;
        }

        if (hostInstance.canonical) {
          return hostInstance.canonical;
        }

        return hostInstance;
      }

      function findNodeHandle(componentOrHandle) {
        {
          var owner = ReactCurrentOwner$3.current;

          if (owner !== null && owner.stateNode !== null) {
            if (!owner.stateNode._warnedAboutRefsInRender) {
              error("%s is accessing findNodeHandle inside its render(). " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(owner.type) || "A component");
            }

            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }

        if (componentOrHandle == null) {
          return null;
        }

        if (typeof componentOrHandle === "number") {
          return componentOrHandle;
        }

        if (componentOrHandle._nativeTag) {
          return componentOrHandle._nativeTag;
        }

        if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) {
          return componentOrHandle.canonical._nativeTag;
        }

        var hostInstance;
        {
          hostInstance = findHostInstanceWithWarning(componentOrHandle, "findNodeHandle");
        }

        if (hostInstance == null) {
          return hostInstance;
        }

        if (hostInstance.canonical) {
          return hostInstance.canonical._nativeTag;
        }

        return hostInstance._nativeTag;
      }

      function dispatchCommand(handle, command, args) {
        if (handle._nativeTag == null) {
          {
            error("dispatchCommand was called with a ref that isn't a " + "native component. Use React.forwardRef to get access to the underlying native component");
          }
          return;
        }

        if (handle._internalInstanceHandle) {
          nativeFabricUIManager.dispatchCommand(handle._internalInstanceHandle.stateNode.node, command, args);
        } else {
          ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(handle._nativeTag, command, args);
        }
      }

      function render(element, containerTag, callback) {
        var root = roots.get(containerTag);

        if (!root) {
          root = createContainer(containerTag, LegacyRoot, false);
          roots.set(containerTag, root);
        }

        updateContainer(element, root, null, callback);
        return getPublicRootInstance(root);
      }

      function unmountComponentAtNode(containerTag) {
        var root = roots.get(containerTag);

        if (root) {
          updateContainer(null, root, null, function () {
            roots.delete(containerTag);
          });
        }
      }

      function unmountComponentAtNodeAndRemoveContainer(containerTag) {
        unmountComponentAtNode(containerTag);
        ReactNativePrivateInterface.UIManager.removeRootView(containerTag);
      }

      function createPortal$1(children, containerTag) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        return createPortal(children, containerTag, null, key);
      }

      setBatchingImplementation(batchedUpdates$1);

      function computeComponentStackForErrorReporting(reactTag) {
        var fiber = getInstanceFromTag(reactTag);

        if (!fiber) {
          return "";
        }

        return getStackByFiberInDevAndProd(fiber);
      }

      var roots = new Map();
      var Internals = {
        computeComponentStackForErrorReporting: computeComponentStackForErrorReporting
      };
      injectIntoDevTools({
        findFiberByHostInstance: getInstanceFromTag,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-native-renderer",
        rendererConfig: {
          getInspectorDataForViewTag: getInspectorDataForViewTag,
          getInspectorDataForViewAtPoint: getInspectorDataForViewAtPoint.bind(null, findNodeHandle)
        }
      });
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
      exports.createPortal = createPortal$1;
      exports.dispatchCommand = dispatchCommand;
      exports.findHostInstance_DEPRECATED = findHostInstance_DEPRECATED;
      exports.findNodeHandle = findNodeHandle;
      exports.render = render;
      exports.unmountComponentAtNode = unmountComponentAtNode;
      exports.unmountComponentAtNodeAndRemoveContainer = unmountComponentAtNodeAndRemoveContainer;
      exports.unstable_batchedUpdates = batchedUpdates;
    })();
  }
},86,[49,87,58,192,195],"node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  _$$_REQUIRE(_dependencyMap[0], "../Core/InitializeCore");
},87,[88],"node_modules/react-native/Libraries/ReactPrivate/ReactNativePrivateInitializeCore.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var start = Date.now();

  _$$_REQUIRE(_dependencyMap[0], "./setUpGlobals");

  _$$_REQUIRE(_dependencyMap[1], "./setUpPerformance");

  _$$_REQUIRE(_dependencyMap[2], "./setUpSystrace");

  _$$_REQUIRE(_dependencyMap[3], "./setUpErrorHandling");

  _$$_REQUIRE(_dependencyMap[4], "./polyfillPromise");

  _$$_REQUIRE(_dependencyMap[5], "./setUpRegeneratorRuntime");

  _$$_REQUIRE(_dependencyMap[6], "./setUpTimers");

  _$$_REQUIRE(_dependencyMap[7], "./setUpXHR");

  _$$_REQUIRE(_dependencyMap[8], "./setUpAlert");

  _$$_REQUIRE(_dependencyMap[9], "./setUpNavigator");

  _$$_REQUIRE(_dependencyMap[10], "./setUpBatchedBridge");

  _$$_REQUIRE(_dependencyMap[11], "./setUpSegmentFetcher");

  if (__DEV__) {
    _$$_REQUIRE(_dependencyMap[12], "./checkNativeVersion");

    _$$_REQUIRE(_dependencyMap[13], "./setUpDeveloperTools");
  }

  _$$_REQUIRE(_dependencyMap[14], "../Utilities/GlobalPerformanceLogger").markPoint('initializeCore_start', _$$_REQUIRE(_dependencyMap[14], "../Utilities/GlobalPerformanceLogger").currentTimestamp() - (Date.now() - start));

  _$$_REQUIRE(_dependencyMap[14], "../Utilities/GlobalPerformanceLogger").markPoint('initializeCore_end');
},88,[89,90,91,92,93,102,104,110,137,141,142,161,163,166,118],"node_modules/react-native/Libraries/Core/InitializeCore.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (global.GLOBAL === undefined) {
    global.GLOBAL = global;
  }

  if (global.window === undefined) {
    global.window = global;
  }

  if (global.self === undefined) {
    global.self = global;
  }

  global.process = global.process || {};
  global.process.env = global.process.env || {};

  if (!global.process.env.NODE_ENV) {
    global.process.env.NODE_ENV = __DEV__ ? 'development' : 'production';
  }
},89,[],"node_modules/react-native/Libraries/Core/setUpGlobals.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (!global.performance) {
    global.performance = {};
  }

  if (typeof global.performance.now !== 'function') {
    global.performance.now = function () {
      var performanceNow = global.nativePerformanceNow || Date.now;
      return performanceNow();
    };
  }
},90,[],"node_modules/react-native/Libraries/Core/setUpPerformance.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (global.__RCTProfileIsProfiling) {
    var Systrace = _$$_REQUIRE(_dependencyMap[0], "../Performance/Systrace");

    Systrace.installReactHook();
    Systrace.setEnabled(true);
  }
},91,[23],"node_modules/react-native/Libraries/Core/setUpSystrace.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  _$$_REQUIRE(_dependencyMap[0], "./ExceptionsManager").installConsoleErrorReporter();

  if (!global.__fbDisableExceptionsManager) {
    var handleError = function handleError(e, isFatal) {
      try {
        _$$_REQUIRE(_dependencyMap[0], "./ExceptionsManager").handleException(e, isFatal);
      } catch (ee) {
        console.log('Failed to print error: ', ee.message);
        throw e;
      }
    };

    var ErrorUtils = _$$_REQUIRE(_dependencyMap[1], "../vendor/core/ErrorUtils");

    ErrorUtils.setGlobalHandler(handleError);
  }
},92,[59,24],"node_modules/react-native/Libraries/Core/setUpErrorHandling.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  _$$_REQUIRE(_dependencyMap[0], "../Utilities/PolyfillFunctions").polyfillGlobal('Promise', function () {
    return _$$_REQUIRE(_dependencyMap[1], "../Promise");
  });
},93,[94,95],"node_modules/react-native/Libraries/Core/polyfillPromise.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function polyfillObjectProperty(object, name, getValue) {
    var descriptor = Object.getOwnPropertyDescriptor(object, name);

    if (__DEV__ && descriptor) {
      var backupName = "original" + name[0].toUpperCase() + name.substr(1);
      Object.defineProperty(object, backupName, descriptor);
    }

    var _ref = descriptor || {},
        enumerable = _ref.enumerable,
        writable = _ref.writable,
        configurable = _ref.configurable;

    if (descriptor && !configurable) {
      console.error('Failed to set polyfill. ' + name + ' is not configurable.');
      return;
    }

    _$$_REQUIRE(_dependencyMap[0], "./defineLazyObjectProperty")(object, name, {
      get: getValue,
      enumerable: enumerable !== false,
      writable: writable !== false
    });
  }

  function polyfillGlobal(name, getValue) {
    polyfillObjectProperty(global, name, getValue);
  }

  module.exports = {
    polyfillObjectProperty: polyfillObjectProperty,
    polyfillGlobal: polyfillGlobal
  };
},94,[29],"node_modules/react-native/Libraries/Utilities/PolyfillFunctions.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  _$$_REQUIRE(_dependencyMap[0], "promise/setimmediate/done");

  _$$_REQUIRE(_dependencyMap[1], "promise/setimmediate/finally");

  if (__DEV__) {
    _$$_REQUIRE(_dependencyMap[2], "promise/setimmediate/rejection-tracking").enable({
      allRejections: true,
      onUnhandled: function onUnhandled(id) {
        var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var message;
        var stack;
        var stringValue = Object.prototype.toString.call(error);

        if (stringValue === '[object Error]') {
          message = Error.prototype.toString.call(error);
          stack = error.stack;
        } else {
          try {
            message = _$$_REQUIRE(_dependencyMap[3], "pretty-format")(error);
          } catch (_unused) {
            message = typeof error === 'string' ? error : JSON.stringify(error);
          }
        }

        var warning = "Possible Unhandled Promise Rejection (id: " + id + "):\n" + (message + "\n") + (stack == null ? '' : stack);
        console.warn(warning);
      },
      onHandled: function onHandled(id) {
        var warning = "Promise Rejection Handled (id: " + id + ")\n" + 'This means you can ignore any previous messages of the form ' + ("\"Possible Unhandled Promise Rejection (id: " + id + "):\"");
        console.warn(warning);
      }
    });
  }

  module.exports = _$$_REQUIRE(_dependencyMap[4], "promise/setimmediate/es6-extensions");
},95,[96,98,99,100,101],"node_modules/react-native/Libraries/Promise.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0], "./core.js");

  _$$_REQUIRE(_dependencyMap[0], "./core.js").prototype.done = function (onFulfilled, onRejected) {
    var self = arguments.length ? this.then.apply(this, arguments) : this;
    self.then(null, function (err) {
      setTimeout(function () {
        throw err;
      }, 0);
    });
  };
},96,[97],"node_modules/promise/setimmediate/done.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function noop() {}

  var LAST_ERROR = null;
  var IS_ERROR = {};

  function getThen(obj) {
    try {
      return obj.then;
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  function tryCallOne(fn, a) {
    try {
      return fn(a);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  function tryCallTwo(fn, a, b) {
    try {
      fn(a, b);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  module.exports = Promise;

  function Promise(fn) {
    if (typeof this !== 'object') {
      throw new TypeError('Promises must be constructed via new');
    }

    if (typeof fn !== 'function') {
      throw new TypeError('Promise constructor\'s argument is not a function');
    }

    this._U = 0;
    this._V = 0;
    this._W = null;
    this._X = null;
    if (fn === noop) return;
    doResolve(fn, this);
  }

  Promise._Y = null;
  Promise._Z = null;
  Promise._0 = noop;

  Promise.prototype.then = function (onFulfilled, onRejected) {
    if (this.constructor !== Promise) {
      return safeThen(this, onFulfilled, onRejected);
    }

    var res = new Promise(noop);
    handle(this, new Handler(onFulfilled, onRejected, res));
    return res;
  };

  function safeThen(self, onFulfilled, onRejected) {
    return new self.constructor(function (resolve, reject) {
      var res = new Promise(noop);
      res.then(resolve, reject);
      handle(self, new Handler(onFulfilled, onRejected, res));
    });
  }

  function handle(self, deferred) {
    while (self._V === 3) {
      self = self._W;
    }

    if (Promise._Y) {
      Promise._Y(self);
    }

    if (self._V === 0) {
      if (self._U === 0) {
        self._U = 1;
        self._X = deferred;
        return;
      }

      if (self._U === 1) {
        self._U = 2;
        self._X = [self._X, deferred];
        return;
      }

      self._X.push(deferred);

      return;
    }

    handleResolved(self, deferred);
  }

  function handleResolved(self, deferred) {
    setImmediate(function () {
      var cb = self._V === 1 ? deferred.onFulfilled : deferred.onRejected;

      if (cb === null) {
        if (self._V === 1) {
          resolve(deferred.promise, self._W);
        } else {
          reject(deferred.promise, self._W);
        }

        return;
      }

      var ret = tryCallOne(cb, self._W);

      if (ret === IS_ERROR) {
        reject(deferred.promise, LAST_ERROR);
      } else {
        resolve(deferred.promise, ret);
      }
    });
  }

  function resolve(self, newValue) {
    if (newValue === self) {
      return reject(self, new TypeError('A promise cannot be resolved with itself.'));
    }

    if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
      var then = getThen(newValue);

      if (then === IS_ERROR) {
        return reject(self, LAST_ERROR);
      }

      if (then === self.then && newValue instanceof Promise) {
        self._V = 3;
        self._W = newValue;
        finale(self);
        return;
      } else if (typeof then === 'function') {
        doResolve(then.bind(newValue), self);
        return;
      }
    }

    self._V = 1;
    self._W = newValue;
    finale(self);
  }

  function reject(self, newValue) {
    self._V = 2;
    self._W = newValue;

    if (Promise._Z) {
      Promise._Z(self, newValue);
    }

    finale(self);
  }

  function finale(self) {
    if (self._U === 1) {
      handle(self, self._X);
      self._X = null;
    }

    if (self._U === 2) {
      for (var i = 0; i < self._X.length; i++) {
        handle(self, self._X[i]);
      }

      self._X = null;
    }
  }

  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  function doResolve(fn, promise) {
    var done = false;
    var res = tryCallTwo(fn, function (value) {
      if (done) return;
      done = true;
      resolve(promise, value);
    }, function (reason) {
      if (done) return;
      done = true;
      reject(promise, reason);
    });

    if (!done && res === IS_ERROR) {
      done = true;
      reject(promise, LAST_ERROR);
    }
  }
},97,[],"node_modules/promise/setimmediate/core.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0], "./core.js");

  _$$_REQUIRE(_dependencyMap[0], "./core.js").prototype.finally = function (f) {
    return this.then(function (value) {
      return _$$_REQUIRE(_dependencyMap[0], "./core.js").resolve(f()).then(function () {
        return value;
      });
    }, function (err) {
      return _$$_REQUIRE(_dependencyMap[0], "./core.js").resolve(f()).then(function () {
        throw err;
      });
    });
  };
},98,[97],"node_modules/promise/setimmediate/finally.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DEFAULT_WHITELIST = [ReferenceError, TypeError, RangeError];
  var enabled = false;
  exports.disable = disable;

  function disable() {
    enabled = false;
    _$$_REQUIRE(_dependencyMap[0], "./core")._Y = null;
    _$$_REQUIRE(_dependencyMap[0], "./core")._Z = null;
  }

  exports.enable = enable;

  function enable(options) {
    options = options || {};
    if (enabled) disable();
    enabled = true;
    var id = 0;
    var displayId = 0;
    var rejections = {};

    _$$_REQUIRE(_dependencyMap[0], "./core")._Y = function (promise) {
      if (promise._V === 2 && rejections[promise._1]) {
        if (rejections[promise._1].logged) {
          onHandled(promise._1);
        } else {
          clearTimeout(rejections[promise._1].timeout);
        }

        delete rejections[promise._1];
      }
    };

    _$$_REQUIRE(_dependencyMap[0], "./core")._Z = function (promise, err) {
      if (promise._U === 0) {
        promise._1 = id++;
        rejections[promise._1] = {
          displayId: null,
          error: err,
          timeout: setTimeout(onUnhandled.bind(null, promise._1), matchWhitelist(err, DEFAULT_WHITELIST) ? 100 : 2000),
          logged: false
        };
      }
    };

    function onUnhandled(id) {
      if (options.allRejections || matchWhitelist(rejections[id].error, options.whitelist || DEFAULT_WHITELIST)) {
        rejections[id].displayId = displayId++;

        if (options.onUnhandled) {
          rejections[id].logged = true;
          options.onUnhandled(rejections[id].displayId, rejections[id].error);
        } else {
          rejections[id].logged = true;
          logError(rejections[id].displayId, rejections[id].error);
        }
      }
    }

    function onHandled(id) {
      if (rejections[id].logged) {
        if (options.onHandled) {
          options.onHandled(rejections[id].displayId, rejections[id].error);
        } else if (!rejections[id].onUnhandled) {
          console.warn('Promise Rejection Handled (id: ' + rejections[id].displayId + '):');
          console.warn('  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id ' + rejections[id].displayId + '.');
        }
      }
    }
  }

  function logError(id, error) {
    console.warn('Possible Unhandled Promise Rejection (id: ' + id + '):');
    var errStr = (error && (error.stack || error)) + '';
    errStr.split('\n').forEach(function (line) {
      console.warn('  ' + line);
    });
  }

  function matchWhitelist(error, list) {
    return list.some(function (cls) {
      return error instanceof cls;
    });
  }
},99,[97],"node_modules/promise/setimmediate/rejection-tracking.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  (function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (typeof exports === 'object') exports["prettyFormat"] = factory();else root["prettyFormat"] = factory();
  })(window, function () {
    return function (modules) {
      var installedModules = {};

      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }

        var module = installedModules[moduleId] = {
          i: moduleId,
          l: false,
          exports: {}
        };
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.l = true;
        return module.exports;
      }

      __webpack_require__.m = modules;
      __webpack_require__.c = installedModules;

      __webpack_require__.d = function (exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
          Object.defineProperty(exports, name, {
            enumerable: true,
            get: getter
          });
        }
      };

      __webpack_require__.r = function (exports) {
        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
          Object.defineProperty(exports, Symbol.toStringTag, {
            value: 'Module'
          });
        }

        Object.defineProperty(exports, '__esModule', {
          value: true
        });
      };

      __webpack_require__.t = function (value, mode) {
        if (mode & 1) value = __webpack_require__(value);
        if (mode & 8) return value;
        if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;
        var ns = Object.create(null);

        __webpack_require__.r(ns);

        Object.defineProperty(ns, 'default', {
          enumerable: true,
          value: value
        });
        if (mode & 2 && typeof value != 'string') for (var key in value) {
          __webpack_require__.d(ns, key, function (key) {
            return value[key];
          }.bind(null, key));
        }
        return ns;
      };

      __webpack_require__.n = function (module) {
        var getter = module && module.__esModule ? function getDefault() {
          return module['default'];
        } : function getModuleExports() {
          return module;
        };

        __webpack_require__.d(getter, 'a', getter);

        return getter;
      };

      __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };

      __webpack_require__.p = "";
      return __webpack_require__(__webpack_require__.s = "./packages/pretty-format/src/index.ts");
    }({
      "./node_modules/ansi-regex/index.js": function node_modulesAnsiRegexIndexJs(module, exports, __webpack_require__) {
        "use strict";

        module.exports = function (options) {
          options = Object.assign({
            onlyFirst: false
          }, options);
          var pattern = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'].join('|');
          return new RegExp(pattern, options.onlyFirst ? undefined : 'g');
        };
      },
      "./node_modules/ansi-styles/index.js": function node_modulesAnsiStylesIndexJs(module, exports, __webpack_require__) {
        "use strict";

        (function (module) {
          function _typeof(obj) {
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof(obj) {
                return typeof obj;
              };
            } else {
              _typeof = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
              };
            }

            return _typeof(obj);
          }

          var colorConvert = __webpack_require__("./node_modules/color-convert/index.js");

          var wrapAnsi16 = function wrapAnsi16(fn, offset) {
            return function () {
              var code = fn.apply(colorConvert, arguments);
              return "\x1B[".concat(code + offset, "m");
            };
          };

          var wrapAnsi256 = function wrapAnsi256(fn, offset) {
            return function () {
              var code = fn.apply(colorConvert, arguments);
              return "\x1B[".concat(38 + offset, ";5;").concat(code, "m");
            };
          };

          var wrapAnsi16m = function wrapAnsi16m(fn, offset) {
            return function () {
              var rgb = fn.apply(colorConvert, arguments);
              return "\x1B[".concat(38 + offset, ";2;").concat(rgb[0], ";").concat(rgb[1], ";").concat(rgb[2], "m");
            };
          };

          function assembleStyles() {
            var codes = new Map();
            var styles = {
              modifier: {
                reset: [0, 0],
                bold: [1, 22],
                dim: [2, 22],
                italic: [3, 23],
                underline: [4, 24],
                inverse: [7, 27],
                hidden: [8, 28],
                strikethrough: [9, 29]
              },
              color: {
                black: [30, 39],
                red: [31, 39],
                green: [32, 39],
                yellow: [33, 39],
                blue: [34, 39],
                magenta: [35, 39],
                cyan: [36, 39],
                white: [37, 39],
                gray: [90, 39],
                redBright: [91, 39],
                greenBright: [92, 39],
                yellowBright: [93, 39],
                blueBright: [94, 39],
                magentaBright: [95, 39],
                cyanBright: [96, 39],
                whiteBright: [97, 39]
              },
              bgColor: {
                bgBlack: [40, 49],
                bgRed: [41, 49],
                bgGreen: [42, 49],
                bgYellow: [43, 49],
                bgBlue: [44, 49],
                bgMagenta: [45, 49],
                bgCyan: [46, 49],
                bgWhite: [47, 49],
                bgBlackBright: [100, 49],
                bgRedBright: [101, 49],
                bgGreenBright: [102, 49],
                bgYellowBright: [103, 49],
                bgBlueBright: [104, 49],
                bgMagentaBright: [105, 49],
                bgCyanBright: [106, 49],
                bgWhiteBright: [107, 49]
              }
            };
            styles.color.grey = styles.color.gray;

            var _arr = Object.keys(styles);

            for (var _i = 0; _i < _arr.length; _i++) {
              var groupName = _arr[_i];
              var group = styles[groupName];

              var _arr3 = Object.keys(group);

              for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                var styleName = _arr3[_i3];
                var style = group[styleName];
                styles[styleName] = {
                  open: "\x1B[".concat(style[0], "m"),
                  close: "\x1B[".concat(style[1], "m")
                };
                group[styleName] = styles[styleName];
                codes.set(style[0], style[1]);
              }

              Object.defineProperty(styles, groupName, {
                value: group,
                enumerable: false
              });
              Object.defineProperty(styles, 'codes', {
                value: codes,
                enumerable: false
              });
            }

            var ansi2ansi = function ansi2ansi(n) {
              return n;
            };

            var rgb2rgb = function rgb2rgb(r, g, b) {
              return [r, g, b];
            };

            styles.color.close = "\x1B[39m";
            styles.bgColor.close = "\x1B[49m";
            styles.color.ansi = {
              ansi: wrapAnsi16(ansi2ansi, 0)
            };
            styles.color.ansi256 = {
              ansi256: wrapAnsi256(ansi2ansi, 0)
            };
            styles.color.ansi16m = {
              rgb: wrapAnsi16m(rgb2rgb, 0)
            };
            styles.bgColor.ansi = {
              ansi: wrapAnsi16(ansi2ansi, 10)
            };
            styles.bgColor.ansi256 = {
              ansi256: wrapAnsi256(ansi2ansi, 10)
            };
            styles.bgColor.ansi16m = {
              rgb: wrapAnsi16m(rgb2rgb, 10)
            };

            var _arr2 = Object.keys(colorConvert);

            for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
              var key = _arr2[_i2];

              if (_typeof(colorConvert[key]) !== 'object') {
                continue;
              }

              var suite = colorConvert[key];

              if (key === 'ansi16') {
                key = 'ansi';
              }

              if ('ansi16' in suite) {
                styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
                styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
              }

              if ('ansi256' in suite) {
                styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
                styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
              }

              if ('rgb' in suite) {
                styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
                styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
              }
            }

            return styles;
          }

          Object.defineProperty(module, 'exports', {
            enumerable: true,
            get: assembleStyles
          });
        }).call(this, __webpack_require__("./node_modules/webpack/buildin/module.js")(module));
      },
      "./node_modules/color-convert/conversions.js": function node_modulesColorConvertConversionsJs(module, exports, __webpack_require__) {
        "use strict";

        var cssKeywords = __webpack_require__("./node_modules/color-name/index.js");

        var reverseKeywords = {};

        for (var key in cssKeywords) {
          if (cssKeywords.hasOwnProperty(key)) {
            reverseKeywords[cssKeywords[key]] = key;
          }
        }

        var convert = module.exports = {
          rgb: {
            channels: 3,
            labels: 'rgb'
          },
          hsl: {
            channels: 3,
            labels: 'hsl'
          },
          hsv: {
            channels: 3,
            labels: 'hsv'
          },
          hwb: {
            channels: 3,
            labels: 'hwb'
          },
          cmyk: {
            channels: 4,
            labels: 'cmyk'
          },
          xyz: {
            channels: 3,
            labels: 'xyz'
          },
          lab: {
            channels: 3,
            labels: 'lab'
          },
          lch: {
            channels: 3,
            labels: 'lch'
          },
          hex: {
            channels: 1,
            labels: ['hex']
          },
          keyword: {
            channels: 1,
            labels: ['keyword']
          },
          ansi16: {
            channels: 1,
            labels: ['ansi16']
          },
          ansi256: {
            channels: 1,
            labels: ['ansi256']
          },
          hcg: {
            channels: 3,
            labels: ['h', 'c', 'g']
          },
          apple: {
            channels: 3,
            labels: ['r16', 'g16', 'b16']
          },
          gray: {
            channels: 1,
            labels: ['gray']
          }
        };

        for (var model in convert) {
          if (convert.hasOwnProperty(model)) {
            if (!('channels' in convert[model])) {
              throw new Error('missing channels property: ' + model);
            }

            if (!('labels' in convert[model])) {
              throw new Error('missing channel labels property: ' + model);
            }

            if (convert[model].labels.length !== convert[model].channels) {
              throw new Error('channel and label counts mismatch: ' + model);
            }

            var channels = convert[model].channels;
            var labels = convert[model].labels;
            delete convert[model].channels;
            delete convert[model].labels;
            Object.defineProperty(convert[model], 'channels', {
              value: channels
            });
            Object.defineProperty(convert[model], 'labels', {
              value: labels
            });
          }
        }

        convert.rgb.hsl = function (rgb) {
          var r = rgb[0] / 255;
          var g = rgb[1] / 255;
          var b = rgb[2] / 255;
          var min = Math.min(r, g, b);
          var max = Math.max(r, g, b);
          var delta = max - min;
          var h;
          var s;
          var l;

          if (max === min) {
            h = 0;
          } else if (r === max) {
            h = (g - b) / delta;
          } else if (g === max) {
            h = 2 + (b - r) / delta;
          } else if (b === max) {
            h = 4 + (r - g) / delta;
          }

          h = Math.min(h * 60, 360);

          if (h < 0) {
            h += 360;
          }

          l = (min + max) / 2;

          if (max === min) {
            s = 0;
          } else if (l <= 0.5) {
            s = delta / (max + min);
          } else {
            s = delta / (2 - max - min);
          }

          return [h, s * 100, l * 100];
        };

        convert.rgb.hsv = function (rgb) {
          var rdif;
          var gdif;
          var bdif;
          var h;
          var s;
          var r = rgb[0] / 255;
          var g = rgb[1] / 255;
          var b = rgb[2] / 255;
          var v = Math.max(r, g, b);
          var diff = v - Math.min(r, g, b);

          var diffc = function diffc(c) {
            return (v - c) / 6 / diff + 1 / 2;
          };

          if (diff === 0) {
            h = s = 0;
          } else {
            s = diff / v;
            rdif = diffc(r);
            gdif = diffc(g);
            bdif = diffc(b);

            if (r === v) {
              h = bdif - gdif;
            } else if (g === v) {
              h = 1 / 3 + rdif - bdif;
            } else if (b === v) {
              h = 2 / 3 + gdif - rdif;
            }

            if (h < 0) {
              h += 1;
            } else if (h > 1) {
              h -= 1;
            }
          }

          return [h * 360, s * 100, v * 100];
        };

        convert.rgb.hwb = function (rgb) {
          var r = rgb[0];
          var g = rgb[1];
          var b = rgb[2];
          var h = convert.rgb.hsl(rgb)[0];
          var w = 1 / 255 * Math.min(r, Math.min(g, b));
          b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
          return [h, w * 100, b * 100];
        };

        convert.rgb.cmyk = function (rgb) {
          var r = rgb[0] / 255;
          var g = rgb[1] / 255;
          var b = rgb[2] / 255;
          var c;
          var m;
          var y;
          var k;
          k = Math.min(1 - r, 1 - g, 1 - b);
          c = (1 - r - k) / (1 - k) || 0;
          m = (1 - g - k) / (1 - k) || 0;
          y = (1 - b - k) / (1 - k) || 0;
          return [c * 100, m * 100, y * 100, k * 100];
        };

        function comparativeDistance(x, y) {
          return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
        }

        convert.rgb.keyword = function (rgb) {
          var reversed = reverseKeywords[rgb];

          if (reversed) {
            return reversed;
          }

          var currentClosestDistance = Infinity;
          var currentClosestKeyword;

          for (var keyword in cssKeywords) {
            if (cssKeywords.hasOwnProperty(keyword)) {
              var value = cssKeywords[keyword];
              var distance = comparativeDistance(rgb, value);

              if (distance < currentClosestDistance) {
                currentClosestDistance = distance;
                currentClosestKeyword = keyword;
              }
            }
          }

          return currentClosestKeyword;
        };

        convert.keyword.rgb = function (keyword) {
          return cssKeywords[keyword];
        };

        convert.rgb.xyz = function (rgb) {
          var r = rgb[0] / 255;
          var g = rgb[1] / 255;
          var b = rgb[2] / 255;
          r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
          g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
          b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
          var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
          var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
          var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
          return [x * 100, y * 100, z * 100];
        };

        convert.rgb.lab = function (rgb) {
          var xyz = convert.rgb.xyz(rgb);
          var x = xyz[0];
          var y = xyz[1];
          var z = xyz[2];
          var l;
          var a;
          var b;
          x /= 95.047;
          y /= 100;
          z /= 108.883;
          x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
          y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
          z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
          l = 116 * y - 16;
          a = 500 * (x - y);
          b = 200 * (y - z);
          return [l, a, b];
        };

        convert.hsl.rgb = function (hsl) {
          var h = hsl[0] / 360;
          var s = hsl[1] / 100;
          var l = hsl[2] / 100;
          var t1;
          var t2;
          var t3;
          var rgb;
          var val;

          if (s === 0) {
            val = l * 255;
            return [val, val, val];
          }

          if (l < 0.5) {
            t2 = l * (1 + s);
          } else {
            t2 = l + s - l * s;
          }

          t1 = 2 * l - t2;
          rgb = [0, 0, 0];

          for (var i = 0; i < 3; i++) {
            t3 = h + 1 / 3 * -(i - 1);

            if (t3 < 0) {
              t3++;
            }

            if (t3 > 1) {
              t3--;
            }

            if (6 * t3 < 1) {
              val = t1 + (t2 - t1) * 6 * t3;
            } else if (2 * t3 < 1) {
              val = t2;
            } else if (3 * t3 < 2) {
              val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
            } else {
              val = t1;
            }

            rgb[i] = val * 255;
          }

          return rgb;
        };

        convert.hsl.hsv = function (hsl) {
          var h = hsl[0];
          var s = hsl[1] / 100;
          var l = hsl[2] / 100;
          var smin = s;
          var lmin = Math.max(l, 0.01);
          var sv;
          var v;
          l *= 2;
          s *= l <= 1 ? l : 2 - l;
          smin *= lmin <= 1 ? lmin : 2 - lmin;
          v = (l + s) / 2;
          sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
          return [h, sv * 100, v * 100];
        };

        convert.hsv.rgb = function (hsv) {
          var h = hsv[0] / 60;
          var s = hsv[1] / 100;
          var v = hsv[2] / 100;
          var hi = Math.floor(h) % 6;
          var f = h - Math.floor(h);
          var p = 255 * v * (1 - s);
          var q = 255 * v * (1 - s * f);
          var t = 255 * v * (1 - s * (1 - f));
          v *= 255;

          switch (hi) {
            case 0:
              return [v, t, p];

            case 1:
              return [q, v, p];

            case 2:
              return [p, v, t];

            case 3:
              return [p, q, v];

            case 4:
              return [t, p, v];

            case 5:
              return [v, p, q];
          }
        };

        convert.hsv.hsl = function (hsv) {
          var h = hsv[0];
          var s = hsv[1] / 100;
          var v = hsv[2] / 100;
          var vmin = Math.max(v, 0.01);
          var lmin;
          var sl;
          var l;
          l = (2 - s) * v;
          lmin = (2 - s) * vmin;
          sl = s * vmin;
          sl /= lmin <= 1 ? lmin : 2 - lmin;
          sl = sl || 0;
          l /= 2;
          return [h, sl * 100, l * 100];
        };

        convert.hwb.rgb = function (hwb) {
          var h = hwb[0] / 360;
          var wh = hwb[1] / 100;
          var bl = hwb[2] / 100;
          var ratio = wh + bl;
          var i;
          var v;
          var f;
          var n;

          if (ratio > 1) {
            wh /= ratio;
            bl /= ratio;
          }

          i = Math.floor(6 * h);
          v = 1 - bl;
          f = 6 * h - i;

          if ((i & 0x01) !== 0) {
            f = 1 - f;
          }

          n = wh + f * (v - wh);
          var r;
          var g;
          var b;

          switch (i) {
            default:
            case 6:
            case 0:
              r = v;
              g = n;
              b = wh;
              break;

            case 1:
              r = n;
              g = v;
              b = wh;
              break;

            case 2:
              r = wh;
              g = v;
              b = n;
              break;

            case 3:
              r = wh;
              g = n;
              b = v;
              break;

            case 4:
              r = n;
              g = wh;
              b = v;
              break;

            case 5:
              r = v;
              g = wh;
              b = n;
              break;
          }

          return [r * 255, g * 255, b * 255];
        };

        convert.cmyk.rgb = function (cmyk) {
          var c = cmyk[0] / 100;
          var m = cmyk[1] / 100;
          var y = cmyk[2] / 100;
          var k = cmyk[3] / 100;
          var r;
          var g;
          var b;
          r = 1 - Math.min(1, c * (1 - k) + k);
          g = 1 - Math.min(1, m * (1 - k) + k);
          b = 1 - Math.min(1, y * (1 - k) + k);
          return [r * 255, g * 255, b * 255];
        };

        convert.xyz.rgb = function (xyz) {
          var x = xyz[0] / 100;
          var y = xyz[1] / 100;
          var z = xyz[2] / 100;
          var r;
          var g;
          var b;
          r = x * 3.2406 + y * -1.5372 + z * -0.4986;
          g = x * -0.9689 + y * 1.8758 + z * 0.0415;
          b = x * 0.0557 + y * -0.2040 + z * 1.0570;
          r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;
          g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;
          b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;
          r = Math.min(Math.max(0, r), 1);
          g = Math.min(Math.max(0, g), 1);
          b = Math.min(Math.max(0, b), 1);
          return [r * 255, g * 255, b * 255];
        };

        convert.xyz.lab = function (xyz) {
          var x = xyz[0];
          var y = xyz[1];
          var z = xyz[2];
          var l;
          var a;
          var b;
          x /= 95.047;
          y /= 100;
          z /= 108.883;
          x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
          y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
          z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
          l = 116 * y - 16;
          a = 500 * (x - y);
          b = 200 * (y - z);
          return [l, a, b];
        };

        convert.lab.xyz = function (lab) {
          var l = lab[0];
          var a = lab[1];
          var b = lab[2];
          var x;
          var y;
          var z;
          y = (l + 16) / 116;
          x = a / 500 + y;
          z = y - b / 200;
          var y2 = Math.pow(y, 3);
          var x2 = Math.pow(x, 3);
          var z2 = Math.pow(z, 3);
          y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
          x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
          z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;
          x *= 95.047;
          y *= 100;
          z *= 108.883;
          return [x, y, z];
        };

        convert.lab.lch = function (lab) {
          var l = lab[0];
          var a = lab[1];
          var b = lab[2];
          var hr;
          var h;
          var c;
          hr = Math.atan2(b, a);
          h = hr * 360 / 2 / Math.PI;

          if (h < 0) {
            h += 360;
          }

          c = Math.sqrt(a * a + b * b);
          return [l, c, h];
        };

        convert.lch.lab = function (lch) {
          var l = lch[0];
          var c = lch[1];
          var h = lch[2];
          var a;
          var b;
          var hr;
          hr = h / 360 * 2 * Math.PI;
          a = c * Math.cos(hr);
          b = c * Math.sin(hr);
          return [l, a, b];
        };

        convert.rgb.ansi16 = function (args) {
          var r = args[0];
          var g = args[1];
          var b = args[2];
          var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
          value = Math.round(value / 50);

          if (value === 0) {
            return 30;
          }

          var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));

          if (value === 2) {
            ansi += 60;
          }

          return ansi;
        };

        convert.hsv.ansi16 = function (args) {
          return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
        };

        convert.rgb.ansi256 = function (args) {
          var r = args[0];
          var g = args[1];
          var b = args[2];

          if (r === g && g === b) {
            if (r < 8) {
              return 16;
            }

            if (r > 248) {
              return 231;
            }

            return Math.round((r - 8) / 247 * 24) + 232;
          }

          var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
          return ansi;
        };

        convert.ansi16.rgb = function (args) {
          var color = args % 10;

          if (color === 0 || color === 7) {
            if (args > 50) {
              color += 3.5;
            }

            color = color / 10.5 * 255;
            return [color, color, color];
          }

          var mult = (~~(args > 50) + 1) * 0.5;
          var r = (color & 1) * mult * 255;
          var g = (color >> 1 & 1) * mult * 255;
          var b = (color >> 2 & 1) * mult * 255;
          return [r, g, b];
        };

        convert.ansi256.rgb = function (args) {
          if (args >= 232) {
            var c = (args - 232) * 10 + 8;
            return [c, c, c];
          }

          args -= 16;
          var rem;
          var r = Math.floor(args / 36) / 5 * 255;
          var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
          var b = rem % 6 / 5 * 255;
          return [r, g, b];
        };

        convert.rgb.hex = function (args) {
          var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);
          var string = integer.toString(16).toUpperCase();
          return '000000'.substring(string.length) + string;
        };

        convert.hex.rgb = function (args) {
          var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);

          if (!match) {
            return [0, 0, 0];
          }

          var colorString = match[0];

          if (match[0].length === 3) {
            colorString = colorString.split('').map(function (char) {
              return char + char;
            }).join('');
          }

          var integer = parseInt(colorString, 16);
          var r = integer >> 16 & 0xFF;
          var g = integer >> 8 & 0xFF;
          var b = integer & 0xFF;
          return [r, g, b];
        };

        convert.rgb.hcg = function (rgb) {
          var r = rgb[0] / 255;
          var g = rgb[1] / 255;
          var b = rgb[2] / 255;
          var max = Math.max(Math.max(r, g), b);
          var min = Math.min(Math.min(r, g), b);
          var chroma = max - min;
          var grayscale;
          var hue;

          if (chroma < 1) {
            grayscale = min / (1 - chroma);
          } else {
            grayscale = 0;
          }

          if (chroma <= 0) {
            hue = 0;
          } else if (max === r) {
            hue = (g - b) / chroma % 6;
          } else if (max === g) {
            hue = 2 + (b - r) / chroma;
          } else {
            hue = 4 + (r - g) / chroma + 4;
          }

          hue /= 6;
          hue %= 1;
          return [hue * 360, chroma * 100, grayscale * 100];
        };

        convert.hsl.hcg = function (hsl) {
          var s = hsl[1] / 100;
          var l = hsl[2] / 100;
          var c = 1;
          var f = 0;

          if (l < 0.5) {
            c = 2.0 * s * l;
          } else {
            c = 2.0 * s * (1.0 - l);
          }

          if (c < 1.0) {
            f = (l - 0.5 * c) / (1.0 - c);
          }

          return [hsl[0], c * 100, f * 100];
        };

        convert.hsv.hcg = function (hsv) {
          var s = hsv[1] / 100;
          var v = hsv[2] / 100;
          var c = s * v;
          var f = 0;

          if (c < 1.0) {
            f = (v - c) / (1 - c);
          }

          return [hsv[0], c * 100, f * 100];
        };

        convert.hcg.rgb = function (hcg) {
          var h = hcg[0] / 360;
          var c = hcg[1] / 100;
          var g = hcg[2] / 100;

          if (c === 0.0) {
            return [g * 255, g * 255, g * 255];
          }

          var pure = [0, 0, 0];
          var hi = h % 1 * 6;
          var v = hi % 1;
          var w = 1 - v;
          var mg = 0;

          switch (Math.floor(hi)) {
            case 0:
              pure[0] = 1;
              pure[1] = v;
              pure[2] = 0;
              break;

            case 1:
              pure[0] = w;
              pure[1] = 1;
              pure[2] = 0;
              break;

            case 2:
              pure[0] = 0;
              pure[1] = 1;
              pure[2] = v;
              break;

            case 3:
              pure[0] = 0;
              pure[1] = w;
              pure[2] = 1;
              break;

            case 4:
              pure[0] = v;
              pure[1] = 0;
              pure[2] = 1;
              break;

            default:
              pure[0] = 1;
              pure[1] = 0;
              pure[2] = w;
          }

          mg = (1.0 - c) * g;
          return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
        };

        convert.hcg.hsv = function (hcg) {
          var c = hcg[1] / 100;
          var g = hcg[2] / 100;
          var v = c + g * (1.0 - c);
          var f = 0;

          if (v > 0.0) {
            f = c / v;
          }

          return [hcg[0], f * 100, v * 100];
        };

        convert.hcg.hsl = function (hcg) {
          var c = hcg[1] / 100;
          var g = hcg[2] / 100;
          var l = g * (1.0 - c) + 0.5 * c;
          var s = 0;

          if (l > 0.0 && l < 0.5) {
            s = c / (2 * l);
          } else if (l >= 0.5 && l < 1.0) {
            s = c / (2 * (1 - l));
          }

          return [hcg[0], s * 100, l * 100];
        };

        convert.hcg.hwb = function (hcg) {
          var c = hcg[1] / 100;
          var g = hcg[2] / 100;
          var v = c + g * (1.0 - c);
          return [hcg[0], (v - c) * 100, (1 - v) * 100];
        };

        convert.hwb.hcg = function (hwb) {
          var w = hwb[1] / 100;
          var b = hwb[2] / 100;
          var v = 1 - b;
          var c = v - w;
          var g = 0;

          if (c < 1) {
            g = (v - c) / (1 - c);
          }

          return [hwb[0], c * 100, g * 100];
        };

        convert.apple.rgb = function (apple) {
          return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
        };

        convert.rgb.apple = function (rgb) {
          return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
        };

        convert.gray.rgb = function (args) {
          return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
        };

        convert.gray.hsl = convert.gray.hsv = function (args) {
          return [0, 0, args[0]];
        };

        convert.gray.hwb = function (gray) {
          return [0, 100, gray[0]];
        };

        convert.gray.cmyk = function (gray) {
          return [0, 0, 0, gray[0]];
        };

        convert.gray.lab = function (gray) {
          return [gray[0], 0, 0];
        };

        convert.gray.hex = function (gray) {
          var val = Math.round(gray[0] / 100 * 255) & 0xFF;
          var integer = (val << 16) + (val << 8) + val;
          var string = integer.toString(16).toUpperCase();
          return '000000'.substring(string.length) + string;
        };

        convert.rgb.gray = function (rgb) {
          var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
          return [val / 255 * 100];
        };
      },
      "./node_modules/color-convert/index.js": function node_modulesColorConvertIndexJs(module, exports, __webpack_require__) {
        "use strict";

        function _typeof(obj) {
          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        var conversions = __webpack_require__("./node_modules/color-convert/conversions.js");

        var route = __webpack_require__("./node_modules/color-convert/route.js");

        var convert = {};
        var models = Object.keys(conversions);

        function wrapRaw(fn) {
          var wrappedFn = function wrappedFn(args) {
            if (args === undefined || args === null) {
              return args;
            }

            if (arguments.length > 1) {
              args = Array.prototype.slice.call(arguments);
            }

            return fn(args);
          };

          if ('conversion' in fn) {
            wrappedFn.conversion = fn.conversion;
          }

          return wrappedFn;
        }

        function wrapRounded(fn) {
          var wrappedFn = function wrappedFn(args) {
            if (args === undefined || args === null) {
              return args;
            }

            if (arguments.length > 1) {
              args = Array.prototype.slice.call(arguments);
            }

            var result = fn(args);

            if (_typeof(result) === 'object') {
              for (var len = result.length, i = 0; i < len; i++) {
                result[i] = Math.round(result[i]);
              }
            }

            return result;
          };

          if ('conversion' in fn) {
            wrappedFn.conversion = fn.conversion;
          }

          return wrappedFn;
        }

        models.forEach(function (fromModel) {
          convert[fromModel] = {};
          Object.defineProperty(convert[fromModel], 'channels', {
            value: conversions[fromModel].channels
          });
          Object.defineProperty(convert[fromModel], 'labels', {
            value: conversions[fromModel].labels
          });
          var routes = route(fromModel);
          var routeModels = Object.keys(routes);
          routeModels.forEach(function (toModel) {
            var fn = routes[toModel];
            convert[fromModel][toModel] = wrapRounded(fn);
            convert[fromModel][toModel].raw = wrapRaw(fn);
          });
        });
        module.exports = convert;
      },
      "./node_modules/color-convert/route.js": function node_modulesColorConvertRouteJs(module, exports, __webpack_require__) {
        "use strict";

        var conversions = __webpack_require__("./node_modules/color-convert/conversions.js");

        function buildGraph() {
          var graph = {};
          var models = Object.keys(conversions);

          for (var len = models.length, i = 0; i < len; i++) {
            graph[models[i]] = {
              distance: -1,
              parent: null
            };
          }

          return graph;
        }

        function deriveBFS(fromModel) {
          var graph = buildGraph();
          var queue = [fromModel];
          graph[fromModel].distance = 0;

          while (queue.length) {
            var current = queue.pop();
            var adjacents = Object.keys(conversions[current]);

            for (var len = adjacents.length, i = 0; i < len; i++) {
              var adjacent = adjacents[i];
              var node = graph[adjacent];

              if (node.distance === -1) {
                node.distance = graph[current].distance + 1;
                node.parent = current;
                queue.unshift(adjacent);
              }
            }
          }

          return graph;
        }

        function link(from, to) {
          return function (args) {
            return to(from(args));
          };
        }

        function wrapConversion(toModel, graph) {
          var path = [graph[toModel].parent, toModel];
          var fn = conversions[graph[toModel].parent][toModel];
          var cur = graph[toModel].parent;

          while (graph[cur].parent) {
            path.unshift(graph[cur].parent);
            fn = link(conversions[graph[cur].parent][cur], fn);
            cur = graph[cur].parent;
          }

          fn.conversion = path;
          return fn;
        }

        module.exports = function (fromModel) {
          var graph = deriveBFS(fromModel);
          var conversion = {};
          var models = Object.keys(graph);

          for (var len = models.length, i = 0; i < len; i++) {
            var toModel = models[i];
            var node = graph[toModel];

            if (node.parent === null) {
              continue;
            }

            conversion[toModel] = wrapConversion(toModel, graph);
          }

          return conversion;
        };
      },
      "./node_modules/color-name/index.js": function node_modulesColorNameIndexJs(module, exports, __webpack_require__) {
        "use strict";

        module.exports = {
          "aliceblue": [240, 248, 255],
          "antiquewhite": [250, 235, 215],
          "aqua": [0, 255, 255],
          "aquamarine": [127, 255, 212],
          "azure": [240, 255, 255],
          "beige": [245, 245, 220],
          "bisque": [255, 228, 196],
          "black": [0, 0, 0],
          "blanchedalmond": [255, 235, 205],
          "blue": [0, 0, 255],
          "blueviolet": [138, 43, 226],
          "brown": [165, 42, 42],
          "burlywood": [222, 184, 135],
          "cadetblue": [95, 158, 160],
          "chartreuse": [127, 255, 0],
          "chocolate": [210, 105, 30],
          "coral": [255, 127, 80],
          "cornflowerblue": [100, 149, 237],
          "cornsilk": [255, 248, 220],
          "crimson": [220, 20, 60],
          "cyan": [0, 255, 255],
          "darkblue": [0, 0, 139],
          "darkcyan": [0, 139, 139],
          "darkgoldenrod": [184, 134, 11],
          "darkgray": [169, 169, 169],
          "darkgreen": [0, 100, 0],
          "darkgrey": [169, 169, 169],
          "darkkhaki": [189, 183, 107],
          "darkmagenta": [139, 0, 139],
          "darkolivegreen": [85, 107, 47],
          "darkorange": [255, 140, 0],
          "darkorchid": [153, 50, 204],
          "darkred": [139, 0, 0],
          "darksalmon": [233, 150, 122],
          "darkseagreen": [143, 188, 143],
          "darkslateblue": [72, 61, 139],
          "darkslategray": [47, 79, 79],
          "darkslategrey": [47, 79, 79],
          "darkturquoise": [0, 206, 209],
          "darkviolet": [148, 0, 211],
          "deeppink": [255, 20, 147],
          "deepskyblue": [0, 191, 255],
          "dimgray": [105, 105, 105],
          "dimgrey": [105, 105, 105],
          "dodgerblue": [30, 144, 255],
          "firebrick": [178, 34, 34],
          "floralwhite": [255, 250, 240],
          "forestgreen": [34, 139, 34],
          "fuchsia": [255, 0, 255],
          "gainsboro": [220, 220, 220],
          "ghostwhite": [248, 248, 255],
          "gold": [255, 215, 0],
          "goldenrod": [218, 165, 32],
          "gray": [128, 128, 128],
          "green": [0, 128, 0],
          "greenyellow": [173, 255, 47],
          "grey": [128, 128, 128],
          "honeydew": [240, 255, 240],
          "hotpink": [255, 105, 180],
          "indianred": [205, 92, 92],
          "indigo": [75, 0, 130],
          "ivory": [255, 255, 240],
          "khaki": [240, 230, 140],
          "lavender": [230, 230, 250],
          "lavenderblush": [255, 240, 245],
          "lawngreen": [124, 252, 0],
          "lemonchiffon": [255, 250, 205],
          "lightblue": [173, 216, 230],
          "lightcoral": [240, 128, 128],
          "lightcyan": [224, 255, 255],
          "lightgoldenrodyellow": [250, 250, 210],
          "lightgray": [211, 211, 211],
          "lightgreen": [144, 238, 144],
          "lightgrey": [211, 211, 211],
          "lightpink": [255, 182, 193],
          "lightsalmon": [255, 160, 122],
          "lightseagreen": [32, 178, 170],
          "lightskyblue": [135, 206, 250],
          "lightslategray": [119, 136, 153],
          "lightslategrey": [119, 136, 153],
          "lightsteelblue": [176, 196, 222],
          "lightyellow": [255, 255, 224],
          "lime": [0, 255, 0],
          "limegreen": [50, 205, 50],
          "linen": [250, 240, 230],
          "magenta": [255, 0, 255],
          "maroon": [128, 0, 0],
          "mediumaquamarine": [102, 205, 170],
          "mediumblue": [0, 0, 205],
          "mediumorchid": [186, 85, 211],
          "mediumpurple": [147, 112, 219],
          "mediumseagreen": [60, 179, 113],
          "mediumslateblue": [123, 104, 238],
          "mediumspringgreen": [0, 250, 154],
          "mediumturquoise": [72, 209, 204],
          "mediumvioletred": [199, 21, 133],
          "midnightblue": [25, 25, 112],
          "mintcream": [245, 255, 250],
          "mistyrose": [255, 228, 225],
          "moccasin": [255, 228, 181],
          "navajowhite": [255, 222, 173],
          "navy": [0, 0, 128],
          "oldlace": [253, 245, 230],
          "olive": [128, 128, 0],
          "olivedrab": [107, 142, 35],
          "orange": [255, 165, 0],
          "orangered": [255, 69, 0],
          "orchid": [218, 112, 214],
          "palegoldenrod": [238, 232, 170],
          "palegreen": [152, 251, 152],
          "paleturquoise": [175, 238, 238],
          "palevioletred": [219, 112, 147],
          "papayawhip": [255, 239, 213],
          "peachpuff": [255, 218, 185],
          "peru": [205, 133, 63],
          "pink": [255, 192, 203],
          "plum": [221, 160, 221],
          "powderblue": [176, 224, 230],
          "purple": [128, 0, 128],
          "rebeccapurple": [102, 51, 153],
          "red": [255, 0, 0],
          "rosybrown": [188, 143, 143],
          "royalblue": [65, 105, 225],
          "saddlebrown": [139, 69, 19],
          "salmon": [250, 128, 114],
          "sandybrown": [244, 164, 96],
          "seagreen": [46, 139, 87],
          "seashell": [255, 245, 238],
          "sienna": [160, 82, 45],
          "silver": [192, 192, 192],
          "skyblue": [135, 206, 235],
          "slateblue": [106, 90, 205],
          "slategray": [112, 128, 144],
          "slategrey": [112, 128, 144],
          "snow": [255, 250, 250],
          "springgreen": [0, 255, 127],
          "steelblue": [70, 130, 180],
          "tan": [210, 180, 140],
          "teal": [0, 128, 128],
          "thistle": [216, 191, 216],
          "tomato": [255, 99, 71],
          "turquoise": [64, 224, 208],
          "violet": [238, 130, 238],
          "wheat": [245, 222, 179],
          "white": [255, 255, 255],
          "whitesmoke": [245, 245, 245],
          "yellow": [255, 255, 0],
          "yellowgreen": [154, 205, 50]
        };
      },
      "./node_modules/react-is/cjs/react-is.development.js": function node_modulesReactIsCjsReactIsDevelopmentJs(module, exports, __webpack_require__) {
        "use strict";
        /** @license React v16.8.6
         * react-is.development.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        function _typeof(obj) {
          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        if (true) {
          (function () {
            'use strict';

            Object.defineProperty(exports, '__esModule', {
              value: true
            });
            var hasSymbol = typeof Symbol === 'function' && Symbol.for;
            var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
            var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
            var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
            var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
            var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
            var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
            var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
            var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
            var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
            var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
            var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
            var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
            var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

            function isValidElementType(type) {
              return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || _typeof(type) === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
            }

            var lowPriorityWarning = function lowPriorityWarning() {};

            {
              var printWarning = function printWarning(format) {
                for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }

                var argIndex = 0;
                var message = 'Warning: ' + format.replace(/%s/g, function () {
                  return args[argIndex++];
                });

                if (typeof console !== 'undefined') {
                  console.warn(message);
                }

                try {
                  throw new Error(message);
                } catch (x) {}
              };

              lowPriorityWarning = function lowPriorityWarning(condition, format) {
                if (format === undefined) {
                  throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
                }

                if (!condition) {
                  for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                    args[_key2 - 2] = arguments[_key2];
                  }

                  printWarning.apply(undefined, [format].concat(args));
                }
              };
            }
            var lowPriorityWarning$1 = lowPriorityWarning;

            function typeOf(object) {
              if (_typeof(object) === 'object' && object !== null) {
                var $$typeof = object.$$typeof;

                switch ($$typeof) {
                  case REACT_ELEMENT_TYPE:
                    var type = object.type;

                    switch (type) {
                      case REACT_ASYNC_MODE_TYPE:
                      case REACT_CONCURRENT_MODE_TYPE:
                      case REACT_FRAGMENT_TYPE:
                      case REACT_PROFILER_TYPE:
                      case REACT_STRICT_MODE_TYPE:
                      case REACT_SUSPENSE_TYPE:
                        return type;

                      default:
                        var $$typeofType = type && type.$$typeof;

                        switch ($$typeofType) {
                          case REACT_CONTEXT_TYPE:
                          case REACT_FORWARD_REF_TYPE:
                          case REACT_PROVIDER_TYPE:
                            return $$typeofType;

                          default:
                            return $$typeof;
                        }

                    }

                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                  case REACT_PORTAL_TYPE:
                    return $$typeof;
                }
              }

              return undefined;
            }

            var AsyncMode = REACT_ASYNC_MODE_TYPE;
            var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
            var ContextConsumer = REACT_CONTEXT_TYPE;
            var ContextProvider = REACT_PROVIDER_TYPE;
            var Element = REACT_ELEMENT_TYPE;
            var ForwardRef = REACT_FORWARD_REF_TYPE;
            var Fragment = REACT_FRAGMENT_TYPE;
            var Lazy = REACT_LAZY_TYPE;
            var Memo = REACT_MEMO_TYPE;
            var Portal = REACT_PORTAL_TYPE;
            var Profiler = REACT_PROFILER_TYPE;
            var StrictMode = REACT_STRICT_MODE_TYPE;
            var Suspense = REACT_SUSPENSE_TYPE;
            var hasWarnedAboutDeprecatedIsAsyncMode = false;

            function isAsyncMode(object) {
              {
                if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                  hasWarnedAboutDeprecatedIsAsyncMode = true;
                  lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
                }
              }
              return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
            }

            function isConcurrentMode(object) {
              return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
            }

            function isContextConsumer(object) {
              return typeOf(object) === REACT_CONTEXT_TYPE;
            }

            function isContextProvider(object) {
              return typeOf(object) === REACT_PROVIDER_TYPE;
            }

            function isElement(object) {
              return _typeof(object) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }

            function isForwardRef(object) {
              return typeOf(object) === REACT_FORWARD_REF_TYPE;
            }

            function isFragment(object) {
              return typeOf(object) === REACT_FRAGMENT_TYPE;
            }

            function isLazy(object) {
              return typeOf(object) === REACT_LAZY_TYPE;
            }

            function isMemo(object) {
              return typeOf(object) === REACT_MEMO_TYPE;
            }

            function isPortal(object) {
              return typeOf(object) === REACT_PORTAL_TYPE;
            }

            function isProfiler(object) {
              return typeOf(object) === REACT_PROFILER_TYPE;
            }

            function isStrictMode(object) {
              return typeOf(object) === REACT_STRICT_MODE_TYPE;
            }

            function isSuspense(object) {
              return typeOf(object) === REACT_SUSPENSE_TYPE;
            }

            exports.typeOf = typeOf;
            exports.AsyncMode = AsyncMode;
            exports.ConcurrentMode = ConcurrentMode;
            exports.ContextConsumer = ContextConsumer;
            exports.ContextProvider = ContextProvider;
            exports.Element = Element;
            exports.ForwardRef = ForwardRef;
            exports.Fragment = Fragment;
            exports.Lazy = Lazy;
            exports.Memo = Memo;
            exports.Portal = Portal;
            exports.Profiler = Profiler;
            exports.StrictMode = StrictMode;
            exports.Suspense = Suspense;
            exports.isValidElementType = isValidElementType;
            exports.isAsyncMode = isAsyncMode;
            exports.isConcurrentMode = isConcurrentMode;
            exports.isContextConsumer = isContextConsumer;
            exports.isContextProvider = isContextProvider;
            exports.isElement = isElement;
            exports.isForwardRef = isForwardRef;
            exports.isFragment = isFragment;
            exports.isLazy = isLazy;
            exports.isMemo = isMemo;
            exports.isPortal = isPortal;
            exports.isProfiler = isProfiler;
            exports.isStrictMode = isStrictMode;
            exports.isSuspense = isSuspense;
          })();
        }
      },
      "./node_modules/react-is/index.js": function node_modulesReactIsIndexJs(module, exports, __webpack_require__) {
        "use strict";

        if (false) {} else {
          module.exports = __webpack_require__("./node_modules/react-is/cjs/react-is.development.js");
        }
      },
      "./node_modules/webpack/buildin/module.js": function node_modulesWebpackBuildinModuleJs(module, exports, __webpack_require__) {
        "use strict";

        module.exports = function (module) {
          if (!module.webpackPolyfill) {
            module.deprecate = function () {};

            module.paths = [];
            if (!module.children) module.children = [];
            Object.defineProperty(module, "loaded", {
              enumerable: true,
              get: function get() {
                return module.l;
              }
            });
            Object.defineProperty(module, "id", {
              enumerable: true,
              get: function get() {
                return module.i;
              }
            });
            module.webpackPolyfill = 1;
          }

          return module;
        };
      },
      "./packages/pretty-format/src/collections.ts": function packagesPrettyFormatSrcCollectionsTs(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.printIteratorEntries = printIteratorEntries;
        exports.printIteratorValues = printIteratorValues;
        exports.printListItems = printListItems;
        exports.printObjectProperties = printObjectProperties;

        var getKeysOfEnumerableProperties = function getKeysOfEnumerableProperties(object) {
          var keys = Object.keys(object).sort();

          if (Object.getOwnPropertySymbols) {
            Object.getOwnPropertySymbols(object).forEach(function (symbol) {
              if (Object.getOwnPropertyDescriptor(object, symbol).enumerable) {
                keys.push(symbol);
              }
            });
          }

          return keys;
        };

        function printIteratorEntries(iterator, config, indentation, depth, refs, printer) {
          var separator = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : ': ';
          var result = '';
          var current = iterator.next();

          if (!current.done) {
            result += config.spacingOuter;
            var indentationNext = indentation + config.indent;

            while (!current.done) {
              var name = printer(current.value[0], config, indentationNext, depth, refs);
              var value = printer(current.value[1], config, indentationNext, depth, refs);
              result += indentationNext + name + separator + value;
              current = iterator.next();

              if (!current.done) {
                result += ',' + config.spacingInner;
              } else if (!config.min) {
                result += ',';
              }
            }

            result += config.spacingOuter + indentation;
          }

          return result;
        }

        function printIteratorValues(iterator, config, indentation, depth, refs, printer) {
          var result = '';
          var current = iterator.next();

          if (!current.done) {
            result += config.spacingOuter;
            var indentationNext = indentation + config.indent;

            while (!current.done) {
              result += indentationNext + printer(current.value, config, indentationNext, depth, refs);
              current = iterator.next();

              if (!current.done) {
                result += ',' + config.spacingInner;
              } else if (!config.min) {
                result += ',';
              }
            }

            result += config.spacingOuter + indentation;
          }

          return result;
        }

        function printListItems(list, config, indentation, depth, refs, printer) {
          var result = '';

          if (list.length) {
            result += config.spacingOuter;
            var indentationNext = indentation + config.indent;

            for (var i = 0; i < list.length; i++) {
              result += indentationNext + printer(list[i], config, indentationNext, depth, refs);

              if (i < list.length - 1) {
                result += ',' + config.spacingInner;
              } else if (!config.min) {
                result += ',';
              }
            }

            result += config.spacingOuter + indentation;
          }

          return result;
        }

        function printObjectProperties(val, config, indentation, depth, refs, printer) {
          var result = '';
          var keys = getKeysOfEnumerableProperties(val);

          if (keys.length) {
            result += config.spacingOuter;
            var indentationNext = indentation + config.indent;

            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              var name = printer(key, config, indentationNext, depth, refs);
              var value = printer(val[key], config, indentationNext, depth, refs);
              result += indentationNext + name + ': ' + value;

              if (i < keys.length - 1) {
                result += ',' + config.spacingInner;
              } else if (!config.min) {
                result += ',';
              }
            }

            result += config.spacingOuter + indentation;
          }

          return result;
        }
      },
      "./packages/pretty-format/src/index.ts": function packagesPrettyFormatSrcIndexTs(module, exports, __webpack_require__) {
        "use strict";

        var _ansiStyles = _interopRequireDefault(__webpack_require__("./node_modules/ansi-styles/index.js"));

        var _collections = __webpack_require__("./packages/pretty-format/src/collections.ts");

        var _AsymmetricMatcher = _interopRequireDefault(__webpack_require__("./packages/pretty-format/src/plugins/AsymmetricMatcher.ts"));

        var _ConvertAnsi = _interopRequireDefault(__webpack_require__("./packages/pretty-format/src/plugins/ConvertAnsi.ts"));

        var _DOMCollection = _interopRequireDefault(__webpack_require__("./packages/pretty-format/src/plugins/DOMCollection.ts"));

        var _DOMElement = _interopRequireDefault(__webpack_require__("./packages/pretty-format/src/plugins/DOMElement.ts"));

        var _Immutable = _interopRequireDefault(__webpack_require__("./packages/pretty-format/src/plugins/Immutable.ts"));

        var _ReactElement = _interopRequireDefault(__webpack_require__("./packages/pretty-format/src/plugins/ReactElement.ts"));

        var _ReactTestComponent = _interopRequireDefault(__webpack_require__("./packages/pretty-format/src/plugins/ReactTestComponent.ts"));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        function _typeof(obj) {
          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (call && (_typeof(call) === "object" || typeof call === "function")) {
            return call;
          }

          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
          }

          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              writable: true,
              configurable: true
            }
          });
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _wrapNativeSuper(Class) {
          var _cache = typeof Map === "function" ? new Map() : undefined;

          _wrapNativeSuper = function _wrapNativeSuper(Class) {
            if (Class === null || !_isNativeFunction(Class)) return Class;

            if (typeof Class !== "function") {
              throw new TypeError("Super expression must either be null or a function");
            }

            if (typeof _cache !== "undefined") {
              if (_cache.has(Class)) return _cache.get(Class);

              _cache.set(Class, Wrapper);
            }

            function Wrapper() {
              return _construct(Class, arguments, _getPrototypeOf(this).constructor);
            }

            Wrapper.prototype = Object.create(Class.prototype, {
              constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            return _setPrototypeOf(Wrapper, Class);
          };

          return _wrapNativeSuper(Class);
        }

        function isNativeReflectConstruct() {
          if (typeof Reflect === "undefined" || !Reflect.construct) return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === "function") return true;

          try {
            Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
            return true;
          } catch (e) {
            return false;
          }
        }

        function _construct(Parent, args, Class) {
          if (isNativeReflectConstruct()) {
            _construct = Reflect.construct;
          } else {
            _construct = function _construct(Parent, args, Class) {
              var a = [null];
              a.push.apply(a, args);
              var Constructor = Function.bind.apply(Parent, a);
              var instance = new Constructor();
              if (Class) _setPrototypeOf(instance, Class.prototype);
              return instance;
            };
          }

          return _construct.apply(null, arguments);
        }

        function _isNativeFunction(fn) {
          return Function.toString.call(fn).indexOf("[native code]") !== -1;
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
          };

          return _setPrototypeOf(o, p);
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
          };
          return _getPrototypeOf(o);
        }

        var toString = Object.prototype.toString;
        var toISOString = Date.prototype.toISOString;
        var errorToString = Error.prototype.toString;
        var regExpToString = RegExp.prototype.toString;
        var symbolToString = Symbol.prototype.toString;

        var getConstructorName = function getConstructorName(val) {
          return typeof val.constructor === 'function' && val.constructor.name || 'Object';
        };

        var isWindow = function isWindow(val) {
          return typeof window !== 'undefined' && val === window;
        };

        var SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
        var NEWLINE_REGEXP = /\n/gi;

        var PrettyFormatPluginError = function (_Error) {
          _inherits(PrettyFormatPluginError, _Error);

          function PrettyFormatPluginError(message, stack) {
            var _this;

            _classCallCheck(this, PrettyFormatPluginError);

            _this = _possibleConstructorReturn(this, _getPrototypeOf(PrettyFormatPluginError).call(this, message));
            _this.stack = stack;
            _this.name = _this.constructor.name;
            return _this;
          }

          return PrettyFormatPluginError;
        }(_wrapNativeSuper(Error));

        function isToStringedArrayType(toStringed) {
          return toStringed === '[object Array]' || toStringed === '[object ArrayBuffer]' || toStringed === '[object DataView]' || toStringed === '[object Float32Array]' || toStringed === '[object Float64Array]' || toStringed === '[object Int8Array]' || toStringed === '[object Int16Array]' || toStringed === '[object Int32Array]' || toStringed === '[object Uint8Array]' || toStringed === '[object Uint8ClampedArray]' || toStringed === '[object Uint16Array]' || toStringed === '[object Uint32Array]';
        }

        function printNumber(val) {
          return Object.is(val, -0) ? '-0' : String(val);
        }

        function printBigInt(val) {
          return String("".concat(val, "n"));
        }

        function printFunction(val, printFunctionName) {
          if (!printFunctionName) {
            return '[Function]';
          }

          return '[Function ' + (val.name || 'anonymous') + ']';
        }

        function printSymbol(val) {
          return symbolToString.call(val).replace(SYMBOL_REGEXP, 'Symbol($1)');
        }

        function printError(val) {
          return '[' + errorToString.call(val) + ']';
        }

        function printBasicValue(val, printFunctionName, escapeRegex, escapeString) {
          if (val === true || val === false) {
            return '' + val;
          }

          if (val === undefined) {
            return 'undefined';
          }

          if (val === null) {
            return 'null';
          }

          var typeOf = _typeof(val);

          if (typeOf === 'number') {
            return printNumber(val);
          }

          if (typeOf === 'bigint') {
            return printBigInt(val);
          }

          if (typeOf === 'string') {
            if (escapeString) {
              return '"' + val.replace(/"|\\/g, '\\$&') + '"';
            }

            return '"' + val + '"';
          }

          if (typeOf === 'function') {
            return printFunction(val, printFunctionName);
          }

          if (typeOf === 'symbol') {
            return printSymbol(val);
          }

          var toStringed = toString.call(val);

          if (toStringed === '[object WeakMap]') {
            return 'WeakMap {}';
          }

          if (toStringed === '[object WeakSet]') {
            return 'WeakSet {}';
          }

          if (toStringed === '[object Function]' || toStringed === '[object GeneratorFunction]') {
            return printFunction(val, printFunctionName);
          }

          if (toStringed === '[object Symbol]') {
            return printSymbol(val);
          }

          if (toStringed === '[object Date]') {
            return isNaN(+val) ? 'Date { NaN }' : toISOString.call(val);
          }

          if (toStringed === '[object Error]') {
            return printError(val);
          }

          if (toStringed === '[object RegExp]') {
            if (escapeRegex) {
              return regExpToString.call(val).replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
            }

            return regExpToString.call(val);
          }

          if (val instanceof Error) {
            return printError(val);
          }

          return null;
        }

        function printComplexValue(val, config, indentation, depth, refs, hasCalledToJSON) {
          if (refs.indexOf(val) !== -1) {
            return '[Circular]';
          }

          refs = refs.slice();
          refs.push(val);
          var hitMaxDepth = ++depth > config.maxDepth;
          var min = config.min;

          if (config.callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === 'function' && !hasCalledToJSON) {
            return printer(val.toJSON(), config, indentation, depth, refs, true);
          }

          var toStringed = toString.call(val);

          if (toStringed === '[object Arguments]') {
            return hitMaxDepth ? '[Arguments]' : (min ? '' : 'Arguments ') + '[' + (0, _collections.printListItems)(val, config, indentation, depth, refs, printer) + ']';
          }

          if (isToStringedArrayType(toStringed)) {
            return hitMaxDepth ? '[' + val.constructor.name + ']' : (min ? '' : val.constructor.name + ' ') + '[' + (0, _collections.printListItems)(val, config, indentation, depth, refs, printer) + ']';
          }

          if (toStringed === '[object Map]') {
            return hitMaxDepth ? '[Map]' : 'Map {' + (0, _collections.printIteratorEntries)(val.entries(), config, indentation, depth, refs, printer, ' => ') + '}';
          }

          if (toStringed === '[object Set]') {
            return hitMaxDepth ? '[Set]' : 'Set {' + (0, _collections.printIteratorValues)(val.values(), config, indentation, depth, refs, printer) + '}';
          }

          return hitMaxDepth || isWindow(val) ? '[' + getConstructorName(val) + ']' : (min ? '' : getConstructorName(val) + ' ') + '{' + (0, _collections.printObjectProperties)(val, config, indentation, depth, refs, printer) + '}';
        }

        function isNewPlugin(plugin) {
          return plugin.serialize != null;
        }

        function printPlugin(plugin, val, config, indentation, depth, refs) {
          var printed;

          try {
            printed = isNewPlugin(plugin) ? plugin.serialize(val, config, indentation, depth, refs, printer) : plugin.print(val, function (valChild) {
              return printer(valChild, config, indentation, depth, refs);
            }, function (str) {
              var indentationNext = indentation + config.indent;
              return indentationNext + str.replace(NEWLINE_REGEXP, '\n' + indentationNext);
            }, {
              edgeSpacing: config.spacingOuter,
              min: config.min,
              spacing: config.spacingInner
            }, config.colors);
          } catch (error) {
            throw new PrettyFormatPluginError(error.message, error.stack);
          }

          if (typeof printed !== 'string') {
            throw new Error("pretty-format: Plugin must return type \"string\" but instead returned \"".concat(_typeof(printed), "\"."));
          }

          return printed;
        }

        function findPlugin(plugins, val) {
          for (var p = 0; p < plugins.length; p++) {
            try {
              if (plugins[p].test(val)) {
                return plugins[p];
              }
            } catch (error) {
              throw new PrettyFormatPluginError(error.message, error.stack);
            }
          }

          return null;
        }

        function printer(val, config, indentation, depth, refs, hasCalledToJSON) {
          var plugin = findPlugin(config.plugins, val);

          if (plugin !== null) {
            return printPlugin(plugin, val, config, indentation, depth, refs);
          }

          var basicResult = printBasicValue(val, config.printFunctionName, config.escapeRegex, config.escapeString);

          if (basicResult !== null) {
            return basicResult;
          }

          return printComplexValue(val, config, indentation, depth, refs, hasCalledToJSON);
        }

        var DEFAULT_THEME = {
          comment: 'gray',
          content: 'reset',
          prop: 'yellow',
          tag: 'cyan',
          value: 'green'
        };
        var DEFAULT_THEME_KEYS = Object.keys(DEFAULT_THEME);
        var DEFAULT_OPTIONS = {
          callToJSON: true,
          escapeRegex: false,
          escapeString: true,
          highlight: false,
          indent: 2,
          maxDepth: Infinity,
          min: false,
          plugins: [],
          printFunctionName: true,
          theme: DEFAULT_THEME
        };

        function validateOptions(options) {
          Object.keys(options).forEach(function (key) {
            if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {
              throw new Error("pretty-format: Unknown option \"".concat(key, "\"."));
            }
          });

          if (options.min && options.indent !== undefined && options.indent !== 0) {
            throw new Error('pretty-format: Options "min" and "indent" cannot be used together.');
          }

          if (options.theme !== undefined) {
            if (options.theme === null) {
              throw new Error("pretty-format: Option \"theme\" must not be null.");
            }

            if (_typeof(options.theme) !== 'object') {
              throw new Error("pretty-format: Option \"theme\" must be of type \"object\" but instead received \"".concat(_typeof(options.theme), "\"."));
            }
          }
        }

        var getColorsHighlight = function getColorsHighlight(options) {
          return DEFAULT_THEME_KEYS.reduce(function (colors, key) {
            var value = options.theme && options.theme[key] !== undefined ? options.theme[key] : DEFAULT_THEME[key];
            var color = value && _ansiStyles.default[value];

            if (color && typeof color.close === 'string' && typeof color.open === 'string') {
              colors[key] = color;
            } else {
              throw new Error("pretty-format: Option \"theme\" has a key \"".concat(key, "\" whose value \"").concat(value, "\" is undefined in ansi-styles."));
            }

            return colors;
          }, Object.create(null));
        };

        var getColorsEmpty = function getColorsEmpty() {
          return DEFAULT_THEME_KEYS.reduce(function (colors, key) {
            colors[key] = {
              close: '',
              open: ''
            };
            return colors;
          }, Object.create(null));
        };

        var getPrintFunctionName = function getPrintFunctionName(options) {
          return options && options.printFunctionName !== undefined ? options.printFunctionName : DEFAULT_OPTIONS.printFunctionName;
        };

        var getEscapeRegex = function getEscapeRegex(options) {
          return options && options.escapeRegex !== undefined ? options.escapeRegex : DEFAULT_OPTIONS.escapeRegex;
        };

        var getEscapeString = function getEscapeString(options) {
          return options && options.escapeString !== undefined ? options.escapeString : DEFAULT_OPTIONS.escapeString;
        };

        var getConfig = function getConfig(options) {
          return {
            callToJSON: options && options.callToJSON !== undefined ? options.callToJSON : DEFAULT_OPTIONS.callToJSON,
            colors: options && options.highlight ? getColorsHighlight(options) : getColorsEmpty(),
            escapeRegex: getEscapeRegex(options),
            escapeString: getEscapeString(options),
            indent: options && options.min ? '' : createIndent(options && options.indent !== undefined ? options.indent : DEFAULT_OPTIONS.indent),
            maxDepth: options && options.maxDepth !== undefined ? options.maxDepth : DEFAULT_OPTIONS.maxDepth,
            min: options && options.min !== undefined ? options.min : DEFAULT_OPTIONS.min,
            plugins: options && options.plugins !== undefined ? options.plugins : DEFAULT_OPTIONS.plugins,
            printFunctionName: getPrintFunctionName(options),
            spacingInner: options && options.min ? ' ' : '\n',
            spacingOuter: options && options.min ? '' : '\n'
          };
        };

        function createIndent(indent) {
          return new Array(indent + 1).join(' ');
        }

        function prettyFormat(val, options) {
          if (options) {
            validateOptions(options);

            if (options.plugins) {
              var plugin = findPlugin(options.plugins, val);

              if (plugin !== null) {
                return printPlugin(plugin, val, getConfig(options), '', 0, []);
              }
            }
          }

          var basicResult = printBasicValue(val, getPrintFunctionName(options), getEscapeRegex(options), getEscapeString(options));

          if (basicResult !== null) {
            return basicResult;
          }

          return printComplexValue(val, getConfig(options), '', 0, []);
        }

        prettyFormat.plugins = {
          AsymmetricMatcher: _AsymmetricMatcher.default,
          ConvertAnsi: _ConvertAnsi.default,
          DOMCollection: _DOMCollection.default,
          DOMElement: _DOMElement.default,
          Immutable: _Immutable.default,
          ReactElement: _ReactElement.default,
          ReactTestComponent: _ReactTestComponent.default
        };
        module.exports = prettyFormat;
      },
      "./packages/pretty-format/src/plugins/AsymmetricMatcher.ts": function packagesPrettyFormatSrcPluginsAsymmetricMatcherTs(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = exports.test = exports.serialize = void 0;

        var _collections = __webpack_require__("./packages/pretty-format/src/collections.ts");

        var asymmetricMatcher = Symbol.for('jest.asymmetricMatcher');
        var SPACE = ' ';

        var serialize = function serialize(val, config, indentation, depth, refs, printer) {
          var stringedValue = val.toString();

          if (stringedValue === 'ArrayContaining' || stringedValue === 'ArrayNotContaining') {
            if (++depth > config.maxDepth) {
              return '[' + stringedValue + ']';
            }

            return stringedValue + SPACE + '[' + (0, _collections.printListItems)(val.sample, config, indentation, depth, refs, printer) + ']';
          }

          if (stringedValue === 'ObjectContaining' || stringedValue === 'ObjectNotContaining') {
            if (++depth > config.maxDepth) {
              return '[' + stringedValue + ']';
            }

            return stringedValue + SPACE + '{' + (0, _collections.printObjectProperties)(val.sample, config, indentation, depth, refs, printer) + '}';
          }

          if (stringedValue === 'StringMatching' || stringedValue === 'StringNotMatching') {
            return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
          }

          if (stringedValue === 'StringContaining' || stringedValue === 'StringNotContaining') {
            return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
          }

          return val.toAsymmetricMatcher();
        };

        exports.serialize = serialize;

        var test = function test(val) {
          return val && val.$$typeof === asymmetricMatcher;
        };

        exports.test = test;
        var plugin = {
          serialize: serialize,
          test: test
        };
        var _default = plugin;
        exports.default = _default;
      },
      "./packages/pretty-format/src/plugins/ConvertAnsi.ts": function packagesPrettyFormatSrcPluginsConvertAnsiTs(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = exports.serialize = exports.test = void 0;

        var _ansiRegex = _interopRequireDefault(__webpack_require__("./node_modules/ansi-regex/index.js"));

        var _ansiStyles = _interopRequireDefault(__webpack_require__("./node_modules/ansi-styles/index.js"));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var toHumanReadableAnsi = function toHumanReadableAnsi(text) {
          return text.replace((0, _ansiRegex.default)(), function (match) {
            switch (match) {
              case _ansiStyles.default.red.close:
              case _ansiStyles.default.green.close:
              case _ansiStyles.default.cyan.close:
              case _ansiStyles.default.gray.close:
              case _ansiStyles.default.white.close:
              case _ansiStyles.default.yellow.close:
              case _ansiStyles.default.bgRed.close:
              case _ansiStyles.default.bgGreen.close:
              case _ansiStyles.default.bgYellow.close:
              case _ansiStyles.default.inverse.close:
              case _ansiStyles.default.dim.close:
              case _ansiStyles.default.bold.close:
              case _ansiStyles.default.reset.open:
              case _ansiStyles.default.reset.close:
                return '</>';

              case _ansiStyles.default.red.open:
                return '<red>';

              case _ansiStyles.default.green.open:
                return '<green>';

              case _ansiStyles.default.cyan.open:
                return '<cyan>';

              case _ansiStyles.default.gray.open:
                return '<gray>';

              case _ansiStyles.default.white.open:
                return '<white>';

              case _ansiStyles.default.yellow.open:
                return '<yellow>';

              case _ansiStyles.default.bgRed.open:
                return '<bgRed>';

              case _ansiStyles.default.bgGreen.open:
                return '<bgGreen>';

              case _ansiStyles.default.bgYellow.open:
                return '<bgYellow>';

              case _ansiStyles.default.inverse.open:
                return '<inverse>';

              case _ansiStyles.default.dim.open:
                return '<dim>';

              case _ansiStyles.default.bold.open:
                return '<bold>';

              default:
                return '';
            }
          });
        };

        var test = function test(val) {
          return typeof val === 'string' && !!val.match((0, _ansiRegex.default)());
        };

        exports.test = test;

        var serialize = function serialize(val, config, indentation, depth, refs, printer) {
          return printer(toHumanReadableAnsi(val), config, indentation, depth, refs);
        };

        exports.serialize = serialize;
        var plugin = {
          serialize: serialize,
          test: test
        };
        var _default = plugin;
        exports.default = _default;
      },
      "./packages/pretty-format/src/plugins/DOMCollection.ts": function packagesPrettyFormatSrcPluginsDOMCollectionTs(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = exports.serialize = exports.test = void 0;

        var _collections = __webpack_require__("./packages/pretty-format/src/collections.ts");

        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);

            if (typeof Object.getOwnPropertySymbols === 'function') {
              ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
              }));
            }

            ownKeys.forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          }

          return target;
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }

          return obj;
        }

        var SPACE = ' ';
        var OBJECT_NAMES = ['DOMStringMap', 'NamedNodeMap'];
        var ARRAY_REGEXP = /^(HTML\w*Collection|NodeList)$/;

        var testName = function testName(name) {
          return OBJECT_NAMES.indexOf(name) !== -1 || ARRAY_REGEXP.test(name);
        };

        var test = function test(val) {
          return val && val.constructor && val.constructor.name && testName(val.constructor.name);
        };

        exports.test = test;

        var propsReducer = function propsReducer(props, attribute) {
          props[attribute.name] = attribute.value;
          return props;
        };

        var serialize = function serialize(collection, config, indentation, depth, refs, printer) {
          var name = collection.constructor.name;

          if (++depth > config.maxDepth) {
            return '[' + name + ']';
          }

          return (config.min ? '' : name + SPACE) + (OBJECT_NAMES.indexOf(name) !== -1 ? '{' + (0, _collections.printObjectProperties)(name === 'NamedNodeMap' ? Array.prototype.reduce.call(collection, propsReducer, {}) : _objectSpread({}, collection), config, indentation, depth, refs, printer) + '}' : '[' + (0, _collections.printListItems)(Array.from(collection), config, indentation, depth, refs, printer) + ']');
        };

        exports.serialize = serialize;
        var plugin = {
          serialize: serialize,
          test: test
        };
        var _default = plugin;
        exports.default = _default;
      },
      "./packages/pretty-format/src/plugins/DOMElement.ts": function packagesPrettyFormatSrcPluginsDOMElementTs(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = exports.serialize = exports.test = void 0;

        var _markup = __webpack_require__("./packages/pretty-format/src/plugins/lib/markup.ts");

        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var FRAGMENT_NODE = 11;
        var ELEMENT_REGEXP = /^((HTML|SVG)\w*)?Element$/;

        var testNode = function testNode(nodeType, name) {
          return nodeType === ELEMENT_NODE && ELEMENT_REGEXP.test(name) || nodeType === TEXT_NODE && name === 'Text' || nodeType === COMMENT_NODE && name === 'Comment' || nodeType === FRAGMENT_NODE && name === 'DocumentFragment';
        };

        var test = function test(val) {
          return val && val.constructor && val.constructor.name && testNode(val.nodeType, val.constructor.name);
        };

        exports.test = test;

        function nodeIsText(node) {
          return node.nodeType === TEXT_NODE;
        }

        function nodeIsComment(node) {
          return node.nodeType === COMMENT_NODE;
        }

        function nodeIsFragment(node) {
          return node.nodeType === FRAGMENT_NODE;
        }

        var serialize = function serialize(node, config, indentation, depth, refs, printer) {
          if (nodeIsText(node)) {
            return (0, _markup.printText)(node.data, config);
          }

          if (nodeIsComment(node)) {
            return (0, _markup.printComment)(node.data, config);
          }

          var type = nodeIsFragment(node) ? "DocumentFragment" : node.tagName.toLowerCase();

          if (++depth > config.maxDepth) {
            return (0, _markup.printElementAsLeaf)(type, config);
          }

          return (0, _markup.printElement)(type, (0, _markup.printProps)(nodeIsFragment(node) ? [] : Array.from(node.attributes).map(function (attr) {
            return attr.name;
          }).sort(), nodeIsFragment(node) ? [] : Array.from(node.attributes).reduce(function (props, attribute) {
            props[attribute.name] = attribute.value;
            return props;
          }, {}), config, indentation + config.indent, depth, refs, printer), (0, _markup.printChildren)(Array.prototype.slice.call(node.childNodes || node.children), config, indentation + config.indent, depth, refs, printer), config, indentation);
        };

        exports.serialize = serialize;
        var plugin = {
          serialize: serialize,
          test: test
        };
        var _default = plugin;
        exports.default = _default;
      },
      "./packages/pretty-format/src/plugins/Immutable.ts": function packagesPrettyFormatSrcPluginsImmutableTs(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = exports.test = exports.serialize = void 0;

        var _collections = __webpack_require__("./packages/pretty-format/src/collections.ts");

        var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
        var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';
        var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
        var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';
        var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';
        var IS_RECORD_SENTINEL = '@@__IMMUTABLE_RECORD__@@';
        var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';
        var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';
        var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';

        var getImmutableName = function getImmutableName(name) {
          return 'Immutable.' + name;
        };

        var printAsLeaf = function printAsLeaf(name) {
          return '[' + name + ']';
        };

        var SPACE = ' ';
        var LAZY = '…';

        var printImmutableEntries = function printImmutableEntries(val, config, indentation, depth, refs, printer, type) {
          return ++depth > config.maxDepth ? printAsLeaf(getImmutableName(type)) : getImmutableName(type) + SPACE + '{' + (0, _collections.printIteratorEntries)(val.entries(), config, indentation, depth, refs, printer) + '}';
        };

        var getRecordEntries = function getRecordEntries(val) {
          var i = 0;
          return {
            next: function next() {
              if (i < val._keys.length) {
                var key = val._keys[i++];
                return {
                  done: false,
                  value: [key, val.get(key)]
                };
              }

              return {
                done: true
              };
            }
          };
        };

        var printImmutableRecord = function printImmutableRecord(val, config, indentation, depth, refs, printer) {
          var name = getImmutableName(val._name || 'Record');
          return ++depth > config.maxDepth ? printAsLeaf(name) : name + SPACE + '{' + (0, _collections.printIteratorEntries)(getRecordEntries(val), config, indentation, depth, refs, printer) + '}';
        };

        var printImmutableSeq = function printImmutableSeq(val, config, indentation, depth, refs, printer) {
          var name = getImmutableName('Seq');

          if (++depth > config.maxDepth) {
            return printAsLeaf(name);
          }

          if (val[IS_KEYED_SENTINEL]) {
            return name + SPACE + '{' + (val._iter || val._object ? (0, _collections.printIteratorEntries)(val.entries(), config, indentation, depth, refs, printer) : LAZY) + '}';
          }

          return name + SPACE + '[' + (val._iter || val._array || val._collection || val._iterable ? (0, _collections.printIteratorValues)(val.values(), config, indentation, depth, refs, printer) : LAZY) + ']';
        };

        var printImmutableValues = function printImmutableValues(val, config, indentation, depth, refs, printer, type) {
          return ++depth > config.maxDepth ? printAsLeaf(getImmutableName(type)) : getImmutableName(type) + SPACE + '[' + (0, _collections.printIteratorValues)(val.values(), config, indentation, depth, refs, printer) + ']';
        };

        var serialize = function serialize(val, config, indentation, depth, refs, printer) {
          if (val[IS_MAP_SENTINEL]) {
            return printImmutableEntries(val, config, indentation, depth, refs, printer, val[IS_ORDERED_SENTINEL] ? 'OrderedMap' : 'Map');
          }

          if (val[IS_LIST_SENTINEL]) {
            return printImmutableValues(val, config, indentation, depth, refs, printer, 'List');
          }

          if (val[IS_SET_SENTINEL]) {
            return printImmutableValues(val, config, indentation, depth, refs, printer, val[IS_ORDERED_SENTINEL] ? 'OrderedSet' : 'Set');
          }

          if (val[IS_STACK_SENTINEL]) {
            return printImmutableValues(val, config, indentation, depth, refs, printer, 'Stack');
          }

          if (val[IS_SEQ_SENTINEL]) {
            return printImmutableSeq(val, config, indentation, depth, refs, printer);
          }

          return printImmutableRecord(val, config, indentation, depth, refs, printer);
        };

        exports.serialize = serialize;

        var test = function test(val) {
          return val && (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);
        };

        exports.test = test;
        var plugin = {
          serialize: serialize,
          test: test
        };
        var _default = plugin;
        exports.default = _default;
      },
      "./packages/pretty-format/src/plugins/ReactElement.ts": function packagesPrettyFormatSrcPluginsReactElementTs(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = exports.test = exports.serialize = void 0;

        var ReactIs = _interopRequireWildcard(__webpack_require__("./node_modules/react-is/index.js"));

        var _markup = __webpack_require__("./packages/pretty-format/src/plugins/lib/markup.ts");

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _typeof(obj) {
          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        var getChildren = function getChildren(arg) {
          var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

          if (Array.isArray(arg)) {
            arg.forEach(function (item) {
              getChildren(item, children);
            });
          } else if (arg != null && arg !== false) {
            children.push(arg);
          }

          return children;
        };

        var getType = function getType(element) {
          var type = element.type;

          if (typeof type === 'string') {
            return type;
          }

          if (typeof type === 'function') {
            return type.displayName || type.name || 'Unknown';
          }

          if (ReactIs.isFragment(element)) {
            return 'React.Fragment';
          }

          if (ReactIs.isSuspense(element)) {
            return 'React.Suspense';
          }

          if (_typeof(type) === 'object' && type !== null) {
            if (ReactIs.isContextProvider(element)) {
              return 'Context.Provider';
            }

            if (ReactIs.isContextConsumer(element)) {
              return 'Context.Consumer';
            }

            if (ReactIs.isForwardRef(element)) {
              var functionName = type.render.displayName || type.render.name || '';
              return functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef';
            }

            if (ReactIs.isMemo(type)) {
              var _functionName = type.displayName || type.type.displayName || type.type.name || '';

              return _functionName !== '' ? 'Memo(' + _functionName + ')' : 'Memo';
            }
          }

          return 'UNDEFINED';
        };

        var getPropKeys = function getPropKeys(element) {
          var props = element.props;
          return Object.keys(props).filter(function (key) {
            return key !== 'children' && props[key] !== undefined;
          }).sort();
        };

        var serialize = function serialize(element, config, indentation, depth, refs, printer) {
          return ++depth > config.maxDepth ? (0, _markup.printElementAsLeaf)(getType(element), config) : (0, _markup.printElement)(getType(element), (0, _markup.printProps)(getPropKeys(element), element.props, config, indentation + config.indent, depth, refs, printer), (0, _markup.printChildren)(getChildren(element.props.children), config, indentation + config.indent, depth, refs, printer), config, indentation);
        };

        exports.serialize = serialize;

        var test = function test(val) {
          return val && ReactIs.isElement(val);
        };

        exports.test = test;
        var plugin = {
          serialize: serialize,
          test: test
        };
        var _default = plugin;
        exports.default = _default;
      },
      "./packages/pretty-format/src/plugins/ReactTestComponent.ts": function packagesPrettyFormatSrcPluginsReactTestComponentTs(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = exports.test = exports.serialize = void 0;

        var _markup = __webpack_require__("./packages/pretty-format/src/plugins/lib/markup.ts");

        var testSymbol = Symbol.for('react.test.json');

        var getPropKeys = function getPropKeys(object) {
          var props = object.props;
          return props ? Object.keys(props).filter(function (key) {
            return props[key] !== undefined;
          }).sort() : [];
        };

        var serialize = function serialize(object, config, indentation, depth, refs, printer) {
          return ++depth > config.maxDepth ? (0, _markup.printElementAsLeaf)(object.type, config) : (0, _markup.printElement)(object.type, object.props ? (0, _markup.printProps)(getPropKeys(object), object.props, config, indentation + config.indent, depth, refs, printer) : '', object.children ? (0, _markup.printChildren)(object.children, config, indentation + config.indent, depth, refs, printer) : '', config, indentation);
        };

        exports.serialize = serialize;

        var test = function test(val) {
          return val && val.$$typeof === testSymbol;
        };

        exports.test = test;
        var plugin = {
          serialize: serialize,
          test: test
        };
        var _default = plugin;
        exports.default = _default;
      },
      "./packages/pretty-format/src/plugins/lib/escapeHTML.ts": function packagesPrettyFormatSrcPluginsLibEscapeHTMLTs(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = escapeHTML;

        function escapeHTML(str) {
          return str.replace(/</g, '&lt;').replace(/>/g, '&gt;');
        }
      },
      "./packages/pretty-format/src/plugins/lib/markup.ts": function packagesPrettyFormatSrcPluginsLibMarkupTs(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.printElementAsLeaf = exports.printElement = exports.printComment = exports.printText = exports.printChildren = exports.printProps = void 0;

        var _escapeHTML = _interopRequireDefault(__webpack_require__("./packages/pretty-format/src/plugins/lib/escapeHTML.ts"));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var printProps = function printProps(keys, props, config, indentation, depth, refs, printer) {
          var indentationNext = indentation + config.indent;
          var colors = config.colors;
          return keys.map(function (key) {
            var value = props[key];
            var printed = printer(value, config, indentationNext, depth, refs);

            if (typeof value !== 'string') {
              if (printed.indexOf('\n') !== -1) {
                printed = config.spacingOuter + indentationNext + printed + config.spacingOuter + indentation;
              }

              printed = '{' + printed + '}';
            }

            return config.spacingInner + indentation + colors.prop.open + key + colors.prop.close + '=' + colors.value.open + printed + colors.value.close;
          }).join('');
        };

        exports.printProps = printProps;

        var printChildren = function printChildren(children, config, indentation, depth, refs, printer) {
          return children.map(function (child) {
            return config.spacingOuter + indentation + (typeof child === 'string' ? printText(child, config) : printer(child, config, indentation, depth, refs));
          }).join('');
        };

        exports.printChildren = printChildren;

        var printText = function printText(text, config) {
          var contentColor = config.colors.content;
          return contentColor.open + (0, _escapeHTML.default)(text) + contentColor.close;
        };

        exports.printText = printText;

        var printComment = function printComment(comment, config) {
          var commentColor = config.colors.comment;
          return commentColor.open + '<!--' + (0, _escapeHTML.default)(comment) + '-->' + commentColor.close;
        };

        exports.printComment = printComment;

        var printElement = function printElement(type, printedProps, printedChildren, config, indentation) {
          var tagColor = config.colors.tag;
          return tagColor.open + '<' + type + (printedProps && tagColor.close + printedProps + config.spacingOuter + indentation + tagColor.open) + (printedChildren ? '>' + tagColor.close + printedChildren + config.spacingOuter + indentation + tagColor.open + '</' + type : (printedProps && !config.min ? '' : ' ') + '/') + '>' + tagColor.close;
        };

        exports.printElement = printElement;

        var printElementAsLeaf = function printElementAsLeaf(type, config) {
          var tagColor = config.colors.tag;
          return tagColor.open + '<' + type + tagColor.close + ' …' + tagColor.open + ' />' + tagColor.close;
        };

        exports.printElementAsLeaf = printElementAsLeaf;
      }
    });
  });
},100,[],"node_modules/pretty-format/build-es5/index.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0], "./core.js");
  var TRUE = valuePromise(true);
  var FALSE = valuePromise(false);
  var NULL = valuePromise(null);
  var UNDEFINED = valuePromise(undefined);
  var ZERO = valuePromise(0);
  var EMPTYSTRING = valuePromise('');

  function valuePromise(value) {
    var p = new (_$$_REQUIRE(_dependencyMap[0], "./core.js"))(_$$_REQUIRE(_dependencyMap[0], "./core.js")._0);
    p._V = 1;
    p._W = value;
    return p;
  }

  _$$_REQUIRE(_dependencyMap[0], "./core.js").resolve = function (value) {
    if (value instanceof _$$_REQUIRE(_dependencyMap[0], "./core.js")) return value;
    if (value === null) return NULL;
    if (value === undefined) return UNDEFINED;
    if (value === true) return TRUE;
    if (value === false) return FALSE;
    if (value === 0) return ZERO;
    if (value === '') return EMPTYSTRING;

    if (typeof value === 'object' || typeof value === 'function') {
      try {
        var then = value.then;

        if (typeof then === 'function') {
          return new (_$$_REQUIRE(_dependencyMap[0], "./core.js"))(then.bind(value));
        }
      } catch (ex) {
        return new (_$$_REQUIRE(_dependencyMap[0], "./core.js"))(function (resolve, reject) {
          reject(ex);
        });
      }
    }

    return valuePromise(value);
  };

  var _iterableToArray = function iterableToArray(iterable) {
    if (typeof Array.from === 'function') {
      _iterableToArray = Array.from;
      return Array.from(iterable);
    }

    _iterableToArray = function iterableToArray(x) {
      return Array.prototype.slice.call(x);
    };

    return Array.prototype.slice.call(iterable);
  };

  _$$_REQUIRE(_dependencyMap[0], "./core.js").all = function (arr) {
    var args = _iterableToArray(arr);

    return new (_$$_REQUIRE(_dependencyMap[0], "./core.js"))(function (resolve, reject) {
      if (args.length === 0) return resolve([]);
      var remaining = args.length;

      function res(i, val) {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          if (val instanceof _$$_REQUIRE(_dependencyMap[0], "./core.js") && val.then === _$$_REQUIRE(_dependencyMap[0], "./core.js").prototype.then) {
            while (val._V === 3) {
              val = val._W;
            }

            if (val._V === 1) return res(i, val._W);
            if (val._V === 2) reject(val._W);
            val.then(function (val) {
              res(i, val);
            }, reject);
            return;
          } else {
            var then = val.then;

            if (typeof then === 'function') {
              var p = new (_$$_REQUIRE(_dependencyMap[0], "./core.js"))(then.bind(val));
              p.then(function (val) {
                res(i, val);
              }, reject);
              return;
            }
          }
        }

        args[i] = val;

        if (--remaining === 0) {
          resolve(args);
        }
      }

      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };

  _$$_REQUIRE(_dependencyMap[0], "./core.js").reject = function (value) {
    return new (_$$_REQUIRE(_dependencyMap[0], "./core.js"))(function (resolve, reject) {
      reject(value);
    });
  };

  _$$_REQUIRE(_dependencyMap[0], "./core.js").race = function (values) {
    return new (_$$_REQUIRE(_dependencyMap[0], "./core.js"))(function (resolve, reject) {
      _iterableToArray(values).forEach(function (value) {
        _$$_REQUIRE(_dependencyMap[0], "./core.js").resolve(value).then(resolve, reject);
      });
    });
  };

  _$$_REQUIRE(_dependencyMap[0], "./core.js").prototype['catch'] = function (onRejected) {
    return this.then(null, onRejected);
  };
},101,[97],"node_modules/promise/setimmediate/es6-extensions.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  _$$_REQUIRE(_dependencyMap[0], "../Utilities/PolyfillFunctions").polyfillGlobal('regeneratorRuntime', function () {
    delete global.regeneratorRuntime;
    return _$$_REQUIRE(_dependencyMap[1], "regenerator-runtime/runtime");
  });
},102,[94,103],"node_modules/react-native/Libraries/Core/setUpRegeneratorRuntime.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var runtime = function (exports) {
    "use strict";

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }

    try {
      define({}, "");
    } catch (err) {
      define = function define(obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    exports.wrap = wrap;

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });
    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    define(Gp, "constructor", GeneratorFunctionPrototype);
    define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }

    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function (unwrapped) {
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);
    define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    });
    exports.AsyncIterator = AsyncIterator;

    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined) {
        context.delegate = null;

        if (context.method === "throw") {
          if (delegate.iterator["return"]) {
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        context[delegate.resultName] = info.value;
        context.next = delegate.nextLoc;

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        return info;
      }

      context.delegate = null;
      return ContinueSentinel;
    }

    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator");
    define(Gp, iteratorSymbol, function () {
      return this;
    });
    define(Gp, "toString", function () {
      return "[object Generator]";
    });

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse();
      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    exports.values = values;

    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            context.method = "next";
            context.arg = undefined;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          this.arg = undefined;
        }

        return ContinueSentinel;
      }
    };
    return exports;
  }(typeof module === "object" ? module.exports : {});

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    if (typeof globalThis === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }
},103,[],"node_modules/regenerator-runtime/runtime.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (!global.RN$Bridgeless) {
    var _require = _$$_REQUIRE(_dependencyMap[0], "../Utilities/PolyfillFunctions"),
        polyfillGlobal = _require.polyfillGlobal;

    var defineLazyTimer = function defineLazyTimer(name) {
      polyfillGlobal(name, function () {
        return _$$_REQUIRE(_dependencyMap[1], "./Timers/JSTimers")[name];
      });
    };

    defineLazyTimer('setTimeout');
    defineLazyTimer('setInterval');
    defineLazyTimer('setImmediate');
    defineLazyTimer('clearTimeout');
    defineLazyTimer('clearInterval');
    defineLazyTimer('clearImmediate');
    defineLazyTimer('requestAnimationFrame');
    defineLazyTimer('cancelAnimationFrame');
    defineLazyTimer('requestIdleCallback');
    defineLazyTimer('cancelIdleCallback');
  }
},104,[94,105],"node_modules/react-native/Libraries/Core/setUpTimers.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeTiming = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./NativeTiming"));

  var _performanceNow = null;

  function performanceNow() {
    if (!_performanceNow) {
      _performanceNow = _$$_REQUIRE(_dependencyMap[2], "fbjs/lib/performanceNow");
    }

    return _performanceNow();
  }

  var FRAME_DURATION = 1000 / 60;
  var IDLE_CALLBACK_FRAME_DEADLINE = 1;
  var MAX_TIMER_DURATION_MS = 60 * 1000;
  var IS_ANDROID = "android" === 'android';
  var ANDROID_LONG_TIMER_MESSAGE = 'Setting a timer for a long period of time, i.e. multiple minutes, is a ' + 'performance and correctness issue on Android as it keeps the timer ' + 'module awake, and timers can only be called when the app is in the foreground. ' + 'See https://github.com/facebook/react-native/issues/12981 for more info.';
  var callbacks = [];
  var types = [];
  var timerIDs = [];
  var immediates = [];
  var requestIdleCallbacks = [];
  var requestIdleCallbackTimeouts = {};
  var GUID = 1;
  var errors = null;
  var hasEmittedTimeDriftWarning = false;

  function _getFreeIndex() {
    var freeIndex = timerIDs.indexOf(null);

    if (freeIndex === -1) {
      freeIndex = timerIDs.length;
    }

    return freeIndex;
  }

  function _allocateCallback(func, type) {
    var id = GUID++;

    var freeIndex = _getFreeIndex();

    timerIDs[freeIndex] = id;
    callbacks[freeIndex] = func;
    types[freeIndex] = type;
    return id;
  }

  function _callTimer(timerID, frameTime, didTimeout) {
    _$$_REQUIRE(_dependencyMap[3], "fbjs/lib/warning")(timerID <= GUID, 'Tried to call timer with ID %s but no such timer exists.', timerID);

    var timerIndex = timerIDs.indexOf(timerID);

    if (timerIndex === -1) {
      return;
    }

    var type = types[timerIndex];
    var callback = callbacks[timerIndex];

    if (!callback || !type) {
      console.error('No callback found for timerID ' + timerID);
      return;
    }

    if (__DEV__) {
      _$$_REQUIRE(_dependencyMap[4], "../../Performance/Systrace").beginEvent(type + ' [invoke]');
    }

    if (type !== 'setInterval') {
      _clearIndex(timerIndex);
    }

    try {
      if (type === 'setTimeout' || type === 'setInterval' || type === 'setImmediate') {
        callback();
      } else if (type === 'requestAnimationFrame') {
        callback(performanceNow());
      } else if (type === 'requestIdleCallback') {
        callback({
          timeRemaining: function timeRemaining() {
            return Math.max(0, FRAME_DURATION - (performanceNow() - frameTime));
          },
          didTimeout: !!didTimeout
        });
      } else {
        console.error('Tried to call a callback with invalid type: ' + type);
      }
    } catch (e) {
      if (!errors) {
        errors = [e];
      } else {
        errors.push(e);
      }
    }

    if (__DEV__) {
      _$$_REQUIRE(_dependencyMap[4], "../../Performance/Systrace").endEvent();
    }
  }

  function _callImmediatesPass() {
    if (immediates.length === 0) {
      return false;
    }

    if (__DEV__) {
      _$$_REQUIRE(_dependencyMap[4], "../../Performance/Systrace").beginEvent('callImmediatesPass()');
    }

    var passImmediates = immediates;
    immediates = [];

    for (var i = 0; i < passImmediates.length; ++i) {
      _callTimer(passImmediates[i], 0);
    }

    if (__DEV__) {
      _$$_REQUIRE(_dependencyMap[4], "../../Performance/Systrace").endEvent();
    }

    return immediates.length > 0;
  }

  function _clearIndex(i) {
    timerIDs[i] = null;
    callbacks[i] = null;
    types[i] = null;
  }

  function _freeCallback(timerID) {
    if (timerID == null) {
      return;
    }

    var index = timerIDs.indexOf(timerID);

    if (index !== -1) {
      var type = types[index];

      _clearIndex(index);

      if (type !== 'setImmediate' && type !== 'requestIdleCallback') {
        deleteTimer(timerID);
      }
    }
  }

  var JSTimers = {
    setTimeout: function setTimeout(func, duration) {
      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {
        console.warn(ANDROID_LONG_TIMER_MESSAGE + '\n' + '(Saw setTimeout with duration ' + duration + 'ms)');
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setTimeout');

      createTimer(id, duration || 0, Date.now(), false);
      return id;
    },
    setInterval: function setInterval(func, duration) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {
        console.warn(ANDROID_LONG_TIMER_MESSAGE + '\n' + '(Saw setInterval with duration ' + duration + 'ms)');
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setInterval');

      createTimer(id, duration || 0, Date.now(), true);
      return id;
    },
    setImmediate: function setImmediate(func) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setImmediate');

      immediates.push(id);
      return id;
    },
    requestAnimationFrame: function requestAnimationFrame(func) {
      var id = _allocateCallback(func, 'requestAnimationFrame');

      createTimer(id, 1, Date.now(), false);
      return id;
    },
    requestIdleCallback: function requestIdleCallback(func, options) {
      if (requestIdleCallbacks.length === 0) {
        setSendIdleEvents(true);
      }

      var timeout = options && options.timeout;

      var id = _allocateCallback(timeout != null ? function (deadline) {
        var timeoutId = requestIdleCallbackTimeouts[id];

        if (timeoutId) {
          JSTimers.clearTimeout(timeoutId);
          delete requestIdleCallbackTimeouts[id];
        }

        return func(deadline);
      } : func, 'requestIdleCallback');

      requestIdleCallbacks.push(id);

      if (timeout != null) {
        var timeoutId = JSTimers.setTimeout(function () {
          var index = requestIdleCallbacks.indexOf(id);

          if (index > -1) {
            requestIdleCallbacks.splice(index, 1);

            _callTimer(id, performanceNow(), true);
          }

          delete requestIdleCallbackTimeouts[id];

          if (requestIdleCallbacks.length === 0) {
            setSendIdleEvents(false);
          }
        }, timeout);
        requestIdleCallbackTimeouts[id] = timeoutId;
      }

      return id;
    },
    cancelIdleCallback: function cancelIdleCallback(timerID) {
      _freeCallback(timerID);

      var index = requestIdleCallbacks.indexOf(timerID);

      if (index !== -1) {
        requestIdleCallbacks.splice(index, 1);
      }

      var timeoutId = requestIdleCallbackTimeouts[timerID];

      if (timeoutId) {
        JSTimers.clearTimeout(timeoutId);
        delete requestIdleCallbackTimeouts[timerID];
      }

      if (requestIdleCallbacks.length === 0) {
        setSendIdleEvents(false);
      }
    },
    clearTimeout: function clearTimeout(timerID) {
      _freeCallback(timerID);
    },
    clearInterval: function clearInterval(timerID) {
      _freeCallback(timerID);
    },
    clearImmediate: function clearImmediate(timerID) {
      _freeCallback(timerID);

      var index = immediates.indexOf(timerID);

      if (index !== -1) {
        immediates.splice(index, 1);
      }
    },
    cancelAnimationFrame: function cancelAnimationFrame(timerID) {
      _freeCallback(timerID);
    },
    callTimers: function callTimers(timersToCall) {
      _$$_REQUIRE(_dependencyMap[5], "invariant")(timersToCall.length !== 0, 'Cannot call `callTimers` with an empty list of IDs.');

      errors = null;

      for (var i = 0; i < timersToCall.length; i++) {
        _callTimer(timersToCall[i], 0);
      }

      if (errors) {
        var errorCount = errors.length;

        if (errorCount > 1) {
          for (var ii = 1; ii < errorCount; ii++) {
            JSTimers.setTimeout(function (error) {
              throw error;
            }.bind(null, errors[ii]), 0);
          }
        }

        throw errors[0];
      }
    },
    callIdleCallbacks: function callIdleCallbacks(frameTime) {
      if (FRAME_DURATION - (performanceNow() - frameTime) < IDLE_CALLBACK_FRAME_DEADLINE) {
        return;
      }

      errors = null;

      if (requestIdleCallbacks.length > 0) {
        var passIdleCallbacks = requestIdleCallbacks;
        requestIdleCallbacks = [];

        for (var i = 0; i < passIdleCallbacks.length; ++i) {
          _callTimer(passIdleCallbacks[i], frameTime);
        }
      }

      if (requestIdleCallbacks.length === 0) {
        setSendIdleEvents(false);
      }

      if (errors) {
        errors.forEach(function (error) {
          return JSTimers.setTimeout(function () {
            throw error;
          }, 0);
        });
      }
    },
    callImmediates: function callImmediates() {
      errors = null;

      while (_callImmediatesPass()) {}

      if (errors) {
        errors.forEach(function (error) {
          return JSTimers.setTimeout(function () {
            throw error;
          }, 0);
        });
      }
    },
    emitTimeDriftWarning: function emitTimeDriftWarning(warningMessage) {
      if (hasEmittedTimeDriftWarning) {
        return;
      }

      hasEmittedTimeDriftWarning = true;
      console.warn(warningMessage);
    }
  };

  function createTimer(callbackID, duration, jsSchedulingTime, repeats) {
    _$$_REQUIRE(_dependencyMap[5], "invariant")(_NativeTiming.default, 'NativeTiming is available');

    _NativeTiming.default.createTimer(callbackID, duration, jsSchedulingTime, repeats);
  }

  function deleteTimer(timerID) {
    _$$_REQUIRE(_dependencyMap[5], "invariant")(_NativeTiming.default, 'NativeTiming is available');

    _NativeTiming.default.deleteTimer(timerID);
  }

  function setSendIdleEvents(sendIdleEvents) {
    _$$_REQUIRE(_dependencyMap[5], "invariant")(_NativeTiming.default, 'NativeTiming is available');

    _NativeTiming.default.setSendIdleEvents(sendIdleEvents);
  }

  var ExportedJSTimers;

  if (!_NativeTiming.default) {
    console.warn("Timing native module is not available, can't set timers.");
    ExportedJSTimers = {
      callImmediates: JSTimers.callImmediates,
      setImmediate: JSTimers.setImmediate
    };
  } else {
    ExportedJSTimers = JSTimers;
  }

  _$$_REQUIRE(_dependencyMap[6], "../../BatchedBridge/BatchedBridge").setImmediatesCallback(JSTimers.callImmediates);

  module.exports = ExportedJSTimers;
},105,[3,106,107,19,23,6,14],"node_modules/react-native/Libraries/Core/Timers/JSTimers.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('Timing');

  exports.default = _default;
},106,[5],"node_modules/react-native/Libraries/Core/Timers/NativeTiming.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var performanceNow;

  if (_$$_REQUIRE(_dependencyMap[0], "./performance").now) {
    performanceNow = function performanceNow() {
      return _$$_REQUIRE(_dependencyMap[0], "./performance").now();
    };
  } else {
    performanceNow = function performanceNow() {
      return Date.now();
    };
  }

  module.exports = performanceNow;
},107,[108],"node_modules/fbjs/lib/performanceNow.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var performance;

  if (_$$_REQUIRE(_dependencyMap[0], "./ExecutionEnvironment").canUseDOM) {
    performance = window.performance || window.msPerformance || window.webkitPerformance;
  }

  module.exports = performance || {};
},108,[109],"node_modules/fbjs/lib/performance.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
  var ExecutionEnvironment = {
    canUseDOM: canUseDOM,
    canUseWorkers: typeof Worker !== 'undefined',
    canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
    canUseViewport: canUseDOM && !!window.screen,
    isInWorker: !canUseDOM
  };
  module.exports = ExecutionEnvironment;
},109,[],"node_modules/fbjs/lib/ExecutionEnvironment.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  _$$_REQUIRE(_dependencyMap[0], "../Utilities/PolyfillFunctions").polyfillGlobal('XMLHttpRequest', function () {
    return _$$_REQUIRE(_dependencyMap[1], "../Network/XMLHttpRequest");
  });

  _$$_REQUIRE(_dependencyMap[0], "../Utilities/PolyfillFunctions").polyfillGlobal('FormData', function () {
    return _$$_REQUIRE(_dependencyMap[2], "../Network/FormData");
  });

  _$$_REQUIRE(_dependencyMap[0], "../Utilities/PolyfillFunctions").polyfillGlobal('fetch', function () {
    return _$$_REQUIRE(_dependencyMap[3], "../Network/fetch").fetch;
  });

  _$$_REQUIRE(_dependencyMap[0], "../Utilities/PolyfillFunctions").polyfillGlobal('Headers', function () {
    return _$$_REQUIRE(_dependencyMap[3], "../Network/fetch").Headers;
  });

  _$$_REQUIRE(_dependencyMap[0], "../Utilities/PolyfillFunctions").polyfillGlobal('Request', function () {
    return _$$_REQUIRE(_dependencyMap[3], "../Network/fetch").Request;
  });

  _$$_REQUIRE(_dependencyMap[0], "../Utilities/PolyfillFunctions").polyfillGlobal('Response', function () {
    return _$$_REQUIRE(_dependencyMap[3], "../Network/fetch").Response;
  });

  _$$_REQUIRE(_dependencyMap[0], "../Utilities/PolyfillFunctions").polyfillGlobal('WebSocket', function () {
    return _$$_REQUIRE(_dependencyMap[4], "../WebSocket/WebSocket");
  });

  _$$_REQUIRE(_dependencyMap[0], "../Utilities/PolyfillFunctions").polyfillGlobal('Blob', function () {
    return _$$_REQUIRE(_dependencyMap[5], "../Blob/Blob");
  });

  _$$_REQUIRE(_dependencyMap[0], "../Utilities/PolyfillFunctions").polyfillGlobal('File', function () {
    return _$$_REQUIRE(_dependencyMap[6], "../Blob/File");
  });

  _$$_REQUIRE(_dependencyMap[0], "../Utilities/PolyfillFunctions").polyfillGlobal('FileReader', function () {
    return _$$_REQUIRE(_dependencyMap[7], "../Blob/FileReader");
  });

  _$$_REQUIRE(_dependencyMap[0], "../Utilities/PolyfillFunctions").polyfillGlobal('URL', function () {
    return _$$_REQUIRE(_dependencyMap[8], "../Blob/URL").URL;
  });

  _$$_REQUIRE(_dependencyMap[0], "../Utilities/PolyfillFunctions").polyfillGlobal('URLSearchParams', function () {
    return _$$_REQUIRE(_dependencyMap[8], "../Blob/URL").URLSearchParams;
  });

  _$$_REQUIRE(_dependencyMap[0], "../Utilities/PolyfillFunctions").polyfillGlobal('AbortController', function () {
    return _$$_REQUIRE(_dependencyMap[9], "abort-controller/dist/abort-controller").AbortController;
  });

  _$$_REQUIRE(_dependencyMap[0], "../Utilities/PolyfillFunctions").polyfillGlobal('AbortSignal', function () {
    return _$$_REQUIRE(_dependencyMap[9], "abort-controller/dist/abort-controller").AbortSignal;
  });
},110,[94,111,124,70,127,114,132,133,135,136],"node_modules/react-native/Libraries/Core/setUpXHR.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var DEBUG_NETWORK_SEND_DELAY = false;

  if (_$$_REQUIRE(_dependencyMap[2], "../Blob/BlobManager").isAvailable) {
    _$$_REQUIRE(_dependencyMap[2], "../Blob/BlobManager").addNetworkingHandler();
  }

  var UNSENT = 0;
  var OPENED = 1;
  var HEADERS_RECEIVED = 2;
  var LOADING = 3;
  var DONE = 4;
  var SUPPORTED_RESPONSE_TYPES = {
    arraybuffer: typeof global.ArrayBuffer === 'function',
    blob: typeof global.Blob === 'function',
    document: false,
    json: true,
    text: true,
    '': true
  };
  var REQUEST_EVENTS = ['abort', 'error', 'load', 'loadstart', 'progress', 'timeout', 'loadend'];
  var XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');

  var XMLHttpRequestEventTarget = function (_ref) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(XMLHttpRequestEventTarget, _ref);

    var _super = _createSuper(XMLHttpRequestEventTarget);

    function XMLHttpRequestEventTarget() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, XMLHttpRequestEventTarget);

      return _super.apply(this, arguments);
    }

    return _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(XMLHttpRequestEventTarget);
  }(_$$_REQUIRE(_dependencyMap[6], "event-target-shim").apply(void 0, REQUEST_EVENTS));

  var XMLHttpRequest = function (_ref2) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(XMLHttpRequest, _ref2);

    var _super2 = _createSuper(XMLHttpRequest);

    function XMLHttpRequest() {
      var _this;

      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, XMLHttpRequest);

      _this = _super2.call(this);
      _this.UNSENT = UNSENT;
      _this.OPENED = OPENED;
      _this.HEADERS_RECEIVED = HEADERS_RECEIVED;
      _this.LOADING = LOADING;
      _this.DONE = DONE;
      _this.readyState = UNSENT;
      _this.status = 0;
      _this.timeout = 0;
      _this.withCredentials = true;
      _this.upload = new XMLHttpRequestEventTarget();
      _this._aborted = false;
      _this._hasError = false;
      _this._method = null;
      _this._perfKey = null;
      _this._response = '';
      _this._url = null;
      _this._timedOut = false;
      _this._trackingName = 'unknown';
      _this._incrementalEvents = false;

      _this._reset();

      return _this;
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(XMLHttpRequest, [{
      key: "_reset",
      value: function _reset() {
        this.readyState = this.UNSENT;
        this.responseHeaders = undefined;
        this.status = 0;
        delete this.responseURL;
        this._requestId = null;
        this._cachedResponse = undefined;
        this._hasError = false;
        this._headers = {};
        this._response = '';
        this._responseType = '';
        this._sent = false;
        this._lowerCaseResponseHeaders = {};

        this._clearSubscriptions();

        this._timedOut = false;
      }
    }, {
      key: "responseType",
      get: function get() {
        return this._responseType;
      },
      set: function set(responseType) {
        if (this._sent) {
          throw new Error("Failed to set the 'responseType' property on 'XMLHttpRequest': The " + 'response type cannot be set after the request has been sent.');
        }

        if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
          _$$_REQUIRE(_dependencyMap[7], "fbjs/lib/warning")(false, "The provided value '" + responseType + "' is not a valid 'responseType'.");

          return;
        }

        _$$_REQUIRE(_dependencyMap[8], "invariant")(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', "The provided value '" + responseType + "' is unsupported in this environment.");

        if (responseType === 'blob') {
          _$$_REQUIRE(_dependencyMap[8], "invariant")(_$$_REQUIRE(_dependencyMap[2], "../Blob/BlobManager").isAvailable, 'Native module BlobModule is required for blob support');
        }

        this._responseType = responseType;
      }
    }, {
      key: "responseText",
      get: function get() {
        if (this._responseType !== '' && this._responseType !== 'text') {
          throw new Error("The 'responseText' property is only available if 'responseType' " + ("is set to '' or 'text', but it is '" + this._responseType + "'."));
        }

        if (this.readyState < LOADING) {
          return '';
        }

        return this._response;
      }
    }, {
      key: "response",
      get: function get() {
        var responseType = this.responseType;

        if (responseType === '' || responseType === 'text') {
          return this.readyState < LOADING || this._hasError ? '' : this._response;
        }

        if (this.readyState !== DONE) {
          return null;
        }

        if (this._cachedResponse !== undefined) {
          return this._cachedResponse;
        }

        switch (responseType) {
          case 'document':
            this._cachedResponse = null;
            break;

          case 'arraybuffer':
            this._cachedResponse = _$$_REQUIRE(_dependencyMap[9], "base64-js").toByteArray(this._response).buffer;
            break;

          case 'blob':
            if (typeof this._response === 'object' && this._response) {
              this._cachedResponse = _$$_REQUIRE(_dependencyMap[2], "../Blob/BlobManager").createFromOptions(this._response);
            } else if (this._response === '') {
              this._cachedResponse = _$$_REQUIRE(_dependencyMap[2], "../Blob/BlobManager").createFromParts([]);
            } else {
              throw new Error("Invalid response for blob: " + this._response);
            }

            break;

          case 'json':
            try {
              this._cachedResponse = JSON.parse(this._response);
            } catch (_) {
              this._cachedResponse = null;
            }

            break;

          default:
            this._cachedResponse = null;
        }

        return this._cachedResponse;
      }
    }, {
      key: "__didCreateRequest",
      value: function __didCreateRequest(requestId) {
        this._requestId = requestId;
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
      }
    }, {
      key: "__didUploadProgress",
      value: function __didUploadProgress(requestId, progress, total) {
        if (requestId === this._requestId) {
          this.upload.dispatchEvent({
            type: 'progress',
            lengthComputable: true,
            loaded: progress,
            total: total
          });
        }
      }
    }, {
      key: "__didReceiveResponse",
      value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
        if (requestId === this._requestId) {
          this._perfKey != null && _$$_REQUIRE(_dependencyMap[10], "react-native/Libraries/Utilities/GlobalPerformanceLogger").stopTimespan(this._perfKey);
          this.status = status;
          this.setResponseHeaders(responseHeaders);
          this.setReadyState(this.HEADERS_RECEIVED);

          if (responseURL || responseURL === '') {
            this.responseURL = responseURL;
          } else {
            delete this.responseURL;
          }

          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
        }
      }
    }, {
      key: "__didReceiveData",
      value: function __didReceiveData(requestId, response) {
        if (requestId !== this._requestId) {
          return;
        }

        this._response = response;
        this._cachedResponse = undefined;
        this.setReadyState(this.LOADING);
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
      }
    }, {
      key: "__didReceiveIncrementalData",
      value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {
        if (requestId !== this._requestId) {
          return;
        }

        if (!this._response) {
          this._response = responseText;
        } else {
          this._response += responseText;
        }

        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);
        this.setReadyState(this.LOADING);

        this.__didReceiveDataProgress(requestId, progress, total);
      }
    }, {
      key: "__didReceiveDataProgress",
      value: function __didReceiveDataProgress(requestId, loaded, total) {
        if (requestId !== this._requestId) {
          return;
        }

        this.dispatchEvent({
          type: 'progress',
          lengthComputable: total >= 0,
          loaded: loaded,
          total: total
        });
      }
    }, {
      key: "__didCompleteResponse",
      value: function __didCompleteResponse(requestId, error, timeOutError) {
        if (requestId === this._requestId) {
          if (error) {
            if (this._responseType === '' || this._responseType === 'text') {
              this._response = error;
            }

            this._hasError = true;

            if (timeOutError) {
              this._timedOut = true;
            }
          }

          this._clearSubscriptions();

          this._requestId = null;
          this.setReadyState(this.DONE);

          if (error) {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
          } else {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
          }
        }
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        (this._subscriptions || []).forEach(function (sub) {
          if (sub) {
            sub.remove();
          }
        });
        this._subscriptions = [];
      }
    }, {
      key: "getAllResponseHeaders",
      value: function getAllResponseHeaders() {
        if (!this.responseHeaders) {
          return null;
        }

        var headers = this.responseHeaders || {};
        return Object.keys(headers).map(function (headerName) {
          return headerName + ': ' + headers[headerName];
        }).join('\r\n');
      }
    }, {
      key: "getResponseHeader",
      value: function getResponseHeader(header) {
        var value = this._lowerCaseResponseHeaders[header.toLowerCase()];

        return value !== undefined ? value : null;
      }
    }, {
      key: "setRequestHeader",
      value: function setRequestHeader(header, value) {
        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }

        this._headers[header.toLowerCase()] = String(value);
      }
    }, {
      key: "setTrackingName",
      value: function setTrackingName(trackingName) {
        this._trackingName = trackingName;
        return this;
      }
    }, {
      key: "open",
      value: function open(method, url, async) {
        if (this.readyState !== this.UNSENT) {
          throw new Error('Cannot open, already sending');
        }

        if (async !== undefined && !async) {
          throw new Error('Synchronous http requests are not supported');
        }

        if (!url) {
          throw new Error('Cannot load an empty url');
        }

        this._method = method.toUpperCase();
        this._url = url;
        this._aborted = false;
        this.setReadyState(this.OPENED);
      }
    }, {
      key: "send",
      value: function send(data) {
        var _this2 = this;

        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }

        if (this._sent) {
          throw new Error('Request has already been sent');
        }

        this._sent = true;
        var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;

        this._subscriptions.push(_$$_REQUIRE(_dependencyMap[11], "./RCTNetworking").addListener('didSendNetworkData', function (args) {
          return _this2.__didUploadProgress.apply(_this2, _$$_REQUIRE(_dependencyMap[12], "@babel/runtime/helpers/toConsumableArray")(args));
        }));

        this._subscriptions.push(_$$_REQUIRE(_dependencyMap[11], "./RCTNetworking").addListener('didReceiveNetworkResponse', function (args) {
          return _this2.__didReceiveResponse.apply(_this2, _$$_REQUIRE(_dependencyMap[12], "@babel/runtime/helpers/toConsumableArray")(args));
        }));

        this._subscriptions.push(_$$_REQUIRE(_dependencyMap[11], "./RCTNetworking").addListener('didReceiveNetworkData', function (args) {
          return _this2.__didReceiveData.apply(_this2, _$$_REQUIRE(_dependencyMap[12], "@babel/runtime/helpers/toConsumableArray")(args));
        }));

        this._subscriptions.push(_$$_REQUIRE(_dependencyMap[11], "./RCTNetworking").addListener('didReceiveNetworkIncrementalData', function (args) {
          return _this2.__didReceiveIncrementalData.apply(_this2, _$$_REQUIRE(_dependencyMap[12], "@babel/runtime/helpers/toConsumableArray")(args));
        }));

        this._subscriptions.push(_$$_REQUIRE(_dependencyMap[11], "./RCTNetworking").addListener('didReceiveNetworkDataProgress', function (args) {
          return _this2.__didReceiveDataProgress.apply(_this2, _$$_REQUIRE(_dependencyMap[12], "@babel/runtime/helpers/toConsumableArray")(args));
        }));

        this._subscriptions.push(_$$_REQUIRE(_dependencyMap[11], "./RCTNetworking").addListener('didCompleteNetworkResponse', function (args) {
          return _this2.__didCompleteResponse.apply(_this2, _$$_REQUIRE(_dependencyMap[12], "@babel/runtime/helpers/toConsumableArray")(args));
        }));

        var nativeResponseType = 'text';

        if (this._responseType === 'arraybuffer') {
          nativeResponseType = 'base64';
        }

        if (this._responseType === 'blob') {
          nativeResponseType = 'blob';
        }

        var doSend = function doSend() {
          var friendlyName = _this2._trackingName !== 'unknown' ? _this2._trackingName : _this2._url;
          _this2._perfKey = 'network_XMLHttpRequest_' + String(friendlyName);

          _$$_REQUIRE(_dependencyMap[10], "react-native/Libraries/Utilities/GlobalPerformanceLogger").startTimespan(_this2._perfKey);

          _$$_REQUIRE(_dependencyMap[8], "invariant")(_this2._method, 'XMLHttpRequest method needs to be defined (%s).', friendlyName);

          _$$_REQUIRE(_dependencyMap[8], "invariant")(_this2._url, 'XMLHttpRequest URL needs to be defined (%s).', friendlyName);

          _$$_REQUIRE(_dependencyMap[11], "./RCTNetworking").sendRequest(_this2._method, _this2._trackingName, _this2._url, _this2._headers, data, nativeResponseType, incrementalEvents, _this2.timeout, _this2.__didCreateRequest.bind(_this2), _this2.withCredentials);
        };

        if (DEBUG_NETWORK_SEND_DELAY) {
          setTimeout(doSend, DEBUG_NETWORK_SEND_DELAY);
        } else {
          doSend();
        }
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;

        if (this._requestId) {
          _$$_REQUIRE(_dependencyMap[11], "./RCTNetworking").abortRequest(this._requestId);
        }

        if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
          this._reset();

          this.setReadyState(this.DONE);
        }

        this._reset();
      }
    }, {
      key: "setResponseHeaders",
      value: function setResponseHeaders(responseHeaders) {
        this.responseHeaders = responseHeaders || null;
        var headers = responseHeaders || {};
        this._lowerCaseResponseHeaders = Object.keys(headers).reduce(function (lcaseHeaders, headerName) {
          lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
          return lcaseHeaders;
        }, {});
      }
    }, {
      key: "setReadyState",
      value: function setReadyState(newState) {
        this.readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });

        if (newState === this.DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._hasError) {
            if (this._timedOut) {
              this.dispatchEvent({
                type: 'timeout'
              });
            } else {
              this.dispatchEvent({
                type: 'error'
              });
            }
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }

          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, listener) {
        if (type === 'readystatechange' || type === 'progress') {
          this._incrementalEvents = true;
        }

        _$$_REQUIRE(_dependencyMap[13], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(XMLHttpRequest.prototype), "addEventListener", this).call(this, type, listener);
      }
    }], [{
      key: "setInterceptor",
      value: function setInterceptor(interceptor) {
        XMLHttpRequest._interceptor = interceptor;
      }
    }]);

    return XMLHttpRequest;
  }(_$$_REQUIRE(_dependencyMap[6], "event-target-shim").apply(void 0, _$$_REQUIRE(_dependencyMap[12], "@babel/runtime/helpers/toConsumableArray")(XHR_EVENTS)));

  XMLHttpRequest.UNSENT = UNSENT;
  XMLHttpRequest.OPENED = OPENED;
  XMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;
  XMLHttpRequest.LOADING = LOADING;
  XMLHttpRequest.DONE = DONE;
  XMLHttpRequest._interceptor = null;
  module.exports = XMLHttpRequest;
},111,[31,32,112,35,16,17,116,19,6,117,118,121,25,38],"node_modules/react-native/Libraries/Network/XMLHttpRequest.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var _NativeBlobModule = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "./NativeBlobModule"));

  var _invariant = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "invariant"));

  function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = Math.random() * 16 | 0,
          v = c == 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  }

  function createBlobCollector(blobId) {
    if (global.__blobCollectorProvider == null) {
      return null;
    } else {
      return global.__blobCollectorProvider(blobId);
    }
  }

  var BlobManager = function () {
    function BlobManager() {
      (0, _classCallCheck2.default)(this, BlobManager);
    }

    (0, _createClass2.default)(BlobManager, null, [{
      key: "createFromParts",
      value: function createFromParts(parts, options) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        var blobId = uuidv4();
        var items = parts.map(function (part) {
          if (part instanceof ArrayBuffer || global.ArrayBufferView && part instanceof global.ArrayBufferView) {
            throw new Error("Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported");
          }

          if (part instanceof _$$_REQUIRE(_dependencyMap[5], "./Blob")) {
            return {
              data: part.data,
              type: 'blob'
            };
          } else {
            return {
              data: String(part),
              type: 'string'
            };
          }
        });
        var size = items.reduce(function (acc, curr) {
          if (curr.type === 'string') {
            return acc + global.unescape(encodeURI(curr.data)).length;
          } else {
            return acc + curr.data.size;
          }
        }, 0);

        _NativeBlobModule.default.createFromParts(items, blobId);

        return BlobManager.createFromOptions({
          blobId: blobId,
          offset: 0,
          size: size,
          type: options ? options.type : '',
          lastModified: options ? options.lastModified : Date.now()
        });
      }
    }, {
      key: "createFromOptions",
      value: function createFromOptions(options) {
        _$$_REQUIRE(_dependencyMap[6], "./BlobRegistry").register(options.blobId);

        return Object.assign(Object.create(_$$_REQUIRE(_dependencyMap[5], "./Blob").prototype), {
          data: options.__collector == null ? Object.assign({}, options, {
            __collector: createBlobCollector(options.blobId)
          }) : options
        });
      }
    }, {
      key: "release",
      value: function release(blobId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');

        _$$_REQUIRE(_dependencyMap[6], "./BlobRegistry").unregister(blobId);

        if (_$$_REQUIRE(_dependencyMap[6], "./BlobRegistry").has(blobId)) {
          return;
        }

        _NativeBlobModule.default.release(blobId);
      }
    }, {
      key: "addNetworkingHandler",
      value: function addNetworkingHandler() {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');

        _NativeBlobModule.default.addNetworkingHandler();
      }
    }, {
      key: "addWebSocketHandler",
      value: function addWebSocketHandler(socketId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');

        _NativeBlobModule.default.addWebSocketHandler(socketId);
      }
    }, {
      key: "removeWebSocketHandler",
      value: function removeWebSocketHandler(socketId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');

        _NativeBlobModule.default.removeWebSocketHandler(socketId);
      }
    }, {
      key: "sendOverSocket",
      value: function sendOverSocket(blob, socketId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');

        _NativeBlobModule.default.sendOverSocket(blob.data, socketId);
      }
    }]);
    return BlobManager;
  }();

  BlobManager.isAvailable = !!_NativeBlobModule.default;
  module.exports = BlobManager;
},112,[3,16,17,113,6,114,115],"node_modules/react-native/Libraries/Blob/BlobManager.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('BlobModule');

  exports.default = _default;
},113,[5],"node_modules/react-native/Libraries/Blob/NativeBlobModule.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Blob = function () {
    function Blob() {
      var parts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var options = arguments.length > 1 ? arguments[1] : undefined;

      _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/classCallCheck")(this, Blob);

      var BlobManager = _$$_REQUIRE(_dependencyMap[1], "./BlobManager");

      this.data = BlobManager.createFromParts(parts, options).data;
    }

    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass")(Blob, [{
      key: "data",
      get: function get() {
        if (!this._data) {
          throw new Error('Blob has been closed and is no longer available');
        }

        return this._data;
      },
      set: function set(data) {
        this._data = data;
      }
    }, {
      key: "slice",
      value: function slice(start, end) {
        var BlobManager = _$$_REQUIRE(_dependencyMap[1], "./BlobManager");

        var _this$data = this.data,
            offset = _this$data.offset,
            size = _this$data.size;

        if (typeof start === 'number') {
          if (start > size) {
            start = size;
          }

          offset += start;
          size -= start;

          if (typeof end === 'number') {
            if (end < 0) {
              end = this.size + end;
            }

            size = end - start;
          }
        }

        return BlobManager.createFromOptions({
          blobId: this.data.blobId,
          offset: offset,
          size: size
        });
      }
    }, {
      key: "close",
      value: function close() {
        var BlobManager = _$$_REQUIRE(_dependencyMap[1], "./BlobManager");

        BlobManager.release(this.data.blobId);
        this.data = null;
      }
    }, {
      key: "size",
      get: function get() {
        return this.data.size;
      }
    }, {
      key: "type",
      get: function get() {
        return this.data.type || '';
      }
    }]);

    return Blob;
  }();

  module.exports = Blob;
},114,[16,112,17],"node_modules/react-native/Libraries/Blob/Blob.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var registry = {};

  var register = function register(id) {
    if (registry[id]) {
      registry[id]++;
    } else {
      registry[id] = 1;
    }
  };

  var unregister = function unregister(id) {
    if (registry[id]) {
      registry[id]--;

      if (registry[id] <= 0) {
        delete registry[id];
      }
    }
  };

  var has = function has(id) {
    return registry[id] && registry[id] > 0;
  };

  module.exports = {
    register: register,
    unregister: unregister,
    has: has
  };
},115,[],"node_modules/react-native/Libraries/Blob/BlobRegistry.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  var privateData = new WeakMap();
  var wrappers = new WeakMap();

  function pd(event) {
    var retv = privateData.get(event);
    console.assert(retv != null, "'this' is expected an Event object, but got", event);
    return retv;
  }

  function setCancelFlag(data) {
    if (data.passiveListener != null) {
      if (typeof console !== "undefined" && typeof console.error === "function") {
        console.error("Unable to preventDefault inside passive event listener invocation.", data.passiveListener);
      }

      return;
    }

    if (!data.event.cancelable) {
      return;
    }

    data.canceled = true;

    if (typeof data.event.preventDefault === "function") {
      data.event.preventDefault();
    }
  }

  function Event(eventTarget, event) {
    privateData.set(this, {
      eventTarget: eventTarget,
      event: event,
      eventPhase: 2,
      currentTarget: eventTarget,
      canceled: false,
      stopped: false,
      immediateStopped: false,
      passiveListener: null,
      timeStamp: event.timeStamp || Date.now()
    });
    Object.defineProperty(this, "isTrusted", {
      value: false,
      enumerable: true
    });
    var keys = Object.keys(event);

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!(key in this)) {
        Object.defineProperty(this, key, defineRedirectDescriptor(key));
      }
    }
  }

  Event.prototype = {
    get type() {
      return pd(this).event.type;
    },

    get target() {
      return pd(this).eventTarget;
    },

    get currentTarget() {
      return pd(this).currentTarget;
    },

    composedPath: function composedPath() {
      var currentTarget = pd(this).currentTarget;

      if (currentTarget == null) {
        return [];
      }

      return [currentTarget];
    },

    get NONE() {
      return 0;
    },

    get CAPTURING_PHASE() {
      return 1;
    },

    get AT_TARGET() {
      return 2;
    },

    get BUBBLING_PHASE() {
      return 3;
    },

    get eventPhase() {
      return pd(this).eventPhase;
    },

    stopPropagation: function stopPropagation() {
      var data = pd(this);
      data.stopped = true;

      if (typeof data.event.stopPropagation === "function") {
        data.event.stopPropagation();
      }
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      var data = pd(this);
      data.stopped = true;
      data.immediateStopped = true;

      if (typeof data.event.stopImmediatePropagation === "function") {
        data.event.stopImmediatePropagation();
      }
    },

    get bubbles() {
      return Boolean(pd(this).event.bubbles);
    },

    get cancelable() {
      return Boolean(pd(this).event.cancelable);
    },

    preventDefault: function preventDefault() {
      setCancelFlag(pd(this));
    },

    get defaultPrevented() {
      return pd(this).canceled;
    },

    get composed() {
      return Boolean(pd(this).event.composed);
    },

    get timeStamp() {
      return pd(this).timeStamp;
    },

    get srcElement() {
      return pd(this).eventTarget;
    },

    get cancelBubble() {
      return pd(this).stopped;
    },

    set cancelBubble(value) {
      if (!value) {
        return;
      }

      var data = pd(this);
      data.stopped = true;

      if (typeof data.event.cancelBubble === "boolean") {
        data.event.cancelBubble = true;
      }
    },

    get returnValue() {
      return !pd(this).canceled;
    },

    set returnValue(value) {
      if (!value) {
        setCancelFlag(pd(this));
      }
    },

    initEvent: function initEvent() {}
  };
  Object.defineProperty(Event.prototype, "constructor", {
    value: Event,
    configurable: true,
    writable: true
  });

  if (typeof window !== "undefined" && typeof window.Event !== "undefined") {
    Object.setPrototypeOf(Event.prototype, window.Event.prototype);
    wrappers.set(window.Event.prototype, Event);
  }

  function defineRedirectDescriptor(key) {
    return {
      get: function get() {
        return pd(this).event[key];
      },
      set: function set(value) {
        pd(this).event[key] = value;
      },
      configurable: true,
      enumerable: true
    };
  }

  function defineCallDescriptor(key) {
    return {
      value: function value() {
        var event = pd(this).event;
        return event[key].apply(event, arguments);
      },
      configurable: true,
      enumerable: true
    };
  }

  function defineWrapper(BaseEvent, proto) {
    var keys = Object.keys(proto);

    if (keys.length === 0) {
      return BaseEvent;
    }

    function CustomEvent(eventTarget, event) {
      BaseEvent.call(this, eventTarget, event);
    }

    CustomEvent.prototype = Object.create(BaseEvent.prototype, {
      constructor: {
        value: CustomEvent,
        configurable: true,
        writable: true
      }
    });

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!(key in BaseEvent.prototype)) {
        var descriptor = Object.getOwnPropertyDescriptor(proto, key);
        var isFunc = typeof descriptor.value === "function";
        Object.defineProperty(CustomEvent.prototype, key, isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key));
      }
    }

    return CustomEvent;
  }

  function getWrapper(proto) {
    if (proto == null || proto === Object.prototype) {
      return Event;
    }

    var wrapper = wrappers.get(proto);

    if (wrapper == null) {
      wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);
      wrappers.set(proto, wrapper);
    }

    return wrapper;
  }

  function wrapEvent(eventTarget, event) {
    var Wrapper = getWrapper(Object.getPrototypeOf(event));
    return new Wrapper(eventTarget, event);
  }

  function isStopped(event) {
    return pd(event).immediateStopped;
  }

  function setEventPhase(event, eventPhase) {
    pd(event).eventPhase = eventPhase;
  }

  function setCurrentTarget(event, currentTarget) {
    pd(event).currentTarget = currentTarget;
  }

  function setPassiveListener(event, passiveListener) {
    pd(event).passiveListener = passiveListener;
  }

  var listenersMap = new WeakMap();
  var CAPTURE = 1;
  var BUBBLE = 2;
  var ATTRIBUTE = 3;

  function isObject(x) {
    return x !== null && typeof x === "object";
  }

  function getListeners(eventTarget) {
    var listeners = listenersMap.get(eventTarget);

    if (listeners == null) {
      throw new TypeError("'this' is expected an EventTarget object, but got another value.");
    }

    return listeners;
  }

  function defineEventAttributeDescriptor(eventName) {
    return {
      get: function get() {
        var listeners = getListeners(this);
        var node = listeners.get(eventName);

        while (node != null) {
          if (node.listenerType === ATTRIBUTE) {
            return node.listener;
          }

          node = node.next;
        }

        return null;
      },
      set: function set(listener) {
        if (typeof listener !== "function" && !isObject(listener)) {
          listener = null;
        }

        var listeners = getListeners(this);
        var prev = null;
        var node = listeners.get(eventName);

        while (node != null) {
          if (node.listenerType === ATTRIBUTE) {
            if (prev !== null) {
              prev.next = node.next;
            } else if (node.next !== null) {
              listeners.set(eventName, node.next);
            } else {
              listeners.delete(eventName);
            }
          } else {
            prev = node;
          }

          node = node.next;
        }

        if (listener !== null) {
          var newNode = {
            listener: listener,
            listenerType: ATTRIBUTE,
            passive: false,
            once: false,
            next: null
          };

          if (prev === null) {
            listeners.set(eventName, newNode);
          } else {
            prev.next = newNode;
          }
        }
      },
      configurable: true,
      enumerable: true
    };
  }

  function defineEventAttribute(eventTargetPrototype, eventName) {
    Object.defineProperty(eventTargetPrototype, "on" + eventName, defineEventAttributeDescriptor(eventName));
  }

  function defineCustomEventTarget(eventNames) {
    function CustomEventTarget() {
      EventTarget.call(this);
    }

    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
      constructor: {
        value: CustomEventTarget,
        configurable: true,
        writable: true
      }
    });

    for (var i = 0; i < eventNames.length; ++i) {
      defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);
    }

    return CustomEventTarget;
  }

  function EventTarget() {
    if (this instanceof EventTarget) {
      listenersMap.set(this, new Map());
      return;
    }

    if (arguments.length === 1 && Array.isArray(arguments[0])) {
      return defineCustomEventTarget(arguments[0]);
    }

    if (arguments.length > 0) {
      var types = new Array(arguments.length);

      for (var i = 0; i < arguments.length; ++i) {
        types[i] = arguments[i];
      }

      return defineCustomEventTarget(types);
    }

    throw new TypeError("Cannot call a class as a function");
  }

  EventTarget.prototype = {
    addEventListener: function addEventListener(eventName, listener, options) {
      if (listener == null) {
        return;
      }

      if (typeof listener !== "function" && !isObject(listener)) {
        throw new TypeError("'listener' should be a function or an object.");
      }

      var listeners = getListeners(this);
      var optionsIsObj = isObject(options);
      var capture = optionsIsObj ? Boolean(options.capture) : Boolean(options);
      var listenerType = capture ? CAPTURE : BUBBLE;
      var newNode = {
        listener: listener,
        listenerType: listenerType,
        passive: optionsIsObj && Boolean(options.passive),
        once: optionsIsObj && Boolean(options.once),
        next: null
      };
      var node = listeners.get(eventName);

      if (node === undefined) {
        listeners.set(eventName, newNode);
        return;
      }

      var prev = null;

      while (node != null) {
        if (node.listener === listener && node.listenerType === listenerType) {
          return;
        }

        prev = node;
        node = node.next;
      }

      prev.next = newNode;
    },
    removeEventListener: function removeEventListener(eventName, listener, options) {
      if (listener == null) {
        return;
      }

      var listeners = getListeners(this);
      var capture = isObject(options) ? Boolean(options.capture) : Boolean(options);
      var listenerType = capture ? CAPTURE : BUBBLE;
      var prev = null;
      var node = listeners.get(eventName);

      while (node != null) {
        if (node.listener === listener && node.listenerType === listenerType) {
          if (prev !== null) {
            prev.next = node.next;
          } else if (node.next !== null) {
            listeners.set(eventName, node.next);
          } else {
            listeners.delete(eventName);
          }

          return;
        }

        prev = node;
        node = node.next;
      }
    },
    dispatchEvent: function dispatchEvent(event) {
      if (event == null || typeof event.type !== "string") {
        throw new TypeError('"event.type" should be a string.');
      }

      var listeners = getListeners(this);
      var eventName = event.type;
      var node = listeners.get(eventName);

      if (node == null) {
        return true;
      }

      var wrappedEvent = wrapEvent(this, event);
      var prev = null;

      while (node != null) {
        if (node.once) {
          if (prev !== null) {
            prev.next = node.next;
          } else if (node.next !== null) {
            listeners.set(eventName, node.next);
          } else {
            listeners.delete(eventName);
          }
        } else {
          prev = node;
        }

        setPassiveListener(wrappedEvent, node.passive ? node.listener : null);

        if (typeof node.listener === "function") {
          try {
            node.listener.call(this, wrappedEvent);
          } catch (err) {
            if (typeof console !== "undefined" && typeof console.error === "function") {
              console.error(err);
            }
          }
        } else if (node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
          node.listener.handleEvent(wrappedEvent);
        }

        if (isStopped(wrappedEvent)) {
          break;
        }

        node = node.next;
      }

      setPassiveListener(wrappedEvent, null);
      setEventPhase(wrappedEvent, 0);
      setCurrentTarget(wrappedEvent, null);
      return !wrappedEvent.defaultPrevented;
    }
  };
  Object.defineProperty(EventTarget.prototype, "constructor", {
    value: EventTarget,
    configurable: true,
    writable: true
  });

  if (typeof window !== "undefined" && typeof window.EventTarget !== "undefined") {
    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);
  }

  exports.defineEventAttribute = defineEventAttribute;
  exports.EventTarget = EventTarget;
  exports.default = EventTarget;
  module.exports = EventTarget;
  module.exports.EventTarget = module.exports["default"] = EventTarget;
  module.exports.defineEventAttribute = defineEventAttribute;
},116,[],"node_modules/event-target-shim/dist/event-target-shim.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  exports.byteLength = byteLength;
  exports.toByteArray = toByteArray;
  exports.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }

  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;

  function getLens(b64) {
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4');
    }

    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [validLen, placeHoldersLen];
  }

  function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }

  function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }

  function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;

    for (i = 0; i < len; i += 4) {
      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
      arr[curByte++] = tmp >> 16 & 0xFF;
      arr[curByte++] = tmp >> 8 & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }

    if (placeHoldersLen === 2) {
      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
      arr[curByte++] = tmp & 0xFF;
    }

    if (placeHoldersLen === 1) {
      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }

    return arr;
  }

  function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
  }

  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];

    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
      output.push(tripletToBase64(tmp));
    }

    return output.join('');
  }

  function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3;
    var parts = [];
    var maxChunkLength = 16383;

    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    }

    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
    }

    return parts.join('');
  }
},117,[],"node_modules/base64-js/index.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var GlobalPerformanceLogger = _$$_REQUIRE(_dependencyMap[0], "./createPerformanceLogger")();

  module.exports = GlobalPerformanceLogger;
},118,[119],"node_modules/react-native/Libraries/Utilities/GlobalPerformanceLogger.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var performanceNow = global.nativeQPLTimestamp || global.nativePerformanceNow || _$$_REQUIRE(_dependencyMap[0], "fbjs/lib/performanceNow");

  var _cookies = {};
  var PRINT_TO_CONSOLE = false;

  function createPerformanceLogger() {
    var result = {
      _timespans: {},
      _extras: {},
      _points: {},
      addTimespan: function addTimespan(key, lengthInMs, description) {
        if (this._timespans[key]) {
          if (PRINT_TO_CONSOLE && __DEV__) {
            _$$_REQUIRE(_dependencyMap[1], "./infoLog")('PerformanceLogger: Attempting to add a timespan that already exists ', key);
          }

          return;
        }

        this._timespans[key] = {
          description: description,
          totalTime: lengthInMs
        };
      },
      startTimespan: function startTimespan(key, description) {
        if (this._timespans[key]) {
          if (PRINT_TO_CONSOLE && __DEV__) {
            _$$_REQUIRE(_dependencyMap[1], "./infoLog")('PerformanceLogger: Attempting to start a timespan that already exists ', key);
          }

          return;
        }

        this._timespans[key] = {
          description: description,
          startTime: performanceNow()
        };
        _cookies[key] = _$$_REQUIRE(_dependencyMap[2], "../Performance/Systrace").beginAsyncEvent(key);

        if (PRINT_TO_CONSOLE) {
          _$$_REQUIRE(_dependencyMap[1], "./infoLog")('PerformanceLogger.js', 'start: ' + key);
        }
      },
      stopTimespan: function stopTimespan(key, options) {
        var timespan = this._timespans[key];

        if (!timespan || !timespan.startTime) {
          if (PRINT_TO_CONSOLE && __DEV__) {
            _$$_REQUIRE(_dependencyMap[1], "./infoLog")('PerformanceLogger: Attempting to end a timespan that has not started ', key);
          }

          return;
        }

        if (timespan.endTime && !(options != null && options.update)) {
          if (PRINT_TO_CONSOLE && __DEV__) {
            _$$_REQUIRE(_dependencyMap[1], "./infoLog")('PerformanceLogger: Attempting to end a timespan that has already ended ', key);
          }

          return;
        }

        timespan.endTime = performanceNow();
        timespan.totalTime = timespan.endTime - (timespan.startTime || 0);

        if (PRINT_TO_CONSOLE) {
          _$$_REQUIRE(_dependencyMap[1], "./infoLog")('PerformanceLogger.js', 'end: ' + key);
        }

        if (_cookies[key] != null) {
          _$$_REQUIRE(_dependencyMap[2], "../Performance/Systrace").endAsyncEvent(key, _cookies[key]);

          delete _cookies[key];
        }
      },
      clear: function clear() {
        this._timespans = {};
        this._extras = {};
        this._points = {};

        if (PRINT_TO_CONSOLE) {
          _$$_REQUIRE(_dependencyMap[1], "./infoLog")('PerformanceLogger.js', 'clear');
        }
      },
      clearCompleted: function clearCompleted() {
        for (var _key in this._timespans) {
          if (this._timespans[_key].totalTime) {
            delete this._timespans[_key];
          }
        }

        this._extras = {};
        this._points = {};

        if (PRINT_TO_CONSOLE) {
          _$$_REQUIRE(_dependencyMap[1], "./infoLog")('PerformanceLogger.js', 'clearCompleted');
        }
      },
      clearExceptTimespans: function clearExceptTimespans(keys) {
        this._timespans = Object.keys(this._timespans).reduce(function (previous, key) {
          if (keys.indexOf(key) !== -1) {
            previous[key] = this._timespans[key];
          }

          return previous;
        }, {});
        this._extras = {};
        this._points = {};

        if (PRINT_TO_CONSOLE) {
          _$$_REQUIRE(_dependencyMap[1], "./infoLog")('PerformanceLogger.js', 'clearExceptTimespans', keys);
        }
      },
      currentTimestamp: function currentTimestamp() {
        return performanceNow();
      },
      getTimespans: function getTimespans() {
        return this._timespans;
      },
      hasTimespan: function hasTimespan(key) {
        return !!this._timespans[key];
      },
      logTimespans: function logTimespans() {
        if (PRINT_TO_CONSOLE) {
          for (var _key2 in this._timespans) {
            if (this._timespans[_key2].totalTime) {
              _$$_REQUIRE(_dependencyMap[1], "./infoLog")(_key2 + ': ' + this._timespans[_key2].totalTime + 'ms');
            }
          }
        }
      },
      addTimespans: function addTimespans(newTimespans, labels) {
        for (var ii = 0, l = newTimespans.length; ii < l; ii += 2) {
          var label = labels[ii / 2];
          this.addTimespan(label, newTimespans[ii + 1] - newTimespans[ii], label);
        }
      },
      setExtra: function setExtra(key, value) {
        if (this._extras[key]) {
          if (PRINT_TO_CONSOLE && __DEV__) {
            _$$_REQUIRE(_dependencyMap[1], "./infoLog")('PerformanceLogger: Attempting to set an extra that already exists ', {
              key: key,
              currentValue: this._extras[key],
              attemptedValue: value
            });
          }

          return;
        }

        this._extras[key] = value;
      },
      getExtras: function getExtras() {
        return this._extras;
      },
      removeExtra: function removeExtra(key) {
        var value = this._extras[key];
        delete this._extras[key];
        return value;
      },
      logExtras: function logExtras() {
        if (PRINT_TO_CONSOLE) {
          _$$_REQUIRE(_dependencyMap[1], "./infoLog")(this._extras);
        }
      },
      markPoint: function markPoint(key, timestamp) {
        if (this._points[key]) {
          if (PRINT_TO_CONSOLE && __DEV__) {
            _$$_REQUIRE(_dependencyMap[1], "./infoLog")('PerformanceLogger: Attempting to mark a point that has been already logged ', key);
          }

          return;
        }

        this._points[key] = timestamp != null ? timestamp : performanceNow();
      },
      getPoints: function getPoints() {
        return this._points;
      },
      logPoints: function logPoints() {
        if (PRINT_TO_CONSOLE) {
          for (var _key3 in this._points) {
            _$$_REQUIRE(_dependencyMap[1], "./infoLog")(_key3 + ': ' + this._points[_key3] + 'ms');
          }
        }
      },
      logEverything: function logEverything() {
        this.logTimespans();
        this.logExtras();
        this.logPoints();
      }
    };
    return result;
  }

  module.exports = createPerformanceLogger;
},119,[107,120,23],"node_modules/react-native/Libraries/Utilities/createPerformanceLogger.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function infoLog() {
    var _console;

    return (_console = console).log.apply(_console, arguments);
  }

  module.exports = infoLog;
},120,[],"node_modules/react-native/Libraries/Utilities/infoLog.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/getPrototypeOf"));

  var _NativeNetworkingAndroid = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "./NativeNetworkingAndroid"));

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function convertHeadersMapToArray(headers) {
    var headerArray = [];

    for (var name in headers) {
      headerArray.push([name, headers[name]]);
    }

    return headerArray;
  }

  var _requestId = 1;

  function generateRequestId() {
    return _requestId++;
  }

  var RCTNetworking = function (_NativeEventEmitter) {
    (0, _inherits2.default)(RCTNetworking, _NativeEventEmitter);

    var _super = _createSuper(RCTNetworking);

    function RCTNetworking() {
      (0, _classCallCheck2.default)(this, RCTNetworking);
      return _super.call(this, _NativeNetworkingAndroid.default);
    }

    (0, _createClass2.default)(RCTNetworking, [{
      key: "sendRequest",
      value: function sendRequest(method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {
        var body = _$$_REQUIRE(_dependencyMap[7], "./convertRequestBody")(data);

        if (body && body.formData) {
          body.formData = body.formData.map(function (part) {
            return Object.assign({}, part, {
              headers: convertHeadersMapToArray(part.headers)
            });
          });
        }

        var requestId = generateRequestId();

        _NativeNetworkingAndroid.default.sendRequest(method, url, requestId, convertHeadersMapToArray(headers), Object.assign({}, body, {
          trackingName: trackingName
        }), responseType, incrementalUpdates, timeout, withCredentials);

        callback(requestId);
      }
    }, {
      key: "abortRequest",
      value: function abortRequest(requestId) {
        _NativeNetworkingAndroid.default.abortRequest(requestId);
      }
    }, {
      key: "clearCookies",
      value: function clearCookies(callback) {
        _NativeNetworkingAndroid.default.clearCookies(callback);
      }
    }]);
    return RCTNetworking;
  }(_$$_REQUIRE(_dependencyMap[8], "../EventEmitter/NativeEventEmitter"));

  module.exports = new RCTNetworking();
},121,[3,16,17,35,32,31,122,123,126],"node_modules/react-native/Libraries/Network/RCTNetworking.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.getEnforcing('Networking');

  exports.default = _default;
},122,[5],"node_modules/react-native/Libraries/Network/NativeNetworkingAndroid.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function convertRequestBody(body) {
    if (typeof body === 'string') {
      return {
        string: body
      };
    }

    if (body instanceof _$$_REQUIRE(_dependencyMap[0], "../Blob/Blob")) {
      return {
        blob: body.data
      };
    }

    if (body instanceof _$$_REQUIRE(_dependencyMap[1], "./FormData")) {
      return {
        formData: body.getParts()
      };
    }

    if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
      return {
        base64: _$$_REQUIRE(_dependencyMap[2], "../Utilities/binaryToBase64")(body)
      };
    }

    return body;
  }

  module.exports = convertRequestBody;
},123,[114,124,125],"node_modules/react-native/Libraries/Network/convertRequestBody.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var FormData = function () {
    function FormData() {
      _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/classCallCheck")(this, FormData);

      this._parts = [];
    }

    _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/createClass")(FormData, [{
      key: "append",
      value: function append(key, value) {
        this._parts.push([key, value]);
      }
    }, {
      key: "getParts",
      value: function getParts() {
        return this._parts.map(function (_ref) {
          var _ref2 = _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/slicedToArray")(_ref, 2),
              name = _ref2[0],
              value = _ref2[1];

          var contentDisposition = 'form-data; name="' + name + '"';
          var headers = {
            'content-disposition': contentDisposition
          };

          if (typeof value === 'object' && value) {
            if (typeof value.name === 'string') {
              headers['content-disposition'] += '; filename="' + value.name + '"';
            }

            if (typeof value.type === 'string') {
              headers['content-type'] = value.type;
            }

            return Object.assign({}, value, {
              headers: headers,
              fieldName: name
            });
          }

          return {
            string: String(value),
            headers: headers,
            fieldName: name
          };
        });
      }
    }]);

    return FormData;
  }();

  module.exports = FormData;
},124,[16,17,8],"node_modules/react-native/Libraries/Network/FormData.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function binaryToBase64(data) {
    if (data instanceof ArrayBuffer) {
      data = new Uint8Array(data);
    }

    if (data instanceof Uint8Array) {
      return _$$_REQUIRE(_dependencyMap[0], "base64-js").fromByteArray(data);
    }

    if (!ArrayBuffer.isView(data)) {
      throw new Error('data must be ArrayBuffer or typed array');
    }

    var _data = data,
        buffer = _data.buffer,
        byteOffset = _data.byteOffset,
        byteLength = _data.byteLength;
    return _$$_REQUIRE(_dependencyMap[0], "base64-js").fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));
  }

  module.exports = binaryToBase64;
},125,[117],"node_modules/react-native/Libraries/Utilities/binaryToBase64.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var NativeEventEmitter = function (_EventEmitter) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(NativeEventEmitter, _EventEmitter);

    var _super = _createSuper(NativeEventEmitter);

    function NativeEventEmitter(nativeModule) {
      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, NativeEventEmitter);

      _this = _super.call(this, _$$_REQUIRE(_dependencyMap[4], "./RCTDeviceEventEmitter").sharedSubscriber);

      if ("android" === 'ios') {
        _$$_REQUIRE(_dependencyMap[5], "invariant")(nativeModule, 'Native module cannot be null.');

        _this._nativeModule = nativeModule;
      }

      return _this;
    }

    _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/createClass")(NativeEventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        if (this._nativeModule != null) {
          this._nativeModule.addListener(eventType);
        }

        return _$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(NativeEventEmitter.prototype), "addListener", this).call(this, eventType, listener, context);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        _$$_REQUIRE(_dependencyMap[5], "invariant")(eventType, 'eventType argument is required.');

        var count = this.listeners(eventType).length;

        if (this._nativeModule != null) {
          this._nativeModule.removeListeners(count);
        }

        _$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(NativeEventEmitter.prototype), "removeAllListeners", this).call(this, eventType);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        if (this._nativeModule != null) {
          this._nativeModule.removeListeners(1);
        }

        _$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(NativeEventEmitter.prototype), "removeSubscription", this).call(this, subscription);
      }
    }]);

    return NativeEventEmitter;
  }(_$$_REQUIRE(_dependencyMap[8], "../vendor/emitter/EventEmitter"));

  module.exports = NativeEventEmitter;
},126,[31,32,35,16,30,6,17,38,40],"node_modules/react-native/Libraries/EventEmitter/NativeEventEmitter.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectWithoutProperties2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/objectWithoutProperties"));

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/createClass"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/getPrototypeOf"));

  var _NativeWebSocketModule = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "./NativeWebSocketModule"));

  var _excluded = ["headers"];

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var CONNECTING = 0;
  var OPEN = 1;
  var CLOSING = 2;
  var CLOSED = 3;
  var CLOSE_NORMAL = 1000;
  var WEBSOCKET_EVENTS = ['close', 'error', 'message', 'open'];
  var nextWebSocketId = 0;

  var WebSocket = function (_ref) {
    (0, _inherits2.default)(WebSocket, _ref);

    var _super = _createSuper(WebSocket);

    function WebSocket(url, protocols, options) {
      var _this;

      (0, _classCallCheck2.default)(this, WebSocket);
      _this = _super.call(this);
      _this.CONNECTING = CONNECTING;
      _this.OPEN = OPEN;
      _this.CLOSING = CLOSING;
      _this.CLOSED = CLOSED;
      _this.readyState = CONNECTING;

      if (typeof protocols === 'string') {
        protocols = [protocols];
      }

      var _ref2 = options || {},
          _ref2$headers = _ref2.headers,
          headers = _ref2$headers === void 0 ? {} : _ref2$headers,
          unrecognized = (0, _objectWithoutProperties2.default)(_ref2, _excluded);

      if (unrecognized && typeof unrecognized.origin === 'string') {
        console.warn('Specifying `origin` as a WebSocket connection option is deprecated. Include it under `headers` instead.');
        headers.origin = unrecognized.origin;
        delete unrecognized.origin;
      }

      if (Object.keys(unrecognized).length > 0) {
        console.warn('Unrecognized WebSocket connection option(s) `' + Object.keys(unrecognized).join('`, `') + '`. ' + 'Did you mean to put these under `headers`?');
      }

      if (!Array.isArray(protocols)) {
        protocols = null;
      }

      _this._eventEmitter = new (_$$_REQUIRE(_dependencyMap[8], "../EventEmitter/NativeEventEmitter"))(_NativeWebSocketModule.default);
      _this._socketId = nextWebSocketId++;

      _this._registerEvents();

      _NativeWebSocketModule.default.connect(url, protocols, {
        headers: headers
      }, _this._socketId);

      return _this;
    }

    (0, _createClass2.default)(WebSocket, [{
      key: "binaryType",
      get: function get() {
        return this._binaryType;
      },
      set: function set(binaryType) {
        if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {
          throw new Error("binaryType must be either 'blob' or 'arraybuffer'");
        }

        if (this._binaryType === 'blob' || binaryType === 'blob') {
          _$$_REQUIRE(_dependencyMap[9], "invariant")(_$$_REQUIRE(_dependencyMap[10], "../Blob/BlobManager").isAvailable, 'Native module BlobModule is required for blob support');

          if (binaryType === 'blob') {
            _$$_REQUIRE(_dependencyMap[10], "../Blob/BlobManager").addWebSocketHandler(this._socketId);
          } else {
            _$$_REQUIRE(_dependencyMap[10], "../Blob/BlobManager").removeWebSocketHandler(this._socketId);
          }
        }

        this._binaryType = binaryType;
      }
    }, {
      key: "close",
      value: function close(code, reason) {
        if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
          return;
        }

        this.readyState = this.CLOSING;

        this._close(code, reason);
      }
    }, {
      key: "send",
      value: function send(data) {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }

        if (data instanceof _$$_REQUIRE(_dependencyMap[11], "../Blob/Blob")) {
          _$$_REQUIRE(_dependencyMap[9], "invariant")(_$$_REQUIRE(_dependencyMap[10], "../Blob/BlobManager").isAvailable, 'Native module BlobModule is required for blob support');

          _$$_REQUIRE(_dependencyMap[10], "../Blob/BlobManager").sendOverSocket(data, this._socketId);

          return;
        }

        if (typeof data === 'string') {
          _NativeWebSocketModule.default.send(data, this._socketId);

          return;
        }

        if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
          _NativeWebSocketModule.default.sendBinary(_$$_REQUIRE(_dependencyMap[12], "../Utilities/binaryToBase64")(data), this._socketId);

          return;
        }

        throw new Error('Unsupported data type');
      }
    }, {
      key: "ping",
      value: function ping() {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }

        _NativeWebSocketModule.default.ping(this._socketId);
      }
    }, {
      key: "_close",
      value: function _close(code, reason) {
        var statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;
        var closeReason = typeof reason === 'string' ? reason : '';

        _NativeWebSocketModule.default.close(statusCode, closeReason, this._socketId);

        if (_$$_REQUIRE(_dependencyMap[10], "../Blob/BlobManager").isAvailable && this._binaryType === 'blob') {
          _$$_REQUIRE(_dependencyMap[10], "../Blob/BlobManager").removeWebSocketHandler(this._socketId);
        }
      }
    }, {
      key: "_unregisterEvents",
      value: function _unregisterEvents() {
        this._subscriptions.forEach(function (e) {
          return e.remove();
        });

        this._subscriptions = [];
      }
    }, {
      key: "_registerEvents",
      value: function _registerEvents() {
        var _this2 = this;

        this._subscriptions = [this._eventEmitter.addListener('websocketMessage', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          var data = ev.data;

          switch (ev.type) {
            case 'binary':
              data = _$$_REQUIRE(_dependencyMap[13], "base64-js").toByteArray(ev.data).buffer;
              break;

            case 'blob':
              data = _$$_REQUIRE(_dependencyMap[10], "../Blob/BlobManager").createFromOptions(ev.data);
              break;
          }

          _this2.dispatchEvent(new (_$$_REQUIRE(_dependencyMap[14], "./WebSocketEvent"))('message', {
            data: data
          }));
        }), this._eventEmitter.addListener('websocketOpen', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.OPEN;
          _this2.protocol = ev.protocol;

          _this2.dispatchEvent(new (_$$_REQUIRE(_dependencyMap[14], "./WebSocketEvent"))('open'));
        }), this._eventEmitter.addListener('websocketClosed', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.CLOSED;

          _this2.dispatchEvent(new (_$$_REQUIRE(_dependencyMap[14], "./WebSocketEvent"))('close', {
            code: ev.code,
            reason: ev.reason
          }));

          _this2._unregisterEvents();

          _this2.close();
        }), this._eventEmitter.addListener('websocketFailed', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.CLOSED;

          _this2.dispatchEvent(new (_$$_REQUIRE(_dependencyMap[14], "./WebSocketEvent"))('error', {
            message: ev.message
          }));

          _this2.dispatchEvent(new (_$$_REQUIRE(_dependencyMap[14], "./WebSocketEvent"))('close', {
            message: ev.message
          }));

          _this2._unregisterEvents();

          _this2.close();
        })];
      }
    }]);
    return WebSocket;
  }(_$$_REQUIRE(_dependencyMap[15], "event-target-shim").apply(void 0, WEBSOCKET_EVENTS));

  WebSocket.CONNECTING = CONNECTING;
  WebSocket.OPEN = OPEN;
  WebSocket.CLOSING = CLOSING;
  WebSocket.CLOSED = CLOSED;
  module.exports = WebSocket;
},127,[3,128,16,17,35,32,31,130,126,6,112,114,125,117,131,116],"node_modules/react-native/Libraries/WebSocket/WebSocket.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _$$_REQUIRE(_dependencyMap[0], "./objectWithoutPropertiesLoose.js")(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  module.exports = _objectWithoutProperties, module.exports.__esModule = true, module.exports["default"] = module.exports;
},128,[129],"node_modules/@babel/runtime/helpers/objectWithoutProperties.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;
},129,[],"node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.getEnforcing('WebSocketModule');

  exports.default = _default;
},130,[5],"node_modules/react-native/Libraries/WebSocket/NativeWebSocketModule.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var WebSocketEvent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/createClass")(function WebSocketEvent(type, eventInitDict) {
    _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck")(this, WebSocketEvent);

    this.type = type.toString();
    Object.assign(this, eventInitDict);
  });

  module.exports = WebSocketEvent;
},131,[17,16],"node_modules/react-native/Libraries/WebSocket/WebSocketEvent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var File = function (_Blob) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(File, _Blob);

    var _super = _createSuper(File);

    function File(parts, name, options) {
      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, File);

      _$$_REQUIRE(_dependencyMap[4], "invariant")(parts != null && name != null, 'Failed to construct `File`: Must pass both `parts` and `name` arguments.');

      _this = _super.call(this, parts, options);
      _this.data.name = name;
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(File, [{
      key: "name",
      get: function get() {
        _$$_REQUIRE(_dependencyMap[4], "invariant")(this.data.name != null, 'Files must have a name set.');

        return this.data.name;
      }
    }, {
      key: "lastModified",
      get: function get() {
        return this.data.lastModified || 0;
      }
    }]);

    return File;
  }(_$$_REQUIRE(_dependencyMap[6], "./Blob"));

  module.exports = File;
},132,[31,32,35,16,6,17,114],"node_modules/react-native/Libraries/Blob/File.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/getPrototypeOf"));

  var _NativeFileReaderModule = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "./NativeFileReaderModule"));

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var READER_EVENTS = ['abort', 'error', 'load', 'loadstart', 'loadend', 'progress'];
  var EMPTY = 0;
  var LOADING = 1;
  var DONE = 2;

  var FileReader = function (_ref) {
    (0, _inherits2.default)(FileReader, _ref);

    var _super = _createSuper(FileReader);

    function FileReader() {
      var _this;

      (0, _classCallCheck2.default)(this, FileReader);
      _this = _super.call(this);
      _this.EMPTY = EMPTY;
      _this.LOADING = LOADING;
      _this.DONE = DONE;
      _this._aborted = false;
      _this._subscriptions = [];

      _this._reset();

      return _this;
    }

    (0, _createClass2.default)(FileReader, [{
      key: "_reset",
      value: function _reset() {
        this._readyState = EMPTY;
        this._error = null;
        this._result = null;
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        this._subscriptions.forEach(function (sub) {
          return sub.remove();
        });

        this._subscriptions = [];
      }
    }, {
      key: "_setReadyState",
      value: function _setReadyState(newState) {
        this._readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });

        if (newState === DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._error) {
            this.dispatchEvent({
              type: 'error'
            });
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }

          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }
    }, {
      key: "readAsArrayBuffer",
      value: function readAsArrayBuffer() {
        throw new Error('FileReader.readAsArrayBuffer is not implemented');
      }
    }, {
      key: "readAsDataURL",
      value: function readAsDataURL(blob) {
        var _this2 = this;

        this._aborted = false;

        if (blob == null) {
          throw new TypeError("Failed to execute 'readAsDataURL' on 'FileReader': parameter 1 is not of type 'Blob'");
        }

        _NativeFileReaderModule.default.readAsDataURL(blob.data).then(function (text) {
          if (_this2._aborted) {
            return;
          }

          _this2._result = text;

          _this2._setReadyState(DONE);
        }, function (error) {
          if (_this2._aborted) {
            return;
          }

          _this2._error = error;

          _this2._setReadyState(DONE);
        });
      }
    }, {
      key: "readAsText",
      value: function readAsText(blob) {
        var _this3 = this;

        var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'UTF-8';
        this._aborted = false;

        if (blob == null) {
          throw new TypeError("Failed to execute 'readAsText' on 'FileReader': parameter 1 is not of type 'Blob'");
        }

        _NativeFileReaderModule.default.readAsText(blob.data, encoding).then(function (text) {
          if (_this3._aborted) {
            return;
          }

          _this3._result = text;

          _this3._setReadyState(DONE);
        }, function (error) {
          if (_this3._aborted) {
            return;
          }

          _this3._error = error;

          _this3._setReadyState(DONE);
        });
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;

        if (this._readyState !== EMPTY && this._readyState !== DONE) {
          this._reset();

          this._setReadyState(DONE);
        }

        this._reset();
      }
    }, {
      key: "readyState",
      get: function get() {
        return this._readyState;
      }
    }, {
      key: "error",
      get: function get() {
        return this._error;
      }
    }, {
      key: "result",
      get: function get() {
        return this._result;
      }
    }]);
    return FileReader;
  }(_$$_REQUIRE(_dependencyMap[7], "event-target-shim").apply(void 0, READER_EVENTS));

  FileReader.EMPTY = EMPTY;
  FileReader.LOADING = LOADING;
  FileReader.DONE = DONE;
  module.exports = FileReader;
},133,[3,16,17,35,32,31,134,116],"node_modules/react-native/Libraries/Blob/FileReader.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.getEnforcing('FileReaderModule');

  exports.default = _default;
},134,[5],"node_modules/react-native/Libraries/Blob/NativeFileReaderModule.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.URLSearchParams = exports.URL = void 0;

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var _NativeBlobModule = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "./NativeBlobModule"));

  var _Symbol$iterator;

  var BLOB_URL_PREFIX = null;

  if (_NativeBlobModule.default && typeof _NativeBlobModule.default.getConstants().BLOB_URI_SCHEME === 'string') {
    var constants = _NativeBlobModule.default.getConstants();

    BLOB_URL_PREFIX = constants.BLOB_URI_SCHEME + ':';

    if (typeof constants.BLOB_URI_HOST === 'string') {
      BLOB_URL_PREFIX += "//" + constants.BLOB_URI_HOST + "/";
    }
  }

  _Symbol$iterator = Symbol.iterator;

  var URLSearchParams = function () {
    function URLSearchParams(params) {
      var _this = this;

      (0, _classCallCheck2.default)(this, URLSearchParams);
      this._searchParams = [];

      if (typeof params === 'object') {
        Object.keys(params).forEach(function (key) {
          return _this.append(key, params[key]);
        });
      }
    }

    (0, _createClass2.default)(URLSearchParams, [{
      key: "append",
      value: function append(key, value) {
        this._searchParams.push([key, value]);
      }
    }, {
      key: "delete",
      value: function _delete(name) {
        throw new Error('not implemented');
      }
    }, {
      key: "get",
      value: function get(name) {
        throw new Error('not implemented');
      }
    }, {
      key: "getAll",
      value: function getAll(name) {
        throw new Error('not implemented');
      }
    }, {
      key: "has",
      value: function has(name) {
        throw new Error('not implemented');
      }
    }, {
      key: "set",
      value: function set(name, value) {
        throw new Error('not implemented');
      }
    }, {
      key: "sort",
      value: function sort() {
        throw new Error('not implemented');
      }
    }, {
      key: _Symbol$iterator,
      value: function value() {
        return this._searchParams[Symbol.iterator]();
      }
    }, {
      key: "toString",
      value: function toString() {
        if (this._searchParams.length === 0) {
          return '';
        }

        var last = this._searchParams.length - 1;
        return this._searchParams.reduce(function (acc, curr, index) {
          return acc + curr.join('=') + (index === last ? '' : '&');
        }, '');
      }
    }]);
    return URLSearchParams;
  }();

  exports.URLSearchParams = URLSearchParams;

  function validateBaseUrl(url) {
    return /^(?:(?:(?:https?|ftp):)?\/\/)(?:(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,}))?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(url);
  }

  var URL = function () {
    function URL(url, base) {
      (0, _classCallCheck2.default)(this, URL);
      this._searchParamsInstance = null;
      var baseUrl = null;

      if (!base || validateBaseUrl(url)) {
        this._url = url;

        if (!this._url.endsWith('/')) {
          this._url += '/';
        }
      } else {
        if (typeof base === 'string') {
          baseUrl = base;

          if (!validateBaseUrl(baseUrl)) {
            throw new TypeError("Invalid base URL: " + baseUrl);
          }
        } else if (typeof base === 'object') {
          baseUrl = base.toString();
        }

        if (baseUrl.endsWith('/')) {
          baseUrl = baseUrl.slice(0, baseUrl.length - 1);
        }

        if (!url.startsWith('/')) {
          url = "/" + url;
        }

        if (baseUrl.endsWith(url)) {
          url = '';
        }

        this._url = "" + baseUrl + url;
      }
    }

    (0, _createClass2.default)(URL, [{
      key: "hash",
      get: function get() {
        throw new Error('not implemented');
      }
    }, {
      key: "host",
      get: function get() {
        throw new Error('not implemented');
      }
    }, {
      key: "hostname",
      get: function get() {
        throw new Error('not implemented');
      }
    }, {
      key: "href",
      get: function get() {
        return this.toString();
      }
    }, {
      key: "origin",
      get: function get() {
        throw new Error('not implemented');
      }
    }, {
      key: "password",
      get: function get() {
        throw new Error('not implemented');
      }
    }, {
      key: "pathname",
      get: function get() {
        throw new Error('not implemented');
      }
    }, {
      key: "port",
      get: function get() {
        throw new Error('not implemented');
      }
    }, {
      key: "protocol",
      get: function get() {
        throw new Error('not implemented');
      }
    }, {
      key: "search",
      get: function get() {
        throw new Error('not implemented');
      }
    }, {
      key: "searchParams",
      get: function get() {
        if (this._searchParamsInstance == null) {
          this._searchParamsInstance = new URLSearchParams();
        }

        return this._searchParamsInstance;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.toString();
      }
    }, {
      key: "toString",
      value: function toString() {
        if (this._searchParamsInstance === null) {
          return this._url;
        }

        var separator = this._url.indexOf('?') > -1 ? '&' : '?';
        return this._url + separator + this._searchParamsInstance.toString();
      }
    }, {
      key: "username",
      get: function get() {
        throw new Error('not implemented');
      }
    }], [{
      key: "createObjectURL",
      value: function createObjectURL(blob) {
        if (BLOB_URL_PREFIX === null) {
          throw new Error('Cannot create URL for blob!');
        }

        return "" + BLOB_URL_PREFIX + blob.data.blobId + "?offset=" + blob.data.offset + "&size=" + blob.size;
      }
    }, {
      key: "revokeObjectURL",
      value: function revokeObjectURL(url) {}
    }]);
    return URL;
  }();

  exports.URL = URL;
},135,[3,16,17,113],"node_modules/react-native/Libraries/Blob/URL.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var AbortSignal = function (_eventTargetShim$Even) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(AbortSignal, _eventTargetShim$Even);

    var _super = _createSuper(AbortSignal);

    function AbortSignal() {
      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, AbortSignal);

      _this = _super.call(this);
      throw new TypeError("AbortSignal cannot be constructed directly");
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/createClass")(AbortSignal, [{
      key: "aborted",
      get: function get() {
        var aborted = abortedFlags.get(this);

        if (typeof aborted !== "boolean") {
          throw new TypeError("Expected 'this' to be an 'AbortSignal' object, but got " + (this === null ? "null" : typeof this));
        }

        return aborted;
      }
    }]);

    return AbortSignal;
  }(_$$_REQUIRE(_dependencyMap[5], "event-target-shim").EventTarget);

  _$$_REQUIRE(_dependencyMap[5], "event-target-shim").defineEventAttribute(AbortSignal.prototype, "abort");

  function createAbortSignal() {
    var signal = Object.create(AbortSignal.prototype);

    _$$_REQUIRE(_dependencyMap[5], "event-target-shim").EventTarget.call(signal);

    abortedFlags.set(signal, false);
    return signal;
  }

  function abortSignal(signal) {
    if (abortedFlags.get(signal) !== false) {
      return;
    }

    abortedFlags.set(signal, true);
    signal.dispatchEvent({
      type: "abort"
    });
  }

  var abortedFlags = new WeakMap();
  Object.defineProperties(AbortSignal.prototype, {
    aborted: {
      enumerable: true
    }
  });

  if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
    Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {
      configurable: true,
      value: "AbortSignal"
    });
  }

  var AbortController = function () {
    function AbortController() {
      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, AbortController);

      signals.set(this, createAbortSignal());
    }

    _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/createClass")(AbortController, [{
      key: "signal",
      get: function get() {
        return getSignal(this);
      }
    }, {
      key: "abort",
      value: function abort() {
        abortSignal(getSignal(this));
      }
    }]);

    return AbortController;
  }();

  var signals = new WeakMap();

  function getSignal(controller) {
    var signal = signals.get(controller);

    if (signal == null) {
      throw new TypeError("Expected 'this' to be an 'AbortController' object, but got " + (controller === null ? "null" : typeof controller));
    }

    return signal;
  }

  Object.defineProperties(AbortController.prototype, {
    signal: {
      enumerable: true
    },
    abort: {
      enumerable: true
    }
  });

  if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
    Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {
      configurable: true,
      value: "AbortController"
    });
  }

  exports.AbortController = AbortController;
  exports.AbortSignal = AbortSignal;
  exports.default = AbortController;
  module.exports = AbortController;
  module.exports.AbortController = module.exports["default"] = AbortController;
  module.exports.AbortSignal = AbortSignal;
},136,[31,32,35,16,17,116],"node_modules/abort-controller/dist/abort-controller.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (!global.alert) {
    global.alert = function (text) {
      _$$_REQUIRE(_dependencyMap[0], "../Alert/Alert").alert('Alert', '' + text);
    };
  }
},137,[138],"node_modules/react-native/Libraries/Core/setUpAlert.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var _Platform = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../Utilities/Platform"));

  var _NativeDialogManagerAndroid = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../NativeModules/specs/NativeDialogManagerAndroid"));

  var _RCTAlertManager = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "./RCTAlertManager"));

  var Alert = function () {
    function Alert() {
      (0, _classCallCheck2.default)(this, Alert);
    }

    (0, _createClass2.default)(Alert, null, [{
      key: "alert",
      value: function alert(title, message, buttons, options) {
        if (_Platform.default.OS === 'ios') {
          Alert.prompt(title, message, buttons, 'default');
        } else if (_Platform.default.OS === 'android') {
          if (!_NativeDialogManagerAndroid.default) {
            return;
          }

          var constants = _NativeDialogManagerAndroid.default.getConstants();

          var config = {
            title: title || '',
            message: message || '',
            cancelable: false
          };

          if (options && options.cancelable) {
            config.cancelable = options.cancelable;
          }

          var defaultPositiveText = 'OK';
          var validButtons = buttons ? buttons.slice(0, 3) : [{
            text: defaultPositiveText
          }];
          var buttonPositive = validButtons.pop();
          var buttonNegative = validButtons.pop();
          var buttonNeutral = validButtons.pop();

          if (buttonNeutral) {
            config.buttonNeutral = buttonNeutral.text || '';
          }

          if (buttonNegative) {
            config.buttonNegative = buttonNegative.text || '';
          }

          if (buttonPositive) {
            config.buttonPositive = buttonPositive.text || defaultPositiveText;
          }

          var onAction = function onAction(action, buttonKey) {
            if (action === constants.buttonClicked) {
              if (buttonKey === constants.buttonNeutral) {
                buttonNeutral.onPress && buttonNeutral.onPress();
              } else if (buttonKey === constants.buttonNegative) {
                buttonNegative.onPress && buttonNegative.onPress();
              } else if (buttonKey === constants.buttonPositive) {
                buttonPositive.onPress && buttonPositive.onPress();
              }
            } else if (action === constants.dismissed) {
              options && options.onDismiss && options.onDismiss();
            }
          };

          var onError = function onError(errorMessage) {
            return console.warn(errorMessage);
          };

          _NativeDialogManagerAndroid.default.showAlert(config, onError, onAction);
        }
      }
    }, {
      key: "prompt",
      value: function prompt(title, message, callbackOrButtons) {
        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'plain-text';
        var defaultValue = arguments.length > 4 ? arguments[4] : undefined;
        var keyboardType = arguments.length > 5 ? arguments[5] : undefined;

        if (_Platform.default.OS === 'ios') {
          var callbacks = [];
          var buttons = [];
          var cancelButtonKey;
          var destructiveButtonKey;

          if (typeof callbackOrButtons === 'function') {
            callbacks = [callbackOrButtons];
          } else if (Array.isArray(callbackOrButtons)) {
            callbackOrButtons.forEach(function (btn, index) {
              callbacks[index] = btn.onPress;

              if (btn.style === 'cancel') {
                cancelButtonKey = String(index);
              } else if (btn.style === 'destructive') {
                destructiveButtonKey = String(index);
              }

              if (btn.text || index < (callbackOrButtons || []).length - 1) {
                var btnDef = {};
                btnDef[index] = btn.text || '';
                buttons.push(btnDef);
              }
            });
          }

          _RCTAlertManager.default.alertWithArgs({
            title: title || '',
            message: message || undefined,
            buttons: buttons,
            type: type || undefined,
            defaultValue: defaultValue,
            cancelButtonKey: cancelButtonKey,
            destructiveButtonKey: destructiveButtonKey,
            keyboardType: keyboardType
          }, function (id, value) {
            var cb = callbacks[id];
            cb && cb(value);
          });
        }
      }
    }]);
    return Alert;
  }();

  module.exports = Alert;
},138,[3,16,17,80,139,140],"node_modules/react-native/Libraries/Alert/Alert.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('DialogManagerAndroid');

  exports.default = _default;
},139,[5],"node_modules/react-native/Libraries/NativeModules/specs/NativeDialogManagerAndroid.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeDialogManagerAndroid = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../NativeModules/specs/NativeDialogManagerAndroid"));

  function emptyCallback() {}

  module.exports = {
    alertWithArgs: function alertWithArgs(args, callback) {
      if (!_NativeDialogManagerAndroid.default) {
        return;
      }

      _NativeDialogManagerAndroid.default.showAlert(args, emptyCallback, callback || emptyCallback);
    }
  };
},140,[3,139],"node_modules/react-native/Libraries/Alert/RCTAlertManager.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var navigator = global.navigator;

  if (navigator === undefined) {
    global.navigator = navigator = {};
  }

  _$$_REQUIRE(_dependencyMap[0], "../Utilities/PolyfillFunctions").polyfillObjectProperty(navigator, 'product', function () {
    return 'ReactNative';
  });
},141,[94],"node_modules/react-native/Libraries/Core/setUpNavigator.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var registerModule;

  if (global.RN$Bridgeless && global.RN$registerCallableModule) {
    registerModule = global.RN$registerCallableModule;
  } else {
    var BatchedBridge = _$$_REQUIRE(_dependencyMap[0], "../BatchedBridge/BatchedBridge");

    registerModule = function registerModule(moduleName, factory) {
      return BatchedBridge.registerLazyCallableModule(moduleName, factory);
    };
  }

  registerModule('Systrace', function () {
    return _$$_REQUIRE(_dependencyMap[1], "../Performance/Systrace");
  });
  registerModule('JSTimers', function () {
    return _$$_REQUIRE(_dependencyMap[2], "./Timers/JSTimers");
  });
  registerModule('HeapCapture', function () {
    return _$$_REQUIRE(_dependencyMap[3], "../HeapCapture/HeapCapture");
  });
  registerModule('SamplingProfiler', function () {
    return _$$_REQUIRE(_dependencyMap[4], "../Performance/SamplingProfiler");
  });
  registerModule('RCTLog', function () {
    return _$$_REQUIRE(_dependencyMap[5], "../Utilities/RCTLog");
  });
  registerModule('RCTDeviceEventEmitter', function () {
    return _$$_REQUIRE(_dependencyMap[6], "../EventEmitter/RCTDeviceEventEmitter");
  });
  registerModule('RCTNativeAppEventEmitter', function () {
    return _$$_REQUIRE(_dependencyMap[7], "../EventEmitter/RCTNativeAppEventEmitter");
  });
  registerModule('GlobalPerformanceLogger', function () {
    return _$$_REQUIRE(_dependencyMap[8], "../Utilities/GlobalPerformanceLogger");
  });
  registerModule('JSDevSupportModule', function () {
    return _$$_REQUIRE(_dependencyMap[9], "../Utilities/JSDevSupportModule");
  });

  if (__DEV__ && !global.__RCTProfileIsProfiling) {
    registerModule('HMRClient', function () {
      return _$$_REQUIRE(_dependencyMap[10], "../Utilities/HMRClient");
    });
  } else {
    registerModule('HMRClient', function () {
      return _$$_REQUIRE(_dependencyMap[11], "../Utilities/HMRClientProdShim");
    });
  }
},142,[14,23,105,143,145,147,30,148,118,149,151,160],"node_modules/react-native/Libraries/Core/setUpBatchedBridge.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeJSCHeapCapture = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./NativeJSCHeapCapture"));

  var HeapCapture = {
    captureHeap: function captureHeap(path) {
      var error = null;

      try {
        global.nativeCaptureHeap(path);
        console.log('HeapCapture.captureHeap succeeded: ' + path);
      } catch (e) {
        console.log('HeapCapture.captureHeap error: ' + e.toString());
        error = e.toString();
      }

      if (_NativeJSCHeapCapture.default) {
        _NativeJSCHeapCapture.default.captureComplete(path, error);
      }
    }
  };
  module.exports = HeapCapture;
},143,[3,144],"node_modules/react-native/Libraries/HeapCapture/HeapCapture.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('JSCHeapCapture');

  exports.default = _default;
},144,[5],"node_modules/react-native/Libraries/HeapCapture/NativeJSCHeapCapture.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var SamplingProfiler = {
    poke: function poke(token) {
      var error = null;
      var result = null;

      try {
        result = global.pokeSamplingProfiler();

        if (result === null) {
          console.log('The JSC Sampling Profiler has started');
        } else {
          console.log('The JSC Sampling Profiler has stopped');
        }
      } catch (e) {
        console.log('Error occurred when restarting Sampling Profiler: ' + e.toString());
        error = e.toString();
      }

      var NativeJSCSamplingProfiler = _$$_REQUIRE(_dependencyMap[0], "./NativeJSCSamplingProfiler").default;

      if (NativeJSCSamplingProfiler) {
        NativeJSCSamplingProfiler.operationComplete(token, result, error);
      }
    }
  };
  module.exports = SamplingProfiler;
},145,[146],"node_modules/react-native/Libraries/Performance/SamplingProfiler.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('JSCSamplingProfiler');

  exports.default = _default;
},146,[5],"node_modules/react-native/Libraries/Performance/NativeJSCSamplingProfiler.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var levelsMap = {
    log: 'log',
    info: 'info',
    warn: 'warn',
    error: 'error',
    fatal: 'error'
  };
  var warningHandler = null;
  var RCTLog = {
    logIfNoNativeHook: function logIfNoNativeHook(level) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (typeof global.nativeLoggingHook === 'undefined') {
        RCTLog.logToConsole.apply(RCTLog, [level].concat(args));
      } else {
        if (warningHandler && level === 'warn') {
          warningHandler.apply(void 0, args);
        }
      }
    },
    logToConsole: function logToConsole(level) {
      var _console;

      var logFn = levelsMap[level];

      _$$_REQUIRE(_dependencyMap[0], "invariant")(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap).toString());

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      (_console = console)[logFn].apply(_console, args);
    },
    setWarningHandler: function setWarningHandler(handler) {
      warningHandler = handler;
    }
  };
  module.exports = RCTLog;
},147,[6],"node_modules/react-native/Libraries/Utilities/RCTLog.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0], "./RCTDeviceEventEmitter");
},148,[30],"node_modules/react-native/Libraries/EventEmitter/RCTNativeAppEventEmitter.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeJSDevSupport = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./NativeJSDevSupport"));

  var JSDevSupportModule = {
    getJSHierarchy: function getJSHierarchy(tag) {
      if (_NativeJSDevSupport.default) {
        var constants = _NativeJSDevSupport.default.getConstants();

        try {
          var computeComponentStackForErrorReporting = _$$_REQUIRE(_dependencyMap[2], "../Renderer/shims/ReactNative").__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.computeComponentStackForErrorReporting;

          var componentStack = computeComponentStackForErrorReporting(tag);

          if (!componentStack) {
            _NativeJSDevSupport.default.onFailure(constants.ERROR_CODE_VIEW_NOT_FOUND, "Component stack doesn't exist for tag " + tag);
          } else {
            _NativeJSDevSupport.default.onSuccess(componentStack);
          }
        } catch (e) {
          _NativeJSDevSupport.default.onFailure(constants.ERROR_CODE_EXCEPTION, e.message);
        }
      }
    }
  };
  module.exports = JSDevSupportModule;
},149,[3,150,85],"node_modules/react-native/Libraries/Utilities/JSDevSupportModule.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('JSDevSupport');

  exports.default = _default;
},150,[5],"node_modules/react-native/Libraries/Utilities/NativeJSDevSupport.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/slicedToArray"));

  var _NativeRedBox = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../NativeModules/specs/NativeRedBox"));

  var LogBoxData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3], "../LogBox/Data/LogBoxData"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var pendingEntryPoints = [];
  var hmrClient = null;
  var hmrUnavailableReason = null;
  var currentCompileErrorMessage = null;
  var didConnect = false;
  var pendingLogs = [];
  var HMRClient = {
    enable: function enable() {
      if (hmrUnavailableReason !== null) {
        throw new Error(hmrUnavailableReason);
      }

      _$$_REQUIRE(_dependencyMap[4], "invariant")(hmrClient, 'Expected HMRClient.setup() call at startup.');

      var LoadingView = _$$_REQUIRE(_dependencyMap[5], "./LoadingView");

      hmrClient.send(JSON.stringify({
        type: 'log-opt-in'
      }));
      var hasUpdates = hmrClient.hasPendingUpdates();

      if (hasUpdates) {
        LoadingView.showMessage('Refreshing...', 'refresh');
      }

      try {
        hmrClient.enable();
      } finally {
        if (hasUpdates) {
          LoadingView.hide();
        }
      }

      showCompileError();
    },
    disable: function disable() {
      _$$_REQUIRE(_dependencyMap[4], "invariant")(hmrClient, 'Expected HMRClient.setup() call at startup.');

      hmrClient.disable();
    },
    registerBundle: function registerBundle(requestUrl) {
      _$$_REQUIRE(_dependencyMap[4], "invariant")(hmrClient, 'Expected HMRClient.setup() call at startup.');

      pendingEntryPoints.push(requestUrl);
      registerBundleEntryPoints(hmrClient);
    },
    log: function log(level, data) {
      if (!hmrClient) {
        pendingLogs.push([level, data]);

        if (pendingLogs.length > 100) {
          pendingLogs.shift();
        }

        return;
      }

      try {
        hmrClient.send(JSON.stringify({
          type: 'log',
          level: level,
          data: data.map(function (item) {
            return typeof item === 'string' ? item : _$$_REQUIRE(_dependencyMap[6], "pretty-format")(item, {
              escapeString: true,
              highlight: true,
              maxDepth: 3,
              min: true,
              plugins: [_$$_REQUIRE(_dependencyMap[6], "pretty-format").plugins.ReactElement]
            });
          })
        }));
      } catch (error) {}
    },
    setup: function setup(platform, bundleEntry, host, port, isEnabled) {
      _$$_REQUIRE(_dependencyMap[4], "invariant")(platform, 'Missing required parameter `platform`');

      _$$_REQUIRE(_dependencyMap[4], "invariant")(bundleEntry, 'Missing required parameter `bundleEntry`');

      _$$_REQUIRE(_dependencyMap[4], "invariant")(host, 'Missing required parameter `host`');

      _$$_REQUIRE(_dependencyMap[4], "invariant")(!hmrClient, 'Cannot initialize hmrClient twice');

      var LoadingView = _$$_REQUIRE(_dependencyMap[5], "./LoadingView");

      var wsHost = port !== null && port !== '' ? host + ":" + port : host;
      var client = new (_$$_REQUIRE(_dependencyMap[7], "metro/src/lib/bundle-modules/HMRClient"))("ws://" + wsHost + "/hot");
      hmrClient = client;
      pendingEntryPoints.push("ws://" + wsHost + "/hot?bundleEntry=" + bundleEntry + "&platform=" + platform);
      client.on('connection-error', function (e) {
        var error = "Cannot connect to the Metro server.\n\nTry the following to fix the issue:\n- Ensure that the Metro server is running and available on the same network";

        if ("android" === 'ios') {
          error += "\n- Ensure that the Metro server URL is correctly set in AppDelegate";
        } else {
          error += "\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run 'adb devices' to see a list of connected devices\n- If you're on a physical device connected to the same machine, run 'adb reverse tcp:8081 tcp:8081' to forward requests from your device\n- If your device is on the same Wi-Fi network, set 'Debug server host & port for device' in 'Dev settings' to your machine's IP address and the port of the local dev server - e.g. 10.0.1.1:8081";
        }

        error += "\n\nURL: " + host + ":" + port + "\n\nError: " + e.message;
        setHMRUnavailableReason(error);
      });
      client.on('update-start', function (_ref) {
        var isInitialUpdate = _ref.isInitialUpdate;
        currentCompileErrorMessage = null;
        didConnect = true;

        if (client.isEnabled() && !isInitialUpdate) {
          LoadingView.showMessage('Refreshing...', 'refresh');
        }
      });
      client.on('update', function (_ref2) {
        var isInitialUpdate = _ref2.isInitialUpdate;

        if (client.isEnabled() && !isInitialUpdate) {
          dismissRedbox();
          LogBoxData.clear();
        }
      });
      client.on('update-done', function () {
        LoadingView.hide();
      });
      client.on('error', function (data) {
        LoadingView.hide();

        if (data.type === 'GraphNotFoundError') {
          client.close();
          setHMRUnavailableReason('The Metro server has restarted since the last edit. Reload to reconnect.');
        } else if (data.type === 'RevisionNotFoundError') {
          client.close();
          setHMRUnavailableReason('The Metro server and the client are out of sync. Reload to reconnect.');
        } else {
          currentCompileErrorMessage = data.type + " " + data.message;

          if (client.isEnabled()) {
            showCompileError();
          }
        }
      });
      client.on('close', function (data) {
        LoadingView.hide();
        setHMRUnavailableReason('Disconnected from the Metro server.');
      });

      if (isEnabled) {
        HMRClient.enable();
      } else {
        HMRClient.disable();
      }

      registerBundleEntryPoints(hmrClient);
      flushEarlyLogs(hmrClient);
    }
  };

  function setHMRUnavailableReason(reason) {
    _$$_REQUIRE(_dependencyMap[4], "invariant")(hmrClient, 'Expected HMRClient.setup() call at startup.');

    if (hmrUnavailableReason !== null) {
      return;
    }

    hmrUnavailableReason = reason;

    if (hmrClient.isEnabled() && didConnect) {
      console.warn(reason);
    }
  }

  function registerBundleEntryPoints(client) {
    if (hmrUnavailableReason) {
      _$$_REQUIRE(_dependencyMap[8], "./DevSettings").reload('Bundle Splitting – Metro disconnected');

      return;
    }

    if (pendingEntryPoints.length > 0) {
      client.send(JSON.stringify({
        type: 'register-entrypoints',
        entryPoints: pendingEntryPoints
      }));
      pendingEntryPoints.length = 0;
    }
  }

  function flushEarlyLogs(client) {
    try {
      pendingLogs.forEach(function (_ref3) {
        var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
            level = _ref4[0],
            data = _ref4[1];

        HMRClient.log(level, data);
      });
    } finally {
      pendingLogs.length = 0;
    }
  }

  function dismissRedbox() {
    if ("android" === 'ios' && _NativeRedBox.default != null && _NativeRedBox.default.dismiss != null) {
      _NativeRedBox.default.dismiss();
    } else {
      var NativeExceptionsManager = _$$_REQUIRE(_dependencyMap[9], "../Core/NativeExceptionsManager").default;

      NativeExceptionsManager && NativeExceptionsManager.dismissRedbox && NativeExceptionsManager.dismissRedbox();
    }
  }

  function showCompileError() {
    if (currentCompileErrorMessage === null) {
      return;
    }

    dismissRedbox();
    var message = currentCompileErrorMessage;
    currentCompileErrorMessage = null;
    var error = new Error(message);
    error.preventSymbolication = true;
    throw error;
  }

  module.exports = HMRClient;
},151,[3,8,152,64,6,153,100,156,158,79],"node_modules/react-native/Libraries/Utilities/HMRClient.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('RedBox');

  exports.default = _default;
},152,[5],"node_modules/react-native/Libraries/NativeModules/specs/NativeRedBox.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _ToastAndroid = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../Components/ToastAndroid/ToastAndroid"));

  var TOAST_SHORT_DELAY = 2000;
  var isVisible = false;
  module.exports = {
    showMessage: function showMessage(message, type) {
      if (!isVisible) {
        _ToastAndroid.default.show(message, _ToastAndroid.default.SHORT);

        isVisible = true;
        setTimeout(function () {
          isVisible = false;
        }, TOAST_SHORT_DELAY);
      }
    },
    hide: function hide() {}
  };
},153,[3,154],"node_modules/react-native/Libraries/Utilities/LoadingView.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeToastAndroid = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./NativeToastAndroid"));

  var ToastAndroid = {
    SHORT: _NativeToastAndroid.default.getConstants().SHORT,
    LONG: _NativeToastAndroid.default.getConstants().LONG,
    TOP: _NativeToastAndroid.default.getConstants().TOP,
    BOTTOM: _NativeToastAndroid.default.getConstants().BOTTOM,
    CENTER: _NativeToastAndroid.default.getConstants().CENTER,
    show: function show(message, duration) {
      _NativeToastAndroid.default.show(message, duration);
    },
    showWithGravity: function showWithGravity(message, duration, gravity) {
      _NativeToastAndroid.default.showWithGravity(message, duration, gravity);
    },
    showWithGravityAndOffset: function showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset) {
      _NativeToastAndroid.default.showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset);
    }
  };
  module.exports = ToastAndroid;
},154,[3,155],"node_modules/react-native/Libraries/Components/ToastAndroid/ToastAndroid.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.getEnforcing('ToastAndroid');

  exports.default = _default;
},155,[5],"node_modules/react-native/Libraries/Components/ToastAndroid/NativeToastAndroid.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  var inject = function inject(_ref) {
    var _ref$module = _slicedToArray(_ref.module, 2),
        id = _ref$module[0],
        code = _ref$module[1],
        sourceURL = _ref.sourceURL;

    if (global.globalEvalWithSourceUrl) {
      global.globalEvalWithSourceUrl(code, sourceURL);
    } else {
      eval(code);
    }
  };

  var injectUpdate = function injectUpdate(update) {
    update.added.forEach(inject);
    update.modified.forEach(inject);
  };

  var HMRClient = function (_EventEmitter) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(HMRClient, _EventEmitter);

    var _super = _createSuper(HMRClient);

    function HMRClient(url) {
      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, HMRClient);

      _this = _super.call(this);

      _defineProperty(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/assertThisInitialized")(_this), "_isEnabled", false);

      _defineProperty(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/assertThisInitialized")(_this), "_pendingUpdate", null);

      _defineProperty(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/assertThisInitialized")(_this), "_queue", []);

      _defineProperty(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/assertThisInitialized")(_this), "_state", "opening");

      _this._ws = new global.WebSocket(url);

      _this._ws.onopen = function () {
        _this._state = "open";

        _this.emit("open");

        _this._flushQueue();
      };

      _this._ws.onerror = function (error) {
        _this.emit("connection-error", error);
      };

      _this._ws.onclose = function () {
        _this._state = "closed";

        _this.emit("close");
      };

      _this._ws.onmessage = function (message) {
        var data = JSON.parse(message.data);

        switch (data.type) {
          case "bundle-registered":
            _this.emit("bundle-registered");

            break;

          case "update-start":
            _this.emit("update-start", data.body);

            break;

          case "update":
            _this.emit("update", data.body);

            break;

          case "update-done":
            _this.emit("update-done");

            break;

          case "error":
            _this.emit("error", data.body);

            break;

          default:
            _this.emit("error", {
              type: "unknown-message",
              message: data
            });

        }
      };

      _this.on("update", function (update) {
        if (_this._isEnabled) {
          injectUpdate(update);
        } else if (_this._pendingUpdate == null) {
          _this._pendingUpdate = update;
        } else {
          _this._pendingUpdate = mergeUpdates(_this._pendingUpdate, update);
        }
      });

      return _this;
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(HMRClient, [{
      key: "close",
      value: function close() {
        this._ws.close();
      }
    }, {
      key: "send",
      value: function send(message) {
        switch (this._state) {
          case "opening":
            this._queue.push(message);

            break;

          case "open":
            this._ws.send(message);

            break;

          case "closed":
            break;

          default:
            throw new Error("[WebSocketHMRClient] Unknown state: " + this._state);
        }
      }
    }, {
      key: "_flushQueue",
      value: function _flushQueue() {
        var _this2 = this;

        this._queue.forEach(function (message) {
          return _this2.send(message);
        });

        this._queue.length = 0;
      }
    }, {
      key: "enable",
      value: function enable() {
        this._isEnabled = true;
        var update = this._pendingUpdate;
        this._pendingUpdate = null;

        if (update != null) {
          injectUpdate(update);
        }
      }
    }, {
      key: "disable",
      value: function disable() {
        this._isEnabled = false;
      }
    }, {
      key: "isEnabled",
      value: function isEnabled() {
        return this._isEnabled;
      }
    }, {
      key: "hasPendingUpdates",
      value: function hasPendingUpdates() {
        return this._pendingUpdate != null;
      }
    }]);

    return HMRClient;
  }(_$$_REQUIRE(_dependencyMap[6], "eventemitter3"));

  function mergeUpdates(base, next) {
    var addedIDs = new Set();
    var deletedIDs = new Set();
    var moduleMap = new Map();
    applyUpdateLocally(base);
    applyUpdateLocally(next);

    function applyUpdateLocally(update) {
      update.deleted.forEach(function (id) {
        if (addedIDs.has(id)) {
          addedIDs.delete(id);
        } else {
          deletedIDs.add(id);
        }

        moduleMap.delete(id);
      });
      update.added.forEach(function (item) {
        var id = item.module[0];

        if (deletedIDs.has(id)) {
          deletedIDs.delete(id);
        } else {
          addedIDs.add(id);
        }

        moduleMap.set(id, item);
      });
      update.modified.forEach(function (item) {
        var id = item.module[0];
        moduleMap.set(id, item);
      });
    }

    var result = {
      isInitialUpdate: next.isInitialUpdate,
      revisionId: next.revisionId,
      added: [],
      modified: [],
      deleted: []
    };
    deletedIDs.forEach(function (id) {
      result.deleted.push(id);
    });
    moduleMap.forEach(function (item, id) {
      if (deletedIDs.has(id)) {
        return;
      }

      if (addedIDs.has(id)) {
        result.added.push(item);
      } else {
        result.modified.push(item);
      }
    });
    return result;
  }

  module.exports = HMRClient;
},156,[31,32,35,16,34,17,157],"node_modules/metro/src/lib/bundle-modules/HMRClient.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var has = Object.prototype.hasOwnProperty,
      prefix = '~';

  function Events() {}

  if (Object.create) {
    Events.prototype = Object.create(null);
    if (!new Events().__proto__) prefix = false;
  }

  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }

  function addListener(emitter, event, fn, context, once) {
    if (typeof fn !== 'function') {
      throw new TypeError('The listener must be a function');
    }

    var listener = new EE(fn, context || emitter, once),
        evt = prefix ? prefix + event : event;
    if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);else emitter._events[evt] = [emitter._events[evt], listener];
    return emitter;
  }

  function clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0) emitter._events = new Events();else delete emitter._events[evt];
  }

  function EventEmitter() {
    this._events = new Events();
    this._eventsCount = 0;
  }

  EventEmitter.prototype.eventNames = function eventNames() {
    var names = [],
        events,
        name;
    if (this._eventsCount === 0) return names;

    for (name in events = this._events) {
      if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    }

    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events));
    }

    return names;
  };

  EventEmitter.prototype.listeners = function listeners(event) {
    var evt = prefix ? prefix + event : event,
        handlers = this._events[evt];
    if (!handlers) return [];
    if (handlers.fn) return [handlers.fn];

    for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
      ee[i] = handlers[i].fn;
    }

    return ee;
  };

  EventEmitter.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix ? prefix + event : event,
        listeners = this._events[evt];
    if (!listeners) return 0;
    if (listeners.fn) return 1;
    return listeners.length;
  };

  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return false;
    var listeners = this._events[evt],
        len = arguments.length,
        args,
        i;

    if (listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

      switch (len) {
        case 1:
          return listeners.fn.call(listeners.context), true;

        case 2:
          return listeners.fn.call(listeners.context, a1), true;

        case 3:
          return listeners.fn.call(listeners.context, a1, a2), true;

        case 4:
          return listeners.fn.call(listeners.context, a1, a2, a3), true;

        case 5:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;

        case 6:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }

      for (i = 1, args = new Array(len - 1); i < len; i++) {
        args[i - 1] = arguments[i];
      }

      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length,
          j;

      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

        switch (len) {
          case 1:
            listeners[i].fn.call(listeners[i].context);
            break;

          case 2:
            listeners[i].fn.call(listeners[i].context, a1);
            break;

          case 3:
            listeners[i].fn.call(listeners[i].context, a1, a2);
            break;

          case 4:
            listeners[i].fn.call(listeners[i].context, a1, a2, a3);
            break;

          default:
            if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
              args[j - 1] = arguments[j];
            }
            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }

    return true;
  };

  EventEmitter.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
  };

  EventEmitter.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
  };

  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return this;

    if (!fn) {
      clearEvent(this, evt);
      return this;
    }

    var listeners = this._events[evt];

    if (listeners.fn) {
      if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
        clearEvent(this, evt);
      }
    } else {
      for (var i = 0, events = [], length = listeners.length; i < length; i++) {
        if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
          events.push(listeners[i]);
        }
      }

      if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else clearEvent(this, evt);
    }

    return this;
  };

  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;

    if (event) {
      evt = prefix ? prefix + event : event;
      if (this._events[evt]) clearEvent(this, evt);
    } else {
      this._events = new Events();
      this._eventsCount = 0;
    }

    return this;
  };

  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;
  EventEmitter.prefixed = prefix;
  EventEmitter.EventEmitter = EventEmitter;

  if ('undefined' !== typeof module) {
    module.exports = EventEmitter;
  }
},157,[],"node_modules/eventemitter3/index.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/getPrototypeOf"));

  var _NativeDevSettings = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "../NativeModules/specs/NativeDevSettings"));

  var _NativeEventEmitter2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "../EventEmitter/NativeEventEmitter"));

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var DevSettings = function (_NativeEventEmitter) {
    (0, _inherits2.default)(DevSettings, _NativeEventEmitter);

    var _super = _createSuper(DevSettings);

    function DevSettings() {
      var _this;

      (0, _classCallCheck2.default)(this, DevSettings);
      _this = _super.call(this, _NativeDevSettings.default);
      _this._menuItems = new Map();
      return _this;
    }

    (0, _createClass2.default)(DevSettings, [{
      key: "addMenuItem",
      value: function addMenuItem(title, handler) {
        var oldHandler = this._menuItems.get(title);

        if (oldHandler != null) {
          this.removeListener('didPressMenuItem', oldHandler);
        } else {
          _NativeDevSettings.default.addMenuItem(title);
        }

        this._menuItems.set(title, handler);

        this.addListener('didPressMenuItem', function (event) {
          if (event.title === title) {
            handler();
          }
        });
      }
    }, {
      key: "reload",
      value: function reload(reason) {
        if (typeof _NativeDevSettings.default.reloadWithReason === 'function') {
          _NativeDevSettings.default.reloadWithReason(reason || 'Uncategorized from JS');
        } else {
          _NativeDevSettings.default.reload();
        }
      }
    }, {
      key: "onFastRefresh",
      value: function onFastRefresh() {
        if (typeof _NativeDevSettings.default.onFastRefresh === 'function') {
          _NativeDevSettings.default.onFastRefresh();
        }
      }
    }]);
    return DevSettings;
  }(_NativeEventEmitter2.default);

  var NoopDevSettings = function () {
    function NoopDevSettings() {
      (0, _classCallCheck2.default)(this, NoopDevSettings);
    }

    (0, _createClass2.default)(NoopDevSettings, [{
      key: "addMenuItem",
      value: function addMenuItem(title, handler) {}
    }, {
      key: "reload",
      value: function reload() {}
    }]);
    return NoopDevSettings;
  }();

  module.exports = __DEV__ ? new DevSettings() : new NoopDevSettings();
},158,[3,16,17,35,32,31,159,126],"node_modules/react-native/Libraries/Utilities/DevSettings.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.getEnforcing('DevSettings');

  exports.default = _default;
},159,[5],"node_modules/react-native/Libraries/NativeModules/specs/NativeDevSettings.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var HMRClientProdShim = {
    setup: function setup() {},
    enable: function enable() {
      console.error('Fast Refresh is disabled in JavaScript bundles built in production mode. ' + 'Did you forget to run Metro?');
    },
    disable: function disable() {},
    registerBundle: function registerBundle() {},
    log: function log() {}
  };
  module.exports = HMRClientProdShim;
},160,[],"node_modules/react-native/Libraries/Utilities/HMRClientProdShim.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function __fetchSegment(segmentId, options, callback) {
    var SegmentFetcher = _$$_REQUIRE(_dependencyMap[0], "./SegmentFetcher/NativeSegmentFetcher").default;

    SegmentFetcher.fetchSegment(segmentId, options, function (errorObject) {
      if (errorObject) {
        var error = new Error(errorObject.message);
        error.code = errorObject.code;
        callback(error);
      }

      callback(null);
    });
  }

  global.__fetchSegment = __fetchSegment;

  function __getSegment(segmentId, options, callback) {
    var SegmentFetcher = _$$_REQUIRE(_dependencyMap[0], "./SegmentFetcher/NativeSegmentFetcher").default;

    if (!SegmentFetcher.getSegment) {
      throw new Error('SegmentFetcher.getSegment must be defined');
    }

    SegmentFetcher.getSegment(segmentId, options, function (errorObject, path) {
      if (errorObject) {
        var error = new Error(errorObject.message);
        error.code = errorObject.code;
        callback(error);
      }

      callback(null, path);
    });
  }

  global.__getSegment = __getSegment;
},161,[162],"node_modules/react-native/Libraries/Core/setUpSegmentFetcher.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.getEnforcing('SegmentFetcher');

  exports.default = _default;
},162,[5],"node_modules/react-native/Libraries/Core/SegmentFetcher/NativeSegmentFetcher.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  _$$_REQUIRE(_dependencyMap[0], "./ReactNativeVersionCheck").checkVersions();
},163,[164],"node_modules/react-native/Libraries/Core/checkNativeVersion.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _Platform = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../Utilities/Platform"));

  exports.checkVersions = function checkVersions() {
    var nativeVersion = _Platform.default.constants.reactNativeVersion;

    if (_$$_REQUIRE(_dependencyMap[2], "./ReactNativeVersion").version.major !== nativeVersion.major || _$$_REQUIRE(_dependencyMap[2], "./ReactNativeVersion").version.minor !== nativeVersion.minor) {
      console.error("React Native version mismatch.\n\nJavaScript version: " + _formatVersion(_$$_REQUIRE(_dependencyMap[2], "./ReactNativeVersion").version) + "\n" + ("Native version: " + _formatVersion(nativeVersion) + "\n\n") + 'Make sure that you have rebuilt the native code. If the problem ' + 'persists try clearing the Watchman and packager caches with ' + '`watchman watch-del-all && react-native start --reset-cache`.');
    }
  };

  function _formatVersion(version) {
    return version.major + "." + version.minor + "." + version.patch + (version.prerelease != undefined ? "-" + version.prerelease : '');
  }
},164,[3,80,165],"node_modules/react-native/Libraries/Core/ReactNativeVersionCheck.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  exports.version = {
    major: 0,
    minor: 63,
    patch: 4,
    prerelease: null
  };
},165,[],"node_modules/react-native/Libraries/Core/ReactNativeVersion.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _Platform = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../Utilities/Platform"));

  if (__DEV__) {
    if (!global.RN$Bridgeless) {
      if (!global.__RCTProfileIsProfiling) {
        _$$_REQUIRE(_dependencyMap[2], "./setUpReactDevTools");

        var JSInspector = _$$_REQUIRE(_dependencyMap[3], "../JSInspector/JSInspector");

        JSInspector.registerAgent(_$$_REQUIRE(_dependencyMap[4], "../JSInspector/NetworkAgent"));
      }

      var isLikelyARealBrowser = global.navigator != null && global.navigator.appName === 'Netscape';

      if (!_Platform.default.isTesting) {
        var HMRClient = _$$_REQUIRE(_dependencyMap[5], "../Utilities/HMRClient");

        if (console._isPolyfilled) {
          ['trace', 'info', 'warn', 'error', 'log', 'group', 'groupCollapsed', 'groupEnd', 'debug'].forEach(function (level) {
            var originalFunction = console[level];

            console[level] = function () {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              HMRClient.log(level, args);
              originalFunction.apply(console, args);
            };
          });
        } else {
          HMRClient.log('log', ["JavaScript logs will appear in your " + (isLikelyARealBrowser ? 'browser' : 'environment') + " console"]);
        }
      }

      _$$_REQUIRE(_dependencyMap[6], "./setUpReactRefresh");
    }
  }
},166,[3,80,167,185,186,151,188],"node_modules/react-native/Libraries/Core/setUpDeveloperTools.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (__DEV__) {
    var reactDevTools = _$$_REQUIRE(_dependencyMap[0], "react-devtools-core");

    var connectToDevTools = function connectToDevTools() {
      if (!window.document) {
        var AppState = _$$_REQUIRE(_dependencyMap[1], "../AppState/AppState");

        var getDevServer = _$$_REQUIRE(_dependencyMap[2], "./Devtools/getDevServer");

        var isAppActive = function isAppActive() {
          return AppState.currentState !== 'background';
        };

        var devServer = getDevServer();
        var host = devServer.bundleLoadedFromServer ? devServer.url.replace(/https?:\/\//, '').split(':')[0] : 'localhost';
        var port = window.__REACT_DEVTOOLS_PORT__ != null ? window.__REACT_DEVTOOLS_PORT__ : 8097;

        var WebSocket = _$$_REQUIRE(_dependencyMap[3], "../WebSocket/WebSocket");

        var ws = new WebSocket('ws://' + host + ':' + port);

        var viewConfig = _$$_REQUIRE(_dependencyMap[4], "../Components/View/ReactNativeViewViewConfig");

        reactDevTools.connectToDevTools({
          isAppActive: isAppActive,
          resolveRNStyle: _$$_REQUIRE(_dependencyMap[5], "../StyleSheet/flattenStyle"),
          nativeStyleEditorValidAttributes: Object.keys(viewConfig.validAttributes.style),
          websocket: ws
        });
      }
    };

    var RCTNativeAppEventEmitter = _$$_REQUIRE(_dependencyMap[6], "../EventEmitter/RCTNativeAppEventEmitter");

    RCTNativeAppEventEmitter.addListener('RCTDevMenuShown', connectToDevTools);
    connectToDevTools();
  }
},167,[168,171,72,127,174,184,148],"node_modules/react-native/Libraries/Core/setUpReactDevTools.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  (function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (typeof exports === 'object') exports["ReactDevToolsBackend"] = factory();else root["ReactDevToolsBackend"] = factory();
  })(window, function () {
    return function (modules) {
      var installedModules = {};

      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }

        var module = installedModules[moduleId] = {
          i: moduleId,
          l: false,
          exports: {}
        };
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.l = true;
        return module.exports;
      }

      __webpack_require__.m = modules;
      __webpack_require__.c = installedModules;

      __webpack_require__.d = function (exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
          Object.defineProperty(exports, name, {
            enumerable: true,
            get: getter
          });
        }
      };

      __webpack_require__.r = function (exports) {
        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
          Object.defineProperty(exports, Symbol.toStringTag, {
            value: 'Module'
          });
        }

        Object.defineProperty(exports, '__esModule', {
          value: true
        });
      };

      __webpack_require__.t = function (value, mode) {
        if (mode & 1) value = __webpack_require__(value);
        if (mode & 8) return value;
        if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;
        var ns = Object.create(null);

        __webpack_require__.r(ns);

        Object.defineProperty(ns, 'default', {
          enumerable: true,
          value: value
        });
        if (mode & 2 && typeof value != 'string') for (var key in value) {
          __webpack_require__.d(ns, key, function (key) {
            return value[key];
          }.bind(null, key));
        }
        return ns;
      };

      __webpack_require__.n = function (module) {
        var getter = module && module.__esModule ? function getDefault() {
          return module['default'];
        } : function getModuleExports() {
          return module;
        };

        __webpack_require__.d(getter, 'a', getter);

        return getter;
      };

      __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };

      __webpack_require__.p = "";
      return __webpack_require__(__webpack_require__.s = 32);
    }([function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.d(__webpack_exports__, "s", function () {
        return __DEBUG__;
      });

      __webpack_require__.d(__webpack_exports__, "l", function () {
        return TREE_OPERATION_ADD;
      });

      __webpack_require__.d(__webpack_exports__, "m", function () {
        return TREE_OPERATION_REMOVE;
      });

      __webpack_require__.d(__webpack_exports__, "o", function () {
        return TREE_OPERATION_REORDER_CHILDREN;
      });

      __webpack_require__.d(__webpack_exports__, "r", function () {
        return TREE_OPERATION_UPDATE_TREE_BASE_DURATION;
      });

      __webpack_require__.d(__webpack_exports__, "q", function () {
        return TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS;
      });

      __webpack_require__.d(__webpack_exports__, "n", function () {
        return TREE_OPERATION_REMOVE_ROOT;
      });

      __webpack_require__.d(__webpack_exports__, "p", function () {
        return TREE_OPERATION_SET_SUBTREE_MODE;
      });

      __webpack_require__.d(__webpack_exports__, "g", function () {
        return PROFILING_FLAG_BASIC_SUPPORT;
      });

      __webpack_require__.d(__webpack_exports__, "h", function () {
        return PROFILING_FLAG_TIMELINE_SUPPORT;
      });

      __webpack_require__.d(__webpack_exports__, "a", function () {
        return LOCAL_STORAGE_FILTER_PREFERENCES_KEY;
      });

      __webpack_require__.d(__webpack_exports__, "i", function () {
        return SESSION_STORAGE_LAST_SELECTION_KEY;
      });

      __webpack_require__.d(__webpack_exports__, "c", function () {
        return LOCAL_STORAGE_OPEN_IN_EDITOR_URL;
      });

      __webpack_require__.d(__webpack_exports__, "j", function () {
        return SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY;
      });

      __webpack_require__.d(__webpack_exports__, "k", function () {
        return SESSION_STORAGE_RELOAD_AND_PROFILE_KEY;
      });

      __webpack_require__.d(__webpack_exports__, "d", function () {
        return LOCAL_STORAGE_SHOULD_BREAK_ON_CONSOLE_ERRORS;
      });

      __webpack_require__.d(__webpack_exports__, "e", function () {
        return LOCAL_STORAGE_SHOULD_PATCH_CONSOLE_KEY;
      });

      __webpack_require__.d(__webpack_exports__, "f", function () {
        return LOCAL_STORAGE_SHOW_INLINE_WARNINGS_AND_ERRORS_KEY;
      });

      __webpack_require__.d(__webpack_exports__, "b", function () {
        return LOCAL_STORAGE_HIDE_CONSOLE_LOGS_IN_STRICT_MODE;
      });

      var CHROME_WEBSTORE_EXTENSION_ID = 'fmkadmapgofadopljbjfkapdkoienihi';
      var INTERNAL_EXTENSION_ID = 'dnjnjgbfilfphmojnmhliehogmojhclc';
      var LOCAL_EXTENSION_ID = 'ikiahnapldjmdmpkmfhjdjilojjhgcbf';
      var __DEBUG__ = false;
      var __PERFORMANCE_PROFILE__ = false;
      var TREE_OPERATION_ADD = 1;
      var TREE_OPERATION_REMOVE = 2;
      var TREE_OPERATION_REORDER_CHILDREN = 3;
      var TREE_OPERATION_UPDATE_TREE_BASE_DURATION = 4;
      var TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS = 5;
      var TREE_OPERATION_REMOVE_ROOT = 6;
      var TREE_OPERATION_SET_SUBTREE_MODE = 7;
      var PROFILING_FLAG_BASIC_SUPPORT = 1;
      var PROFILING_FLAG_TIMELINE_SUPPORT = 2;
      var LOCAL_STORAGE_DEFAULT_TAB_KEY = 'React::DevTools::defaultTab';
      var LOCAL_STORAGE_FILTER_PREFERENCES_KEY = 'React::DevTools::componentFilters';
      var SESSION_STORAGE_LAST_SELECTION_KEY = 'React::DevTools::lastSelection';
      var LOCAL_STORAGE_OPEN_IN_EDITOR_URL = 'React::DevTools::openInEditorUrl';
      var LOCAL_STORAGE_PARSE_HOOK_NAMES_KEY = 'React::DevTools::parseHookNames';
      var SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY = 'React::DevTools::recordChangeDescriptions';
      var SESSION_STORAGE_RELOAD_AND_PROFILE_KEY = 'React::DevTools::reloadAndProfile';
      var LOCAL_STORAGE_SHOULD_BREAK_ON_CONSOLE_ERRORS = 'React::DevTools::breakOnConsoleErrors';
      var LOCAL_STORAGE_SHOULD_PATCH_CONSOLE_KEY = 'React::DevTools::appendComponentStack';
      var LOCAL_STORAGE_SHOW_INLINE_WARNINGS_AND_ERRORS_KEY = 'React::DevTools::showInlineWarningsAndErrors';
      var LOCAL_STORAGE_TRACE_UPDATES_ENABLED_KEY = 'React::DevTools::traceUpdatesEnabled';
      var LOCAL_STORAGE_HIDE_CONSOLE_LOGS_IN_STRICT_MODE = 'React::DevTools::hideConsoleLogsInStrictMode';
      var PROFILER_EXPORT_VERSION = 5;
      var CHANGE_LOG_URL = 'https://github.com/facebook/react/blob/main/packages/react-devtools/CHANGELOG.md';
      var UNSUPPORTED_VERSION_URL = 'https://reactjs.org/blog/2019/08/15/new-react-devtools.html#how-do-i-get-the-old-version-back';
      var REACT_DEVTOOLS_WORKPLACE_URL = 'https://fburl.com/react-devtools-workplace-group';
      var THEME_STYLES = {
        light: {
          '--color-attribute-name': '#ef6632',
          '--color-attribute-name-not-editable': '#23272f',
          '--color-attribute-name-inverted': 'rgba(255, 255, 255, 0.7)',
          '--color-attribute-value': '#1a1aa6',
          '--color-attribute-value-inverted': '#ffffff',
          '--color-attribute-editable-value': '#1a1aa6',
          '--color-background': '#ffffff',
          '--color-background-hover': 'rgba(0, 136, 250, 0.1)',
          '--color-background-inactive': '#e5e5e5',
          '--color-background-invalid': '#fff0f0',
          '--color-background-selected': '#0088fa',
          '--color-button-background': '#ffffff',
          '--color-button-background-focus': '#ededed',
          '--color-button': '#5f6673',
          '--color-button-disabled': '#cfd1d5',
          '--color-button-active': '#0088fa',
          '--color-button-focus': '#23272f',
          '--color-button-hover': '#23272f',
          '--color-border': '#eeeeee',
          '--color-commit-did-not-render-fill': '#cfd1d5',
          '--color-commit-did-not-render-fill-text': '#000000',
          '--color-commit-did-not-render-pattern': '#cfd1d5',
          '--color-commit-did-not-render-pattern-text': '#333333',
          '--color-commit-gradient-0': '#37afa9',
          '--color-commit-gradient-1': '#63b19e',
          '--color-commit-gradient-2': '#80b393',
          '--color-commit-gradient-3': '#97b488',
          '--color-commit-gradient-4': '#abb67d',
          '--color-commit-gradient-5': '#beb771',
          '--color-commit-gradient-6': '#cfb965',
          '--color-commit-gradient-7': '#dfba57',
          '--color-commit-gradient-8': '#efbb49',
          '--color-commit-gradient-9': '#febc38',
          '--color-commit-gradient-text': '#000000',
          '--color-component-name': '#6a51b2',
          '--color-component-name-inverted': '#ffffff',
          '--color-component-badge-background': 'rgba(0, 0, 0, 0.1)',
          '--color-component-badge-background-inverted': 'rgba(255, 255, 255, 0.25)',
          '--color-component-badge-count': '#777d88',
          '--color-component-badge-count-inverted': 'rgba(255, 255, 255, 0.7)',
          '--color-console-error-badge-text': '#ffffff',
          '--color-console-error-background': '#fff0f0',
          '--color-console-error-border': '#ffd6d6',
          '--color-console-error-icon': '#eb3941',
          '--color-console-error-text': '#fe2e31',
          '--color-console-warning-badge-text': '#000000',
          '--color-console-warning-background': '#fffbe5',
          '--color-console-warning-border': '#fff5c1',
          '--color-console-warning-icon': '#f4bd00',
          '--color-console-warning-text': '#64460c',
          '--color-context-background': 'rgba(0,0,0,.9)',
          '--color-context-background-hover': 'rgba(255, 255, 255, 0.1)',
          '--color-context-background-selected': '#178fb9',
          '--color-context-border': '#3d424a',
          '--color-context-text': '#ffffff',
          '--color-context-text-selected': '#ffffff',
          '--color-dim': '#777d88',
          '--color-dimmer': '#cfd1d5',
          '--color-dimmest': '#eff0f1',
          '--color-error-background': 'hsl(0, 100%, 97%)',
          '--color-error-border': 'hsl(0, 100%, 92%)',
          '--color-error-text': '#ff0000',
          '--color-expand-collapse-toggle': '#777d88',
          '--color-link': '#0000ff',
          '--color-modal-background': 'rgba(255, 255, 255, 0.75)',
          '--color-bridge-version-npm-background': '#eff0f1',
          '--color-bridge-version-npm-text': '#000000',
          '--color-bridge-version-number': '#0088fa',
          '--color-primitive-hook-badge-background': '#e5e5e5',
          '--color-primitive-hook-badge-text': '#5f6673',
          '--color-record-active': '#fc3a4b',
          '--color-record-hover': '#3578e5',
          '--color-record-inactive': '#0088fa',
          '--color-resize-bar': '#eeeeee',
          '--color-resize-bar-active': '#dcdcdc',
          '--color-resize-bar-border': '#d1d1d1',
          '--color-resize-bar-dot': '#333333',
          '--color-timeline-internal-module': '#d1d1d1',
          '--color-timeline-internal-module-hover': '#c9c9c9',
          '--color-timeline-internal-module-text': '#444',
          '--color-timeline-native-event': '#ccc',
          '--color-timeline-native-event-hover': '#aaa',
          '--color-timeline-network-primary': '#fcf3dc',
          '--color-timeline-network-primary-hover': '#f0e7d1',
          '--color-timeline-network-secondary': '#efc457',
          '--color-timeline-network-secondary-hover': '#e3ba52',
          '--color-timeline-priority-background': '#f6f6f6',
          '--color-timeline-priority-border': '#eeeeee',
          '--color-timeline-user-timing': '#c9cacd',
          '--color-timeline-user-timing-hover': '#93959a',
          '--color-timeline-react-idle': '#d3e5f6',
          '--color-timeline-react-idle-hover': '#c3d9ef',
          '--color-timeline-react-render': '#9fc3f3',
          '--color-timeline-react-render-hover': '#83afe9',
          '--color-timeline-react-render-text': '#11365e',
          '--color-timeline-react-commit': '#c88ff0',
          '--color-timeline-react-commit-hover': '#b281d6',
          '--color-timeline-react-commit-text': '#3e2c4a',
          '--color-timeline-react-layout-effects': '#b281d6',
          '--color-timeline-react-layout-effects-hover': '#9d71bd',
          '--color-timeline-react-layout-effects-text': '#3e2c4a',
          '--color-timeline-react-passive-effects': '#b281d6',
          '--color-timeline-react-passive-effects-hover': '#9d71bd',
          '--color-timeline-react-passive-effects-text': '#3e2c4a',
          '--color-timeline-react-schedule': '#9fc3f3',
          '--color-timeline-react-schedule-hover': '#2683E2',
          '--color-timeline-react-suspense-rejected': '#f1cc14',
          '--color-timeline-react-suspense-rejected-hover': '#ffdf37',
          '--color-timeline-react-suspense-resolved': '#a6e59f',
          '--color-timeline-react-suspense-resolved-hover': '#89d281',
          '--color-timeline-react-suspense-unresolved': '#c9cacd',
          '--color-timeline-react-suspense-unresolved-hover': '#93959a',
          '--color-timeline-thrown-error': '#ee1638',
          '--color-timeline-thrown-error-hover': '#da1030',
          '--color-timeline-text-color': '#000000',
          '--color-timeline-text-dim-color': '#ccc',
          '--color-timeline-react-work-border': '#eeeeee',
          '--color-search-match': 'yellow',
          '--color-search-match-current': '#f7923b',
          '--color-selected-tree-highlight-active': 'rgba(0, 136, 250, 0.1)',
          '--color-selected-tree-highlight-inactive': 'rgba(0, 0, 0, 0.05)',
          '--color-scroll-caret': 'rgba(150, 150, 150, 0.5)',
          '--color-tab-selected-border': '#0088fa',
          '--color-text': '#000000',
          '--color-text-invalid': '#ff0000',
          '--color-text-selected': '#ffffff',
          '--color-toggle-background-invalid': '#fc3a4b',
          '--color-toggle-background-on': '#0088fa',
          '--color-toggle-background-off': '#cfd1d5',
          '--color-toggle-text': '#ffffff',
          '--color-warning-background': '#fb3655',
          '--color-warning-background-hover': '#f82042',
          '--color-warning-text-color': '#ffffff',
          '--color-warning-text-color-inverted': '#fd4d69',
          '--color-scroll-thumb': '#c2c2c2',
          '--color-scroll-track': '#fafafa',
          '--color-tooltip-background': 'rgba(0, 0, 0, 0.9)',
          '--color-tooltip-text': '#ffffff'
        },
        dark: {
          '--color-attribute-name': '#9d87d2',
          '--color-attribute-name-not-editable': '#ededed',
          '--color-attribute-name-inverted': '#282828',
          '--color-attribute-value': '#cedae0',
          '--color-attribute-value-inverted': '#ffffff',
          '--color-attribute-editable-value': 'yellow',
          '--color-background': '#282c34',
          '--color-background-hover': 'rgba(255, 255, 255, 0.1)',
          '--color-background-inactive': '#3d424a',
          '--color-background-invalid': '#5c0000',
          '--color-background-selected': '#178fb9',
          '--color-button-background': '#282c34',
          '--color-button-background-focus': '#3d424a',
          '--color-button': '#afb3b9',
          '--color-button-active': '#61dafb',
          '--color-button-disabled': '#4f5766',
          '--color-button-focus': '#a2e9fc',
          '--color-button-hover': '#ededed',
          '--color-border': '#3d424a',
          '--color-commit-did-not-render-fill': '#777d88',
          '--color-commit-did-not-render-fill-text': '#000000',
          '--color-commit-did-not-render-pattern': '#666c77',
          '--color-commit-did-not-render-pattern-text': '#ffffff',
          '--color-commit-gradient-0': '#37afa9',
          '--color-commit-gradient-1': '#63b19e',
          '--color-commit-gradient-2': '#80b393',
          '--color-commit-gradient-3': '#97b488',
          '--color-commit-gradient-4': '#abb67d',
          '--color-commit-gradient-5': '#beb771',
          '--color-commit-gradient-6': '#cfb965',
          '--color-commit-gradient-7': '#dfba57',
          '--color-commit-gradient-8': '#efbb49',
          '--color-commit-gradient-9': '#febc38',
          '--color-commit-gradient-text': '#000000',
          '--color-component-name': '#61dafb',
          '--color-component-name-inverted': '#282828',
          '--color-component-badge-background': 'rgba(255, 255, 255, 0.25)',
          '--color-component-badge-background-inverted': 'rgba(0, 0, 0, 0.25)',
          '--color-component-badge-count': '#8f949d',
          '--color-component-badge-count-inverted': 'rgba(255, 255, 255, 0.7)',
          '--color-console-error-badge-text': '#000000',
          '--color-console-error-background': '#290000',
          '--color-console-error-border': '#5c0000',
          '--color-console-error-icon': '#eb3941',
          '--color-console-error-text': '#fc7f7f',
          '--color-console-warning-badge-text': '#000000',
          '--color-console-warning-background': '#332b00',
          '--color-console-warning-border': '#665500',
          '--color-console-warning-icon': '#f4bd00',
          '--color-console-warning-text': '#f5f2ed',
          '--color-context-background': 'rgba(255,255,255,.95)',
          '--color-context-background-hover': 'rgba(0, 136, 250, 0.1)',
          '--color-context-background-selected': '#0088fa',
          '--color-context-border': '#eeeeee',
          '--color-context-text': '#000000',
          '--color-context-text-selected': '#ffffff',
          '--color-dim': '#8f949d',
          '--color-dimmer': '#777d88',
          '--color-dimmest': '#4f5766',
          '--color-error-background': '#200',
          '--color-error-border': '#900',
          '--color-error-text': '#f55',
          '--color-expand-collapse-toggle': '#8f949d',
          '--color-link': '#61dafb',
          '--color-modal-background': 'rgba(0, 0, 0, 0.75)',
          '--color-bridge-version-npm-background': 'rgba(0, 0, 0, 0.25)',
          '--color-bridge-version-npm-text': '#ffffff',
          '--color-bridge-version-number': 'yellow',
          '--color-primitive-hook-badge-background': 'rgba(0, 0, 0, 0.25)',
          '--color-primitive-hook-badge-text': 'rgba(255, 255, 255, 0.7)',
          '--color-record-active': '#fc3a4b',
          '--color-record-hover': '#a2e9fc',
          '--color-record-inactive': '#61dafb',
          '--color-resize-bar': '#282c34',
          '--color-resize-bar-active': '#31363f',
          '--color-resize-bar-border': '#3d424a',
          '--color-resize-bar-dot': '#cfd1d5',
          '--color-timeline-internal-module': '#303542',
          '--color-timeline-internal-module-hover': '#363b4a',
          '--color-timeline-internal-module-text': '#7f8899',
          '--color-timeline-native-event': '#b2b2b2',
          '--color-timeline-native-event-hover': '#949494',
          '--color-timeline-network-primary': '#fcf3dc',
          '--color-timeline-network-primary-hover': '#e3dbc5',
          '--color-timeline-network-secondary': '#efc457',
          '--color-timeline-network-secondary-hover': '#d6af4d',
          '--color-timeline-priority-background': '#1d2129',
          '--color-timeline-priority-border': '#282c34',
          '--color-timeline-user-timing': '#c9cacd',
          '--color-timeline-user-timing-hover': '#93959a',
          '--color-timeline-react-idle': '#3d485b',
          '--color-timeline-react-idle-hover': '#465269',
          '--color-timeline-react-render': '#2683E2',
          '--color-timeline-react-render-hover': '#1a76d4',
          '--color-timeline-react-render-text': '#11365e',
          '--color-timeline-react-commit': '#731fad',
          '--color-timeline-react-commit-hover': '#611b94',
          '--color-timeline-react-commit-text': '#e5c1ff',
          '--color-timeline-react-layout-effects': '#611b94',
          '--color-timeline-react-layout-effects-hover': '#51167a',
          '--color-timeline-react-layout-effects-text': '#e5c1ff',
          '--color-timeline-react-passive-effects': '#611b94',
          '--color-timeline-react-passive-effects-hover': '#51167a',
          '--color-timeline-react-passive-effects-text': '#e5c1ff',
          '--color-timeline-react-schedule': '#2683E2',
          '--color-timeline-react-schedule-hover': '#1a76d4',
          '--color-timeline-react-suspense-rejected': '#f1cc14',
          '--color-timeline-react-suspense-rejected-hover': '#e4c00f',
          '--color-timeline-react-suspense-resolved': '#a6e59f',
          '--color-timeline-react-suspense-resolved-hover': '#89d281',
          '--color-timeline-react-suspense-unresolved': '#c9cacd',
          '--color-timeline-react-suspense-unresolved-hover': '#93959a',
          '--color-timeline-thrown-error': '#fb3655',
          '--color-timeline-thrown-error-hover': '#f82042',
          '--color-timeline-text-color': '#282c34',
          '--color-timeline-text-dim-color': '#555b66',
          '--color-timeline-react-work-border': '#3d424a',
          '--color-search-match': 'yellow',
          '--color-search-match-current': '#f7923b',
          '--color-selected-tree-highlight-active': 'rgba(23, 143, 185, 0.15)',
          '--color-selected-tree-highlight-inactive': 'rgba(255, 255, 255, 0.05)',
          '--color-scroll-caret': '#4f5766',
          '--color-shadow': 'rgba(0, 0, 0, 0.5)',
          '--color-tab-selected-border': '#178fb9',
          '--color-text': '#ffffff',
          '--color-text-invalid': '#ff8080',
          '--color-text-selected': '#ffffff',
          '--color-toggle-background-invalid': '#fc3a4b',
          '--color-toggle-background-on': '#178fb9',
          '--color-toggle-background-off': '#777d88',
          '--color-toggle-text': '#ffffff',
          '--color-warning-background': '#ee1638',
          '--color-warning-background-hover': '#da1030',
          '--color-warning-text-color': '#ffffff',
          '--color-warning-text-color-inverted': '#ee1638',
          '--color-scroll-thumb': '#afb3b9',
          '--color-scroll-track': '#313640',
          '--color-tooltip-background': 'rgba(255, 255, 255, 0.95)',
          '--color-tooltip-text': '#000000'
        },
        compact: {
          '--font-size-monospace-small': '9px',
          '--font-size-monospace-normal': '11px',
          '--font-size-monospace-large': '15px',
          '--font-size-sans-small': '10px',
          '--font-size-sans-normal': '12px',
          '--font-size-sans-large': '14px',
          '--line-height-data': '18px'
        },
        comfortable: {
          '--font-size-monospace-small': '10px',
          '--font-size-monospace-normal': '13px',
          '--font-size-monospace-large': '17px',
          '--font-size-sans-small': '12px',
          '--font-size-sans-normal': '14px',
          '--font-size-sans-large': '16px',
          '--line-height-data': '22px'
        }
      };
      var COMFORTABLE_LINE_HEIGHT = parseInt(THEME_STYLES.comfortable['--line-height-data'], 10);
      var COMPACT_LINE_HEIGHT = parseInt(THEME_STYLES.compact['--line-height-data'], 10);
    }, function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.d(__webpack_exports__, "e", function () {
        return ElementTypeClass;
      });

      __webpack_require__.d(__webpack_exports__, "f", function () {
        return ElementTypeContext;
      });

      __webpack_require__.d(__webpack_exports__, "h", function () {
        return ElementTypeFunction;
      });

      __webpack_require__.d(__webpack_exports__, "g", function () {
        return ElementTypeForwardRef;
      });

      __webpack_require__.d(__webpack_exports__, "i", function () {
        return ElementTypeHostComponent;
      });

      __webpack_require__.d(__webpack_exports__, "j", function () {
        return ElementTypeMemo;
      });

      __webpack_require__.d(__webpack_exports__, "k", function () {
        return ElementTypeOtherOrUnknown;
      });

      __webpack_require__.d(__webpack_exports__, "l", function () {
        return ElementTypeProfiler;
      });

      __webpack_require__.d(__webpack_exports__, "m", function () {
        return ElementTypeRoot;
      });

      __webpack_require__.d(__webpack_exports__, "n", function () {
        return ElementTypeSuspense;
      });

      __webpack_require__.d(__webpack_exports__, "o", function () {
        return ElementTypeSuspenseList;
      });

      __webpack_require__.d(__webpack_exports__, "p", function () {
        return ElementTypeTracingMarker;
      });

      __webpack_require__.d(__webpack_exports__, "b", function () {
        return ComponentFilterElementType;
      });

      __webpack_require__.d(__webpack_exports__, "a", function () {
        return ComponentFilterDisplayName;
      });

      __webpack_require__.d(__webpack_exports__, "d", function () {
        return ComponentFilterLocation;
      });

      __webpack_require__.d(__webpack_exports__, "c", function () {
        return ComponentFilterHOC;
      });

      __webpack_require__.d(__webpack_exports__, "q", function () {
        return StrictMode;
      });

      var ElementTypeClass = 1;
      var ElementTypeContext = 2;
      var ElementTypeFunction = 5;
      var ElementTypeForwardRef = 6;
      var ElementTypeHostComponent = 7;
      var ElementTypeMemo = 8;
      var ElementTypeOtherOrUnknown = 9;
      var ElementTypeProfiler = 10;
      var ElementTypeRoot = 11;
      var ElementTypeSuspense = 12;
      var ElementTypeSuspenseList = 13;
      var ElementTypeTracingMarker = 14;
      var ComponentFilterElementType = 1;
      var ComponentFilterDisplayName = 2;
      var ComponentFilterLocation = 3;
      var ComponentFilterHOC = 4;
      var StrictMode = 1;
    }, function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      (function (process) {
        __webpack_require__.d(__webpack_exports__, "c", function () {
          return getAllEnumerableKeys;
        });

        __webpack_require__.d(__webpack_exports__, "f", function () {
          return getDisplayName;
        });

        __webpack_require__.d(__webpack_exports__, "i", function () {
          return getUID;
        });

        __webpack_require__.d(__webpack_exports__, "m", function () {
          return utfEncodeString;
        });

        __webpack_require__.d(__webpack_exports__, "j", function () {
          return printOperationsArray;
        });

        __webpack_require__.d(__webpack_exports__, "e", function () {
          return getDefaultComponentFilters;
        });

        __webpack_require__.d(__webpack_exports__, "h", function () {
          return getInObject;
        });

        __webpack_require__.d(__webpack_exports__, "a", function () {
          return deletePathInObject;
        });

        __webpack_require__.d(__webpack_exports__, "k", function () {
          return renamePathInObject;
        });

        __webpack_require__.d(__webpack_exports__, "l", function () {
          return setInObject;
        });

        __webpack_require__.d(__webpack_exports__, "d", function () {
          return getDataType;
        });

        __webpack_require__.d(__webpack_exports__, "g", function () {
          return getDisplayNameForReactElement;
        });

        __webpack_require__.d(__webpack_exports__, "b", function () {
          return formatDataForPreview;
        });

        var lru_cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(19);

        var lru_cache__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(lru_cache__WEBPACK_IMPORTED_MODULE_0__);

        var react_is__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);

        var react_is__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__.n(react_is__WEBPACK_IMPORTED_MODULE_1__);

        var shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(17);

        var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(0);

        var react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1);

        var _storage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5);

        var _hydration__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(11);

        var _isArray__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(6);

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        function _toConsumableArray(arr) {
          return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
        }

        function _nonIterableSpread() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }

        function _unsupportedIterableToArray(o, minLen) {
          if (!o) return;
          if (typeof o === "string") return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor) n = o.constructor.name;
          if (n === "Map" || n === "Set") return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
        }

        function _iterableToArray(iter) {
          if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
        }

        function _arrayWithoutHoles(arr) {
          if (Array.isArray(arr)) return _arrayLikeToArray(arr);
        }

        function _arrayLikeToArray(arr, len) {
          if (len == null || len > arr.length) len = arr.length;

          for (var i = 0, arr2 = new Array(len); i < len; i++) {
            arr2[i] = arr[i];
          }

          return arr2;
        }

        var cachedDisplayNames = new WeakMap();
        var encodedStringCache = new lru_cache__WEBPACK_IMPORTED_MODULE_0___default.a({
          max: 1000
        });

        function alphaSortKeys(a, b) {
          if (a.toString() > b.toString()) {
            return 1;
          } else if (b.toString() > a.toString()) {
            return -1;
          } else {
            return 0;
          }
        }

        function getAllEnumerableKeys(obj) {
          var keys = new Set();
          var current = obj;

          var _loop = function _loop() {
            var currentKeys = [].concat(_toConsumableArray(Object.keys(current)), _toConsumableArray(Object.getOwnPropertySymbols(current)));
            var descriptors = Object.getOwnPropertyDescriptors(current);
            currentKeys.forEach(function (key) {
              if (descriptors[key].enumerable) {
                keys.add(key);
              }
            });
            current = Object.getPrototypeOf(current);
          };

          while (current != null) {
            _loop();
          }

          return keys;
        }

        function getDisplayName(type) {
          var fallbackName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Anonymous';
          var nameFromCache = cachedDisplayNames.get(type);

          if (nameFromCache != null) {
            return nameFromCache;
          }

          var displayName = fallbackName;

          if (typeof type.displayName === 'string') {
            displayName = type.displayName;
          } else if (typeof type.name === 'string' && type.name !== '') {
            displayName = type.name;
          }

          cachedDisplayNames.set(type, displayName);
          return displayName;
        }

        var uidCounter = 0;

        function getUID() {
          return ++uidCounter;
        }

        function utfDecodeString(array) {
          var string = '';

          for (var i = 0; i < array.length; i++) {
            var char = array[i];
            string += String.fromCodePoint(char);
          }

          return string;
        }

        function surrogatePairToCodePoint(charCode1, charCode2) {
          return ((charCode1 & 0x3ff) << 10) + (charCode2 & 0x3ff) + 0x10000;
        }

        function utfEncodeString(string) {
          var cached = encodedStringCache.get(string);

          if (cached !== undefined) {
            return cached;
          }

          var encoded = [];
          var i = 0;
          var charCode;

          while (i < string.length) {
            charCode = string.charCodeAt(i);

            if ((charCode & 0xf800) === 0xd800) {
              encoded.push(surrogatePairToCodePoint(charCode, string.charCodeAt(++i)));
            } else {
              encoded.push(charCode);
            }

            ++i;
          }

          encodedStringCache.set(string, encoded);
          return encoded;
        }

        function printOperationsArray(operations) {
          var rendererID = operations[0];
          var rootID = operations[1];
          var logs = ["operations for renderer:".concat(rendererID, " and root:").concat(rootID)];
          var i = 2;
          var stringTable = [null];
          var stringTableSize = operations[i++];
          var stringTableEnd = i + stringTableSize;

          while (i < stringTableEnd) {
            var nextLength = operations[i++];
            var nextString = utfDecodeString(operations.slice(i, i + nextLength));
            stringTable.push(nextString);
            i += nextLength;
          }

          while (i < operations.length) {
            var operation = operations[i];

            switch (operation) {
              case _constants__WEBPACK_IMPORTED_MODULE_3__["l"]:
                {
                  var _id = operations[i + 1];
                  var type = operations[i + 2];
                  i += 3;

                  if (type === react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__["m"]) {
                    logs.push("Add new root node ".concat(_id));
                    i++;
                    i++;
                    i++;
                    i++;
                  } else {
                    var parentID = operations[i];
                    i++;
                    i++;
                    var displayNameStringID = operations[i];
                    var displayName = stringTable[displayNameStringID];
                    i++;
                    i++;
                    logs.push("Add node ".concat(_id, " (").concat(displayName || 'null', ") as child of ").concat(parentID));
                  }

                  break;
                }

              case _constants__WEBPACK_IMPORTED_MODULE_3__["m"]:
                {
                  var removeLength = operations[i + 1];
                  i += 2;

                  for (var removeIndex = 0; removeIndex < removeLength; removeIndex++) {
                    var _id2 = operations[i];
                    i += 1;
                    logs.push("Remove node ".concat(_id2));
                  }

                  break;
                }

              case _constants__WEBPACK_IMPORTED_MODULE_3__["n"]:
                {
                  i += 1;
                  logs.push("Remove root ".concat(rootID));
                  break;
                }

              case _constants__WEBPACK_IMPORTED_MODULE_3__["p"]:
                {
                  var _id3 = operations[i + 1];
                  var mode = operations[i + 1];
                  i += 3;
                  logs.push("Mode ".concat(mode, " set for subtree with root ").concat(_id3));
                  break;
                }

              case _constants__WEBPACK_IMPORTED_MODULE_3__["o"]:
                {
                  var _id4 = operations[i + 1];
                  var numChildren = operations[i + 2];
                  i += 3;
                  var children = operations.slice(i, i + numChildren);
                  i += numChildren;
                  logs.push("Re-order node ".concat(_id4, " children ").concat(children.join(',')));
                  break;
                }

              case _constants__WEBPACK_IMPORTED_MODULE_3__["r"]:
                i += 3;
                break;

              case _constants__WEBPACK_IMPORTED_MODULE_3__["q"]:
                var id = operations[i + 1];
                var numErrors = operations[i + 2];
                var numWarnings = operations[i + 3];
                i += 4;
                logs.push("Node ".concat(id, " has ").concat(numErrors, " errors and ").concat(numWarnings, " warnings"));
                break;

              default:
                throw Error("Unsupported Bridge operation \"".concat(operation, "\""));
            }
          }

          console.log(logs.join('\n  '));
        }

        function getDefaultComponentFilters() {
          return [{
            type: react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__["b"],
            value: react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__["i"],
            isEnabled: true
          }];
        }

        function getSavedComponentFilters() {
          try {
            var raw = Object(_storage__WEBPACK_IMPORTED_MODULE_5__["a"])(_constants__WEBPACK_IMPORTED_MODULE_3__["a"]);

            if (raw != null) {
              return JSON.parse(raw);
            }
          } catch (error) {}

          return getDefaultComponentFilters();
        }

        function saveComponentFilters(componentFilters) {
          Object(_storage__WEBPACK_IMPORTED_MODULE_5__["b"])(_constants__WEBPACK_IMPORTED_MODULE_3__["a"], JSON.stringify(componentFilters));
        }

        function getAppendComponentStack() {
          try {
            var raw = Object(_storage__WEBPACK_IMPORTED_MODULE_5__["a"])(_constants__WEBPACK_IMPORTED_MODULE_3__["e"]);

            if (raw != null) {
              return JSON.parse(raw);
            }
          } catch (error) {}

          return true;
        }

        function setAppendComponentStack(value) {
          Object(_storage__WEBPACK_IMPORTED_MODULE_5__["b"])(_constants__WEBPACK_IMPORTED_MODULE_3__["e"], JSON.stringify(value));
        }

        function getBreakOnConsoleErrors() {
          try {
            var raw = Object(_storage__WEBPACK_IMPORTED_MODULE_5__["a"])(_constants__WEBPACK_IMPORTED_MODULE_3__["d"]);

            if (raw != null) {
              return JSON.parse(raw);
            }
          } catch (error) {}

          return false;
        }

        function setBreakOnConsoleErrors(value) {
          Object(_storage__WEBPACK_IMPORTED_MODULE_5__["b"])(_constants__WEBPACK_IMPORTED_MODULE_3__["d"], JSON.stringify(value));
        }

        function getHideConsoleLogsInStrictMode() {
          try {
            var raw = Object(_storage__WEBPACK_IMPORTED_MODULE_5__["a"])(_constants__WEBPACK_IMPORTED_MODULE_3__["b"]);

            if (raw != null) {
              return JSON.parse(raw);
            }
          } catch (error) {}

          return false;
        }

        function sethideConsoleLogsInStrictMode(value) {
          Object(_storage__WEBPACK_IMPORTED_MODULE_5__["b"])(_constants__WEBPACK_IMPORTED_MODULE_3__["b"], JSON.stringify(value));
        }

        function getShowInlineWarningsAndErrors() {
          try {
            var raw = Object(_storage__WEBPACK_IMPORTED_MODULE_5__["a"])(_constants__WEBPACK_IMPORTED_MODULE_3__["f"]);

            if (raw != null) {
              return JSON.parse(raw);
            }
          } catch (error) {}

          return true;
        }

        function setShowInlineWarningsAndErrors(value) {
          Object(_storage__WEBPACK_IMPORTED_MODULE_5__["b"])(_constants__WEBPACK_IMPORTED_MODULE_3__["f"], JSON.stringify(value));
        }

        function getDefaultOpenInEditorURL() {
          return typeof process.env.EDITOR_URL === 'string' ? process.env.EDITOR_URL : '';
        }

        function getOpenInEditorURL() {
          try {
            var raw = Object(_storage__WEBPACK_IMPORTED_MODULE_5__["a"])(_constants__WEBPACK_IMPORTED_MODULE_3__["c"]);

            if (raw != null) {
              return JSON.parse(raw);
            }
          } catch (error) {}

          return getDefaultOpenInEditorURL();
        }

        function separateDisplayNameAndHOCs(displayName, type) {
          if (displayName === null) {
            return [null, null];
          }

          var hocDisplayNames = null;

          switch (type) {
            case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__["e"]:
            case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__["g"]:
            case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__["h"]:
            case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__["j"]:
              if (displayName.indexOf('(') >= 0) {
                var matches = displayName.match(/[^()]+/g);

                if (matches != null) {
                  displayName = matches.pop();
                  hocDisplayNames = matches;
                }
              }

              break;

            default:
              break;
          }

          if (type === react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__["j"]) {
            if (hocDisplayNames === null) {
              hocDisplayNames = ['Memo'];
            } else {
              hocDisplayNames.unshift('Memo');
            }
          } else if (type === react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__["g"]) {
            if (hocDisplayNames === null) {
              hocDisplayNames = ['ForwardRef'];
            } else {
              hocDisplayNames.unshift('ForwardRef');
            }
          }

          return [displayName, hocDisplayNames];
        }

        function shallowDiffers(prev, next) {
          for (var attribute in prev) {
            if (!(attribute in next)) {
              return true;
            }
          }

          for (var _attribute in next) {
            if (prev[_attribute] !== next[_attribute]) {
              return true;
            }
          }

          return false;
        }

        function getInObject(object, path) {
          return path.reduce(function (reduced, attr) {
            if (reduced) {
              if (hasOwnProperty.call(reduced, attr)) {
                return reduced[attr];
              }

              if (typeof reduced[Symbol.iterator] === 'function') {
                return Array.from(reduced)[attr];
              }
            }

            return null;
          }, object);
        }

        function deletePathInObject(object, path) {
          var length = path.length;
          var last = path[length - 1];

          if (object != null) {
            var parent = getInObject(object, path.slice(0, length - 1));

            if (parent) {
              if (Object(_isArray__WEBPACK_IMPORTED_MODULE_7__["a"])(parent)) {
                parent.splice(last, 1);
              } else {
                delete parent[last];
              }
            }
          }
        }

        function renamePathInObject(object, oldPath, newPath) {
          var length = oldPath.length;

          if (object != null) {
            var parent = getInObject(object, oldPath.slice(0, length - 1));

            if (parent) {
              var lastOld = oldPath[length - 1];
              var lastNew = newPath[length - 1];
              parent[lastNew] = parent[lastOld];

              if (Object(_isArray__WEBPACK_IMPORTED_MODULE_7__["a"])(parent)) {
                parent.splice(lastOld, 1);
              } else {
                delete parent[lastOld];
              }
            }
          }
        }

        function setInObject(object, path, value) {
          var length = path.length;
          var last = path[length - 1];

          if (object != null) {
            var parent = getInObject(object, path.slice(0, length - 1));

            if (parent) {
              parent[last] = value;
            }
          }
        }

        function getDataType(data) {
          if (data === null) {
            return 'null';
          } else if (data === undefined) {
            return 'undefined';
          }

          if (Object(react_is__WEBPACK_IMPORTED_MODULE_1__["isElement"])(data)) {
            return 'react_element';
          }

          if (typeof HTMLElement !== 'undefined' && data instanceof HTMLElement) {
            return 'html_element';
          }

          var type = _typeof(data);

          switch (type) {
            case 'bigint':
              return 'bigint';

            case 'boolean':
              return 'boolean';

            case 'function':
              return 'function';

            case 'number':
              if (Number.isNaN(data)) {
                return 'nan';
              } else if (!Number.isFinite(data)) {
                return 'infinity';
              } else {
                return 'number';
              }

            case 'object':
              if (Object(_isArray__WEBPACK_IMPORTED_MODULE_7__["a"])(data)) {
                return 'array';
              } else if (ArrayBuffer.isView(data)) {
                return hasOwnProperty.call(data.constructor, 'BYTES_PER_ELEMENT') ? 'typed_array' : 'data_view';
              } else if (data.constructor && data.constructor.name === 'ArrayBuffer') {
                return 'array_buffer';
              } else if (typeof data[Symbol.iterator] === 'function') {
                var iterator = data[Symbol.iterator]();

                if (!iterator) {} else {
                  return iterator === data ? 'opaque_iterator' : 'iterator';
                }
              } else if (data.constructor && data.constructor.name === 'RegExp') {
                return 'regexp';
              } else {
                var toStringValue = Object.prototype.toString.call(data);

                if (toStringValue === '[object Date]') {
                  return 'date';
                } else if (toStringValue === '[object HTMLAllCollection]') {
                  return 'html_all_collection';
                }
              }

              return 'object';

            case 'string':
              return 'string';

            case 'symbol':
              return 'symbol';

            case 'undefined':
              if (Object.prototype.toString.call(data) === '[object HTMLAllCollection]') {
                return 'html_all_collection';
              }

              return 'undefined';

            default:
              return 'unknown';
          }
        }

        function getDisplayNameForReactElement(element) {
          var elementType = Object(react_is__WEBPACK_IMPORTED_MODULE_1__["typeOf"])(element);

          switch (elementType) {
            case react_is__WEBPACK_IMPORTED_MODULE_1__["ContextConsumer"]:
              return 'ContextConsumer';

            case react_is__WEBPACK_IMPORTED_MODULE_1__["ContextProvider"]:
              return 'ContextProvider';

            case react_is__WEBPACK_IMPORTED_MODULE_1__["ForwardRef"]:
              return 'ForwardRef';

            case react_is__WEBPACK_IMPORTED_MODULE_1__["Fragment"]:
              return 'Fragment';

            case react_is__WEBPACK_IMPORTED_MODULE_1__["Lazy"]:
              return 'Lazy';

            case react_is__WEBPACK_IMPORTED_MODULE_1__["Memo"]:
              return 'Memo';

            case react_is__WEBPACK_IMPORTED_MODULE_1__["Portal"]:
              return 'Portal';

            case react_is__WEBPACK_IMPORTED_MODULE_1__["Profiler"]:
              return 'Profiler';

            case react_is__WEBPACK_IMPORTED_MODULE_1__["StrictMode"]:
              return 'StrictMode';

            case react_is__WEBPACK_IMPORTED_MODULE_1__["Suspense"]:
              return 'Suspense';

            case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_2__["a"]:
              return 'SuspenseList';

            case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_2__["b"]:
              return 'TracingMarker';

            default:
              var type = element.type;

              if (typeof type === 'string') {
                return type;
              } else if (typeof type === 'function') {
                return getDisplayName(type, 'Anonymous');
              } else if (type != null) {
                return 'NotImplementedInDevtools';
              } else {
                return 'Element';
              }

          }
        }

        var MAX_PREVIEW_STRING_LENGTH = 50;

        function truncateForDisplay(string) {
          var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MAX_PREVIEW_STRING_LENGTH;

          if (string.length > length) {
            return string.substr(0, length) + '…';
          } else {
            return string;
          }
        }

        function formatDataForPreview(data, showFormattedValue) {
          if (data != null && hasOwnProperty.call(data, _hydration__WEBPACK_IMPORTED_MODULE_6__["b"].type)) {
            return showFormattedValue ? data[_hydration__WEBPACK_IMPORTED_MODULE_6__["b"].preview_long] : data[_hydration__WEBPACK_IMPORTED_MODULE_6__["b"].preview_short];
          }

          var type = getDataType(data);

          switch (type) {
            case 'html_element':
              return "<".concat(truncateForDisplay(data.tagName.toLowerCase()), " />");

            case 'function':
              return truncateForDisplay("\u0192 ".concat(typeof data.name === 'function' ? '' : data.name, "() {}"));

            case 'string':
              return "\"".concat(data, "\"");

            case 'bigint':
              return truncateForDisplay(data.toString() + 'n');

            case 'regexp':
              return truncateForDisplay(data.toString());

            case 'symbol':
              return truncateForDisplay(data.toString());

            case 'react_element':
              return "<".concat(truncateForDisplay(getDisplayNameForReactElement(data) || 'Unknown'), " />");

            case 'array_buffer':
              return "ArrayBuffer(".concat(data.byteLength, ")");

            case 'data_view':
              return "DataView(".concat(data.buffer.byteLength, ")");

            case 'array':
              if (showFormattedValue) {
                var formatted = '';

                for (var i = 0; i < data.length; i++) {
                  if (i > 0) {
                    formatted += ', ';
                  }

                  formatted += formatDataForPreview(data[i], false);

                  if (formatted.length > MAX_PREVIEW_STRING_LENGTH) {
                    break;
                  }
                }

                return "[".concat(truncateForDisplay(formatted), "]");
              } else {
                var length = hasOwnProperty.call(data, _hydration__WEBPACK_IMPORTED_MODULE_6__["b"].size) ? data[_hydration__WEBPACK_IMPORTED_MODULE_6__["b"].size] : data.length;
                return "Array(".concat(length, ")");
              }

            case 'typed_array':
              var shortName = "".concat(data.constructor.name, "(").concat(data.length, ")");

              if (showFormattedValue) {
                var _formatted = '';

                for (var _i = 0; _i < data.length; _i++) {
                  if (_i > 0) {
                    _formatted += ', ';
                  }

                  _formatted += data[_i];

                  if (_formatted.length > MAX_PREVIEW_STRING_LENGTH) {
                    break;
                  }
                }

                return "".concat(shortName, " [").concat(truncateForDisplay(_formatted), "]");
              } else {
                return shortName;
              }

            case 'iterator':
              var name = data.constructor.name;

              if (showFormattedValue) {
                var array = Array.from(data);
                var _formatted2 = '';

                for (var _i2 = 0; _i2 < array.length; _i2++) {
                  var entryOrEntries = array[_i2];

                  if (_i2 > 0) {
                    _formatted2 += ', ';
                  }

                  if (Object(_isArray__WEBPACK_IMPORTED_MODULE_7__["a"])(entryOrEntries)) {
                    var key = formatDataForPreview(entryOrEntries[0], true);
                    var value = formatDataForPreview(entryOrEntries[1], false);
                    _formatted2 += "".concat(key, " => ").concat(value);
                  } else {
                    _formatted2 += formatDataForPreview(entryOrEntries, false);
                  }

                  if (_formatted2.length > MAX_PREVIEW_STRING_LENGTH) {
                    break;
                  }
                }

                return "".concat(name, "(").concat(data.size, ") {").concat(truncateForDisplay(_formatted2), "}");
              } else {
                return "".concat(name, "(").concat(data.size, ")");
              }

            case 'opaque_iterator':
              {
                return data[Symbol.toStringTag];
              }

            case 'date':
              return data.toString();

            case 'object':
              if (showFormattedValue) {
                var keys = Array.from(getAllEnumerableKeys(data)).sort(alphaSortKeys);
                var _formatted3 = '';

                for (var _i3 = 0; _i3 < keys.length; _i3++) {
                  var _key = keys[_i3];

                  if (_i3 > 0) {
                    _formatted3 += ', ';
                  }

                  _formatted3 += "".concat(_key.toString(), ": ").concat(formatDataForPreview(data[_key], false));

                  if (_formatted3.length > MAX_PREVIEW_STRING_LENGTH) {
                    break;
                  }
                }

                return "{".concat(truncateForDisplay(_formatted3), "}");
              } else {
                return '{…}';
              }

            case 'boolean':
            case 'number':
            case 'infinity':
            case 'nan':
            case 'null':
            case 'undefined':
              return data;

            default:
              try {
                return truncateForDisplay(String(data));
              } catch (error) {
                return 'unserializable';
              }

          }
        }
      }).call(this, __webpack_require__(16));
    }, function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.d(__webpack_exports__, "a", function () {
        return CONCURRENT_MODE_NUMBER;
      });

      __webpack_require__.d(__webpack_exports__, "b", function () {
        return CONCURRENT_MODE_SYMBOL_STRING;
      });

      __webpack_require__.d(__webpack_exports__, "c", function () {
        return CONTEXT_NUMBER;
      });

      __webpack_require__.d(__webpack_exports__, "d", function () {
        return CONTEXT_SYMBOL_STRING;
      });

      __webpack_require__.d(__webpack_exports__, "r", function () {
        return SERVER_CONTEXT_SYMBOL_STRING;
      });

      __webpack_require__.d(__webpack_exports__, "e", function () {
        return DEPRECATED_ASYNC_MODE_SYMBOL_STRING;
      });

      __webpack_require__.d(__webpack_exports__, "f", function () {
        return FORWARD_REF_NUMBER;
      });

      __webpack_require__.d(__webpack_exports__, "g", function () {
        return FORWARD_REF_SYMBOL_STRING;
      });

      __webpack_require__.d(__webpack_exports__, "h", function () {
        return LAZY_NUMBER;
      });

      __webpack_require__.d(__webpack_exports__, "i", function () {
        return LAZY_SYMBOL_STRING;
      });

      __webpack_require__.d(__webpack_exports__, "j", function () {
        return MEMO_NUMBER;
      });

      __webpack_require__.d(__webpack_exports__, "k", function () {
        return MEMO_SYMBOL_STRING;
      });

      __webpack_require__.d(__webpack_exports__, "l", function () {
        return PROFILER_NUMBER;
      });

      __webpack_require__.d(__webpack_exports__, "m", function () {
        return PROFILER_SYMBOL_STRING;
      });

      __webpack_require__.d(__webpack_exports__, "n", function () {
        return PROVIDER_NUMBER;
      });

      __webpack_require__.d(__webpack_exports__, "o", function () {
        return PROVIDER_SYMBOL_STRING;
      });

      __webpack_require__.d(__webpack_exports__, "p", function () {
        return SCOPE_NUMBER;
      });

      __webpack_require__.d(__webpack_exports__, "q", function () {
        return SCOPE_SYMBOL_STRING;
      });

      __webpack_require__.d(__webpack_exports__, "s", function () {
        return STRICT_MODE_NUMBER;
      });

      __webpack_require__.d(__webpack_exports__, "t", function () {
        return STRICT_MODE_SYMBOL_STRING;
      });

      __webpack_require__.d(__webpack_exports__, "w", function () {
        return SUSPENSE_NUMBER;
      });

      __webpack_require__.d(__webpack_exports__, "x", function () {
        return SUSPENSE_SYMBOL_STRING;
      });

      __webpack_require__.d(__webpack_exports__, "u", function () {
        return SUSPENSE_LIST_NUMBER;
      });

      __webpack_require__.d(__webpack_exports__, "v", function () {
        return SUSPENSE_LIST_SYMBOL_STRING;
      });

      var CONCURRENT_MODE_NUMBER = 0xeacf;
      var CONCURRENT_MODE_SYMBOL_STRING = 'Symbol(react.concurrent_mode)';
      var CONTEXT_NUMBER = 0xeace;
      var CONTEXT_SYMBOL_STRING = 'Symbol(react.context)';
      var SERVER_CONTEXT_SYMBOL_STRING = 'Symbol(react.server_context)';
      var DEPRECATED_ASYNC_MODE_SYMBOL_STRING = 'Symbol(react.async_mode)';
      var ELEMENT_NUMBER = 0xeac7;
      var ELEMENT_SYMBOL_STRING = 'Symbol(react.element)';
      var DEBUG_TRACING_MODE_NUMBER = 0xeae1;
      var DEBUG_TRACING_MODE_SYMBOL_STRING = 'Symbol(react.debug_trace_mode)';
      var FORWARD_REF_NUMBER = 0xead0;
      var FORWARD_REF_SYMBOL_STRING = 'Symbol(react.forward_ref)';
      var FRAGMENT_NUMBER = 0xeacb;
      var FRAGMENT_SYMBOL_STRING = 'Symbol(react.fragment)';
      var LAZY_NUMBER = 0xead4;
      var LAZY_SYMBOL_STRING = 'Symbol(react.lazy)';
      var MEMO_NUMBER = 0xead3;
      var MEMO_SYMBOL_STRING = 'Symbol(react.memo)';
      var PORTAL_NUMBER = 0xeaca;
      var PORTAL_SYMBOL_STRING = 'Symbol(react.portal)';
      var PROFILER_NUMBER = 0xead2;
      var PROFILER_SYMBOL_STRING = 'Symbol(react.profiler)';
      var PROVIDER_NUMBER = 0xeacd;
      var PROVIDER_SYMBOL_STRING = 'Symbol(react.provider)';
      var SCOPE_NUMBER = 0xead7;
      var SCOPE_SYMBOL_STRING = 'Symbol(react.scope)';
      var STRICT_MODE_NUMBER = 0xeacc;
      var STRICT_MODE_SYMBOL_STRING = 'Symbol(react.strict_mode)';
      var SUSPENSE_NUMBER = 0xead1;
      var SUSPENSE_SYMBOL_STRING = 'Symbol(react.suspense)';
      var SUSPENSE_LIST_NUMBER = 0xead8;
      var SUSPENSE_LIST_SYMBOL_STRING = 'Symbol(react.suspense_list)';
      var SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED_SYMBOL_STRING = 'Symbol(react.server_context.defaultValue)';
    }, function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.d(__webpack_exports__, "a", function () {
        return cleanForBridge;
      });

      __webpack_require__.d(__webpack_exports__, "b", function () {
        return copyToClipboard;
      });

      __webpack_require__.d(__webpack_exports__, "c", function () {
        return copyWithDelete;
      });

      __webpack_require__.d(__webpack_exports__, "d", function () {
        return copyWithRename;
      });

      __webpack_require__.d(__webpack_exports__, "e", function () {
        return copyWithSet;
      });

      __webpack_require__.d(__webpack_exports__, "h", function () {
        return getEffectDurations;
      });

      __webpack_require__.d(__webpack_exports__, "g", function () {
        return formatWithStyles;
      });

      __webpack_require__.d(__webpack_exports__, "f", function () {
        return format;
      });

      __webpack_require__.d(__webpack_exports__, "i", function () {
        return isSynchronousXHRSupported;
      });

      var clipboard_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18);

      var clipboard_js__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(clipboard_js__WEBPACK_IMPORTED_MODULE_0__);

      var _hydration__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11);

      var shared_isArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9);

      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }

      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
      }

      function _iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
      }

      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) return _arrayLikeToArray(arr);
      }

      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      }

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            ownKeys(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function cleanForBridge(data, isPathAllowed) {
        var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

        if (data !== null) {
          var cleanedPaths = [];
          var unserializablePaths = [];
          var cleanedData = Object(_hydration__WEBPACK_IMPORTED_MODULE_1__["a"])(data, cleanedPaths, unserializablePaths, path, isPathAllowed);
          return {
            data: cleanedData,
            cleaned: cleanedPaths,
            unserializable: unserializablePaths
          };
        } else {
          return null;
        }
      }

      function copyToClipboard(value) {
        var safeToCopy = serializeToString(value);
        var text = safeToCopy === undefined ? 'undefined' : safeToCopy;
        var clipboardCopyText = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.clipboardCopyText;

        if (typeof clipboardCopyText === 'function') {
          clipboardCopyText(text).catch(function (err) {});
        } else {
          Object(clipboard_js__WEBPACK_IMPORTED_MODULE_0__["copy"])(text);
        }
      }

      function copyWithDelete(obj, path) {
        var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var key = path[index];
        var updated = Object(shared_isArray__WEBPACK_IMPORTED_MODULE_2__["a"])(obj) ? obj.slice() : _objectSpread({}, obj);

        if (index + 1 === path.length) {
          if (Object(shared_isArray__WEBPACK_IMPORTED_MODULE_2__["a"])(updated)) {
            updated.splice(key, 1);
          } else {
            delete updated[key];
          }
        } else {
          updated[key] = copyWithDelete(obj[key], path, index + 1);
        }

        return updated;
      }

      function copyWithRename(obj, oldPath, newPath) {
        var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var oldKey = oldPath[index];
        var updated = Object(shared_isArray__WEBPACK_IMPORTED_MODULE_2__["a"])(obj) ? obj.slice() : _objectSpread({}, obj);

        if (index + 1 === oldPath.length) {
          var newKey = newPath[index];
          updated[newKey] = updated[oldKey];

          if (Object(shared_isArray__WEBPACK_IMPORTED_MODULE_2__["a"])(updated)) {
            updated.splice(oldKey, 1);
          } else {
            delete updated[oldKey];
          }
        } else {
          updated[oldKey] = copyWithRename(obj[oldKey], oldPath, newPath, index + 1);
        }

        return updated;
      }

      function copyWithSet(obj, path, value) {
        var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

        if (index >= path.length) {
          return value;
        }

        var key = path[index];
        var updated = Object(shared_isArray__WEBPACK_IMPORTED_MODULE_2__["a"])(obj) ? obj.slice() : _objectSpread({}, obj);
        updated[key] = copyWithSet(obj[key], path, value, index + 1);
        return updated;
      }

      function getEffectDurations(root) {
        var effectDuration = null;
        var passiveEffectDuration = null;
        var hostRoot = root.current;

        if (hostRoot != null) {
          var stateNode = hostRoot.stateNode;

          if (stateNode != null) {
            effectDuration = stateNode.effectDuration != null ? stateNode.effectDuration : null;
            passiveEffectDuration = stateNode.passiveEffectDuration != null ? stateNode.passiveEffectDuration : null;
          }
        }

        return {
          effectDuration: effectDuration,
          passiveEffectDuration: passiveEffectDuration
        };
      }

      function serializeToString(data) {
        var cache = new Set();
        return JSON.stringify(data, function (key, value) {
          if (_typeof(value) === 'object' && value !== null) {
            if (cache.has(value)) {
              return;
            }

            cache.add(value);
          }

          if (typeof value === 'bigint') {
            return value.toString() + 'n';
          }

          return value;
        });
      }

      function formatWithStyles(inputArgs, style) {
        if (inputArgs === undefined || inputArgs === null || inputArgs.length === 0 || typeof inputArgs[0] !== 'string' || inputArgs[0].match(/([^%]|^)(%c)/g) || style === undefined) {
          return inputArgs;
        }

        var REGEXP = /([^%]|^)((%%)*)(%([oOdisf]))/g;

        if (inputArgs[0].match(REGEXP)) {
          return ["%c".concat(inputArgs[0]), style].concat(_toConsumableArray(inputArgs.slice(1)));
        } else {
          var firstArg = inputArgs.reduce(function (formatStr, elem, i) {
            if (i > 0) {
              formatStr += ' ';
            }

            switch (_typeof(elem)) {
              case 'string':
              case 'boolean':
              case 'symbol':
                return formatStr += '%s';

              case 'number':
                var formatting = Number.isInteger(elem) ? '%i' : '%f';
                return formatStr += formatting;

              default:
                return formatStr += '%o';
            }
          }, '%c');
          return [firstArg, style].concat(_toConsumableArray(inputArgs));
        }
      }

      function format(maybeMessage) {
        for (var _len = arguments.length, inputArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          inputArgs[_key - 1] = arguments[_key];
        }

        var args = inputArgs.slice();
        var formatted = String(maybeMessage);

        if (typeof maybeMessage === 'string') {
          if (args.length) {
            var REGEXP = /(%?)(%([jds]))/g;
            formatted = formatted.replace(REGEXP, function (match, escaped, ptn, flag) {
              var arg = args.shift();

              switch (flag) {
                case 's':
                  arg += '';
                  break;

                case 'd':
                case 'i':
                  arg = parseInt(arg, 10).toString();
                  break;

                case 'f':
                  arg = parseFloat(arg).toString();
                  break;
              }

              if (!escaped) {
                return arg;
              }

              args.unshift(arg);
              return match;
            });
          }
        }

        if (args.length) {
          for (var i = 0; i < args.length; i++) {
            formatted += ' ' + String(args[i]);
          }
        }

        formatted = formatted.replace(/%{2,2}/g, '%');
        return String(formatted);
      }

      function isSynchronousXHRSupported() {
        return !!(window.document && window.document.featurePolicy && window.document.featurePolicy.allowsFeature('sync-xhr'));
      }
    }, function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.d(__webpack_exports__, "a", function () {
        return localStorageGetItem;
      });

      __webpack_require__.d(__webpack_exports__, "b", function () {
        return localStorageSetItem;
      });

      __webpack_require__.d(__webpack_exports__, "c", function () {
        return sessionStorageGetItem;
      });

      __webpack_require__.d(__webpack_exports__, "d", function () {
        return sessionStorageRemoveItem;
      });

      __webpack_require__.d(__webpack_exports__, "e", function () {
        return sessionStorageSetItem;
      });

      function localStorageGetItem(key) {
        try {
          return localStorage.getItem(key);
        } catch (error) {
          return null;
        }
      }

      function localStorageRemoveItem(key) {
        try {
          localStorage.removeItem(key);
        } catch (error) {}
      }

      function localStorageSetItem(key, value) {
        try {
          return localStorage.setItem(key, value);
        } catch (error) {}
      }

      function sessionStorageGetItem(key) {
        try {
          return sessionStorage.getItem(key);
        } catch (error) {
          return null;
        }
      }

      function sessionStorageRemoveItem(key) {
        try {
          sessionStorage.removeItem(key);
        } catch (error) {}
      }

      function sessionStorageSetItem(key, value) {
        try {
          return sessionStorage.setItem(key, value);
        } catch (error) {}
      }
    }, function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      var isArray = Array.isArray;
      __webpack_exports__["a"] = isArray;
    }, function (module, exports, __webpack_require__) {
      "use strict";

      if (true) {
        module.exports = __webpack_require__(26);
      } else {}
    }, function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      (function (global) {
        __webpack_require__.d(__webpack_exports__, "c", function () {
          return registerRenderer;
        });

        __webpack_require__.d(__webpack_exports__, "a", function () {
          return patch;
        });

        __webpack_require__.d(__webpack_exports__, "b", function () {
          return patchForStrictMode;
        });

        __webpack_require__.d(__webpack_exports__, "d", function () {
          return unpatchForStrictMode;
        });

        var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);

        var _renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(15);

        var _DevToolsFiberComponentStack__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(21);

        var react_devtools_feature_flags__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12);

        function _toConsumableArray(arr) {
          return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
        }

        function _nonIterableSpread() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }

        function _iterableToArray(iter) {
          if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
        }

        function _arrayWithoutHoles(arr) {
          if (Array.isArray(arr)) return _arrayLikeToArray(arr);
        }

        function _createForOfIteratorHelper(o, allowArrayLike) {
          var it;

          if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
            if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
              if (it) o = it;
              var i = 0;

              var F = function F() {};

              return {
                s: F,
                n: function n() {
                  if (i >= o.length) return {
                    done: true
                  };
                  return {
                    done: false,
                    value: o[i++]
                  };
                },
                e: function e(_e) {
                  throw _e;
                },
                f: F
              };
            }

            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }

          var normalCompletion = true,
              didErr = false,
              err;
          return {
            s: function s() {
              it = o[Symbol.iterator]();
            },
            n: function n() {
              var step = it.next();
              normalCompletion = step.done;
              return step;
            },
            e: function e(_e2) {
              didErr = true;
              err = _e2;
            },
            f: function f() {
              try {
                if (!normalCompletion && it.return != null) it.return();
              } finally {
                if (didErr) throw err;
              }
            }
          };
        }

        function _unsupportedIterableToArray(o, minLen) {
          if (!o) return;
          if (typeof o === "string") return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor) n = o.constructor.name;
          if (n === "Map" || n === "Set") return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
        }

        function _arrayLikeToArray(arr, len) {
          if (len == null || len > arr.length) len = arr.length;

          for (var i = 0, arr2 = new Array(len); i < len; i++) {
            arr2[i] = arr[i];
          }

          return arr2;
        }

        var OVERRIDE_CONSOLE_METHODS = ['error', 'trace', 'warn'];
        var DIMMED_NODE_CONSOLE_COLOR = '\x1b[2m%s\x1b[0m';
        var PREFIX_REGEX = /\s{4}(in|at)\s{1}/;
        var ROW_COLUMN_NUMBER_REGEX = /:\d+:\d+(\n|$)/;

        function isStringComponentStack(text) {
          return PREFIX_REGEX.test(text) || ROW_COLUMN_NUMBER_REGEX.test(text);
        }

        var STYLE_DIRECTIVE_REGEX = /^%c/;

        function isStrictModeOverride(args, method) {
          return args.length >= 2 && STYLE_DIRECTIVE_REGEX.test(args[0]) && args[1] === "color: ".concat(getConsoleColor(method) || '');
        }

        function getConsoleColor(method) {
          switch (method) {
            case 'warn':
              return consoleSettingsRef.browserTheme === 'light' ? "rgba(250, 180, 50, 0.75)" : "rgba(250, 180, 50, 0.5)";

            case 'error':
              return consoleSettingsRef.browserTheme === 'light' ? "rgba(250, 123, 130, 0.75)" : "rgba(250, 123, 130, 0.5)";

            case 'log':
            default:
              return consoleSettingsRef.browserTheme === 'light' ? "rgba(125, 125, 125, 0.75)" : "rgba(125, 125, 125, 0.5)";
          }
        }

        var injectedRenderers = new Map();
        var targetConsole = console;
        var targetConsoleMethods = {};

        for (var method in console) {
          targetConsoleMethods[method] = console[method];
        }

        var unpatchFn = null;
        var isNode = false;

        try {
          isNode = undefined === global;
        } catch (error) {}

        function dangerous_setTargetConsoleForTesting(targetConsoleForTesting) {
          targetConsole = targetConsoleForTesting;
          targetConsoleMethods = {};

          for (var _method in targetConsole) {
            targetConsoleMethods[_method] = console[_method];
          }
        }

        function registerRenderer(renderer, onErrorOrWarning) {
          var currentDispatcherRef = renderer.currentDispatcherRef,
              getCurrentFiber = renderer.getCurrentFiber,
              findFiberByHostInstance = renderer.findFiberByHostInstance,
              version = renderer.version;

          if (typeof findFiberByHostInstance !== 'function') {
            return;
          }

          if (currentDispatcherRef != null && typeof getCurrentFiber === 'function') {
            var _getInternalReactCons = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["b"])(version),
                ReactTypeOfWork = _getInternalReactCons.ReactTypeOfWork;

            injectedRenderers.set(renderer, {
              currentDispatcherRef: currentDispatcherRef,
              getCurrentFiber: getCurrentFiber,
              workTagMap: ReactTypeOfWork,
              onErrorOrWarning: onErrorOrWarning
            });
          }
        }

        var consoleSettingsRef = {
          appendComponentStack: false,
          breakOnConsoleErrors: false,
          showInlineWarningsAndErrors: false,
          hideConsoleLogsInStrictMode: false,
          browserTheme: 'dark'
        };

        function patch(_ref) {
          var appendComponentStack = _ref.appendComponentStack,
              breakOnConsoleErrors = _ref.breakOnConsoleErrors,
              showInlineWarningsAndErrors = _ref.showInlineWarningsAndErrors,
              hideConsoleLogsInStrictMode = _ref.hideConsoleLogsInStrictMode,
              browserTheme = _ref.browserTheme;
          consoleSettingsRef.appendComponentStack = appendComponentStack;
          consoleSettingsRef.breakOnConsoleErrors = breakOnConsoleErrors;
          consoleSettingsRef.showInlineWarningsAndErrors = showInlineWarningsAndErrors;
          consoleSettingsRef.hideConsoleLogsInStrictMode = hideConsoleLogsInStrictMode;
          consoleSettingsRef.browserTheme = browserTheme;

          if (appendComponentStack || breakOnConsoleErrors || showInlineWarningsAndErrors) {
            if (unpatchFn !== null) {
              return;
            }

            var originalConsoleMethods = {};

            unpatchFn = function unpatchFn() {
              for (var _method2 in originalConsoleMethods) {
                try {
                  targetConsole[_method2] = originalConsoleMethods[_method2];
                } catch (error) {}
              }
            };

            OVERRIDE_CONSOLE_METHODS.forEach(function (method) {
              try {
                var originalMethod = originalConsoleMethods[method] = targetConsole[method].__REACT_DEVTOOLS_ORIGINAL_METHOD__ ? targetConsole[method].__REACT_DEVTOOLS_ORIGINAL_METHOD__ : targetConsole[method];

                var overrideMethod = function overrideMethod() {
                  var shouldAppendWarningStack = false;

                  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                  }

                  if (method !== 'log') {
                    if (consoleSettingsRef.appendComponentStack) {
                      var lastArg = args.length > 0 ? args[args.length - 1] : null;
                      var alreadyHasComponentStack = typeof lastArg === 'string' && isStringComponentStack(lastArg);
                      shouldAppendWarningStack = !alreadyHasComponentStack;
                    }
                  }

                  var shouldShowInlineWarningsAndErrors = consoleSettingsRef.showInlineWarningsAndErrors && (method === 'error' || method === 'warn');

                  var _iterator = _createForOfIteratorHelper(injectedRenderers.values()),
                      _step;

                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done;) {
                      var _step$value = _step.value,
                          currentDispatcherRef = _step$value.currentDispatcherRef,
                          getCurrentFiber = _step$value.getCurrentFiber,
                          onErrorOrWarning = _step$value.onErrorOrWarning,
                          workTagMap = _step$value.workTagMap;
                      var current = getCurrentFiber();

                      if (current != null) {
                        try {
                          if (shouldShowInlineWarningsAndErrors) {
                            if (typeof onErrorOrWarning === 'function') {
                              onErrorOrWarning(current, method, args.slice());
                            }
                          }

                          if (shouldAppendWarningStack) {
                            var componentStack = Object(_DevToolsFiberComponentStack__WEBPACK_IMPORTED_MODULE_2__["a"])(workTagMap, current, currentDispatcherRef);

                            if (componentStack !== '') {
                              if (isStrictModeOverride(args, method)) {
                                args[0] = "".concat(args[0], " %s");
                                args.push(componentStack);
                              } else {
                                args.push(componentStack);
                              }
                            }
                          }
                        } catch (error) {
                          setTimeout(function () {
                            throw error;
                          }, 0);
                        } finally {
                          break;
                        }
                      }
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }

                  if (consoleSettingsRef.breakOnConsoleErrors) {
                    debugger;
                  }

                  originalMethod.apply(void 0, args);
                };

                overrideMethod.__REACT_DEVTOOLS_ORIGINAL_METHOD__ = originalMethod;
                originalMethod.__REACT_DEVTOOLS_OVERRIDE_METHOD__ = overrideMethod;
                targetConsole[method] = overrideMethod;
              } catch (error) {}
            });
          } else {
            unpatch();
          }
        }

        function unpatch() {
          if (unpatchFn !== null) {
            unpatchFn();
            unpatchFn = null;
          }
        }

        var unpatchForStrictModeFn = null;

        function patchForStrictMode() {
          if (react_devtools_feature_flags__WEBPACK_IMPORTED_MODULE_3__["a"]) {
            var overrideConsoleMethods = ['error', 'trace', 'warn', 'log'];

            if (unpatchForStrictModeFn !== null) {
              return;
            }

            var originalConsoleMethods = {};

            unpatchForStrictModeFn = function unpatchForStrictModeFn() {
              for (var _method3 in originalConsoleMethods) {
                try {
                  targetConsole[_method3] = originalConsoleMethods[_method3];
                } catch (error) {}
              }
            };

            overrideConsoleMethods.forEach(function (method) {
              try {
                var originalMethod = originalConsoleMethods[method] = targetConsole[method].__REACT_DEVTOOLS_STRICT_MODE_ORIGINAL_METHOD__ ? targetConsole[method].__REACT_DEVTOOLS_STRICT_MODE_ORIGINAL_METHOD__ : targetConsole[method];

                var overrideMethod = function overrideMethod() {
                  if (!consoleSettingsRef.hideConsoleLogsInStrictMode) {
                    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                      args[_key2] = arguments[_key2];
                    }

                    if (isNode) {
                      originalMethod(DIMMED_NODE_CONSOLE_COLOR, _utils__WEBPACK_IMPORTED_MODULE_0__["f"].apply(void 0, args));
                    } else {
                      var color = getConsoleColor(method);

                      if (color) {
                        originalMethod.apply(void 0, _toConsumableArray(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["g"])(args, "color: ".concat(color))));
                      } else {
                        throw Error('Console color is not defined');
                      }
                    }
                  }
                };

                overrideMethod.__REACT_DEVTOOLS_STRICT_MODE_ORIGINAL_METHOD__ = originalMethod;
                originalMethod.__REACT_DEVTOOLS_STRICT_MODE_OVERRIDE_METHOD__ = overrideMethod;
                targetConsole[method] = overrideMethod;
              } catch (error) {}
            });
          }
        }

        function unpatchForStrictMode() {
          if (react_devtools_feature_flags__WEBPACK_IMPORTED_MODULE_3__["a"]) {
            if (unpatchForStrictModeFn !== null) {
              unpatchForStrictModeFn();
              unpatchForStrictModeFn = null;
            }
          }
        }
      }).call(this, __webpack_require__(13));
    }, function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      var isArrayImpl = Array.isArray;

      function isArray(a) {
        return isArrayImpl(a);
      }

      __webpack_exports__["a"] = isArray;
    }, function (module, exports, __webpack_require__) {
      (function (process) {
        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        exports = module.exports = SemVer;
        var debug;

        if ((typeof process === "undefined" ? "undefined" : _typeof(process)) === 'object' && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
          debug = function debug() {
            var args = Array.prototype.slice.call(arguments, 0);
            args.unshift('SEMVER');
            console.log.apply(console, args);
          };
        } else {
          debug = function debug() {};
        }

        exports.SEMVER_SPEC_VERSION = '2.0.0';
        var MAX_LENGTH = 256;
        var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
        var MAX_SAFE_COMPONENT_LENGTH = 16;
        var re = exports.re = [];
        var src = exports.src = [];
        var t = exports.tokens = {};
        var R = 0;

        function tok(n) {
          t[n] = R++;
        }

        tok('NUMERICIDENTIFIER');
        src[t.NUMERICIDENTIFIER] = '0|[1-9]\\d*';
        tok('NUMERICIDENTIFIERLOOSE');
        src[t.NUMERICIDENTIFIERLOOSE] = '[0-9]+';
        tok('NONNUMERICIDENTIFIER');
        src[t.NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';
        tok('MAINVERSION');
        src[t.MAINVERSION] = '(' + src[t.NUMERICIDENTIFIER] + ')\\.' + '(' + src[t.NUMERICIDENTIFIER] + ')\\.' + '(' + src[t.NUMERICIDENTIFIER] + ')';
        tok('MAINVERSIONLOOSE');
        src[t.MAINVERSIONLOOSE] = '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\.' + '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\.' + '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')';
        tok('PRERELEASEIDENTIFIER');
        src[t.PRERELEASEIDENTIFIER] = '(?:' + src[t.NUMERICIDENTIFIER] + '|' + src[t.NONNUMERICIDENTIFIER] + ')';
        tok('PRERELEASEIDENTIFIERLOOSE');
        src[t.PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[t.NUMERICIDENTIFIERLOOSE] + '|' + src[t.NONNUMERICIDENTIFIER] + ')';
        tok('PRERELEASE');
        src[t.PRERELEASE] = '(?:-(' + src[t.PRERELEASEIDENTIFIER] + '(?:\\.' + src[t.PRERELEASEIDENTIFIER] + ')*))';
        tok('PRERELEASELOOSE');
        src[t.PRERELEASELOOSE] = '(?:-?(' + src[t.PRERELEASEIDENTIFIERLOOSE] + '(?:\\.' + src[t.PRERELEASEIDENTIFIERLOOSE] + ')*))';
        tok('BUILDIDENTIFIER');
        src[t.BUILDIDENTIFIER] = '[0-9A-Za-z-]+';
        tok('BUILD');
        src[t.BUILD] = '(?:\\+(' + src[t.BUILDIDENTIFIER] + '(?:\\.' + src[t.BUILDIDENTIFIER] + ')*))';
        tok('FULL');
        tok('FULLPLAIN');
        src[t.FULLPLAIN] = 'v?' + src[t.MAINVERSION] + src[t.PRERELEASE] + '?' + src[t.BUILD] + '?';
        src[t.FULL] = '^' + src[t.FULLPLAIN] + '$';
        tok('LOOSEPLAIN');
        src[t.LOOSEPLAIN] = '[v=\\s]*' + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + '?' + src[t.BUILD] + '?';
        tok('LOOSE');
        src[t.LOOSE] = '^' + src[t.LOOSEPLAIN] + '$';
        tok('GTLT');
        src[t.GTLT] = '((?:<|>)?=?)';
        tok('XRANGEIDENTIFIERLOOSE');
        src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
        tok('XRANGEIDENTIFIER');
        src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + '|x|X|\\*';
        tok('XRANGEPLAIN');
        src[t.XRANGEPLAIN] = '[v=\\s]*(' + src[t.XRANGEIDENTIFIER] + ')' + '(?:\\.(' + src[t.XRANGEIDENTIFIER] + ')' + '(?:\\.(' + src[t.XRANGEIDENTIFIER] + ')' + '(?:' + src[t.PRERELEASE] + ')?' + src[t.BUILD] + '?' + ')?)?';
        tok('XRANGEPLAINLOOSE');
        src[t.XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' + '(?:' + src[t.PRERELEASELOOSE] + ')?' + src[t.BUILD] + '?' + ')?)?';
        tok('XRANGE');
        src[t.XRANGE] = '^' + src[t.GTLT] + '\\s*' + src[t.XRANGEPLAIN] + '$';
        tok('XRANGELOOSE');
        src[t.XRANGELOOSE] = '^' + src[t.GTLT] + '\\s*' + src[t.XRANGEPLAINLOOSE] + '$';
        tok('COERCE');
        src[t.COERCE] = '(^|[^\\d])' + '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' + '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' + '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' + '(?:$|[^\\d])';
        tok('COERCERTL');
        re[t.COERCERTL] = new RegExp(src[t.COERCE], 'g');
        tok('LONETILDE');
        src[t.LONETILDE] = '(?:~>?)';
        tok('TILDETRIM');
        src[t.TILDETRIM] = '(\\s*)' + src[t.LONETILDE] + '\\s+';
        re[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], 'g');
        var tildeTrimReplace = '$1~';
        tok('TILDE');
        src[t.TILDE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAIN] + '$';
        tok('TILDELOOSE');
        src[t.TILDELOOSE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + '$';
        tok('LONECARET');
        src[t.LONECARET] = '(?:\\^)';
        tok('CARETTRIM');
        src[t.CARETTRIM] = '(\\s*)' + src[t.LONECARET] + '\\s+';
        re[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], 'g');
        var caretTrimReplace = '$1^';
        tok('CARET');
        src[t.CARET] = '^' + src[t.LONECARET] + src[t.XRANGEPLAIN] + '$';
        tok('CARETLOOSE');
        src[t.CARETLOOSE] = '^' + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + '$';
        tok('COMPARATORLOOSE');
        src[t.COMPARATORLOOSE] = '^' + src[t.GTLT] + '\\s*(' + src[t.LOOSEPLAIN] + ')$|^$';
        tok('COMPARATOR');
        src[t.COMPARATOR] = '^' + src[t.GTLT] + '\\s*(' + src[t.FULLPLAIN] + ')$|^$';
        tok('COMPARATORTRIM');
        src[t.COMPARATORTRIM] = '(\\s*)' + src[t.GTLT] + '\\s*(' + src[t.LOOSEPLAIN] + '|' + src[t.XRANGEPLAIN] + ')';
        re[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], 'g');
        var comparatorTrimReplace = '$1$2$3';
        tok('HYPHENRANGE');
        src[t.HYPHENRANGE] = '^\\s*(' + src[t.XRANGEPLAIN] + ')' + '\\s+-\\s+' + '(' + src[t.XRANGEPLAIN] + ')' + '\\s*$';
        tok('HYPHENRANGELOOSE');
        src[t.HYPHENRANGELOOSE] = '^\\s*(' + src[t.XRANGEPLAINLOOSE] + ')' + '\\s+-\\s+' + '(' + src[t.XRANGEPLAINLOOSE] + ')' + '\\s*$';
        tok('STAR');
        src[t.STAR] = '(<|>)?=?\\s*\\*';

        for (var i = 0; i < R; i++) {
          debug(i, src[i]);

          if (!re[i]) {
            re[i] = new RegExp(src[i]);
          }
        }

        exports.parse = parse;

        function parse(version, options) {
          if (!options || _typeof(options) !== 'object') {
            options = {
              loose: !!options,
              includePrerelease: false
            };
          }

          if (version instanceof SemVer) {
            return version;
          }

          if (typeof version !== 'string') {
            return null;
          }

          if (version.length > MAX_LENGTH) {
            return null;
          }

          var r = options.loose ? re[t.LOOSE] : re[t.FULL];

          if (!r.test(version)) {
            return null;
          }

          try {
            return new SemVer(version, options);
          } catch (er) {
            return null;
          }
        }

        exports.valid = valid;

        function valid(version, options) {
          var v = parse(version, options);
          return v ? v.version : null;
        }

        exports.clean = clean;

        function clean(version, options) {
          var s = parse(version.trim().replace(/^[=v]+/, ''), options);
          return s ? s.version : null;
        }

        exports.SemVer = SemVer;

        function SemVer(version, options) {
          if (!options || _typeof(options) !== 'object') {
            options = {
              loose: !!options,
              includePrerelease: false
            };
          }

          if (version instanceof SemVer) {
            if (version.loose === options.loose) {
              return version;
            } else {
              version = version.version;
            }
          } else if (typeof version !== 'string') {
            throw new TypeError('Invalid Version: ' + version);
          }

          if (version.length > MAX_LENGTH) {
            throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters');
          }

          if (!(this instanceof SemVer)) {
            return new SemVer(version, options);
          }

          debug('SemVer', version, options);
          this.options = options;
          this.loose = !!options.loose;
          var m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);

          if (!m) {
            throw new TypeError('Invalid Version: ' + version);
          }

          this.raw = version;
          this.major = +m[1];
          this.minor = +m[2];
          this.patch = +m[3];

          if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
            throw new TypeError('Invalid major version');
          }

          if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
            throw new TypeError('Invalid minor version');
          }

          if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
            throw new TypeError('Invalid patch version');
          }

          if (!m[4]) {
            this.prerelease = [];
          } else {
            this.prerelease = m[4].split('.').map(function (id) {
              if (/^[0-9]+$/.test(id)) {
                var num = +id;

                if (num >= 0 && num < MAX_SAFE_INTEGER) {
                  return num;
                }
              }

              return id;
            });
          }

          this.build = m[5] ? m[5].split('.') : [];
          this.format();
        }

        SemVer.prototype.format = function () {
          this.version = this.major + '.' + this.minor + '.' + this.patch;

          if (this.prerelease.length) {
            this.version += '-' + this.prerelease.join('.');
          }

          return this.version;
        };

        SemVer.prototype.toString = function () {
          return this.version;
        };

        SemVer.prototype.compare = function (other) {
          debug('SemVer.compare', this.version, this.options, other);

          if (!(other instanceof SemVer)) {
            other = new SemVer(other, this.options);
          }

          return this.compareMain(other) || this.comparePre(other);
        };

        SemVer.prototype.compareMain = function (other) {
          if (!(other instanceof SemVer)) {
            other = new SemVer(other, this.options);
          }

          return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
        };

        SemVer.prototype.comparePre = function (other) {
          if (!(other instanceof SemVer)) {
            other = new SemVer(other, this.options);
          }

          if (this.prerelease.length && !other.prerelease.length) {
            return -1;
          } else if (!this.prerelease.length && other.prerelease.length) {
            return 1;
          } else if (!this.prerelease.length && !other.prerelease.length) {
            return 0;
          }

          var i = 0;

          do {
            var a = this.prerelease[i];
            var b = other.prerelease[i];
            debug('prerelease compare', i, a, b);

            if (a === undefined && b === undefined) {
              return 0;
            } else if (b === undefined) {
              return 1;
            } else if (a === undefined) {
              return -1;
            } else if (a === b) {
              continue;
            } else {
              return compareIdentifiers(a, b);
            }
          } while (++i);
        };

        SemVer.prototype.compareBuild = function (other) {
          if (!(other instanceof SemVer)) {
            other = new SemVer(other, this.options);
          }

          var i = 0;

          do {
            var a = this.build[i];
            var b = other.build[i];
            debug('prerelease compare', i, a, b);

            if (a === undefined && b === undefined) {
              return 0;
            } else if (b === undefined) {
              return 1;
            } else if (a === undefined) {
              return -1;
            } else if (a === b) {
              continue;
            } else {
              return compareIdentifiers(a, b);
            }
          } while (++i);
        };

        SemVer.prototype.inc = function (release, identifier) {
          switch (release) {
            case 'premajor':
              this.prerelease.length = 0;
              this.patch = 0;
              this.minor = 0;
              this.major++;
              this.inc('pre', identifier);
              break;

            case 'preminor':
              this.prerelease.length = 0;
              this.patch = 0;
              this.minor++;
              this.inc('pre', identifier);
              break;

            case 'prepatch':
              this.prerelease.length = 0;
              this.inc('patch', identifier);
              this.inc('pre', identifier);
              break;

            case 'prerelease':
              if (this.prerelease.length === 0) {
                this.inc('patch', identifier);
              }

              this.inc('pre', identifier);
              break;

            case 'major':
              if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
                this.major++;
              }

              this.minor = 0;
              this.patch = 0;
              this.prerelease = [];
              break;

            case 'minor':
              if (this.patch !== 0 || this.prerelease.length === 0) {
                this.minor++;
              }

              this.patch = 0;
              this.prerelease = [];
              break;

            case 'patch':
              if (this.prerelease.length === 0) {
                this.patch++;
              }

              this.prerelease = [];
              break;

            case 'pre':
              if (this.prerelease.length === 0) {
                this.prerelease = [0];
              } else {
                var i = this.prerelease.length;

                while (--i >= 0) {
                  if (typeof this.prerelease[i] === 'number') {
                    this.prerelease[i]++;
                    i = -2;
                  }
                }

                if (i === -1) {
                  this.prerelease.push(0);
                }
              }

              if (identifier) {
                if (this.prerelease[0] === identifier) {
                  if (isNaN(this.prerelease[1])) {
                    this.prerelease = [identifier, 0];
                  }
                } else {
                  this.prerelease = [identifier, 0];
                }
              }

              break;

            default:
              throw new Error('invalid increment argument: ' + release);
          }

          this.format();
          this.raw = this.version;
          return this;
        };

        exports.inc = inc;

        function inc(version, release, loose, identifier) {
          if (typeof loose === 'string') {
            identifier = loose;
            loose = undefined;
          }

          try {
            return new SemVer(version, loose).inc(release, identifier).version;
          } catch (er) {
            return null;
          }
        }

        exports.diff = diff;

        function diff(version1, version2) {
          if (eq(version1, version2)) {
            return null;
          } else {
            var v1 = parse(version1);
            var v2 = parse(version2);
            var prefix = '';

            if (v1.prerelease.length || v2.prerelease.length) {
              prefix = 'pre';
              var defaultResult = 'prerelease';
            }

            for (var key in v1) {
              if (key === 'major' || key === 'minor' || key === 'patch') {
                if (v1[key] !== v2[key]) {
                  return prefix + key;
                }
              }
            }

            return defaultResult;
          }
        }

        exports.compareIdentifiers = compareIdentifiers;
        var numeric = /^[0-9]+$/;

        function compareIdentifiers(a, b) {
          var anum = numeric.test(a);
          var bnum = numeric.test(b);

          if (anum && bnum) {
            a = +a;
            b = +b;
          }

          return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
        }

        exports.rcompareIdentifiers = rcompareIdentifiers;

        function rcompareIdentifiers(a, b) {
          return compareIdentifiers(b, a);
        }

        exports.major = major;

        function major(a, loose) {
          return new SemVer(a, loose).major;
        }

        exports.minor = minor;

        function minor(a, loose) {
          return new SemVer(a, loose).minor;
        }

        exports.patch = patch;

        function patch(a, loose) {
          return new SemVer(a, loose).patch;
        }

        exports.compare = compare;

        function compare(a, b, loose) {
          return new SemVer(a, loose).compare(new SemVer(b, loose));
        }

        exports.compareLoose = compareLoose;

        function compareLoose(a, b) {
          return compare(a, b, true);
        }

        exports.compareBuild = compareBuild;

        function compareBuild(a, b, loose) {
          var versionA = new SemVer(a, loose);
          var versionB = new SemVer(b, loose);
          return versionA.compare(versionB) || versionA.compareBuild(versionB);
        }

        exports.rcompare = rcompare;

        function rcompare(a, b, loose) {
          return compare(b, a, loose);
        }

        exports.sort = sort;

        function sort(list, loose) {
          return list.sort(function (a, b) {
            return exports.compareBuild(a, b, loose);
          });
        }

        exports.rsort = rsort;

        function rsort(list, loose) {
          return list.sort(function (a, b) {
            return exports.compareBuild(b, a, loose);
          });
        }

        exports.gt = gt;

        function gt(a, b, loose) {
          return compare(a, b, loose) > 0;
        }

        exports.lt = lt;

        function lt(a, b, loose) {
          return compare(a, b, loose) < 0;
        }

        exports.eq = eq;

        function eq(a, b, loose) {
          return compare(a, b, loose) === 0;
        }

        exports.neq = neq;

        function neq(a, b, loose) {
          return compare(a, b, loose) !== 0;
        }

        exports.gte = gte;

        function gte(a, b, loose) {
          return compare(a, b, loose) >= 0;
        }

        exports.lte = lte;

        function lte(a, b, loose) {
          return compare(a, b, loose) <= 0;
        }

        exports.cmp = cmp;

        function cmp(a, op, b, loose) {
          switch (op) {
            case '===':
              if (_typeof(a) === 'object') a = a.version;
              if (_typeof(b) === 'object') b = b.version;
              return a === b;

            case '!==':
              if (_typeof(a) === 'object') a = a.version;
              if (_typeof(b) === 'object') b = b.version;
              return a !== b;

            case '':
            case '=':
            case '==':
              return eq(a, b, loose);

            case '!=':
              return neq(a, b, loose);

            case '>':
              return gt(a, b, loose);

            case '>=':
              return gte(a, b, loose);

            case '<':
              return lt(a, b, loose);

            case '<=':
              return lte(a, b, loose);

            default:
              throw new TypeError('Invalid operator: ' + op);
          }
        }

        exports.Comparator = Comparator;

        function Comparator(comp, options) {
          if (!options || _typeof(options) !== 'object') {
            options = {
              loose: !!options,
              includePrerelease: false
            };
          }

          if (comp instanceof Comparator) {
            if (comp.loose === !!options.loose) {
              return comp;
            } else {
              comp = comp.value;
            }
          }

          if (!(this instanceof Comparator)) {
            return new Comparator(comp, options);
          }

          debug('comparator', comp, options);
          this.options = options;
          this.loose = !!options.loose;
          this.parse(comp);

          if (this.semver === ANY) {
            this.value = '';
          } else {
            this.value = this.operator + this.semver.version;
          }

          debug('comp', this);
        }

        var ANY = {};

        Comparator.prototype.parse = function (comp) {
          var r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
          var m = comp.match(r);

          if (!m) {
            throw new TypeError('Invalid comparator: ' + comp);
          }

          this.operator = m[1] !== undefined ? m[1] : '';

          if (this.operator === '=') {
            this.operator = '';
          }

          if (!m[2]) {
            this.semver = ANY;
          } else {
            this.semver = new SemVer(m[2], this.options.loose);
          }
        };

        Comparator.prototype.toString = function () {
          return this.value;
        };

        Comparator.prototype.test = function (version) {
          debug('Comparator.test', version, this.options.loose);

          if (this.semver === ANY || version === ANY) {
            return true;
          }

          if (typeof version === 'string') {
            try {
              version = new SemVer(version, this.options);
            } catch (er) {
              return false;
            }
          }

          return cmp(version, this.operator, this.semver, this.options);
        };

        Comparator.prototype.intersects = function (comp, options) {
          if (!(comp instanceof Comparator)) {
            throw new TypeError('a Comparator is required');
          }

          if (!options || _typeof(options) !== 'object') {
            options = {
              loose: !!options,
              includePrerelease: false
            };
          }

          var rangeTmp;

          if (this.operator === '') {
            if (this.value === '') {
              return true;
            }

            rangeTmp = new Range(comp.value, options);
            return satisfies(this.value, rangeTmp, options);
          } else if (comp.operator === '') {
            if (comp.value === '') {
              return true;
            }

            rangeTmp = new Range(this.value, options);
            return satisfies(comp.semver, rangeTmp, options);
          }

          var sameDirectionIncreasing = (this.operator === '>=' || this.operator === '>') && (comp.operator === '>=' || comp.operator === '>');
          var sameDirectionDecreasing = (this.operator === '<=' || this.operator === '<') && (comp.operator === '<=' || comp.operator === '<');
          var sameSemVer = this.semver.version === comp.semver.version;
          var differentDirectionsInclusive = (this.operator === '>=' || this.operator === '<=') && (comp.operator === '>=' || comp.operator === '<=');
          var oppositeDirectionsLessThan = cmp(this.semver, '<', comp.semver, options) && (this.operator === '>=' || this.operator === '>') && (comp.operator === '<=' || comp.operator === '<');
          var oppositeDirectionsGreaterThan = cmp(this.semver, '>', comp.semver, options) && (this.operator === '<=' || this.operator === '<') && (comp.operator === '>=' || comp.operator === '>');
          return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
        };

        exports.Range = Range;

        function Range(range, options) {
          if (!options || _typeof(options) !== 'object') {
            options = {
              loose: !!options,
              includePrerelease: false
            };
          }

          if (range instanceof Range) {
            if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
              return range;
            } else {
              return new Range(range.raw, options);
            }
          }

          if (range instanceof Comparator) {
            return new Range(range.value, options);
          }

          if (!(this instanceof Range)) {
            return new Range(range, options);
          }

          this.options = options;
          this.loose = !!options.loose;
          this.includePrerelease = !!options.includePrerelease;
          this.raw = range;
          this.set = range.split(/\s*\|\|\s*/).map(function (range) {
            return this.parseRange(range.trim());
          }, this).filter(function (c) {
            return c.length;
          });

          if (!this.set.length) {
            throw new TypeError('Invalid SemVer Range: ' + range);
          }

          this.format();
        }

        Range.prototype.format = function () {
          this.range = this.set.map(function (comps) {
            return comps.join(' ').trim();
          }).join('||').trim();
          return this.range;
        };

        Range.prototype.toString = function () {
          return this.range;
        };

        Range.prototype.parseRange = function (range) {
          var loose = this.options.loose;
          range = range.trim();
          var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
          range = range.replace(hr, hyphenReplace);
          debug('hyphen replace', range);
          range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
          debug('comparator trim', range, re[t.COMPARATORTRIM]);
          range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
          range = range.replace(re[t.CARETTRIM], caretTrimReplace);
          range = range.split(/\s+/).join(' ');
          var compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
          var set = range.split(' ').map(function (comp) {
            return parseComparator(comp, this.options);
          }, this).join(' ').split(/\s+/);

          if (this.options.loose) {
            set = set.filter(function (comp) {
              return !!comp.match(compRe);
            });
          }

          set = set.map(function (comp) {
            return new Comparator(comp, this.options);
          }, this);
          return set;
        };

        Range.prototype.intersects = function (range, options) {
          if (!(range instanceof Range)) {
            throw new TypeError('a Range is required');
          }

          return this.set.some(function (thisComparators) {
            return isSatisfiable(thisComparators, options) && range.set.some(function (rangeComparators) {
              return isSatisfiable(rangeComparators, options) && thisComparators.every(function (thisComparator) {
                return rangeComparators.every(function (rangeComparator) {
                  return thisComparator.intersects(rangeComparator, options);
                });
              });
            });
          });
        };

        function isSatisfiable(comparators, options) {
          var result = true;
          var remainingComparators = comparators.slice();
          var testComparator = remainingComparators.pop();

          while (result && remainingComparators.length) {
            result = remainingComparators.every(function (otherComparator) {
              return testComparator.intersects(otherComparator, options);
            });
            testComparator = remainingComparators.pop();
          }

          return result;
        }

        exports.toComparators = toComparators;

        function toComparators(range, options) {
          return new Range(range, options).set.map(function (comp) {
            return comp.map(function (c) {
              return c.value;
            }).join(' ').trim().split(' ');
          });
        }

        function parseComparator(comp, options) {
          debug('comp', comp, options);
          comp = replaceCarets(comp, options);
          debug('caret', comp);
          comp = replaceTildes(comp, options);
          debug('tildes', comp);
          comp = replaceXRanges(comp, options);
          debug('xrange', comp);
          comp = replaceStars(comp, options);
          debug('stars', comp);
          return comp;
        }

        function isX(id) {
          return !id || id.toLowerCase() === 'x' || id === '*';
        }

        function replaceTildes(comp, options) {
          return comp.trim().split(/\s+/).map(function (comp) {
            return replaceTilde(comp, options);
          }).join(' ');
        }

        function replaceTilde(comp, options) {
          var r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
          return comp.replace(r, function (_, M, m, p, pr) {
            debug('tilde', comp, _, M, m, p, pr);
            var ret;

            if (isX(M)) {
              ret = '';
            } else if (isX(m)) {
              ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
            } else if (isX(p)) {
              ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
            } else if (pr) {
              debug('replaceTilde pr', pr);
              ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0';
            } else {
              ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';
            }

            debug('tilde return', ret);
            return ret;
          });
        }

        function replaceCarets(comp, options) {
          return comp.trim().split(/\s+/).map(function (comp) {
            return replaceCaret(comp, options);
          }).join(' ');
        }

        function replaceCaret(comp, options) {
          debug('caret', comp, options);
          var r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
          return comp.replace(r, function (_, M, m, p, pr) {
            debug('caret', comp, _, M, m, p, pr);
            var ret;

            if (isX(M)) {
              ret = '';
            } else if (isX(m)) {
              ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
            } else if (isX(p)) {
              if (M === '0') {
                ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
              } else {
                ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
              }
            } else if (pr) {
              debug('replaceCaret pr', pr);

              if (M === '0') {
                if (m === '0') {
                  ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + m + '.' + (+p + 1);
                } else {
                  ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0';
                }
              } else {
                ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + (+M + 1) + '.0.0';
              }
            } else {
              debug('no pr');

              if (M === '0') {
                if (m === '0') {
                  ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + m + '.' + (+p + 1);
                } else {
                  ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';
                }
              } else {
                ret = '>=' + M + '.' + m + '.' + p + ' <' + (+M + 1) + '.0.0';
              }
            }

            debug('caret return', ret);
            return ret;
          });
        }

        function replaceXRanges(comp, options) {
          debug('replaceXRanges', comp, options);
          return comp.split(/\s+/).map(function (comp) {
            return replaceXRange(comp, options);
          }).join(' ');
        }

        function replaceXRange(comp, options) {
          comp = comp.trim();
          var r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
          return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
            debug('xRange', comp, ret, gtlt, M, m, p, pr);
            var xM = isX(M);
            var xm = xM || isX(m);
            var xp = xm || isX(p);
            var anyX = xp;

            if (gtlt === '=' && anyX) {
              gtlt = '';
            }

            pr = options.includePrerelease ? '-0' : '';

            if (xM) {
              if (gtlt === '>' || gtlt === '<') {
                ret = '<0.0.0-0';
              } else {
                ret = '*';
              }
            } else if (gtlt && anyX) {
              if (xm) {
                m = 0;
              }

              p = 0;

              if (gtlt === '>') {
                gtlt = '>=';

                if (xm) {
                  M = +M + 1;
                  m = 0;
                  p = 0;
                } else {
                  m = +m + 1;
                  p = 0;
                }
              } else if (gtlt === '<=') {
                gtlt = '<';

                if (xm) {
                  M = +M + 1;
                } else {
                  m = +m + 1;
                }
              }

              ret = gtlt + M + '.' + m + '.' + p + pr;
            } else if (xm) {
              ret = '>=' + M + '.0.0' + pr + ' <' + (+M + 1) + '.0.0' + pr;
            } else if (xp) {
              ret = '>=' + M + '.' + m + '.0' + pr + ' <' + M + '.' + (+m + 1) + '.0' + pr;
            }

            debug('xRange return', ret);
            return ret;
          });
        }

        function replaceStars(comp, options) {
          debug('replaceStars', comp, options);
          return comp.trim().replace(re[t.STAR], '');
        }

        function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
          if (isX(fM)) {
            from = '';
          } else if (isX(fm)) {
            from = '>=' + fM + '.0.0';
          } else if (isX(fp)) {
            from = '>=' + fM + '.' + fm + '.0';
          } else {
            from = '>=' + from;
          }

          if (isX(tM)) {
            to = '';
          } else if (isX(tm)) {
            to = '<' + (+tM + 1) + '.0.0';
          } else if (isX(tp)) {
            to = '<' + tM + '.' + (+tm + 1) + '.0';
          } else if (tpr) {
            to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
          } else {
            to = '<=' + to;
          }

          return (from + ' ' + to).trim();
        }

        Range.prototype.test = function (version) {
          if (!version) {
            return false;
          }

          if (typeof version === 'string') {
            try {
              version = new SemVer(version, this.options);
            } catch (er) {
              return false;
            }
          }

          for (var i = 0; i < this.set.length; i++) {
            if (testSet(this.set[i], version, this.options)) {
              return true;
            }
          }

          return false;
        };

        function testSet(set, version, options) {
          for (var i = 0; i < set.length; i++) {
            if (!set[i].test(version)) {
              return false;
            }
          }

          if (version.prerelease.length && !options.includePrerelease) {
            for (i = 0; i < set.length; i++) {
              debug(set[i].semver);

              if (set[i].semver === ANY) {
                continue;
              }

              if (set[i].semver.prerelease.length > 0) {
                var allowed = set[i].semver;

                if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
                  return true;
                }
              }
            }

            return false;
          }

          return true;
        }

        exports.satisfies = satisfies;

        function satisfies(version, range, options) {
          try {
            range = new Range(range, options);
          } catch (er) {
            return false;
          }

          return range.test(version);
        }

        exports.maxSatisfying = maxSatisfying;

        function maxSatisfying(versions, range, options) {
          var max = null;
          var maxSV = null;

          try {
            var rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }

          versions.forEach(function (v) {
            if (rangeObj.test(v)) {
              if (!max || maxSV.compare(v) === -1) {
                max = v;
                maxSV = new SemVer(max, options);
              }
            }
          });
          return max;
        }

        exports.minSatisfying = minSatisfying;

        function minSatisfying(versions, range, options) {
          var min = null;
          var minSV = null;

          try {
            var rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }

          versions.forEach(function (v) {
            if (rangeObj.test(v)) {
              if (!min || minSV.compare(v) === 1) {
                min = v;
                minSV = new SemVer(min, options);
              }
            }
          });
          return min;
        }

        exports.minVersion = minVersion;

        function minVersion(range, loose) {
          range = new Range(range, loose);
          var minver = new SemVer('0.0.0');

          if (range.test(minver)) {
            return minver;
          }

          minver = new SemVer('0.0.0-0');

          if (range.test(minver)) {
            return minver;
          }

          minver = null;

          for (var i = 0; i < range.set.length; ++i) {
            var comparators = range.set[i];
            comparators.forEach(function (comparator) {
              var compver = new SemVer(comparator.semver.version);

              switch (comparator.operator) {
                case '>':
                  if (compver.prerelease.length === 0) {
                    compver.patch++;
                  } else {
                    compver.prerelease.push(0);
                  }

                  compver.raw = compver.format();

                case '':
                case '>=':
                  if (!minver || gt(minver, compver)) {
                    minver = compver;
                  }

                  break;

                case '<':
                case '<=':
                  break;

                default:
                  throw new Error('Unexpected operation: ' + comparator.operator);
              }
            });
          }

          if (minver && range.test(minver)) {
            return minver;
          }

          return null;
        }

        exports.validRange = validRange;

        function validRange(range, options) {
          try {
            return new Range(range, options).range || '*';
          } catch (er) {
            return null;
          }
        }

        exports.ltr = ltr;

        function ltr(version, range, options) {
          return outside(version, range, '<', options);
        }

        exports.gtr = gtr;

        function gtr(version, range, options) {
          return outside(version, range, '>', options);
        }

        exports.outside = outside;

        function outside(version, range, hilo, options) {
          version = new SemVer(version, options);
          range = new Range(range, options);
          var gtfn, ltefn, ltfn, comp, ecomp;

          switch (hilo) {
            case '>':
              gtfn = gt;
              ltefn = lte;
              ltfn = lt;
              comp = '>';
              ecomp = '>=';
              break;

            case '<':
              gtfn = lt;
              ltefn = gte;
              ltfn = gt;
              comp = '<';
              ecomp = '<=';
              break;

            default:
              throw new TypeError('Must provide a hilo val of "<" or ">"');
          }

          if (satisfies(version, range, options)) {
            return false;
          }

          for (var i = 0; i < range.set.length; ++i) {
            var comparators = range.set[i];
            var high = null;
            var low = null;
            comparators.forEach(function (comparator) {
              if (comparator.semver === ANY) {
                comparator = new Comparator('>=0.0.0');
              }

              high = high || comparator;
              low = low || comparator;

              if (gtfn(comparator.semver, high.semver, options)) {
                high = comparator;
              } else if (ltfn(comparator.semver, low.semver, options)) {
                low = comparator;
              }
            });

            if (high.operator === comp || high.operator === ecomp) {
              return false;
            }

            if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
              return false;
            } else if (low.operator === ecomp && ltfn(version, low.semver)) {
              return false;
            }
          }

          return true;
        }

        exports.prerelease = prerelease;

        function prerelease(version, options) {
          var parsed = parse(version, options);
          return parsed && parsed.prerelease.length ? parsed.prerelease : null;
        }

        exports.intersects = intersects;

        function intersects(r1, r2, options) {
          r1 = new Range(r1, options);
          r2 = new Range(r2, options);
          return r1.intersects(r2);
        }

        exports.coerce = coerce;

        function coerce(version, options) {
          if (version instanceof SemVer) {
            return version;
          }

          if (typeof version === 'number') {
            version = String(version);
          }

          if (typeof version !== 'string') {
            return null;
          }

          options = options || {};
          var match = null;

          if (!options.rtl) {
            match = version.match(re[t.COERCE]);
          } else {
            var next;

            while ((next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {
              if (!match || next.index + next[0].length !== match.index + match[0].length) {
                match = next;
              }

              re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
            }

            re[t.COERCERTL].lastIndex = -1;
          }

          if (match === null) {
            return null;
          }

          return parse(match[2] + '.' + (match[3] || '0') + '.' + (match[4] || '0'), options);
        }
      }).call(this, __webpack_require__(16));
    }, function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.d(__webpack_exports__, "b", function () {
        return meta;
      });

      __webpack_require__.d(__webpack_exports__, "a", function () {
        return dehydrate;
      });

      var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            ownKeys(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      var meta = {
        inspectable: Symbol('inspectable'),
        inspected: Symbol('inspected'),
        name: Symbol('name'),
        preview_long: Symbol('preview_long'),
        preview_short: Symbol('preview_short'),
        readonly: Symbol('readonly'),
        size: Symbol('size'),
        type: Symbol('type'),
        unserializable: Symbol('unserializable')
      };
      var LEVEL_THRESHOLD = 2;

      function createDehydrated(type, inspectable, data, cleaned, path) {
        cleaned.push(path);
        var dehydrated = {
          inspectable: inspectable,
          type: type,
          preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
          preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
          name: !data.constructor || data.constructor.name === 'Object' ? '' : data.constructor.name
        };

        if (type === 'array' || type === 'typed_array') {
          dehydrated.size = data.length;
        } else if (type === 'object') {
          dehydrated.size = Object.keys(data).length;
        }

        if (type === 'iterator' || type === 'typed_array') {
          dehydrated.readonly = true;
        }

        return dehydrated;
      }

      function dehydrate(data, cleaned, unserializable, path, isPathAllowed) {
        var level = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
        var type = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["d"])(data);
        var isPathAllowedCheck;

        switch (type) {
          case 'html_element':
            cleaned.push(path);
            return {
              inspectable: false,
              preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
              preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
              name: data.tagName,
              type: type
            };

          case 'function':
            cleaned.push(path);
            return {
              inspectable: false,
              preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
              preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
              name: typeof data.name === 'function' || !data.name ? 'function' : data.name,
              type: type
            };

          case 'string':
            isPathAllowedCheck = isPathAllowed(path);

            if (isPathAllowedCheck) {
              return data;
            } else {
              return data.length <= 500 ? data : data.slice(0, 500) + '...';
            }

          case 'bigint':
            cleaned.push(path);
            return {
              inspectable: false,
              preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
              preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
              name: data.toString(),
              type: type
            };

          case 'symbol':
            cleaned.push(path);
            return {
              inspectable: false,
              preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
              preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
              name: data.toString(),
              type: type
            };

          case 'react_element':
            cleaned.push(path);
            return {
              inspectable: false,
              preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
              preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
              name: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["g"])(data) || 'Unknown',
              type: type
            };

          case 'array_buffer':
          case 'data_view':
            cleaned.push(path);
            return {
              inspectable: false,
              preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
              preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
              name: type === 'data_view' ? 'DataView' : 'ArrayBuffer',
              size: data.byteLength,
              type: type
            };

          case 'array':
            isPathAllowedCheck = isPathAllowed(path);

            if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {
              return createDehydrated(type, true, data, cleaned, path);
            }

            return data.map(function (item, i) {
              return dehydrate(item, cleaned, unserializable, path.concat([i]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);
            });

          case 'html_all_collection':
          case 'typed_array':
          case 'iterator':
            isPathAllowedCheck = isPathAllowed(path);

            if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {
              return createDehydrated(type, true, data, cleaned, path);
            } else {
              var unserializableValue = {
                unserializable: true,
                type: type,
                readonly: true,
                size: type === 'typed_array' ? data.length : undefined,
                preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
                preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
                name: !data.constructor || data.constructor.name === 'Object' ? '' : data.constructor.name
              };
              Array.from(data).forEach(function (item, i) {
                return unserializableValue[i] = dehydrate(item, cleaned, unserializable, path.concat([i]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);
              });
              unserializable.push(path);
              return unserializableValue;
            }

          case 'opaque_iterator':
            cleaned.push(path);
            return {
              inspectable: false,
              preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
              preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
              name: data[Symbol.toStringTag],
              type: type
            };

          case 'date':
            cleaned.push(path);
            return {
              inspectable: false,
              preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
              preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
              name: data.toString(),
              type: type
            };

          case 'regexp':
            cleaned.push(path);
            return {
              inspectable: false,
              preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
              preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
              name: data.toString(),
              type: type
            };

          case 'object':
            isPathAllowedCheck = isPathAllowed(path);

            if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {
              return createDehydrated(type, true, data, cleaned, path);
            } else {
              var object = {};
              Object(_utils__WEBPACK_IMPORTED_MODULE_0__["c"])(data).forEach(function (key) {
                var name = key.toString();
                object[name] = dehydrate(data[key], cleaned, unserializable, path.concat([name]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);
              });
              return object;
            }

          case 'infinity':
          case 'nan':
          case 'undefined':
            cleaned.push(path);
            return {
              type: type
            };

          default:
            return data;
        }
      }

      function fillInPath(object, data, path, value) {
        var target = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["h"])(object, path);

        if (target != null) {
          if (!target[meta.unserializable]) {
            delete target[meta.inspectable];
            delete target[meta.inspected];
            delete target[meta.name];
            delete target[meta.preview_long];
            delete target[meta.preview_short];
            delete target[meta.readonly];
            delete target[meta.size];
            delete target[meta.type];
          }
        }

        if (value !== null && data.unserializable.length > 0) {
          var unserializablePath = data.unserializable[0];
          var isMatch = unserializablePath.length === path.length;

          for (var i = 0; i < path.length; i++) {
            if (path[i] !== unserializablePath[i]) {
              isMatch = false;
              break;
            }
          }

          if (isMatch) {
            upgradeUnserializable(value, value);
          }
        }

        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["l"])(object, path, value);
      }

      function hydrate(object, cleaned, unserializable) {
        cleaned.forEach(function (path) {
          var length = path.length;
          var last = path[length - 1];
          var parent = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["h"])(object, path.slice(0, length - 1));

          if (!parent || !parent.hasOwnProperty(last)) {
            return;
          }

          var value = parent[last];

          if (!value) {
            return;
          } else if (value.type === 'infinity') {
            parent[last] = Infinity;
          } else if (value.type === 'nan') {
            parent[last] = NaN;
          } else if (value.type === 'undefined') {
            parent[last] = undefined;
          } else {
            var replaced = {};
            replaced[meta.inspectable] = !!value.inspectable;
            replaced[meta.inspected] = false;
            replaced[meta.name] = value.name;
            replaced[meta.preview_long] = value.preview_long;
            replaced[meta.preview_short] = value.preview_short;
            replaced[meta.size] = value.size;
            replaced[meta.readonly] = !!value.readonly;
            replaced[meta.type] = value.type;
            parent[last] = replaced;
          }
        });
        unserializable.forEach(function (path) {
          var length = path.length;
          var last = path[length - 1];
          var parent = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["h"])(object, path.slice(0, length - 1));

          if (!parent || !parent.hasOwnProperty(last)) {
            return;
          }

          var node = parent[last];

          var replacement = _objectSpread({}, node);

          upgradeUnserializable(replacement, node);
          parent[last] = replacement;
        });
        return object;
      }

      function upgradeUnserializable(destination, source) {
        var _Object$definePropert;

        Object.defineProperties(destination, (_Object$definePropert = {}, _defineProperty(_Object$definePropert, meta.inspected, {
          configurable: true,
          enumerable: false,
          value: !!source.inspected
        }), _defineProperty(_Object$definePropert, meta.name, {
          configurable: true,
          enumerable: false,
          value: source.name
        }), _defineProperty(_Object$definePropert, meta.preview_long, {
          configurable: true,
          enumerable: false,
          value: source.preview_long
        }), _defineProperty(_Object$definePropert, meta.preview_short, {
          configurable: true,
          enumerable: false,
          value: source.preview_short
        }), _defineProperty(_Object$definePropert, meta.size, {
          configurable: true,
          enumerable: false,
          value: source.size
        }), _defineProperty(_Object$definePropert, meta.readonly, {
          configurable: true,
          enumerable: false,
          value: !!source.readonly
        }), _defineProperty(_Object$definePropert, meta.type, {
          configurable: true,
          enumerable: false,
          value: source.type
        }), _defineProperty(_Object$definePropert, meta.unserializable, {
          configurable: true,
          enumerable: false,
          value: !!source.unserializable
        }), _Object$definePropert));
        delete destination.inspected;
        delete destination.name;
        delete destination.preview_long;
        delete destination.preview_short;
        delete destination.size;
        delete destination.readonly;
        delete destination.type;
        delete destination.unserializable;
      }
    }, function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.d(__webpack_exports__, "a", function () {
        return consoleManagedByDevToolsDuringStrictMode;
      });

      __webpack_require__.d(__webpack_exports__, "b", function () {
        return enableProfilerChangedHookIndices;
      });

      __webpack_require__.d(__webpack_exports__, "c", function () {
        return enableStyleXFeatures;
      });

      var consoleManagedByDevToolsDuringStrictMode = false;
      var enableLogger = false;
      var enableNamedHooksFeature = true;
      var enableProfilerChangedHookIndices = true;
      var enableStyleXFeatures = false;
      var isInternalFacebookBuild = false;
      null;
    }, function (module, exports) {
      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      var g;

      g = function () {
        return this;
      }();

      try {
        g = g || new Function("return this")();
      } catch (e) {
        if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
      }

      module.exports = g;
    }, function (module, exports, __webpack_require__) {
      (function (global) {
        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        var FUNC_ERROR_TEXT = 'Expected a function';
        var NAN = 0 / 0;
        var symbolTag = '[object Symbol]';
        var reTrim = /^\s+|\s+$/g;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsOctal = /^0o[0-7]+$/i;
        var freeParseInt = parseInt;
        var freeGlobal = (typeof global === "undefined" ? "undefined" : _typeof(global)) == 'object' && global && global.Object === Object && global;
        var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self && self.Object === Object && self;
        var root = freeGlobal || freeSelf || Function('return this')();
        var objectProto = Object.prototype;
        var objectToString = objectProto.toString;
        var nativeMax = Math.max,
            nativeMin = Math.min;

        var now = function now() {
          return root.Date.now();
        };

        function debounce(func, wait, options) {
          var lastArgs,
              lastThis,
              maxWait,
              result,
              timerId,
              lastCallTime,
              lastInvokeTime = 0,
              leading = false,
              maxing = false,
              trailing = true;

          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }

          wait = toNumber(wait) || 0;

          if (isObject(options)) {
            leading = !!options.leading;
            maxing = 'maxWait' in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }

          function invokeFunc(time) {
            var args = lastArgs,
                thisArg = lastThis;
            lastArgs = lastThis = undefined;
            lastInvokeTime = time;
            result = func.apply(thisArg, args);
            return result;
          }

          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout(timerExpired, wait);
            return leading ? invokeFunc(time) : result;
          }

          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime,
                result = wait - timeSinceLastCall;
            return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
          }

          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }

          function timerExpired() {
            var time = now();

            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }

            timerId = setTimeout(timerExpired, remainingWait(time));
          }

          function trailingEdge(time) {
            timerId = undefined;

            if (trailing && lastArgs) {
              return invokeFunc(time);
            }

            lastArgs = lastThis = undefined;
            return result;
          }

          function cancel() {
            if (timerId !== undefined) {
              clearTimeout(timerId);
            }

            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined;
          }

          function flush() {
            return timerId === undefined ? result : trailingEdge(now());
          }

          function debounced() {
            var time = now(),
                isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;

            if (isInvoking) {
              if (timerId === undefined) {
                return leadingEdge(lastCallTime);
              }

              if (maxing) {
                timerId = setTimeout(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }

            if (timerId === undefined) {
              timerId = setTimeout(timerExpired, wait);
            }

            return result;
          }

          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }

        function throttle(func, wait, options) {
          var leading = true,
              trailing = true;

          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }

          if (isObject(options)) {
            leading = 'leading' in options ? !!options.leading : leading;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }

          return debounce(func, wait, {
            'leading': leading,
            'maxWait': wait,
            'trailing': trailing
          });
        }

        function isObject(value) {
          var type = _typeof(value);

          return !!value && (type == 'object' || type == 'function');
        }

        function isObjectLike(value) {
          return !!value && _typeof(value) == 'object';
        }

        function isSymbol(value) {
          return _typeof(value) == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
        }

        function toNumber(value) {
          if (typeof value == 'number') {
            return value;
          }

          if (isSymbol(value)) {
            return NAN;
          }

          if (isObject(value)) {
            var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
            value = isObject(other) ? other + '' : other;
          }

          if (typeof value != 'string') {
            return value === 0 ? value : +value;
          }

          value = value.replace(reTrim, '');
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }

        module.exports = throttle;
      }).call(this, __webpack_require__(13));
    }, function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.d(__webpack_exports__, "b", function () {
        return getInternalReactConstants;
      });

      __webpack_require__.d(__webpack_exports__, "a", function () {
        return attach;
      });

      var semver = __webpack_require__(10);

      var types = __webpack_require__(1);

      var utils = __webpack_require__(2);

      var storage = __webpack_require__(5);

      var backend_utils = __webpack_require__(4);

      var constants = __webpack_require__(0);

      var react_debug_tools = __webpack_require__(20);

      var backend_console = __webpack_require__(8);

      var ReactSymbols = __webpack_require__(3);

      var DevToolsFeatureFlags_core_oss = __webpack_require__(12);

      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }

      var objectIs = typeof Object.is === 'function' ? Object.is : is;
      var shared_objectIs = objectIs;
      var hasOwnProperty_hasOwnProperty = Object.prototype.hasOwnProperty;
      var shared_hasOwnProperty = hasOwnProperty_hasOwnProperty;

      var isArray = __webpack_require__(6);

      var cachedStyleNameToValueMap = new Map();

      function getStyleXData(data) {
        var sources = new Set();
        var resolvedStyles = {};
        crawlData(data, sources, resolvedStyles);
        return {
          sources: Array.from(sources).sort(),
          resolvedStyles: resolvedStyles
        };
      }

      function crawlData(data, sources, resolvedStyles) {
        if (data == null) {
          return;
        }

        if (Object(isArray["a"])(data)) {
          data.forEach(function (entry) {
            if (entry == null) {
              return;
            }

            if (Object(isArray["a"])(entry)) {
              crawlData(entry, sources, resolvedStyles);
            } else {
              crawlObjectProperties(entry, sources, resolvedStyles);
            }
          });
        } else {
          crawlObjectProperties(data, sources, resolvedStyles);
        }

        resolvedStyles = Object.fromEntries(Object.entries(resolvedStyles).sort());
      }

      function crawlObjectProperties(entry, sources, resolvedStyles) {
        var keys = Object.keys(entry);
        keys.forEach(function (key) {
          var value = entry[key];

          if (typeof value === 'string') {
            if (key === value) {
              sources.add(key);
            } else {
              resolvedStyles[key] = getPropertyValueForStyleName(value);
            }
          } else {
            var nestedStyle = {};
            resolvedStyles[key] = nestedStyle;
            crawlData([value], sources, nestedStyle);
          }
        });
      }

      function getPropertyValueForStyleName(styleName) {
        if (cachedStyleNameToValueMap.has(styleName)) {
          return cachedStyleNameToValueMap.get(styleName);
        }

        for (var styleSheetIndex = 0; styleSheetIndex < document.styleSheets.length; styleSheetIndex++) {
          var styleSheet = document.styleSheets[styleSheetIndex];
          var rules = styleSheet.rules || styleSheet.cssRules;

          for (var ruleIndex = 0; ruleIndex < rules.length; ruleIndex++) {
            var rule = rules[ruleIndex];
            var cssText = rule.cssText,
                selectorText = rule.selectorText,
                style = rule.style;

            if (selectorText != null) {
              if (selectorText.startsWith(".".concat(styleName))) {
                var match = cssText.match(/{ *([a-z\-]+):/);

                if (match !== null) {
                  var property = match[1];
                  var value = style.getPropertyValue(property);
                  cachedStyleNameToValueMap.set(styleName, value);
                  return value;
                } else {
                  return null;
                }
              }
            }
          }
        }

        return null;
      }

      var shared_isArray = __webpack_require__(9);

      var REACT_TOTAL_NUM_LANES = 31;
      var SCHEDULING_PROFILER_VERSION = 1;
      var SNAPSHOT_MAX_HEIGHT = 60;

      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
      }

      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
      }

      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      }

      function _iterableToArrayLimit(arr, i) {
        if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;

        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);

            if (i && _arr.length === i) break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null) _i["return"]();
          } finally {
            if (_d) throw _e;
          }
        }

        return _arr;
      }

      function _arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
      }

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      var TIME_OFFSET = 10;
      var performanceTarget = null;
      var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function';
      var supportsUserTimingV3 = false;

      if (supportsUserTiming) {
        var CHECK_V3_MARK = '__v3';
        var markOptions = {};
        Object.defineProperty(markOptions, 'startTime', {
          get: function get() {
            supportsUserTimingV3 = true;
            return 0;
          },
          set: function set() {}
        });

        try {
          performance.mark(CHECK_V3_MARK, markOptions);
        } catch (error) {} finally {
          performance.clearMarks(CHECK_V3_MARK);
        }
      }

      if (supportsUserTimingV3) {
        performanceTarget = performance;
      }

      var getCurrentTime = (typeof performance === "undefined" ? "undefined" : _typeof(performance)) === 'object' && typeof performance.now === 'function' ? function () {
        return performance.now();
      } : function () {
        return Date.now();
      };

      function setPerformanceMock_ONLY_FOR_TESTING(performanceMock) {
        performanceTarget = performanceMock;
        supportsUserTiming = performanceMock !== null;
        supportsUserTimingV3 = performanceMock !== null;
      }

      function createProfilingHooks(_ref) {
        var getDisplayNameForFiber = _ref.getDisplayNameForFiber,
            getIsProfiling = _ref.getIsProfiling,
            getLaneLabelMap = _ref.getLaneLabelMap,
            reactVersion = _ref.reactVersion;
        var currentBatchUID = 0;
        var currentReactComponentMeasure = null;
        var currentReactMeasuresStack = [];
        var currentTimelineData = null;
        var isProfiling = false;
        var nextRenderShouldStartNewBatch = false;

        function getRelativeTime() {
          var currentTime = getCurrentTime();

          if (currentTimelineData) {
            if (currentTimelineData.startTime === 0) {
              currentTimelineData.startTime = currentTime - TIME_OFFSET;
            }

            return currentTime - currentTimelineData.startTime;
          }

          return 0;
        }

        function getInternalModuleRanges() {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.getInternalModuleRanges === 'function') {
            var ranges = __REACT_DEVTOOLS_GLOBAL_HOOK__.getInternalModuleRanges();

            if (Object(shared_isArray["a"])(ranges)) {
              return ranges;
            }
          }

          return null;
        }

        function getTimelineData() {
          return currentTimelineData;
        }

        function laneToLanesArray(lanes) {
          var lanesArray = [];
          var lane = 1;

          for (var index = 0; index < REACT_TOTAL_NUM_LANES; index++) {
            if (lane & lanes) {
              lanesArray.push(lane);
            }

            lane *= 2;
          }

          return lanesArray;
        }

        var laneToLabelMap = typeof getLaneLabelMap === 'function' ? getLaneLabelMap() : null;

        function markMetadata() {
          markAndClear("--react-version-".concat(reactVersion));
          markAndClear("--profiler-version-".concat(SCHEDULING_PROFILER_VERSION));
          var ranges = getInternalModuleRanges();

          if (ranges) {
            for (var i = 0; i < ranges.length; i++) {
              var range = ranges[i];

              if (Object(shared_isArray["a"])(range) && range.length === 2) {
                var _ranges$i = _slicedToArray(ranges[i], 2),
                    startStackFrame = _ranges$i[0],
                    stopStackFrame = _ranges$i[1];

                markAndClear("--react-internal-module-start-".concat(startStackFrame));
                markAndClear("--react-internal-module-stop-".concat(stopStackFrame));
              }
            }
          }

          if (laneToLabelMap != null) {
            var labels = Array.from(laneToLabelMap.values()).join(',');
            markAndClear("--react-lane-labels-".concat(labels));
          }
        }

        function markAndClear(markName) {
          performanceTarget.mark(markName);
          performanceTarget.clearMarks(markName);
        }

        function recordReactMeasureStarted(type, lanes) {
          var depth = 0;

          if (currentReactMeasuresStack.length > 0) {
            var top = currentReactMeasuresStack[currentReactMeasuresStack.length - 1];
            depth = top.type === 'render-idle' ? top.depth : top.depth + 1;
          }

          var lanesArray = laneToLanesArray(lanes);
          var reactMeasure = {
            type: type,
            batchUID: currentBatchUID,
            depth: depth,
            lanes: lanesArray,
            timestamp: getRelativeTime(),
            duration: 0
          };
          currentReactMeasuresStack.push(reactMeasure);

          if (currentTimelineData) {
            var _currentTimelineData = currentTimelineData,
                batchUIDToMeasuresMap = _currentTimelineData.batchUIDToMeasuresMap,
                laneToReactMeasureMap = _currentTimelineData.laneToReactMeasureMap;
            var reactMeasures = batchUIDToMeasuresMap.get(currentBatchUID);

            if (reactMeasures != null) {
              reactMeasures.push(reactMeasure);
            } else {
              batchUIDToMeasuresMap.set(currentBatchUID, [reactMeasure]);
            }

            lanesArray.forEach(function (lane) {
              reactMeasures = laneToReactMeasureMap.get(lane);

              if (reactMeasures) {
                reactMeasures.push(reactMeasure);
              }
            });
          }
        }

        function recordReactMeasureCompleted(type) {
          var currentTime = getRelativeTime();

          if (currentReactMeasuresStack.length === 0) {
            console.error('Unexpected type "%s" completed at %sms while currentReactMeasuresStack is empty.', type, currentTime);
            return;
          }

          var top = currentReactMeasuresStack.pop();

          if (top.type !== type) {
            console.error('Unexpected type "%s" completed at %sms before "%s" completed.', type, currentTime, top.type);
          }

          top.duration = currentTime - top.timestamp;

          if (currentTimelineData) {
            currentTimelineData.duration = getRelativeTime() + TIME_OFFSET;
          }
        }

        function markCommitStarted(lanes) {
          if (isProfiling) {
            recordReactMeasureStarted('commit', lanes);
            nextRenderShouldStartNewBatch = true;
          }

          if (supportsUserTimingV3) {
            markAndClear("--commit-start-".concat(lanes));
            markMetadata();
          }
        }

        function markCommitStopped() {
          if (isProfiling) {
            recordReactMeasureCompleted('commit');
            recordReactMeasureCompleted('render-idle');
          }

          if (supportsUserTimingV3) {
            markAndClear('--commit-stop');
          }
        }

        function markComponentRenderStarted(fiber) {
          if (isProfiling || supportsUserTimingV3) {
            var componentName = getDisplayNameForFiber(fiber) || 'Unknown';

            if (isProfiling) {
              if (isProfiling) {
                currentReactComponentMeasure = {
                  componentName: componentName,
                  duration: 0,
                  timestamp: getRelativeTime(),
                  type: 'render',
                  warning: null
                };
              }
            }

            if (supportsUserTimingV3) {
              markAndClear("--component-render-start-".concat(componentName));
            }
          }
        }

        function markComponentRenderStopped() {
          if (isProfiling) {
            if (currentReactComponentMeasure) {
              if (currentTimelineData) {
                currentTimelineData.componentMeasures.push(currentReactComponentMeasure);
              }

              currentReactComponentMeasure.duration = getRelativeTime() - currentReactComponentMeasure.timestamp;
              currentReactComponentMeasure = null;
            }
          }

          if (supportsUserTimingV3) {
            markAndClear('--component-render-stop');
          }
        }

        function markComponentLayoutEffectMountStarted(fiber) {
          if (isProfiling || supportsUserTimingV3) {
            var componentName = getDisplayNameForFiber(fiber) || 'Unknown';

            if (isProfiling) {
              if (isProfiling) {
                currentReactComponentMeasure = {
                  componentName: componentName,
                  duration: 0,
                  timestamp: getRelativeTime(),
                  type: 'layout-effect-mount',
                  warning: null
                };
              }
            }

            if (supportsUserTimingV3) {
              markAndClear("--component-layout-effect-mount-start-".concat(componentName));
            }
          }
        }

        function markComponentLayoutEffectMountStopped() {
          if (isProfiling) {
            if (currentReactComponentMeasure) {
              if (currentTimelineData) {
                currentTimelineData.componentMeasures.push(currentReactComponentMeasure);
              }

              currentReactComponentMeasure.duration = getRelativeTime() - currentReactComponentMeasure.timestamp;
              currentReactComponentMeasure = null;
            }
          }

          if (supportsUserTimingV3) {
            markAndClear('--component-layout-effect-mount-stop');
          }
        }

        function markComponentLayoutEffectUnmountStarted(fiber) {
          if (isProfiling || supportsUserTimingV3) {
            var componentName = getDisplayNameForFiber(fiber) || 'Unknown';

            if (isProfiling) {
              if (isProfiling) {
                currentReactComponentMeasure = {
                  componentName: componentName,
                  duration: 0,
                  timestamp: getRelativeTime(),
                  type: 'layout-effect-unmount',
                  warning: null
                };
              }
            }

            if (supportsUserTimingV3) {
              markAndClear("--component-layout-effect-unmount-start-".concat(componentName));
            }
          }
        }

        function markComponentLayoutEffectUnmountStopped() {
          if (isProfiling) {
            if (currentReactComponentMeasure) {
              if (currentTimelineData) {
                currentTimelineData.componentMeasures.push(currentReactComponentMeasure);
              }

              currentReactComponentMeasure.duration = getRelativeTime() - currentReactComponentMeasure.timestamp;
              currentReactComponentMeasure = null;
            }
          }

          if (supportsUserTimingV3) {
            markAndClear('--component-layout-effect-unmount-stop');
          }
        }

        function markComponentPassiveEffectMountStarted(fiber) {
          if (isProfiling || supportsUserTimingV3) {
            var componentName = getDisplayNameForFiber(fiber) || 'Unknown';

            if (isProfiling) {
              if (isProfiling) {
                currentReactComponentMeasure = {
                  componentName: componentName,
                  duration: 0,
                  timestamp: getRelativeTime(),
                  type: 'passive-effect-mount',
                  warning: null
                };
              }
            }

            if (supportsUserTimingV3) {
              markAndClear("--component-passive-effect-mount-start-".concat(componentName));
            }
          }
        }

        function markComponentPassiveEffectMountStopped() {
          if (isProfiling) {
            if (currentReactComponentMeasure) {
              if (currentTimelineData) {
                currentTimelineData.componentMeasures.push(currentReactComponentMeasure);
              }

              currentReactComponentMeasure.duration = getRelativeTime() - currentReactComponentMeasure.timestamp;
              currentReactComponentMeasure = null;
            }
          }

          if (supportsUserTimingV3) {
            markAndClear('--component-passive-effect-mount-stop');
          }
        }

        function markComponentPassiveEffectUnmountStarted(fiber) {
          if (isProfiling || supportsUserTimingV3) {
            var componentName = getDisplayNameForFiber(fiber) || 'Unknown';

            if (isProfiling) {
              if (isProfiling) {
                currentReactComponentMeasure = {
                  componentName: componentName,
                  duration: 0,
                  timestamp: getRelativeTime(),
                  type: 'passive-effect-unmount',
                  warning: null
                };
              }
            }

            if (supportsUserTimingV3) {
              markAndClear("--component-passive-effect-unmount-start-".concat(componentName));
            }
          }
        }

        function markComponentPassiveEffectUnmountStopped() {
          if (isProfiling) {
            if (currentReactComponentMeasure) {
              if (currentTimelineData) {
                currentTimelineData.componentMeasures.push(currentReactComponentMeasure);
              }

              currentReactComponentMeasure.duration = getRelativeTime() - currentReactComponentMeasure.timestamp;
              currentReactComponentMeasure = null;
            }
          }

          if (supportsUserTimingV3) {
            markAndClear('--component-passive-effect-unmount-stop');
          }
        }

        function markComponentErrored(fiber, thrownValue, lanes) {
          if (isProfiling || supportsUserTimingV3) {
            var componentName = getDisplayNameForFiber(fiber) || 'Unknown';
            var phase = fiber.alternate === null ? 'mount' : 'update';
            var message = '';

            if (thrownValue !== null && _typeof(thrownValue) === 'object' && typeof thrownValue.message === 'string') {
              message = thrownValue.message;
            } else if (typeof thrownValue === 'string') {
              message = thrownValue;
            }

            if (isProfiling) {
              if (currentTimelineData) {
                currentTimelineData.thrownErrors.push({
                  componentName: componentName,
                  message: message,
                  phase: phase,
                  timestamp: getRelativeTime(),
                  type: 'thrown-error'
                });
              }
            }

            if (supportsUserTimingV3) {
              markAndClear("--error-".concat(componentName, "-").concat(phase, "-").concat(message));
            }
          }
        }

        var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
        var wakeableIDs = new PossiblyWeakMap();
        var wakeableID = 0;

        function getWakeableID(wakeable) {
          if (!wakeableIDs.has(wakeable)) {
            wakeableIDs.set(wakeable, wakeableID++);
          }

          return wakeableIDs.get(wakeable);
        }

        function markComponentSuspended(fiber, wakeable, lanes) {
          if (isProfiling || supportsUserTimingV3) {
            var eventType = wakeableIDs.has(wakeable) ? 'resuspend' : 'suspend';
            var id = getWakeableID(wakeable);
            var componentName = getDisplayNameForFiber(fiber) || 'Unknown';
            var phase = fiber.alternate === null ? 'mount' : 'update';
            var displayName = wakeable.displayName || '';
            var suspenseEvent = null;

            if (isProfiling) {
              suspenseEvent = {
                componentName: componentName,
                depth: 0,
                duration: 0,
                id: "".concat(id),
                phase: phase,
                promiseName: displayName,
                resolution: 'unresolved',
                timestamp: getRelativeTime(),
                type: 'suspense',
                warning: null
              };

              if (currentTimelineData) {
                currentTimelineData.suspenseEvents.push(suspenseEvent);
              }
            }

            if (supportsUserTimingV3) {
              markAndClear("--suspense-".concat(eventType, "-").concat(id, "-").concat(componentName, "-").concat(phase, "-").concat(lanes, "-").concat(displayName));
            }

            wakeable.then(function () {
              if (suspenseEvent) {
                suspenseEvent.duration = getRelativeTime() - suspenseEvent.timestamp;
                suspenseEvent.resolution = 'resolved';
              }

              if (supportsUserTimingV3) {
                markAndClear("--suspense-resolved-".concat(id, "-").concat(componentName));
              }
            }, function () {
              if (suspenseEvent) {
                suspenseEvent.duration = getRelativeTime() - suspenseEvent.timestamp;
                suspenseEvent.resolution = 'rejected';
              }

              if (supportsUserTimingV3) {
                markAndClear("--suspense-rejected-".concat(id, "-").concat(componentName));
              }
            });
          }
        }

        function markLayoutEffectsStarted(lanes) {
          if (isProfiling) {
            recordReactMeasureStarted('layout-effects', lanes);
          }

          if (supportsUserTimingV3) {
            markAndClear("--layout-effects-start-".concat(lanes));
          }
        }

        function markLayoutEffectsStopped() {
          if (isProfiling) {
            recordReactMeasureCompleted('layout-effects');
          }

          if (supportsUserTimingV3) {
            markAndClear('--layout-effects-stop');
          }
        }

        function markPassiveEffectsStarted(lanes) {
          if (isProfiling) {
            recordReactMeasureStarted('passive-effects', lanes);
          }

          if (supportsUserTimingV3) {
            markAndClear("--passive-effects-start-".concat(lanes));
          }
        }

        function markPassiveEffectsStopped() {
          if (isProfiling) {
            recordReactMeasureCompleted('passive-effects');
          }

          if (supportsUserTimingV3) {
            markAndClear('--passive-effects-stop');
          }
        }

        function markRenderStarted(lanes) {
          if (isProfiling) {
            if (nextRenderShouldStartNewBatch) {
              nextRenderShouldStartNewBatch = false;
              currentBatchUID++;
            }

            if (currentReactMeasuresStack.length === 0 || currentReactMeasuresStack[currentReactMeasuresStack.length - 1].type !== 'render-idle') {
              recordReactMeasureStarted('render-idle', lanes);
            }

            recordReactMeasureStarted('render', lanes);
          }

          if (supportsUserTimingV3) {
            markAndClear("--render-start-".concat(lanes));
          }
        }

        function markRenderYielded() {
          if (isProfiling) {
            recordReactMeasureCompleted('render');
          }

          if (supportsUserTimingV3) {
            markAndClear('--render-yield');
          }
        }

        function markRenderStopped() {
          if (isProfiling) {
            recordReactMeasureCompleted('render');
          }

          if (supportsUserTimingV3) {
            markAndClear('--render-stop');
          }
        }

        function markRenderScheduled(lane) {
          if (isProfiling) {
            if (currentTimelineData) {
              currentTimelineData.schedulingEvents.push({
                lanes: laneToLanesArray(lane),
                timestamp: getRelativeTime(),
                type: 'schedule-render',
                warning: null
              });
            }
          }

          if (supportsUserTimingV3) {
            markAndClear("--schedule-render-".concat(lane));
          }
        }

        function markForceUpdateScheduled(fiber, lane) {
          if (isProfiling || supportsUserTimingV3) {
            var componentName = getDisplayNameForFiber(fiber) || 'Unknown';

            if (isProfiling) {
              if (currentTimelineData) {
                currentTimelineData.schedulingEvents.push({
                  componentName: componentName,
                  lanes: laneToLanesArray(lane),
                  timestamp: getRelativeTime(),
                  type: 'schedule-force-update',
                  warning: null
                });
              }
            }

            if (supportsUserTimingV3) {
              markAndClear("--schedule-forced-update-".concat(lane, "-").concat(componentName));
            }
          }
        }

        function markStateUpdateScheduled(fiber, lane) {
          if (isProfiling || supportsUserTimingV3) {
            var componentName = getDisplayNameForFiber(fiber) || 'Unknown';

            if (isProfiling) {
              if (currentTimelineData) {
                currentTimelineData.schedulingEvents.push({
                  componentName: componentName,
                  lanes: laneToLanesArray(lane),
                  timestamp: getRelativeTime(),
                  type: 'schedule-state-update',
                  warning: null
                });
              }
            }

            if (supportsUserTimingV3) {
              markAndClear("--schedule-state-update-".concat(lane, "-").concat(componentName));
            }
          }
        }

        function toggleProfilingStatus(value) {
          if (isProfiling !== value) {
            isProfiling = value;

            if (isProfiling) {
              var internalModuleSourceToRanges = new Map();

              if (supportsUserTimingV3) {
                var ranges = getInternalModuleRanges();

                if (ranges) {
                  for (var i = 0; i < ranges.length; i++) {
                    var range = ranges[i];

                    if (Object(shared_isArray["a"])(range) && range.length === 2) {
                      var _ranges$i2 = _slicedToArray(ranges[i], 2),
                          startStackFrame = _ranges$i2[0],
                          stopStackFrame = _ranges$i2[1];

                      markAndClear("--react-internal-module-start-".concat(startStackFrame));
                      markAndClear("--react-internal-module-stop-".concat(stopStackFrame));
                    }
                  }
                }
              }

              var laneToReactMeasureMap = new Map();
              var lane = 1;

              for (var index = 0; index < REACT_TOTAL_NUM_LANES; index++) {
                laneToReactMeasureMap.set(lane, []);
                lane *= 2;
              }

              currentBatchUID = 0;
              currentReactComponentMeasure = null;
              currentReactMeasuresStack = [];
              currentTimelineData = {
                internalModuleSourceToRanges: internalModuleSourceToRanges,
                laneToLabelMap: laneToLabelMap || new Map(),
                reactVersion: reactVersion,
                componentMeasures: [],
                schedulingEvents: [],
                suspenseEvents: [],
                thrownErrors: [],
                batchUIDToMeasuresMap: new Map(),
                duration: 0,
                laneToReactMeasureMap: laneToReactMeasureMap,
                startTime: 0,
                flamechart: [],
                nativeEvents: [],
                networkMeasures: [],
                otherUserTimingMarks: [],
                snapshots: [],
                snapshotHeight: 0
              };
              nextRenderShouldStartNewBatch = true;
            }
          }
        }

        return {
          getTimelineData: getTimelineData,
          profilingHooks: {
            markCommitStarted: markCommitStarted,
            markCommitStopped: markCommitStopped,
            markComponentRenderStarted: markComponentRenderStarted,
            markComponentRenderStopped: markComponentRenderStopped,
            markComponentPassiveEffectMountStarted: markComponentPassiveEffectMountStarted,
            markComponentPassiveEffectMountStopped: markComponentPassiveEffectMountStopped,
            markComponentPassiveEffectUnmountStarted: markComponentPassiveEffectUnmountStarted,
            markComponentPassiveEffectUnmountStopped: markComponentPassiveEffectUnmountStopped,
            markComponentLayoutEffectMountStarted: markComponentLayoutEffectMountStarted,
            markComponentLayoutEffectMountStopped: markComponentLayoutEffectMountStopped,
            markComponentLayoutEffectUnmountStarted: markComponentLayoutEffectUnmountStarted,
            markComponentLayoutEffectUnmountStopped: markComponentLayoutEffectUnmountStopped,
            markComponentErrored: markComponentErrored,
            markComponentSuspended: markComponentSuspended,
            markLayoutEffectsStarted: markLayoutEffectsStarted,
            markLayoutEffectsStopped: markLayoutEffectsStopped,
            markPassiveEffectsStarted: markPassiveEffectsStarted,
            markPassiveEffectsStopped: markPassiveEffectsStopped,
            markRenderStarted: markRenderStarted,
            markRenderYielded: markRenderYielded,
            markRenderStopped: markRenderStopped,
            markRenderScheduled: markRenderScheduled,
            markForceUpdateScheduled: markForceUpdateScheduled,
            markStateUpdateScheduled: markStateUpdateScheduled
          },
          toggleProfilingStatus: toggleProfilingStatus
        };
      }

      function _objectWithoutProperties(source, excluded) {
        if (source == null) return {};

        var target = _objectWithoutPropertiesLoose(source, excluded);

        var key, i;

        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
          }
        }

        return target;
      }

      function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;

        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }

        return target;
      }

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            ownKeys(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function renderer_slicedToArray(arr, i) {
        return renderer_arrayWithHoles(arr) || renderer_iterableToArrayLimit(arr, i) || renderer_unsupportedIterableToArray(arr, i) || renderer_nonIterableRest();
      }

      function renderer_nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      function renderer_iterableToArrayLimit(arr, i) {
        if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;

        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);

            if (i && _arr.length === i) break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null) _i["return"]();
          } finally {
            if (_d) throw _e;
          }
        }

        return _arr;
      }

      function renderer_arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
      }

      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || renderer_unsupportedIterableToArray(arr) || _nonIterableSpread();
      }

      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      function _iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
      }

      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) return renderer_arrayLikeToArray(arr);
      }

      function _createForOfIteratorHelper(o, allowArrayLike) {
        var it;

        if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
          if (Array.isArray(o) || (it = renderer_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;

            var F = function F() {};

            return {
              s: F,
              n: function n() {
                if (i >= o.length) return {
                  done: true
                };
                return {
                  done: false,
                  value: o[i++]
                };
              },
              e: function e(_e2) {
                throw _e2;
              },
              f: F
            };
          }

          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }

        var normalCompletion = true,
            didErr = false,
            err;
        return {
          s: function s() {
            it = o[Symbol.iterator]();
          },
          n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
          },
          e: function e(_e3) {
            didErr = true;
            err = _e3;
          },
          f: function f() {
            try {
              if (!normalCompletion && it.return != null) it.return();
            } finally {
              if (didErr) throw err;
            }
          }
        };
      }

      function renderer_unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return renderer_arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return renderer_arrayLikeToArray(o, minLen);
      }

      function renderer_arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      }

      function renderer_typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          renderer_typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          renderer_typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return renderer_typeof(obj);
      }

      function getFiberFlags(fiber) {
        return fiber.flags !== undefined ? fiber.flags : fiber.effectTag;
      }

      var renderer_getCurrentTime = (typeof performance === "undefined" ? "undefined" : renderer_typeof(performance)) === 'object' && typeof performance.now === 'function' ? function () {
        return performance.now();
      } : function () {
        return Date.now();
      };

      function getInternalReactConstants(version) {
        var ReactTypeOfSideEffect = {
          DidCapture: 128,
          NoFlags: 0,
          PerformedWork: 1,
          Placement: 2,
          Incomplete: 8192,
          Hydrating: 4096
        };
        var ReactPriorityLevels = {
          ImmediatePriority: 99,
          UserBlockingPriority: 98,
          NormalPriority: 97,
          LowPriority: 96,
          IdlePriority: 95,
          NoPriority: 90
        };

        if (Object(semver["gt"])(version, '17.0.2')) {
          ReactPriorityLevels = {
            ImmediatePriority: 1,
            UserBlockingPriority: 2,
            NormalPriority: 3,
            LowPriority: 4,
            IdlePriority: 5,
            NoPriority: 0
          };
        }

        var StrictModeBits = 0;

        if (Object(semver["gte"])(version, '18.0.0-alpha')) {
          StrictModeBits = 24;
        } else if (Object(semver["gte"])(version, '16.9.0')) {
          StrictModeBits = 1;
        } else if (Object(semver["gte"])(version, '16.3.0')) {
          StrictModeBits = 2;
        }

        var ReactTypeOfWork = null;

        if (Object(semver["gt"])(version, '17.0.1')) {
          ReactTypeOfWork = {
            CacheComponent: 24,
            ClassComponent: 1,
            ContextConsumer: 9,
            ContextProvider: 10,
            CoroutineComponent: -1,
            CoroutineHandlerPhase: -1,
            DehydratedSuspenseComponent: 18,
            ForwardRef: 11,
            Fragment: 7,
            FunctionComponent: 0,
            HostComponent: 5,
            HostPortal: 4,
            HostRoot: 3,
            HostText: 6,
            IncompleteClassComponent: 17,
            IndeterminateComponent: 2,
            LazyComponent: 16,
            LegacyHiddenComponent: 23,
            MemoComponent: 14,
            Mode: 8,
            OffscreenComponent: 22,
            Profiler: 12,
            ScopeComponent: 21,
            SimpleMemoComponent: 15,
            SuspenseComponent: 13,
            SuspenseListComponent: 19,
            TracingMarkerComponent: 25,
            YieldComponent: -1
          };
        } else if (Object(semver["gte"])(version, '17.0.0-alpha')) {
          ReactTypeOfWork = {
            CacheComponent: -1,
            ClassComponent: 1,
            ContextConsumer: 9,
            ContextProvider: 10,
            CoroutineComponent: -1,
            CoroutineHandlerPhase: -1,
            DehydratedSuspenseComponent: 18,
            ForwardRef: 11,
            Fragment: 7,
            FunctionComponent: 0,
            HostComponent: 5,
            HostPortal: 4,
            HostRoot: 3,
            HostText: 6,
            IncompleteClassComponent: 17,
            IndeterminateComponent: 2,
            LazyComponent: 16,
            LegacyHiddenComponent: 24,
            MemoComponent: 14,
            Mode: 8,
            OffscreenComponent: 23,
            Profiler: 12,
            ScopeComponent: 21,
            SimpleMemoComponent: 15,
            SuspenseComponent: 13,
            SuspenseListComponent: 19,
            TracingMarkerComponent: -1,
            YieldComponent: -1
          };
        } else if (Object(semver["gte"])(version, '16.6.0-beta.0')) {
          ReactTypeOfWork = {
            CacheComponent: -1,
            ClassComponent: 1,
            ContextConsumer: 9,
            ContextProvider: 10,
            CoroutineComponent: -1,
            CoroutineHandlerPhase: -1,
            DehydratedSuspenseComponent: 18,
            ForwardRef: 11,
            Fragment: 7,
            FunctionComponent: 0,
            HostComponent: 5,
            HostPortal: 4,
            HostRoot: 3,
            HostText: 6,
            IncompleteClassComponent: 17,
            IndeterminateComponent: 2,
            LazyComponent: 16,
            LegacyHiddenComponent: -1,
            MemoComponent: 14,
            Mode: 8,
            OffscreenComponent: -1,
            Profiler: 12,
            ScopeComponent: -1,
            SimpleMemoComponent: 15,
            SuspenseComponent: 13,
            SuspenseListComponent: 19,
            TracingMarkerComponent: -1,
            YieldComponent: -1
          };
        } else if (Object(semver["gte"])(version, '16.4.3-alpha')) {
          ReactTypeOfWork = {
            CacheComponent: -1,
            ClassComponent: 2,
            ContextConsumer: 11,
            ContextProvider: 12,
            CoroutineComponent: -1,
            CoroutineHandlerPhase: -1,
            DehydratedSuspenseComponent: -1,
            ForwardRef: 13,
            Fragment: 9,
            FunctionComponent: 0,
            HostComponent: 7,
            HostPortal: 6,
            HostRoot: 5,
            HostText: 8,
            IncompleteClassComponent: -1,
            IndeterminateComponent: 4,
            LazyComponent: -1,
            LegacyHiddenComponent: -1,
            MemoComponent: -1,
            Mode: 10,
            OffscreenComponent: -1,
            Profiler: 15,
            ScopeComponent: -1,
            SimpleMemoComponent: -1,
            SuspenseComponent: 16,
            SuspenseListComponent: -1,
            TracingMarkerComponent: -1,
            YieldComponent: -1
          };
        } else {
          ReactTypeOfWork = {
            CacheComponent: -1,
            ClassComponent: 2,
            ContextConsumer: 12,
            ContextProvider: 13,
            CoroutineComponent: 7,
            CoroutineHandlerPhase: 8,
            DehydratedSuspenseComponent: -1,
            ForwardRef: 14,
            Fragment: 10,
            FunctionComponent: 1,
            HostComponent: 5,
            HostPortal: 4,
            HostRoot: 3,
            HostText: 6,
            IncompleteClassComponent: -1,
            IndeterminateComponent: 0,
            LazyComponent: -1,
            LegacyHiddenComponent: -1,
            MemoComponent: -1,
            Mode: 11,
            OffscreenComponent: -1,
            Profiler: 15,
            ScopeComponent: -1,
            SimpleMemoComponent: -1,
            SuspenseComponent: 16,
            SuspenseListComponent: -1,
            TracingMarkerComponent: -1,
            YieldComponent: 9
          };
        }

        function getTypeSymbol(type) {
          var symbolOrNumber = renderer_typeof(type) === 'object' && type !== null ? type.$$typeof : type;
          return renderer_typeof(symbolOrNumber) === 'symbol' ? symbolOrNumber.toString() : symbolOrNumber;
        }

        var _ReactTypeOfWork = ReactTypeOfWork,
            CacheComponent = _ReactTypeOfWork.CacheComponent,
            ClassComponent = _ReactTypeOfWork.ClassComponent,
            IncompleteClassComponent = _ReactTypeOfWork.IncompleteClassComponent,
            FunctionComponent = _ReactTypeOfWork.FunctionComponent,
            IndeterminateComponent = _ReactTypeOfWork.IndeterminateComponent,
            ForwardRef = _ReactTypeOfWork.ForwardRef,
            HostRoot = _ReactTypeOfWork.HostRoot,
            HostComponent = _ReactTypeOfWork.HostComponent,
            HostPortal = _ReactTypeOfWork.HostPortal,
            HostText = _ReactTypeOfWork.HostText,
            Fragment = _ReactTypeOfWork.Fragment,
            LazyComponent = _ReactTypeOfWork.LazyComponent,
            LegacyHiddenComponent = _ReactTypeOfWork.LegacyHiddenComponent,
            MemoComponent = _ReactTypeOfWork.MemoComponent,
            OffscreenComponent = _ReactTypeOfWork.OffscreenComponent,
            Profiler = _ReactTypeOfWork.Profiler,
            ScopeComponent = _ReactTypeOfWork.ScopeComponent,
            SimpleMemoComponent = _ReactTypeOfWork.SimpleMemoComponent,
            SuspenseComponent = _ReactTypeOfWork.SuspenseComponent,
            SuspenseListComponent = _ReactTypeOfWork.SuspenseListComponent,
            TracingMarkerComponent = _ReactTypeOfWork.TracingMarkerComponent;

        function resolveFiberType(type) {
          var typeSymbol = getTypeSymbol(type);

          switch (typeSymbol) {
            case ReactSymbols["j"]:
            case ReactSymbols["k"]:
              return resolveFiberType(type.type);

            case ReactSymbols["f"]:
            case ReactSymbols["g"]:
              return type.render;

            default:
              return type;
          }
        }

        function getDisplayNameForFiber(fiber) {
          var elementType = fiber.elementType,
              type = fiber.type,
              tag = fiber.tag;
          var resolvedType = type;

          if (renderer_typeof(type) === 'object' && type !== null) {
            resolvedType = resolveFiberType(type);
          }

          var resolvedContext = null;

          switch (tag) {
            case CacheComponent:
              return 'Cache';

            case ClassComponent:
            case IncompleteClassComponent:
              return Object(utils["f"])(resolvedType);

            case FunctionComponent:
            case IndeterminateComponent:
              return Object(utils["f"])(resolvedType);

            case ForwardRef:
              return type && type.displayName || Object(utils["f"])(resolvedType, 'Anonymous');

            case HostRoot:
              var fiberRoot = fiber.stateNode;

              if (fiberRoot != null && fiberRoot._debugRootType !== null) {
                return fiberRoot._debugRootType;
              }

              return null;

            case HostComponent:
              return type;

            case HostPortal:
            case HostText:
            case Fragment:
              return null;

            case LazyComponent:
              return 'Lazy';

            case MemoComponent:
            case SimpleMemoComponent:
              return elementType && elementType.displayName || type && type.displayName || Object(utils["f"])(resolvedType, 'Anonymous');

            case SuspenseComponent:
              return 'Suspense';

            case LegacyHiddenComponent:
              return 'LegacyHidden';

            case OffscreenComponent:
              return 'Offscreen';

            case ScopeComponent:
              return 'Scope';

            case SuspenseListComponent:
              return 'SuspenseList';

            case Profiler:
              return 'Profiler';

            case TracingMarkerComponent:
              return 'TracingMarker';

            default:
              var typeSymbol = getTypeSymbol(type);

              switch (typeSymbol) {
                case ReactSymbols["a"]:
                case ReactSymbols["b"]:
                case ReactSymbols["e"]:
                  return null;

                case ReactSymbols["n"]:
                case ReactSymbols["o"]:
                  resolvedContext = fiber.type._context || fiber.type.context;
                  return "".concat(resolvedContext.displayName || 'Context', ".Provider");

                case ReactSymbols["c"]:
                case ReactSymbols["d"]:
                case ReactSymbols["r"]:
                  resolvedContext = fiber.type._context || fiber.type;
                  return "".concat(resolvedContext.displayName || 'Context', ".Consumer");

                case ReactSymbols["s"]:
                case ReactSymbols["t"]:
                  return null;

                case ReactSymbols["l"]:
                case ReactSymbols["m"]:
                  return "Profiler(".concat(fiber.memoizedProps.id, ")");

                case ReactSymbols["p"]:
                case ReactSymbols["q"]:
                  return 'Scope';

                default:
                  return null;
              }

          }
        }

        return {
          getDisplayNameForFiber: getDisplayNameForFiber,
          getTypeSymbol: getTypeSymbol,
          ReactPriorityLevels: ReactPriorityLevels,
          ReactTypeOfWork: ReactTypeOfWork,
          ReactTypeOfSideEffect: ReactTypeOfSideEffect,
          StrictModeBits: StrictModeBits
        };
      }

      var fiberToIDMap = new Map();
      var idToArbitraryFiberMap = new Map();

      function attach(hook, rendererID, renderer, global) {
        var version = renderer.reconcilerVersion || renderer.version;

        var _getInternalReactCons = getInternalReactConstants(version),
            getDisplayNameForFiber = _getInternalReactCons.getDisplayNameForFiber,
            getTypeSymbol = _getInternalReactCons.getTypeSymbol,
            ReactPriorityLevels = _getInternalReactCons.ReactPriorityLevels,
            ReactTypeOfWork = _getInternalReactCons.ReactTypeOfWork,
            ReactTypeOfSideEffect = _getInternalReactCons.ReactTypeOfSideEffect,
            StrictModeBits = _getInternalReactCons.StrictModeBits;

        var DidCapture = ReactTypeOfSideEffect.DidCapture,
            Hydrating = ReactTypeOfSideEffect.Hydrating,
            NoFlags = ReactTypeOfSideEffect.NoFlags,
            PerformedWork = ReactTypeOfSideEffect.PerformedWork,
            Placement = ReactTypeOfSideEffect.Placement;
        var CacheComponent = ReactTypeOfWork.CacheComponent,
            ClassComponent = ReactTypeOfWork.ClassComponent,
            ContextConsumer = ReactTypeOfWork.ContextConsumer,
            DehydratedSuspenseComponent = ReactTypeOfWork.DehydratedSuspenseComponent,
            ForwardRef = ReactTypeOfWork.ForwardRef,
            Fragment = ReactTypeOfWork.Fragment,
            FunctionComponent = ReactTypeOfWork.FunctionComponent,
            HostRoot = ReactTypeOfWork.HostRoot,
            HostPortal = ReactTypeOfWork.HostPortal,
            HostComponent = ReactTypeOfWork.HostComponent,
            HostText = ReactTypeOfWork.HostText,
            IncompleteClassComponent = ReactTypeOfWork.IncompleteClassComponent,
            IndeterminateComponent = ReactTypeOfWork.IndeterminateComponent,
            LegacyHiddenComponent = ReactTypeOfWork.LegacyHiddenComponent,
            MemoComponent = ReactTypeOfWork.MemoComponent,
            OffscreenComponent = ReactTypeOfWork.OffscreenComponent,
            SimpleMemoComponent = ReactTypeOfWork.SimpleMemoComponent,
            SuspenseComponent = ReactTypeOfWork.SuspenseComponent,
            SuspenseListComponent = ReactTypeOfWork.SuspenseListComponent,
            TracingMarkerComponent = ReactTypeOfWork.TracingMarkerComponent;
        var ImmediatePriority = ReactPriorityLevels.ImmediatePriority,
            UserBlockingPriority = ReactPriorityLevels.UserBlockingPriority,
            NormalPriority = ReactPriorityLevels.NormalPriority,
            LowPriority = ReactPriorityLevels.LowPriority,
            IdlePriority = ReactPriorityLevels.IdlePriority,
            NoPriority = ReactPriorityLevels.NoPriority;
        var getLaneLabelMap = renderer.getLaneLabelMap,
            injectProfilingHooks = renderer.injectProfilingHooks,
            overrideHookState = renderer.overrideHookState,
            overrideHookStateDeletePath = renderer.overrideHookStateDeletePath,
            overrideHookStateRenamePath = renderer.overrideHookStateRenamePath,
            overrideProps = renderer.overrideProps,
            overridePropsDeletePath = renderer.overridePropsDeletePath,
            overridePropsRenamePath = renderer.overridePropsRenamePath,
            scheduleRefresh = renderer.scheduleRefresh,
            setErrorHandler = renderer.setErrorHandler,
            setSuspenseHandler = renderer.setSuspenseHandler,
            scheduleUpdate = renderer.scheduleUpdate;
        var supportsTogglingError = typeof setErrorHandler === 'function' && typeof scheduleUpdate === 'function';
        var supportsTogglingSuspense = typeof setSuspenseHandler === 'function' && typeof scheduleUpdate === 'function';

        if (typeof scheduleRefresh === 'function') {
          renderer.scheduleRefresh = function () {
            try {
              hook.emit('fastRefreshScheduled');
            } finally {
              return scheduleRefresh.apply(void 0, arguments);
            }
          };
        }

        var getTimelineData = null;
        var toggleProfilingStatus = null;

        if (typeof injectProfilingHooks === 'function') {
          var response = createProfilingHooks({
            getDisplayNameForFiber: getDisplayNameForFiber,
            getIsProfiling: function getIsProfiling() {
              return isProfiling;
            },
            getLaneLabelMap: getLaneLabelMap,
            reactVersion: version
          });
          injectProfilingHooks(response.profilingHooks);
          getTimelineData = response.getTimelineData;
          toggleProfilingStatus = response.toggleProfilingStatus;
        }

        var fibersWithChangedErrorOrWarningCounts = new Set();
        var pendingFiberToErrorsMap = new Map();
        var pendingFiberToWarningsMap = new Map();
        var fiberIDToErrorsMap = new Map();
        var fiberIDToWarningsMap = new Map();

        function clearErrorsAndWarnings() {
          var _iterator = _createForOfIteratorHelper(fiberIDToErrorsMap.keys()),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var id = _step.value;

              var _fiber = idToArbitraryFiberMap.get(id);

              if (_fiber != null) {
                fibersWithChangedErrorOrWarningCounts.add(_fiber);
                updateMostRecentlyInspectedElementIfNecessary(id);
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          var _iterator2 = _createForOfIteratorHelper(fiberIDToWarningsMap.keys()),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var _id = _step2.value;

              var _fiber2 = idToArbitraryFiberMap.get(_id);

              if (_fiber2 != null) {
                fibersWithChangedErrorOrWarningCounts.add(_fiber2);
                updateMostRecentlyInspectedElementIfNecessary(_id);
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          fiberIDToErrorsMap.clear();
          fiberIDToWarningsMap.clear();
          flushPendingEvents();
        }

        function clearMessageCountHelper(fiberID, pendingFiberToMessageCountMap, fiberIDToMessageCountMap) {
          var fiber = idToArbitraryFiberMap.get(fiberID);

          if (fiber != null) {
            pendingFiberToErrorsMap.delete(fiber);

            if (fiberIDToMessageCountMap.has(fiberID)) {
              fiberIDToMessageCountMap.delete(fiberID);
              fibersWithChangedErrorOrWarningCounts.add(fiber);
              flushPendingEvents();
              updateMostRecentlyInspectedElementIfNecessary(fiberID);
            } else {
              fibersWithChangedErrorOrWarningCounts.delete(fiber);
            }
          }
        }

        function clearErrorsForFiberID(fiberID) {
          clearMessageCountHelper(fiberID, pendingFiberToErrorsMap, fiberIDToErrorsMap);
        }

        function clearWarningsForFiberID(fiberID) {
          clearMessageCountHelper(fiberID, pendingFiberToWarningsMap, fiberIDToWarningsMap);
        }

        function updateMostRecentlyInspectedElementIfNecessary(fiberID) {
          if (mostRecentlyInspectedElement !== null && mostRecentlyInspectedElement.id === fiberID) {
            hasElementUpdatedSinceLastInspected = true;
          }
        }

        function onErrorOrWarning(fiber, type, args) {
          if (type === 'error') {
            var maybeID = getFiberIDUnsafe(fiber);

            if (maybeID != null && forceErrorForFiberIDs.get(maybeID) === true) {
              return;
            }
          }

          var message = backend_utils["f"].apply(void 0, _toConsumableArray(args));

          if (constants["s"]) {
            debug('onErrorOrWarning', fiber, null, "".concat(type, ": \"").concat(message, "\""));
          }

          fibersWithChangedErrorOrWarningCounts.add(fiber);
          var fiberMap = type === 'error' ? pendingFiberToErrorsMap : pendingFiberToWarningsMap;
          var messageMap = fiberMap.get(fiber);

          if (messageMap != null) {
            var count = messageMap.get(message) || 0;
            messageMap.set(message, count + 1);
          } else {
            fiberMap.set(fiber, new Map([[message, 1]]));
          }

          flushPendingErrorsAndWarningsAfterDelay();
        }

        if (true) {
          Object(backend_console["c"])(renderer, onErrorOrWarning);
          var appendComponentStack = window.__REACT_DEVTOOLS_APPEND_COMPONENT_STACK__ !== false;
          var breakOnConsoleErrors = window.__REACT_DEVTOOLS_BREAK_ON_CONSOLE_ERRORS__ === true;
          var showInlineWarningsAndErrors = window.__REACT_DEVTOOLS_SHOW_INLINE_WARNINGS_AND_ERRORS__ !== false;
          var hideConsoleLogsInStrictMode = window.__REACT_DEVTOOLS_HIDE_CONSOLE_LOGS_IN_STRICT_MODE__ === true;
          var browserTheme = window.__REACT_DEVTOOLS_BROWSER_THEME__;
          Object(backend_console["a"])({
            appendComponentStack: appendComponentStack,
            breakOnConsoleErrors: breakOnConsoleErrors,
            showInlineWarningsAndErrors: showInlineWarningsAndErrors,
            hideConsoleLogsInStrictMode: hideConsoleLogsInStrictMode,
            browserTheme: browserTheme
          });
        }

        var debug = function debug(name, fiber, parentFiber) {
          var extraString = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

          if (constants["s"]) {
            var displayName = fiber.tag + ':' + (getDisplayNameForFiber(fiber) || 'null');
            var maybeID = getFiberIDUnsafe(fiber) || '<no id>';
            var parentDisplayName = parentFiber ? parentFiber.tag + ':' + (getDisplayNameForFiber(parentFiber) || 'null') : '';
            var maybeParentID = parentFiber ? getFiberIDUnsafe(parentFiber) || '<no-id>' : '';
            console.groupCollapsed("[renderer] %c".concat(name, " %c").concat(displayName, " (").concat(maybeID, ") %c").concat(parentFiber ? "".concat(parentDisplayName, " (").concat(maybeParentID, ")") : '', " %c").concat(extraString), 'color: red; font-weight: bold;', 'color: blue;', 'color: purple;', 'color: black;');
            console.log(new Error().stack.split('\n').slice(1).join('\n'));
            console.groupEnd();
          }
        };

        var hideElementsWithDisplayNames = new Set();
        var hideElementsWithPaths = new Set();
        var hideElementsWithTypes = new Set();
        var traceUpdatesEnabled = false;
        var traceUpdatesForNodes = new Set();

        function applyComponentFilters(componentFilters) {
          hideElementsWithTypes.clear();
          hideElementsWithDisplayNames.clear();
          hideElementsWithPaths.clear();
          componentFilters.forEach(function (componentFilter) {
            if (!componentFilter.isEnabled) {
              return;
            }

            switch (componentFilter.type) {
              case types["a"]:
                if (componentFilter.isValid && componentFilter.value !== '') {
                  hideElementsWithDisplayNames.add(new RegExp(componentFilter.value, 'i'));
                }

                break;

              case types["b"]:
                hideElementsWithTypes.add(componentFilter.value);
                break;

              case types["d"]:
                if (componentFilter.isValid && componentFilter.value !== '') {
                  hideElementsWithPaths.add(new RegExp(componentFilter.value, 'i'));
                }

                break;

              case types["c"]:
                hideElementsWithDisplayNames.add(new RegExp('\\('));
                break;

              default:
                console.warn("Invalid component filter type \"".concat(componentFilter.type, "\""));
                break;
            }
          });
        }

        if (window.__REACT_DEVTOOLS_COMPONENT_FILTERS__ != null) {
          applyComponentFilters(window.__REACT_DEVTOOLS_COMPONENT_FILTERS__);
        } else {
          applyComponentFilters(Object(utils["e"])());
        }

        function updateComponentFilters(componentFilters) {
          if (isProfiling) {
            throw Error('Cannot modify filter preferences while profiling');
          }

          hook.getFiberRoots(rendererID).forEach(function (root) {
            currentRootID = getOrGenerateFiberID(root.current);
            pushOperation(constants["n"]);
            flushPendingEvents(root);
            currentRootID = -1;
          });
          applyComponentFilters(componentFilters);
          rootDisplayNameCounter.clear();
          hook.getFiberRoots(rendererID).forEach(function (root) {
            currentRootID = getOrGenerateFiberID(root.current);
            setRootPseudoKey(currentRootID, root.current);
            mountFiberRecursively(root.current, null, false, false);
            flushPendingEvents(root);
            currentRootID = -1;
          });
          reevaluateErrorsAndWarnings();
          flushPendingEvents();
        }

        function shouldFilterFiber(fiber) {
          var _debugSource = fiber._debugSource,
              tag = fiber.tag,
              type = fiber.type;

          switch (tag) {
            case DehydratedSuspenseComponent:
              return true;

            case HostPortal:
            case HostText:
            case Fragment:
            case LegacyHiddenComponent:
            case OffscreenComponent:
              return true;

            case HostRoot:
              return false;

            default:
              var typeSymbol = getTypeSymbol(type);

              switch (typeSymbol) {
                case ReactSymbols["a"]:
                case ReactSymbols["b"]:
                case ReactSymbols["e"]:
                case ReactSymbols["s"]:
                case ReactSymbols["t"]:
                  return true;

                default:
                  break;
              }

          }

          var elementType = getElementTypeForFiber(fiber);

          if (hideElementsWithTypes.has(elementType)) {
            return true;
          }

          if (hideElementsWithDisplayNames.size > 0) {
            var displayName = getDisplayNameForFiber(fiber);

            if (displayName != null) {
              var _iterator3 = _createForOfIteratorHelper(hideElementsWithDisplayNames),
                  _step3;

              try {
                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                  var displayNameRegExp = _step3.value;

                  if (displayNameRegExp.test(displayName)) {
                    return true;
                  }
                }
              } catch (err) {
                _iterator3.e(err);
              } finally {
                _iterator3.f();
              }
            }
          }

          if (_debugSource != null && hideElementsWithPaths.size > 0) {
            var fileName = _debugSource.fileName;

            var _iterator4 = _createForOfIteratorHelper(hideElementsWithPaths),
                _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var pathRegExp = _step4.value;

                if (pathRegExp.test(fileName)) {
                  return true;
                }
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
          }

          return false;
        }

        function getElementTypeForFiber(fiber) {
          var type = fiber.type,
              tag = fiber.tag;

          switch (tag) {
            case ClassComponent:
            case IncompleteClassComponent:
              return types["e"];

            case FunctionComponent:
            case IndeterminateComponent:
              return types["h"];

            case ForwardRef:
              return types["g"];

            case HostRoot:
              return types["m"];

            case HostComponent:
              return types["i"];

            case HostPortal:
            case HostText:
            case Fragment:
              return types["k"];

            case MemoComponent:
            case SimpleMemoComponent:
              return types["j"];

            case SuspenseComponent:
              return types["n"];

            case SuspenseListComponent:
              return types["o"];

            case TracingMarkerComponent:
              return types["p"];

            default:
              var typeSymbol = getTypeSymbol(type);

              switch (typeSymbol) {
                case ReactSymbols["a"]:
                case ReactSymbols["b"]:
                case ReactSymbols["e"]:
                  return types["k"];

                case ReactSymbols["n"]:
                case ReactSymbols["o"]:
                  return types["f"];

                case ReactSymbols["c"]:
                case ReactSymbols["d"]:
                  return types["f"];

                case ReactSymbols["s"]:
                case ReactSymbols["t"]:
                  return types["k"];

                case ReactSymbols["l"]:
                case ReactSymbols["m"]:
                  return types["l"];

                default:
                  return types["k"];
              }

          }
        }

        var idToTreeBaseDurationMap = new Map();
        var idToRootMap = new Map();
        var currentRootID = -1;

        function getOrGenerateFiberID(fiber) {
          var id = null;

          if (fiberToIDMap.has(fiber)) {
            id = fiberToIDMap.get(fiber);
          } else {
            var _alternate = fiber.alternate;

            if (_alternate !== null && fiberToIDMap.has(_alternate)) {
              id = fiberToIDMap.get(_alternate);
            }
          }

          var didGenerateID = false;

          if (id === null) {
            didGenerateID = true;
            id = Object(utils["i"])();
          }

          var refinedID = id;

          if (!fiberToIDMap.has(fiber)) {
            fiberToIDMap.set(fiber, refinedID);
            idToArbitraryFiberMap.set(refinedID, fiber);
          }

          var alternate = fiber.alternate;

          if (alternate !== null) {
            if (!fiberToIDMap.has(alternate)) {
              fiberToIDMap.set(alternate, refinedID);
            }
          }

          if (constants["s"]) {
            if (didGenerateID) {
              debug('getOrGenerateFiberID()', fiber, fiber.return, 'Generated a new UID');
            }
          }

          return refinedID;
        }

        function getFiberIDThrows(fiber) {
          var maybeID = getFiberIDUnsafe(fiber);

          if (maybeID !== null) {
            return maybeID;
          }

          throw Error("Could not find ID for Fiber \"".concat(getDisplayNameForFiber(fiber) || '', "\""));
        }

        function getFiberIDUnsafe(fiber) {
          if (fiberToIDMap.has(fiber)) {
            return fiberToIDMap.get(fiber);
          } else {
            var alternate = fiber.alternate;

            if (alternate !== null && fiberToIDMap.has(alternate)) {
              return fiberToIDMap.get(alternate);
            }
          }

          return null;
        }

        function untrackFiberID(fiber) {
          if (constants["s"]) {
            debug('untrackFiberID()', fiber, fiber.return, 'schedule after delay');
          }

          untrackFibersSet.add(fiber);
          var alternate = fiber.alternate;

          if (alternate !== null) {
            untrackFibersSet.add(alternate);
          }

          if (untrackFibersTimeoutID === null) {
            untrackFibersTimeoutID = setTimeout(untrackFibers, 1000);
          }
        }

        var untrackFibersSet = new Set();
        var untrackFibersTimeoutID = null;

        function untrackFibers() {
          if (untrackFibersTimeoutID !== null) {
            clearTimeout(untrackFibersTimeoutID);
            untrackFibersTimeoutID = null;
          }

          untrackFibersSet.forEach(function (fiber) {
            var fiberID = getFiberIDUnsafe(fiber);

            if (fiberID !== null) {
              idToArbitraryFiberMap.delete(fiberID);
              clearErrorsForFiberID(fiberID);
              clearWarningsForFiberID(fiberID);
            }

            fiberToIDMap.delete(fiber);
            var alternate = fiber.alternate;

            if (alternate !== null) {
              fiberToIDMap.delete(alternate);
            }

            if (forceErrorForFiberIDs.has(fiberID)) {
              forceErrorForFiberIDs.delete(fiberID);

              if (forceErrorForFiberIDs.size === 0 && setErrorHandler != null) {
                setErrorHandler(shouldErrorFiberAlwaysNull);
              }
            }
          });
          untrackFibersSet.clear();
        }

        function getChangeDescription(prevFiber, nextFiber) {
          switch (getElementTypeForFiber(nextFiber)) {
            case types["e"]:
            case types["h"]:
            case types["j"]:
            case types["g"]:
              if (prevFiber === null) {
                return {
                  context: null,
                  didHooksChange: false,
                  isFirstMount: true,
                  props: null,
                  state: null
                };
              } else {
                var data = {
                  context: getContextChangedKeys(nextFiber),
                  didHooksChange: false,
                  isFirstMount: false,
                  props: getChangedKeys(prevFiber.memoizedProps, nextFiber.memoizedProps),
                  state: getChangedKeys(prevFiber.memoizedState, nextFiber.memoizedState)
                };

                if (DevToolsFeatureFlags_core_oss["b"]) {
                  var indices = getChangedHooksIndices(prevFiber.memoizedState, nextFiber.memoizedState);
                  data.hooks = indices;
                  data.didHooksChange = indices !== null && indices.length > 0;
                } else {
                  data.didHooksChange = didHooksChange(prevFiber.memoizedState, nextFiber.memoizedState);
                }

                return data;
              }

            default:
              return null;
          }
        }

        function updateContextsForFiber(fiber) {
          switch (getElementTypeForFiber(fiber)) {
            case types["e"]:
            case types["g"]:
            case types["h"]:
            case types["j"]:
              if (idToContextsMap !== null) {
                var id = getFiberIDThrows(fiber);
                var contexts = getContextsForFiber(fiber);

                if (contexts !== null) {
                  idToContextsMap.set(id, contexts);
                }
              }

              break;

            default:
              break;
          }
        }

        var NO_CONTEXT = {};

        function getContextsForFiber(fiber) {
          var legacyContext = NO_CONTEXT;
          var modernContext = NO_CONTEXT;

          switch (getElementTypeForFiber(fiber)) {
            case types["e"]:
              var instance = fiber.stateNode;

              if (instance != null) {
                if (instance.constructor && instance.constructor.contextType != null) {
                  modernContext = instance.context;
                } else {
                  legacyContext = instance.context;

                  if (legacyContext && Object.keys(legacyContext).length === 0) {
                    legacyContext = NO_CONTEXT;
                  }
                }
              }

              return [legacyContext, modernContext];

            case types["g"]:
            case types["h"]:
            case types["j"]:
              var dependencies = fiber.dependencies;

              if (dependencies && dependencies.firstContext) {
                modernContext = dependencies.firstContext;
              }

              return [legacyContext, modernContext];

            default:
              return null;
          }
        }

        function crawlToInitializeContextsMap(fiber) {
          var id = getFiberIDUnsafe(fiber);

          if (id !== null) {
            updateContextsForFiber(fiber);
            var current = fiber.child;

            while (current !== null) {
              crawlToInitializeContextsMap(current);
              current = current.sibling;
            }
          }
        }

        function getContextChangedKeys(fiber) {
          if (idToContextsMap !== null) {
            var id = getFiberIDThrows(fiber);
            var prevContexts = idToContextsMap.has(id) ? idToContextsMap.get(id) : null;
            var nextContexts = getContextsForFiber(fiber);

            if (prevContexts == null || nextContexts == null) {
              return null;
            }

            var _prevContexts = renderer_slicedToArray(prevContexts, 2),
                prevLegacyContext = _prevContexts[0],
                prevModernContext = _prevContexts[1];

            var _nextContexts = renderer_slicedToArray(nextContexts, 2),
                nextLegacyContext = _nextContexts[0],
                nextModernContext = _nextContexts[1];

            switch (getElementTypeForFiber(fiber)) {
              case types["e"]:
                if (prevContexts && nextContexts) {
                  if (nextLegacyContext !== NO_CONTEXT) {
                    return getChangedKeys(prevLegacyContext, nextLegacyContext);
                  } else if (nextModernContext !== NO_CONTEXT) {
                    return prevModernContext !== nextModernContext;
                  }
                }

                break;

              case types["g"]:
              case types["h"]:
              case types["j"]:
                if (nextModernContext !== NO_CONTEXT) {
                  var prevContext = prevModernContext;
                  var nextContext = nextModernContext;

                  while (prevContext && nextContext) {
                    if (!shared_objectIs(prevContext.memoizedValue, nextContext.memoizedValue)) {
                      return true;
                    }

                    prevContext = prevContext.next;
                    nextContext = nextContext.next;
                  }

                  return false;
                }

                break;

              default:
                break;
            }
          }

          return null;
        }

        function isHookThatCanScheduleUpdate(hookObject) {
          var queue = hookObject.queue;

          if (!queue) {
            return false;
          }

          var boundHasOwnProperty = shared_hasOwnProperty.bind(queue);
          var isStateOrReducer = boundHasOwnProperty('pending') && boundHasOwnProperty('dispatch') && typeof queue.dispatch === 'function';
          var isSyncExternalStore = boundHasOwnProperty('value') && boundHasOwnProperty('getSnapshot') && typeof queue.getSnapshot === 'function';
          return isStateOrReducer || isSyncExternalStore;
        }

        function didStatefulHookChange(prev, next) {
          var prevMemoizedState = prev.memoizedState;
          var nextMemoizedState = next.memoizedState;

          if (isHookThatCanScheduleUpdate(prev)) {
            return prevMemoizedState !== nextMemoizedState;
          }

          return false;
        }

        function didHooksChange(prev, next) {
          if (prev == null || next == null) {
            return false;
          }

          if (next.hasOwnProperty('baseState') && next.hasOwnProperty('memoizedState') && next.hasOwnProperty('next') && next.hasOwnProperty('queue')) {
            while (next !== null) {
              if (didStatefulHookChange(prev, next)) {
                return true;
              } else {
                next = next.next;
                prev = prev.next;
              }
            }
          }

          return false;
        }

        function getChangedHooksIndices(prev, next) {
          if (DevToolsFeatureFlags_core_oss["b"]) {
            if (prev == null || next == null) {
              return null;
            }

            var indices = [];
            var index = 0;

            if (next.hasOwnProperty('baseState') && next.hasOwnProperty('memoizedState') && next.hasOwnProperty('next') && next.hasOwnProperty('queue')) {
              while (next !== null) {
                if (didStatefulHookChange(prev, next)) {
                  indices.push(index);
                }

                next = next.next;
                prev = prev.next;
                index++;
              }
            }

            return indices;
          }

          return null;
        }

        function getChangedKeys(prev, next) {
          if (prev == null || next == null) {
            return null;
          }

          if (next.hasOwnProperty('baseState') && next.hasOwnProperty('memoizedState') && next.hasOwnProperty('next') && next.hasOwnProperty('queue')) {
            return null;
          }

          var keys = new Set([].concat(_toConsumableArray(Object.keys(prev)), _toConsumableArray(Object.keys(next))));
          var changedKeys = [];

          var _iterator5 = _createForOfIteratorHelper(keys),
              _step5;

          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var key = _step5.value;

              if (prev[key] !== next[key]) {
                changedKeys.push(key);
              }
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }

          return changedKeys;
        }

        function didFiberRender(prevFiber, nextFiber) {
          switch (nextFiber.tag) {
            case ClassComponent:
            case FunctionComponent:
            case ContextConsumer:
            case MemoComponent:
            case SimpleMemoComponent:
            case ForwardRef:
              return (getFiberFlags(nextFiber) & PerformedWork) === PerformedWork;

            default:
              return prevFiber.memoizedProps !== nextFiber.memoizedProps || prevFiber.memoizedState !== nextFiber.memoizedState || prevFiber.ref !== nextFiber.ref;
          }
        }

        var pendingOperations = [];
        var pendingRealUnmountedIDs = [];
        var pendingSimulatedUnmountedIDs = [];
        var pendingOperationsQueue = [];
        var pendingStringTable = new Map();
        var pendingStringTableLength = 0;
        var pendingUnmountedRootID = null;

        function pushOperation(op) {
          if (false) {}

          pendingOperations.push(op);
        }

        function shouldBailoutWithPendingOperations() {
          if (isProfiling) {
            if (currentCommitProfilingMetadata != null && currentCommitProfilingMetadata.durations.length > 0) {
              return false;
            }
          }

          return pendingOperations.length === 0 && pendingRealUnmountedIDs.length === 0 && pendingSimulatedUnmountedIDs.length === 0 && pendingUnmountedRootID === null;
        }

        function flushOrQueueOperations(operations) {
          if (shouldBailoutWithPendingOperations()) {
            return;
          }

          if (pendingOperationsQueue !== null) {
            pendingOperationsQueue.push(operations);
          } else {
            hook.emit('operations', operations);
          }
        }

        var flushPendingErrorsAndWarningsAfterDelayTimeoutID = null;

        function clearPendingErrorsAndWarningsAfterDelay() {
          if (flushPendingErrorsAndWarningsAfterDelayTimeoutID !== null) {
            clearTimeout(flushPendingErrorsAndWarningsAfterDelayTimeoutID);
            flushPendingErrorsAndWarningsAfterDelayTimeoutID = null;
          }
        }

        function flushPendingErrorsAndWarningsAfterDelay() {
          clearPendingErrorsAndWarningsAfterDelay();
          flushPendingErrorsAndWarningsAfterDelayTimeoutID = setTimeout(function () {
            flushPendingErrorsAndWarningsAfterDelayTimeoutID = null;

            if (pendingOperations.length > 0) {
              return;
            }

            recordPendingErrorsAndWarnings();

            if (shouldBailoutWithPendingOperations()) {
              return;
            }

            var operations = new Array(3 + pendingOperations.length);
            operations[0] = rendererID;
            operations[1] = currentRootID;
            operations[2] = 0;

            for (var j = 0; j < pendingOperations.length; j++) {
              operations[3 + j] = pendingOperations[j];
            }

            flushOrQueueOperations(operations);
            pendingOperations.length = 0;
          }, 1000);
        }

        function reevaluateErrorsAndWarnings() {
          fibersWithChangedErrorOrWarningCounts.clear();
          fiberIDToErrorsMap.forEach(function (countMap, fiberID) {
            var fiber = idToArbitraryFiberMap.get(fiberID);

            if (fiber != null) {
              fibersWithChangedErrorOrWarningCounts.add(fiber);
            }
          });
          fiberIDToWarningsMap.forEach(function (countMap, fiberID) {
            var fiber = idToArbitraryFiberMap.get(fiberID);

            if (fiber != null) {
              fibersWithChangedErrorOrWarningCounts.add(fiber);
            }
          });
          recordPendingErrorsAndWarnings();
        }

        function mergeMapsAndGetCountHelper(fiber, fiberID, pendingFiberToMessageCountMap, fiberIDToMessageCountMap) {
          var newCount = 0;
          var messageCountMap = fiberIDToMessageCountMap.get(fiberID);
          var pendingMessageCountMap = pendingFiberToMessageCountMap.get(fiber);

          if (pendingMessageCountMap != null) {
            if (messageCountMap == null) {
              messageCountMap = pendingMessageCountMap;
              fiberIDToMessageCountMap.set(fiberID, pendingMessageCountMap);
            } else {
              var refinedMessageCountMap = messageCountMap;
              pendingMessageCountMap.forEach(function (pendingCount, message) {
                var previousCount = refinedMessageCountMap.get(message) || 0;
                refinedMessageCountMap.set(message, previousCount + pendingCount);
              });
            }
          }

          if (!shouldFilterFiber(fiber)) {
            if (messageCountMap != null) {
              messageCountMap.forEach(function (count) {
                newCount += count;
              });
            }
          }

          pendingFiberToMessageCountMap.delete(fiber);
          return newCount;
        }

        function recordPendingErrorsAndWarnings() {
          clearPendingErrorsAndWarningsAfterDelay();
          fibersWithChangedErrorOrWarningCounts.forEach(function (fiber) {
            var fiberID = getFiberIDUnsafe(fiber);

            if (fiberID === null) {} else {
              var errorCount = mergeMapsAndGetCountHelper(fiber, fiberID, pendingFiberToErrorsMap, fiberIDToErrorsMap);
              var warningCount = mergeMapsAndGetCountHelper(fiber, fiberID, pendingFiberToWarningsMap, fiberIDToWarningsMap);
              pushOperation(constants["q"]);
              pushOperation(fiberID);
              pushOperation(errorCount);
              pushOperation(warningCount);
            }

            pendingFiberToErrorsMap.delete(fiber);
            pendingFiberToWarningsMap.delete(fiber);
          });
          fibersWithChangedErrorOrWarningCounts.clear();
        }

        function flushPendingEvents(root) {
          recordPendingErrorsAndWarnings();

          if (shouldBailoutWithPendingOperations()) {
            return;
          }

          var numUnmountIDs = pendingRealUnmountedIDs.length + pendingSimulatedUnmountedIDs.length + (pendingUnmountedRootID === null ? 0 : 1);
          var operations = new Array(2 + 1 + pendingStringTableLength + (numUnmountIDs > 0 ? 2 + numUnmountIDs : 0) + pendingOperations.length);
          var i = 0;
          operations[i++] = rendererID;
          operations[i++] = currentRootID;
          operations[i++] = pendingStringTableLength;
          pendingStringTable.forEach(function (entry, stringKey) {
            var encodedString = entry.encodedString;
            var length = encodedString.length;
            operations[i++] = length;

            for (var j = 0; j < length; j++) {
              operations[i + j] = encodedString[j];
            }

            i += length;
          });

          if (numUnmountIDs > 0) {
            operations[i++] = constants["m"];
            operations[i++] = numUnmountIDs;

            for (var j = pendingRealUnmountedIDs.length - 1; j >= 0; j--) {
              operations[i++] = pendingRealUnmountedIDs[j];
            }

            for (var _j = 0; _j < pendingSimulatedUnmountedIDs.length; _j++) {
              operations[i + _j] = pendingSimulatedUnmountedIDs[_j];
            }

            i += pendingSimulatedUnmountedIDs.length;

            if (pendingUnmountedRootID !== null) {
              operations[i] = pendingUnmountedRootID;
              i++;
            }
          }

          for (var _j2 = 0; _j2 < pendingOperations.length; _j2++) {
            operations[i + _j2] = pendingOperations[_j2];
          }

          i += pendingOperations.length;
          flushOrQueueOperations(operations);
          pendingOperations.length = 0;
          pendingRealUnmountedIDs.length = 0;
          pendingSimulatedUnmountedIDs.length = 0;
          pendingUnmountedRootID = null;
          pendingStringTable.clear();
          pendingStringTableLength = 0;
        }

        function getStringID(string) {
          if (string === null) {
            return 0;
          }

          var existingEntry = pendingStringTable.get(string);

          if (existingEntry !== undefined) {
            return existingEntry.id;
          }

          var id = pendingStringTable.size + 1;
          var encodedString = Object(utils["m"])(string);
          pendingStringTable.set(string, {
            encodedString: encodedString,
            id: id
          });
          pendingStringTableLength += encodedString.length + 1;
          return id;
        }

        function recordMount(fiber, parentFiber) {
          var isRoot = fiber.tag === HostRoot;
          var id = getOrGenerateFiberID(fiber);

          if (constants["s"]) {
            debug('recordMount()', fiber, parentFiber);
          }

          var hasOwnerMetadata = fiber.hasOwnProperty('_debugOwner');
          var isProfilingSupported = fiber.hasOwnProperty('treeBaseDuration');
          var profilingFlags = 0;

          if (isProfilingSupported) {
            profilingFlags = constants["g"];

            if (typeof injectProfilingHooks === 'function') {
              profilingFlags |= constants["h"];
            }
          }

          if (isRoot) {
            pushOperation(constants["l"]);
            pushOperation(id);
            pushOperation(types["m"]);
            pushOperation((fiber.mode & StrictModeBits) !== 0 ? 1 : 0);
            pushOperation(profilingFlags);
            pushOperation(StrictModeBits !== 0 ? 1 : 0);
            pushOperation(hasOwnerMetadata ? 1 : 0);

            if (isProfiling) {
              if (displayNamesByRootID !== null) {
                displayNamesByRootID.set(id, getDisplayNameForRoot(fiber));
              }
            }
          } else {
            var key = fiber.key;
            var displayName = getDisplayNameForFiber(fiber);
            var elementType = getElementTypeForFiber(fiber);
            var _debugOwner = fiber._debugOwner;
            var ownerID = _debugOwner != null ? getOrGenerateFiberID(_debugOwner) : 0;
            var parentID = parentFiber ? getFiberIDThrows(parentFiber) : 0;
            var displayNameStringID = getStringID(displayName);
            var keyString = key === null ? null : String(key);
            var keyStringID = getStringID(keyString);
            pushOperation(constants["l"]);
            pushOperation(id);
            pushOperation(elementType);
            pushOperation(parentID);
            pushOperation(ownerID);
            pushOperation(displayNameStringID);
            pushOperation(keyStringID);

            if ((fiber.mode & StrictModeBits) !== 0 && (parentFiber.mode & StrictModeBits) === 0) {
              pushOperation(constants["p"]);
              pushOperation(id);
              pushOperation(types["q"]);
            }
          }

          if (isProfilingSupported) {
            idToRootMap.set(id, currentRootID);
            recordProfilingDurations(fiber);
          }
        }

        function recordUnmount(fiber, isSimulated) {
          if (constants["s"]) {
            debug('recordUnmount()', fiber, null, isSimulated ? 'unmount is simulated' : '');
          }

          if (trackedPathMatchFiber !== null) {
            if (fiber === trackedPathMatchFiber || fiber === trackedPathMatchFiber.alternate) {
              setTrackedPath(null);
            }
          }

          var unsafeID = getFiberIDUnsafe(fiber);

          if (unsafeID === null) {
            return;
          }

          var id = unsafeID;
          var isRoot = fiber.tag === HostRoot;

          if (isRoot) {
            pendingUnmountedRootID = id;
          } else if (!shouldFilterFiber(fiber)) {
            if (isSimulated) {
              pendingSimulatedUnmountedIDs.push(id);
            } else {
              pendingRealUnmountedIDs.push(id);
            }
          }

          if (!fiber._debugNeedsRemount) {
            untrackFiberID(fiber);
            var isProfilingSupported = fiber.hasOwnProperty('treeBaseDuration');

            if (isProfilingSupported) {
              idToRootMap.delete(id);
              idToTreeBaseDurationMap.delete(id);
            }
          }
        }

        function mountFiberRecursively(firstChild, parentFiber, traverseSiblings, traceNearestHostComponentUpdate) {
          var fiber = firstChild;

          while (fiber !== null) {
            getOrGenerateFiberID(fiber);

            if (constants["s"]) {
              debug('mountFiberRecursively()', fiber, parentFiber);
            }

            var mightSiblingsBeOnTrackedPath = updateTrackedPathStateBeforeMount(fiber);
            var shouldIncludeInTree = !shouldFilterFiber(fiber);

            if (shouldIncludeInTree) {
              recordMount(fiber, parentFiber);
            }

            if (traceUpdatesEnabled) {
              if (traceNearestHostComponentUpdate) {
                var elementType = getElementTypeForFiber(fiber);

                if (elementType === types["i"]) {
                  traceUpdatesForNodes.add(fiber.stateNode);
                  traceNearestHostComponentUpdate = false;
                }
              }
            }

            var isSuspense = fiber.tag === ReactTypeOfWork.SuspenseComponent;

            if (isSuspense) {
              var isTimedOut = fiber.memoizedState !== null;

              if (isTimedOut) {
                var primaryChildFragment = fiber.child;
                var fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null;
                var fallbackChild = fallbackChildFragment ? fallbackChildFragment.child : null;

                if (fallbackChild !== null) {
                  mountFiberRecursively(fallbackChild, shouldIncludeInTree ? fiber : parentFiber, true, traceNearestHostComponentUpdate);
                }
              } else {
                var primaryChild = null;
                var areSuspenseChildrenConditionallyWrapped = OffscreenComponent === -1;

                if (areSuspenseChildrenConditionallyWrapped) {
                  primaryChild = fiber.child;
                } else if (fiber.child !== null) {
                  primaryChild = fiber.child.child;
                }

                if (primaryChild !== null) {
                  mountFiberRecursively(primaryChild, shouldIncludeInTree ? fiber : parentFiber, true, traceNearestHostComponentUpdate);
                }
              }
            } else {
              if (fiber.child !== null) {
                mountFiberRecursively(fiber.child, shouldIncludeInTree ? fiber : parentFiber, true, traceNearestHostComponentUpdate);
              }
            }

            updateTrackedPathStateAfterMount(mightSiblingsBeOnTrackedPath);
            fiber = traverseSiblings ? fiber.sibling : null;
          }
        }

        function unmountFiberChildrenRecursively(fiber) {
          if (constants["s"]) {
            debug('unmountFiberChildrenRecursively()', fiber);
          }

          var isTimedOutSuspense = fiber.tag === ReactTypeOfWork.SuspenseComponent && fiber.memoizedState !== null;
          var child = fiber.child;

          if (isTimedOutSuspense) {
            var primaryChildFragment = fiber.child;
            var fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null;
            child = fallbackChildFragment ? fallbackChildFragment.child : null;
          }

          while (child !== null) {
            if (child.return !== null) {
              unmountFiberChildrenRecursively(child);
              recordUnmount(child, true);
            }

            child = child.sibling;
          }
        }

        function recordProfilingDurations(fiber) {
          var id = getFiberIDThrows(fiber);
          var actualDuration = fiber.actualDuration,
              treeBaseDuration = fiber.treeBaseDuration;
          idToTreeBaseDurationMap.set(id, treeBaseDuration || 0);

          if (isProfiling) {
            var alternate = fiber.alternate;

            if (alternate == null || treeBaseDuration !== alternate.treeBaseDuration) {
              var convertedTreeBaseDuration = Math.floor((treeBaseDuration || 0) * 1000);
              pushOperation(constants["r"]);
              pushOperation(id);
              pushOperation(convertedTreeBaseDuration);
            }

            if (alternate == null || didFiberRender(alternate, fiber)) {
              if (actualDuration != null) {
                var selfDuration = actualDuration;
                var child = fiber.child;

                while (child !== null) {
                  selfDuration -= child.actualDuration || 0;
                  child = child.sibling;
                }

                var metadata = currentCommitProfilingMetadata;
                metadata.durations.push(id, actualDuration, selfDuration);
                metadata.maxActualDuration = Math.max(metadata.maxActualDuration, actualDuration);

                if (recordChangeDescriptions) {
                  var changeDescription = getChangeDescription(alternate, fiber);

                  if (changeDescription !== null) {
                    if (metadata.changeDescriptions !== null) {
                      metadata.changeDescriptions.set(id, changeDescription);
                    }
                  }

                  updateContextsForFiber(fiber);
                }
              }
            }
          }
        }

        function recordResetChildren(fiber, childSet) {
          if (constants["s"]) {
            debug('recordResetChildren()', childSet, fiber);
          }

          var nextChildren = [];
          var child = childSet;

          while (child !== null) {
            findReorderedChildrenRecursively(child, nextChildren);
            child = child.sibling;
          }

          var numChildren = nextChildren.length;

          if (numChildren < 2) {
            return;
          }

          pushOperation(constants["o"]);
          pushOperation(getFiberIDThrows(fiber));
          pushOperation(numChildren);

          for (var i = 0; i < nextChildren.length; i++) {
            pushOperation(nextChildren[i]);
          }
        }

        function findReorderedChildrenRecursively(fiber, nextChildren) {
          if (!shouldFilterFiber(fiber)) {
            nextChildren.push(getFiberIDThrows(fiber));
          } else {
            var child = fiber.child;
            var isTimedOutSuspense = fiber.tag === SuspenseComponent && fiber.memoizedState !== null;

            if (isTimedOutSuspense) {
              var primaryChildFragment = fiber.child;
              var fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null;
              var fallbackChild = fallbackChildFragment ? fallbackChildFragment.child : null;

              if (fallbackChild !== null) {
                child = fallbackChild;
              }
            }

            while (child !== null) {
              findReorderedChildrenRecursively(child, nextChildren);
              child = child.sibling;
            }
          }
        }

        function updateFiberRecursively(nextFiber, prevFiber, parentFiber, traceNearestHostComponentUpdate) {
          var id = getOrGenerateFiberID(nextFiber);

          if (constants["s"]) {
            debug('updateFiberRecursively()', nextFiber, parentFiber);
          }

          if (traceUpdatesEnabled) {
            var elementType = getElementTypeForFiber(nextFiber);

            if (traceNearestHostComponentUpdate) {
              if (elementType === types["i"]) {
                traceUpdatesForNodes.add(nextFiber.stateNode);
                traceNearestHostComponentUpdate = false;
              }
            } else {
              if (elementType === types["h"] || elementType === types["e"] || elementType === types["f"] || elementType === types["j"] || elementType === types["g"]) {
                traceNearestHostComponentUpdate = didFiberRender(prevFiber, nextFiber);
              }
            }
          }

          if (mostRecentlyInspectedElement !== null && mostRecentlyInspectedElement.id === id && didFiberRender(prevFiber, nextFiber)) {
            hasElementUpdatedSinceLastInspected = true;
          }

          var shouldIncludeInTree = !shouldFilterFiber(nextFiber);
          var isSuspense = nextFiber.tag === SuspenseComponent;
          var shouldResetChildren = false;
          var prevDidTimeout = isSuspense && prevFiber.memoizedState !== null;
          var nextDidTimeOut = isSuspense && nextFiber.memoizedState !== null;

          if (prevDidTimeout && nextDidTimeOut) {
            var nextFiberChild = nextFiber.child;
            var nextFallbackChildSet = nextFiberChild ? nextFiberChild.sibling : null;
            var prevFiberChild = prevFiber.child;
            var prevFallbackChildSet = prevFiberChild ? prevFiberChild.sibling : null;

            if (nextFallbackChildSet != null && prevFallbackChildSet != null && updateFiberRecursively(nextFallbackChildSet, prevFallbackChildSet, nextFiber, traceNearestHostComponentUpdate)) {
              shouldResetChildren = true;
            }
          } else if (prevDidTimeout && !nextDidTimeOut) {
            var nextPrimaryChildSet = nextFiber.child;

            if (nextPrimaryChildSet !== null) {
              mountFiberRecursively(nextPrimaryChildSet, shouldIncludeInTree ? nextFiber : parentFiber, true, traceNearestHostComponentUpdate);
            }

            shouldResetChildren = true;
          } else if (!prevDidTimeout && nextDidTimeOut) {
            unmountFiberChildrenRecursively(prevFiber);
            var _nextFiberChild = nextFiber.child;

            var _nextFallbackChildSet = _nextFiberChild ? _nextFiberChild.sibling : null;

            if (_nextFallbackChildSet != null) {
              mountFiberRecursively(_nextFallbackChildSet, shouldIncludeInTree ? nextFiber : parentFiber, true, traceNearestHostComponentUpdate);
              shouldResetChildren = true;
            }
          } else {
            if (nextFiber.child !== prevFiber.child) {
              var nextChild = nextFiber.child;
              var prevChildAtSameIndex = prevFiber.child;

              while (nextChild) {
                if (nextChild.alternate) {
                  var prevChild = nextChild.alternate;

                  if (updateFiberRecursively(nextChild, prevChild, shouldIncludeInTree ? nextFiber : parentFiber, traceNearestHostComponentUpdate)) {
                    shouldResetChildren = true;
                  }

                  if (prevChild !== prevChildAtSameIndex) {
                    shouldResetChildren = true;
                  }
                } else {
                  mountFiberRecursively(nextChild, shouldIncludeInTree ? nextFiber : parentFiber, false, traceNearestHostComponentUpdate);
                  shouldResetChildren = true;
                }

                nextChild = nextChild.sibling;

                if (!shouldResetChildren && prevChildAtSameIndex !== null) {
                  prevChildAtSameIndex = prevChildAtSameIndex.sibling;
                }
              }

              if (prevChildAtSameIndex !== null) {
                shouldResetChildren = true;
              }
            } else {
              if (traceUpdatesEnabled) {
                if (traceNearestHostComponentUpdate) {
                  var hostFibers = findAllCurrentHostFibers(getFiberIDThrows(nextFiber));
                  hostFibers.forEach(function (hostFiber) {
                    traceUpdatesForNodes.add(hostFiber.stateNode);
                  });
                }
              }
            }
          }

          if (shouldIncludeInTree) {
            var isProfilingSupported = nextFiber.hasOwnProperty('treeBaseDuration');

            if (isProfilingSupported) {
              recordProfilingDurations(nextFiber);
            }
          }

          if (shouldResetChildren) {
            if (shouldIncludeInTree) {
              var nextChildSet = nextFiber.child;

              if (nextDidTimeOut) {
                var _nextFiberChild2 = nextFiber.child;
                nextChildSet = _nextFiberChild2 ? _nextFiberChild2.sibling : null;
              }

              if (nextChildSet != null) {
                recordResetChildren(nextFiber, nextChildSet);
              }

              return false;
            } else {
              return true;
            }
          } else {
            return false;
          }
        }

        function cleanup() {}

        function rootSupportsProfiling(root) {
          if (root.memoizedInteractions != null) {
            return true;
          } else if (root.current != null && root.current.hasOwnProperty('treeBaseDuration')) {
            return true;
          } else {
            return false;
          }
        }

        function flushInitialOperations() {
          var localPendingOperationsQueue = pendingOperationsQueue;
          pendingOperationsQueue = null;

          if (localPendingOperationsQueue !== null && localPendingOperationsQueue.length > 0) {
            localPendingOperationsQueue.forEach(function (operations) {
              hook.emit('operations', operations);
            });
          } else {
            if (trackedPath !== null) {
              mightBeOnTrackedPath = true;
            }

            hook.getFiberRoots(rendererID).forEach(function (root) {
              currentRootID = getOrGenerateFiberID(root.current);
              setRootPseudoKey(currentRootID, root.current);

              if (isProfiling && rootSupportsProfiling(root)) {
                currentCommitProfilingMetadata = {
                  changeDescriptions: recordChangeDescriptions ? new Map() : null,
                  durations: [],
                  commitTime: renderer_getCurrentTime() - profilingStartTime,
                  maxActualDuration: 0,
                  priorityLevel: null,
                  updaters: getUpdatersList(root),
                  effectDuration: null,
                  passiveEffectDuration: null
                };
              }

              mountFiberRecursively(root.current, null, false, false);
              flushPendingEvents(root);
              currentRootID = -1;
            });
          }
        }

        function getUpdatersList(root) {
          return root.memoizedUpdaters != null ? Array.from(root.memoizedUpdaters).filter(function (fiber) {
            return getFiberIDUnsafe(fiber) !== null;
          }).map(fiberToSerializedElement) : null;
        }

        function handleCommitFiberUnmount(fiber) {
          untrackFibers();
          recordUnmount(fiber, false);
        }

        function handlePostCommitFiberRoot(root) {
          if (isProfiling && rootSupportsProfiling(root)) {
            if (currentCommitProfilingMetadata !== null) {
              var _getEffectDurations = Object(backend_utils["h"])(root),
                  effectDuration = _getEffectDurations.effectDuration,
                  passiveEffectDuration = _getEffectDurations.passiveEffectDuration;

              currentCommitProfilingMetadata.effectDuration = effectDuration;
              currentCommitProfilingMetadata.passiveEffectDuration = passiveEffectDuration;
            }
          }
        }

        function handleCommitFiberRoot(root, priorityLevel) {
          var current = root.current;
          var alternate = current.alternate;
          untrackFibers();
          currentRootID = getOrGenerateFiberID(current);

          if (trackedPath !== null) {
            mightBeOnTrackedPath = true;
          }

          if (traceUpdatesEnabled) {
            traceUpdatesForNodes.clear();
          }

          var isProfilingSupported = rootSupportsProfiling(root);

          if (isProfiling && isProfilingSupported) {
            currentCommitProfilingMetadata = {
              changeDescriptions: recordChangeDescriptions ? new Map() : null,
              durations: [],
              commitTime: renderer_getCurrentTime() - profilingStartTime,
              maxActualDuration: 0,
              priorityLevel: priorityLevel == null ? null : formatPriorityLevel(priorityLevel),
              updaters: getUpdatersList(root),
              effectDuration: null,
              passiveEffectDuration: null
            };
          }

          if (alternate) {
            var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null && alternate.memoizedState.isDehydrated !== true;
            var isMounted = current.memoizedState != null && current.memoizedState.element != null && current.memoizedState.isDehydrated !== true;

            if (!wasMounted && isMounted) {
              setRootPseudoKey(currentRootID, current);
              mountFiberRecursively(current, null, false, false);
            } else if (wasMounted && isMounted) {
              updateFiberRecursively(current, alternate, null, false);
            } else if (wasMounted && !isMounted) {
              removeRootPseudoKey(currentRootID);
              recordUnmount(current, false);
            }
          } else {
            setRootPseudoKey(currentRootID, current);
            mountFiberRecursively(current, null, false, false);
          }

          if (isProfiling && isProfilingSupported) {
            if (!shouldBailoutWithPendingOperations()) {
              var commitProfilingMetadata = rootToCommitProfilingMetadataMap.get(currentRootID);

              if (commitProfilingMetadata != null) {
                commitProfilingMetadata.push(currentCommitProfilingMetadata);
              } else {
                rootToCommitProfilingMetadataMap.set(currentRootID, [currentCommitProfilingMetadata]);
              }
            }
          }

          flushPendingEvents(root);

          if (traceUpdatesEnabled) {
            hook.emit('traceUpdates', traceUpdatesForNodes);
          }

          currentRootID = -1;
        }

        function findAllCurrentHostFibers(id) {
          var fibers = [];
          var fiber = findCurrentFiberUsingSlowPathById(id);

          if (!fiber) {
            return fibers;
          }

          var node = fiber;

          while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
              fibers.push(node);
            } else if (node.child) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            if (node === fiber) {
              return fibers;
            }

            while (!node.sibling) {
              if (!node.return || node.return === fiber) {
                return fibers;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }

          return fibers;
        }

        function findNativeNodesForFiberID(id) {
          try {
            var _fiber3 = findCurrentFiberUsingSlowPathById(id);

            if (_fiber3 === null) {
              return null;
            }

            var isTimedOutSuspense = _fiber3.tag === SuspenseComponent && _fiber3.memoizedState !== null;

            if (isTimedOutSuspense) {
              var maybeFallbackFiber = _fiber3.child && _fiber3.child.sibling;

              if (maybeFallbackFiber != null) {
                _fiber3 = maybeFallbackFiber;
              }
            }

            var hostFibers = findAllCurrentHostFibers(id);
            return hostFibers.map(function (hostFiber) {
              return hostFiber.stateNode;
            }).filter(Boolean);
          } catch (err) {
            return null;
          }
        }

        function getDisplayNameForFiberID(id) {
          var fiber = idToArbitraryFiberMap.get(id);
          return fiber != null ? getDisplayNameForFiber(fiber) : null;
        }

        function getFiberIDForNative(hostInstance) {
          var findNearestUnfilteredAncestor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          var fiber = renderer.findFiberByHostInstance(hostInstance);

          if (fiber != null) {
            if (findNearestUnfilteredAncestor) {
              while (fiber !== null && shouldFilterFiber(fiber)) {
                fiber = fiber.return;
              }
            }

            return getFiberIDThrows(fiber);
          }

          return null;
        }

        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber) {
            throw new Error('Unable to find node on an unmounted component.');
          }
        }

        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;

          if (!fiber.alternate) {
            var nextNode = node;

            do {
              node = nextNode;

              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }

              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }

          if (node.tag === HostRoot) {
            return nearestMounted;
          }

          return null;
        }

        function findCurrentFiberUsingSlowPathById(id) {
          var fiber = idToArbitraryFiberMap.get(id);

          if (fiber == null) {
            console.warn("Could not find Fiber with id \"".concat(id, "\""));
            return null;
          }

          var alternate = fiber.alternate;

          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);

            if (nearestMounted === null) {
              throw new Error('Unable to find node on an unmounted component.');
            }

            if (nearestMounted !== fiber) {
              return null;
            }

            return fiber;
          }

          var a = fiber;
          var b = alternate;

          while (true) {
            var parentA = a.return;

            if (parentA === null) {
              break;
            }

            var parentB = parentA.alternate;

            if (parentB === null) {
              var nextParent = parentA.return;

              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              }

              break;
            }

            if (parentA.child === parentB.child) {
              var child = parentA.child;

              while (child) {
                if (child === a) {
                  assertIsMounted(parentA);
                  return fiber;
                }

                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }

                child = child.sibling;
              }

              throw new Error('Unable to find node on an unmounted component.');
            }

            if (a.return !== b.return) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;

              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }

                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }

                _child = _child.sibling;
              }

              if (!didFindChild) {
                _child = parentB.child;

                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }

                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }

                  _child = _child.sibling;
                }

                if (!didFindChild) {
                  throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');
                }
              }
            }

            if (a.alternate !== b) {
              throw new Error("Return fibers should always be each others' alternates. " + 'This error is likely caused by a bug in React. Please file an issue.');
            }
          }

          if (a.tag !== HostRoot) {
            throw new Error('Unable to find node on an unmounted component.');
          }

          if (a.stateNode.current === a) {
            return fiber;
          }

          return alternate;
        }

        function prepareViewAttributeSource(id, path) {
          if (isMostRecentlyInspectedElement(id)) {
            window.$attribute = Object(utils["h"])(mostRecentlyInspectedElement, path);
          }
        }

        function prepareViewElementSource(id) {
          var fiber = idToArbitraryFiberMap.get(id);

          if (fiber == null) {
            console.warn("Could not find Fiber with id \"".concat(id, "\""));
            return;
          }

          var elementType = fiber.elementType,
              tag = fiber.tag,
              type = fiber.type;

          switch (tag) {
            case ClassComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case FunctionComponent:
              global.$type = type;
              break;

            case ForwardRef:
              global.$type = type.render;
              break;

            case MemoComponent:
            case SimpleMemoComponent:
              global.$type = elementType != null && elementType.type != null ? elementType.type : type;
              break;

            default:
              global.$type = null;
              break;
          }
        }

        function fiberToSerializedElement(fiber) {
          return {
            displayName: getDisplayNameForFiber(fiber) || 'Anonymous',
            id: getFiberIDThrows(fiber),
            key: fiber.key,
            type: getElementTypeForFiber(fiber)
          };
        }

        function getOwnersList(id) {
          var fiber = findCurrentFiberUsingSlowPathById(id);

          if (fiber == null) {
            return null;
          }

          var _debugOwner = fiber._debugOwner;
          var owners = [fiberToSerializedElement(fiber)];

          if (_debugOwner) {
            var owner = _debugOwner;

            while (owner !== null) {
              owners.unshift(fiberToSerializedElement(owner));
              owner = owner._debugOwner || null;
            }
          }

          return owners;
        }

        function getInstanceAndStyle(id) {
          var instance = null;
          var style = null;
          var fiber = findCurrentFiberUsingSlowPathById(id);

          if (fiber !== null) {
            instance = fiber.stateNode;

            if (fiber.memoizedProps !== null) {
              style = fiber.memoizedProps.style;
            }
          }

          return {
            instance: instance,
            style: style
          };
        }

        function isErrorBoundary(fiber) {
          var tag = fiber.tag,
              type = fiber.type;

          switch (tag) {
            case ClassComponent:
            case IncompleteClassComponent:
              var instance = fiber.stateNode;
              return typeof type.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function';

            default:
              return false;
          }
        }

        function getNearestErrorBoundaryID(fiber) {
          var parent = fiber.return;

          while (parent !== null) {
            if (isErrorBoundary(parent)) {
              return getFiberIDUnsafe(parent);
            }

            parent = parent.return;
          }

          return null;
        }

        function inspectElementRaw(id) {
          var fiber = findCurrentFiberUsingSlowPathById(id);

          if (fiber == null) {
            return null;
          }

          var _debugOwner = fiber._debugOwner,
              _debugSource = fiber._debugSource,
              stateNode = fiber.stateNode,
              key = fiber.key,
              memoizedProps = fiber.memoizedProps,
              memoizedState = fiber.memoizedState,
              dependencies = fiber.dependencies,
              tag = fiber.tag,
              type = fiber.type;
          var elementType = getElementTypeForFiber(fiber);
          var usesHooks = (tag === FunctionComponent || tag === SimpleMemoComponent || tag === ForwardRef) && (!!memoizedState || !!dependencies);
          var showState = !usesHooks && tag !== CacheComponent;
          var typeSymbol = getTypeSymbol(type);
          var canViewSource = false;
          var context = null;

          if (tag === ClassComponent || tag === FunctionComponent || tag === IncompleteClassComponent || tag === IndeterminateComponent || tag === MemoComponent || tag === ForwardRef || tag === SimpleMemoComponent) {
            canViewSource = true;

            if (stateNode && stateNode.context != null) {
              var shouldHideContext = elementType === types["e"] && !(type.contextTypes || type.contextType);

              if (!shouldHideContext) {
                context = stateNode.context;
              }
            }
          } else if (typeSymbol === ReactSymbols["c"] || typeSymbol === ReactSymbols["d"]) {
            var consumerResolvedContext = type._context || type;
            context = consumerResolvedContext._currentValue || null;
            var _current = fiber.return;

            while (_current !== null) {
              var currentType = _current.type;
              var currentTypeSymbol = getTypeSymbol(currentType);

              if (currentTypeSymbol === ReactSymbols["n"] || currentTypeSymbol === ReactSymbols["o"]) {
                var providerResolvedContext = currentType._context || currentType.context;

                if (providerResolvedContext === consumerResolvedContext) {
                  context = _current.memoizedProps.value;
                  break;
                }
              }

              _current = _current.return;
            }
          }

          var hasLegacyContext = false;

          if (context !== null) {
            hasLegacyContext = !!type.contextTypes;
            context = {
              value: context
            };
          }

          var owners = null;

          if (_debugOwner) {
            owners = [];
            var owner = _debugOwner;

            while (owner !== null) {
              owners.push(fiberToSerializedElement(owner));
              owner = owner._debugOwner || null;
            }
          }

          var isTimedOutSuspense = tag === SuspenseComponent && memoizedState !== null;
          var hooks = null;

          if (usesHooks) {
            var originalConsoleMethods = {};

            for (var method in console) {
              try {
                originalConsoleMethods[method] = console[method];

                console[method] = function () {};
              } catch (error) {}
            }

            try {
              hooks = Object(react_debug_tools["inspectHooksOfFiber"])(fiber, renderer.currentDispatcherRef, true);
            } finally {
              for (var _method in originalConsoleMethods) {
                try {
                  console[_method] = originalConsoleMethods[_method];
                } catch (error) {}
              }
            }
          }

          var rootType = null;
          var current = fiber;

          while (current.return !== null) {
            current = current.return;
          }

          var fiberRoot = current.stateNode;

          if (fiberRoot != null && fiberRoot._debugRootType !== null) {
            rootType = fiberRoot._debugRootType;
          }

          var errors = fiberIDToErrorsMap.get(id) || new Map();
          var warnings = fiberIDToWarningsMap.get(id) || new Map();
          var isErrored = (fiber.flags & DidCapture) !== NoFlags || forceErrorForFiberIDs.get(id) === true;
          var targetErrorBoundaryID;

          if (isErrorBoundary(fiber)) {
            targetErrorBoundaryID = isErrored ? id : getNearestErrorBoundaryID(fiber);
          } else {
            targetErrorBoundaryID = getNearestErrorBoundaryID(fiber);
          }

          var plugins = {
            stylex: null
          };

          if (DevToolsFeatureFlags_core_oss["c"]) {
            if (memoizedProps.hasOwnProperty('xstyle')) {
              plugins.stylex = getStyleXData(memoizedProps.xstyle);
            }
          }

          return {
            id: id,
            canEditHooks: typeof overrideHookState === 'function',
            canEditFunctionProps: typeof overrideProps === 'function',
            canEditHooksAndDeletePaths: typeof overrideHookStateDeletePath === 'function',
            canEditHooksAndRenamePaths: typeof overrideHookStateRenamePath === 'function',
            canEditFunctionPropsDeletePaths: typeof overridePropsDeletePath === 'function',
            canEditFunctionPropsRenamePaths: typeof overridePropsRenamePath === 'function',
            canToggleError: supportsTogglingError && targetErrorBoundaryID != null,
            isErrored: isErrored,
            targetErrorBoundaryID: targetErrorBoundaryID,
            canToggleSuspense: supportsTogglingSuspense && (!isTimedOutSuspense || forceFallbackForSuspenseIDs.has(id)),
            canViewSource: canViewSource,
            hasLegacyContext: hasLegacyContext,
            key: key != null ? key : null,
            displayName: getDisplayNameForFiber(fiber),
            type: elementType,
            context: context,
            hooks: hooks,
            props: memoizedProps,
            state: showState ? memoizedState : null,
            errors: Array.from(errors.entries()),
            warnings: Array.from(warnings.entries()),
            owners: owners,
            source: _debugSource || null,
            rootType: rootType,
            rendererPackageName: renderer.rendererPackageName,
            rendererVersion: renderer.version,
            plugins: plugins
          };
        }

        var mostRecentlyInspectedElement = null;
        var hasElementUpdatedSinceLastInspected = false;
        var currentlyInspectedPaths = {};

        function isMostRecentlyInspectedElement(id) {
          return mostRecentlyInspectedElement !== null && mostRecentlyInspectedElement.id === id;
        }

        function isMostRecentlyInspectedElementCurrent(id) {
          return isMostRecentlyInspectedElement(id) && !hasElementUpdatedSinceLastInspected;
        }

        function mergeInspectedPaths(path) {
          var current = currentlyInspectedPaths;
          path.forEach(function (key) {
            if (!current[key]) {
              current[key] = {};
            }

            current = current[key];
          });
        }

        function createIsPathAllowed(key, secondaryCategory) {
          return function isPathAllowed(path) {
            switch (secondaryCategory) {
              case 'hooks':
                if (path.length === 1) {
                  return true;
                }

                if (path[path.length - 2] === 'hookSource' && path[path.length - 1] === 'fileName') {
                  return true;
                }

                if (path[path.length - 1] === 'subHooks' || path[path.length - 2] === 'subHooks') {
                  return true;
                }

                break;

              default:
                break;
            }

            var current = key === null ? currentlyInspectedPaths : currentlyInspectedPaths[key];

            if (!current) {
              return false;
            }

            for (var i = 0; i < path.length; i++) {
              current = current[path[i]];

              if (!current) {
                return false;
              }
            }

            return true;
          };
        }

        function updateSelectedElement(inspectedElement) {
          var hooks = inspectedElement.hooks,
              id = inspectedElement.id,
              props = inspectedElement.props;
          var fiber = idToArbitraryFiberMap.get(id);

          if (fiber == null) {
            console.warn("Could not find Fiber with id \"".concat(id, "\""));
            return;
          }

          var elementType = fiber.elementType,
              stateNode = fiber.stateNode,
              tag = fiber.tag,
              type = fiber.type;

          switch (tag) {
            case ClassComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
              global.$r = stateNode;
              break;

            case FunctionComponent:
              global.$r = {
                hooks: hooks,
                props: props,
                type: type
              };
              break;

            case ForwardRef:
              global.$r = {
                hooks: hooks,
                props: props,
                type: type.render
              };
              break;

            case MemoComponent:
            case SimpleMemoComponent:
              global.$r = {
                hooks: hooks,
                props: props,
                type: elementType != null && elementType.type != null ? elementType.type : type
              };
              break;

            default:
              global.$r = null;
              break;
          }
        }

        function storeAsGlobal(id, path, count) {
          if (isMostRecentlyInspectedElement(id)) {
            var value = Object(utils["h"])(mostRecentlyInspectedElement, path);
            var key = "$reactTemp".concat(count);
            window[key] = value;
            console.log(key);
            console.log(value);
          }
        }

        function copyElementPath(id, path) {
          if (isMostRecentlyInspectedElement(id)) {
            Object(backend_utils["b"])(Object(utils["h"])(mostRecentlyInspectedElement, path));
          }
        }

        function inspectElement(requestID, id, path, forceFullData) {
          if (path !== null) {
            mergeInspectedPaths(path);
          }

          if (isMostRecentlyInspectedElement(id) && !forceFullData) {
            if (!hasElementUpdatedSinceLastInspected) {
              if (path !== null) {
                var secondaryCategory = null;

                if (path[0] === 'hooks') {
                  secondaryCategory = 'hooks';
                }

                return {
                  id: id,
                  responseID: requestID,
                  type: 'hydrated-path',
                  path: path,
                  value: Object(backend_utils["a"])(Object(utils["h"])(mostRecentlyInspectedElement, path), createIsPathAllowed(null, secondaryCategory), path)
                };
              } else {
                return {
                  id: id,
                  responseID: requestID,
                  type: 'no-change'
                };
              }
            }
          } else {
            currentlyInspectedPaths = {};
          }

          hasElementUpdatedSinceLastInspected = false;

          try {
            mostRecentlyInspectedElement = inspectElementRaw(id);
          } catch (error) {
            if (error.name === 'ReactDebugToolsRenderError') {
              var message = 'Error rendering inspected element.';
              var stack;
              console.error(message + '\n\n', error);

              if (error.cause != null) {
                var _fiber4 = findCurrentFiberUsingSlowPathById(id);

                var componentName = _fiber4 != null ? getDisplayNameForFiber(_fiber4) : null;
                console.error('React DevTools encountered an error while trying to inspect hooks. ' + 'This is most likely caused by an error in current inspected component' + (componentName != null ? ": \"".concat(componentName, "\".") : '.') + '\nThe error thrown in the component is: \n\n', error.cause);

                if (error.cause instanceof Error) {
                  message = error.cause.message || message;
                  stack = error.cause.stack;
                }
              }

              return {
                type: 'error',
                errorType: 'user',
                id: id,
                responseID: requestID,
                message: message,
                stack: stack
              };
            }

            if (error.name === 'ReactDebugToolsUnsupportedHookError') {
              return {
                type: 'error',
                errorType: 'unknown-hook',
                id: id,
                responseID: requestID,
                message: 'Unsupported hook in the react-debug-tools package: ' + error.message
              };
            }

            console.error('Error inspecting element.\n\n', error);
            return {
              type: 'error',
              errorType: 'uncaught',
              id: id,
              responseID: requestID,
              message: error.message,
              stack: error.stack
            };
          }

          if (mostRecentlyInspectedElement === null) {
            return {
              id: id,
              responseID: requestID,
              type: 'not-found'
            };
          }

          updateSelectedElement(mostRecentlyInspectedElement);

          var cleanedInspectedElement = _objectSpread({}, mostRecentlyInspectedElement);

          cleanedInspectedElement.context = Object(backend_utils["a"])(cleanedInspectedElement.context, createIsPathAllowed('context', null));
          cleanedInspectedElement.hooks = Object(backend_utils["a"])(cleanedInspectedElement.hooks, createIsPathAllowed('hooks', 'hooks'));
          cleanedInspectedElement.props = Object(backend_utils["a"])(cleanedInspectedElement.props, createIsPathAllowed('props', null));
          cleanedInspectedElement.state = Object(backend_utils["a"])(cleanedInspectedElement.state, createIsPathAllowed('state', null));
          return {
            id: id,
            responseID: requestID,
            type: 'full-data',
            value: cleanedInspectedElement
          };
        }

        function logElementToConsole(id) {
          var result = isMostRecentlyInspectedElementCurrent(id) ? mostRecentlyInspectedElement : inspectElementRaw(id);

          if (result === null) {
            console.warn("Could not find Fiber with id \"".concat(id, "\""));
            return;
          }

          var supportsGroup = typeof console.groupCollapsed === 'function';

          if (supportsGroup) {
            console.groupCollapsed("[Click to expand] %c<".concat(result.displayName || 'Component', " />"), 'color: var(--dom-tag-name-color); font-weight: normal;');
          }

          if (result.props !== null) {
            console.log('Props:', result.props);
          }

          if (result.state !== null) {
            console.log('State:', result.state);
          }

          if (result.hooks !== null) {
            console.log('Hooks:', result.hooks);
          }

          var nativeNodes = findNativeNodesForFiberID(id);

          if (nativeNodes !== null) {
            console.log('Nodes:', nativeNodes);
          }

          if (result.source !== null) {
            console.log('Location:', result.source);
          }

          if (window.chrome || /firefox/i.test(navigator.userAgent)) {
            console.log('Right-click any value to save it as a global variable for further inspection.');
          }

          if (supportsGroup) {
            console.groupEnd();
          }
        }

        function deletePath(type, id, hookID, path) {
          var fiber = findCurrentFiberUsingSlowPathById(id);

          if (fiber !== null) {
            var instance = fiber.stateNode;

            switch (type) {
              case 'context':
                path = path.slice(1);

                switch (fiber.tag) {
                  case ClassComponent:
                    if (path.length === 0) {} else {
                      Object(utils["a"])(instance.context, path);
                    }

                    instance.forceUpdate();
                    break;

                  case FunctionComponent:
                    break;
                }

                break;

              case 'hooks':
                if (typeof overrideHookStateDeletePath === 'function') {
                  overrideHookStateDeletePath(fiber, hookID, path);
                }

                break;

              case 'props':
                if (instance === null) {
                  if (typeof overridePropsDeletePath === 'function') {
                    overridePropsDeletePath(fiber, path);
                  }
                } else {
                  fiber.pendingProps = Object(backend_utils["c"])(instance.props, path);
                  instance.forceUpdate();
                }

                break;

              case 'state':
                Object(utils["a"])(instance.state, path);
                instance.forceUpdate();
                break;
            }
          }
        }

        function renamePath(type, id, hookID, oldPath, newPath) {
          var fiber = findCurrentFiberUsingSlowPathById(id);

          if (fiber !== null) {
            var instance = fiber.stateNode;

            switch (type) {
              case 'context':
                oldPath = oldPath.slice(1);
                newPath = newPath.slice(1);

                switch (fiber.tag) {
                  case ClassComponent:
                    if (oldPath.length === 0) {} else {
                      Object(utils["k"])(instance.context, oldPath, newPath);
                    }

                    instance.forceUpdate();
                    break;

                  case FunctionComponent:
                    break;
                }

                break;

              case 'hooks':
                if (typeof overrideHookStateRenamePath === 'function') {
                  overrideHookStateRenamePath(fiber, hookID, oldPath, newPath);
                }

                break;

              case 'props':
                if (instance === null) {
                  if (typeof overridePropsRenamePath === 'function') {
                    overridePropsRenamePath(fiber, oldPath, newPath);
                  }
                } else {
                  fiber.pendingProps = Object(backend_utils["d"])(instance.props, oldPath, newPath);
                  instance.forceUpdate();
                }

                break;

              case 'state':
                Object(utils["k"])(instance.state, oldPath, newPath);
                instance.forceUpdate();
                break;
            }
          }
        }

        function overrideValueAtPath(type, id, hookID, path, value) {
          var fiber = findCurrentFiberUsingSlowPathById(id);

          if (fiber !== null) {
            var instance = fiber.stateNode;

            switch (type) {
              case 'context':
                path = path.slice(1);

                switch (fiber.tag) {
                  case ClassComponent:
                    if (path.length === 0) {
                      instance.context = value;
                    } else {
                      Object(utils["l"])(instance.context, path, value);
                    }

                    instance.forceUpdate();
                    break;

                  case FunctionComponent:
                    break;
                }

                break;

              case 'hooks':
                if (typeof overrideHookState === 'function') {
                  overrideHookState(fiber, hookID, path, value);
                }

                break;

              case 'props':
                switch (fiber.tag) {
                  case ClassComponent:
                    fiber.pendingProps = Object(backend_utils["e"])(instance.props, path, value);
                    instance.forceUpdate();
                    break;

                  default:
                    if (typeof overrideProps === 'function') {
                      overrideProps(fiber, path, value);
                    }

                    break;
                }

                break;

              case 'state':
                switch (fiber.tag) {
                  case ClassComponent:
                    Object(utils["l"])(instance.state, path, value);
                    instance.forceUpdate();
                    break;
                }

                break;
            }
          }
        }

        var currentCommitProfilingMetadata = null;
        var displayNamesByRootID = null;
        var idToContextsMap = null;
        var initialTreeBaseDurationsMap = null;
        var initialIDToRootMap = null;
        var isProfiling = false;
        var profilingStartTime = 0;
        var recordChangeDescriptions = false;
        var rootToCommitProfilingMetadataMap = null;

        function getProfilingData() {
          var dataForRoots = [];

          if (rootToCommitProfilingMetadataMap === null) {
            throw Error('getProfilingData() called before any profiling data was recorded');
          }

          rootToCommitProfilingMetadataMap.forEach(function (commitProfilingMetadata, rootID) {
            var commitData = [];
            var initialTreeBaseDurations = [];
            var displayName = displayNamesByRootID !== null && displayNamesByRootID.get(rootID) || 'Unknown';

            if (initialTreeBaseDurationsMap != null) {
              initialTreeBaseDurationsMap.forEach(function (treeBaseDuration, id) {
                if (initialIDToRootMap != null && initialIDToRootMap.get(id) === rootID) {
                  initialTreeBaseDurations.push([id, treeBaseDuration]);
                }
              });
            }

            commitProfilingMetadata.forEach(function (commitProfilingData, commitIndex) {
              var changeDescriptions = commitProfilingData.changeDescriptions,
                  durations = commitProfilingData.durations,
                  effectDuration = commitProfilingData.effectDuration,
                  maxActualDuration = commitProfilingData.maxActualDuration,
                  passiveEffectDuration = commitProfilingData.passiveEffectDuration,
                  priorityLevel = commitProfilingData.priorityLevel,
                  commitTime = commitProfilingData.commitTime,
                  updaters = commitProfilingData.updaters;
              var fiberActualDurations = [];
              var fiberSelfDurations = [];

              for (var i = 0; i < durations.length; i += 3) {
                var fiberID = durations[i];
                fiberActualDurations.push([fiberID, durations[i + 1]]);
                fiberSelfDurations.push([fiberID, durations[i + 2]]);
              }

              commitData.push({
                changeDescriptions: changeDescriptions !== null ? Array.from(changeDescriptions.entries()) : null,
                duration: maxActualDuration,
                effectDuration: effectDuration,
                fiberActualDurations: fiberActualDurations,
                fiberSelfDurations: fiberSelfDurations,
                passiveEffectDuration: passiveEffectDuration,
                priorityLevel: priorityLevel,
                timestamp: commitTime,
                updaters: updaters
              });
            });
            dataForRoots.push({
              commitData: commitData,
              displayName: displayName,
              initialTreeBaseDurations: initialTreeBaseDurations,
              rootID: rootID
            });
          });
          var timelineData = null;

          if (typeof getTimelineData === 'function') {
            var currentTimelineData = getTimelineData();

            if (currentTimelineData) {
              var batchUIDToMeasuresMap = currentTimelineData.batchUIDToMeasuresMap,
                  internalModuleSourceToRanges = currentTimelineData.internalModuleSourceToRanges,
                  laneToLabelMap = currentTimelineData.laneToLabelMap,
                  laneToReactMeasureMap = currentTimelineData.laneToReactMeasureMap,
                  rest = _objectWithoutProperties(currentTimelineData, ["batchUIDToMeasuresMap", "internalModuleSourceToRanges", "laneToLabelMap", "laneToReactMeasureMap"]);

              timelineData = _objectSpread(_objectSpread({}, rest), {}, {
                batchUIDToMeasuresKeyValueArray: Array.from(batchUIDToMeasuresMap.entries()),
                internalModuleSourceToRanges: Array.from(internalModuleSourceToRanges.entries()),
                laneToLabelKeyValueArray: Array.from(laneToLabelMap.entries()),
                laneToReactMeasureKeyValueArray: Array.from(laneToReactMeasureMap.entries())
              });
            }
          }

          return {
            dataForRoots: dataForRoots,
            rendererID: rendererID,
            timelineData: timelineData
          };
        }

        function startProfiling(shouldRecordChangeDescriptions) {
          if (isProfiling) {
            return;
          }

          recordChangeDescriptions = shouldRecordChangeDescriptions;
          displayNamesByRootID = new Map();
          initialTreeBaseDurationsMap = new Map(idToTreeBaseDurationMap);
          initialIDToRootMap = new Map(idToRootMap);
          idToContextsMap = new Map();
          hook.getFiberRoots(rendererID).forEach(function (root) {
            var rootID = getFiberIDThrows(root.current);
            displayNamesByRootID.set(rootID, getDisplayNameForRoot(root.current));

            if (shouldRecordChangeDescriptions) {
              crawlToInitializeContextsMap(root.current);
            }
          });
          isProfiling = true;
          profilingStartTime = renderer_getCurrentTime();
          rootToCommitProfilingMetadataMap = new Map();

          if (toggleProfilingStatus !== null) {
            toggleProfilingStatus(true);
          }
        }

        function stopProfiling() {
          isProfiling = false;
          recordChangeDescriptions = false;

          if (toggleProfilingStatus !== null) {
            toggleProfilingStatus(false);
          }
        }

        if (Object(storage["c"])(constants["k"]) === 'true') {
          startProfiling(Object(storage["c"])(constants["j"]) === 'true');
        }

        function shouldErrorFiberAlwaysNull() {
          return null;
        }

        var forceErrorForFiberIDs = new Map();

        function shouldErrorFiberAccordingToMap(fiber) {
          if (typeof setErrorHandler !== 'function') {
            throw new Error('Expected overrideError() to not get called for earlier React versions.');
          }

          var id = getFiberIDUnsafe(fiber);

          if (id === null) {
            return null;
          }

          var status = null;

          if (forceErrorForFiberIDs.has(id)) {
            status = forceErrorForFiberIDs.get(id);

            if (status === false) {
              forceErrorForFiberIDs.delete(id);

              if (forceErrorForFiberIDs.size === 0) {
                setErrorHandler(shouldErrorFiberAlwaysNull);
              }
            }
          }

          return status;
        }

        function overrideError(id, forceError) {
          if (typeof setErrorHandler !== 'function' || typeof scheduleUpdate !== 'function') {
            throw new Error('Expected overrideError() to not get called for earlier React versions.');
          }

          forceErrorForFiberIDs.set(id, forceError);

          if (forceErrorForFiberIDs.size === 1) {
            setErrorHandler(shouldErrorFiberAccordingToMap);
          }

          var fiber = idToArbitraryFiberMap.get(id);

          if (fiber != null) {
            scheduleUpdate(fiber);
          }
        }

        function shouldSuspendFiberAlwaysFalse() {
          return false;
        }

        var forceFallbackForSuspenseIDs = new Set();

        function shouldSuspendFiberAccordingToSet(fiber) {
          var maybeID = getFiberIDUnsafe(fiber);
          return maybeID !== null && forceFallbackForSuspenseIDs.has(maybeID);
        }

        function overrideSuspense(id, forceFallback) {
          if (typeof setSuspenseHandler !== 'function' || typeof scheduleUpdate !== 'function') {
            throw new Error('Expected overrideSuspense() to not get called for earlier React versions.');
          }

          if (forceFallback) {
            forceFallbackForSuspenseIDs.add(id);

            if (forceFallbackForSuspenseIDs.size === 1) {
              setSuspenseHandler(shouldSuspendFiberAccordingToSet);
            }
          } else {
            forceFallbackForSuspenseIDs.delete(id);

            if (forceFallbackForSuspenseIDs.size === 0) {
              setSuspenseHandler(shouldSuspendFiberAlwaysFalse);
            }
          }

          var fiber = idToArbitraryFiberMap.get(id);

          if (fiber != null) {
            scheduleUpdate(fiber);
          }
        }

        var trackedPath = null;
        var trackedPathMatchFiber = null;
        var trackedPathMatchDepth = -1;
        var mightBeOnTrackedPath = false;

        function setTrackedPath(path) {
          if (path === null) {
            trackedPathMatchFiber = null;
            trackedPathMatchDepth = -1;
            mightBeOnTrackedPath = false;
          }

          trackedPath = path;
        }

        function updateTrackedPathStateBeforeMount(fiber) {
          if (trackedPath === null || !mightBeOnTrackedPath) {
            return false;
          }

          var returnFiber = fiber.return;
          var returnAlternate = returnFiber !== null ? returnFiber.alternate : null;

          if (trackedPathMatchFiber === returnFiber || trackedPathMatchFiber === returnAlternate && returnAlternate !== null) {
            var actualFrame = getPathFrame(fiber);
            var expectedFrame = trackedPath[trackedPathMatchDepth + 1];

            if (expectedFrame === undefined) {
              throw new Error('Expected to see a frame at the next depth.');
            }

            if (actualFrame.index === expectedFrame.index && actualFrame.key === expectedFrame.key && actualFrame.displayName === expectedFrame.displayName) {
              trackedPathMatchFiber = fiber;
              trackedPathMatchDepth++;

              if (trackedPathMatchDepth === trackedPath.length - 1) {
                mightBeOnTrackedPath = false;
              } else {
                mightBeOnTrackedPath = true;
              }

              return false;
            }
          }

          mightBeOnTrackedPath = false;
          return true;
        }

        function updateTrackedPathStateAfterMount(mightSiblingsBeOnTrackedPath) {
          mightBeOnTrackedPath = mightSiblingsBeOnTrackedPath;
        }

        var rootPseudoKeys = new Map();
        var rootDisplayNameCounter = new Map();

        function setRootPseudoKey(id, fiber) {
          var name = getDisplayNameForRoot(fiber);
          var counter = rootDisplayNameCounter.get(name) || 0;
          rootDisplayNameCounter.set(name, counter + 1);
          var pseudoKey = "".concat(name, ":").concat(counter);
          rootPseudoKeys.set(id, pseudoKey);
        }

        function removeRootPseudoKey(id) {
          var pseudoKey = rootPseudoKeys.get(id);

          if (pseudoKey === undefined) {
            throw new Error('Expected root pseudo key to be known.');
          }

          var name = pseudoKey.substring(0, pseudoKey.lastIndexOf(':'));
          var counter = rootDisplayNameCounter.get(name);

          if (counter === undefined) {
            throw new Error('Expected counter to be known.');
          }

          if (counter > 1) {
            rootDisplayNameCounter.set(name, counter - 1);
          } else {
            rootDisplayNameCounter.delete(name);
          }

          rootPseudoKeys.delete(id);
        }

        function getDisplayNameForRoot(fiber) {
          var preferredDisplayName = null;
          var fallbackDisplayName = null;
          var child = fiber.child;

          for (var i = 0; i < 3; i++) {
            if (child === null) {
              break;
            }

            var displayName = getDisplayNameForFiber(child);

            if (displayName !== null) {
              if (typeof child.type === 'function') {
                preferredDisplayName = displayName;
              } else if (fallbackDisplayName === null) {
                fallbackDisplayName = displayName;
              }
            }

            if (preferredDisplayName !== null) {
              break;
            }

            child = child.child;
          }

          return preferredDisplayName || fallbackDisplayName || 'Anonymous';
        }

        function getPathFrame(fiber) {
          var key = fiber.key;
          var displayName = getDisplayNameForFiber(fiber);
          var index = fiber.index;

          switch (fiber.tag) {
            case HostRoot:
              var id = getFiberIDThrows(fiber);
              var pseudoKey = rootPseudoKeys.get(id);

              if (pseudoKey === undefined) {
                throw new Error('Expected mounted root to have known pseudo key.');
              }

              displayName = pseudoKey;
              break;

            case HostComponent:
              displayName = fiber.type;
              break;

            default:
              break;
          }

          return {
            displayName: displayName,
            key: key,
            index: index
          };
        }

        function getPathForElement(id) {
          var fiber = idToArbitraryFiberMap.get(id);

          if (fiber == null) {
            return null;
          }

          var keyPath = [];

          while (fiber !== null) {
            keyPath.push(getPathFrame(fiber));
            fiber = fiber.return;
          }

          keyPath.reverse();
          return keyPath;
        }

        function getBestMatchForTrackedPath() {
          if (trackedPath === null) {
            return null;
          }

          if (trackedPathMatchFiber === null) {
            return null;
          }

          var fiber = trackedPathMatchFiber;

          while (fiber !== null && shouldFilterFiber(fiber)) {
            fiber = fiber.return;
          }

          if (fiber === null) {
            return null;
          }

          return {
            id: getFiberIDThrows(fiber),
            isFullMatch: trackedPathMatchDepth === trackedPath.length - 1
          };
        }

        var formatPriorityLevel = function formatPriorityLevel(priorityLevel) {
          if (priorityLevel == null) {
            return 'Unknown';
          }

          switch (priorityLevel) {
            case ImmediatePriority:
              return 'Immediate';

            case UserBlockingPriority:
              return 'User-Blocking';

            case NormalPriority:
              return 'Normal';

            case LowPriority:
              return 'Low';

            case IdlePriority:
              return 'Idle';

            case NoPriority:
            default:
              return 'Unknown';
          }
        };

        function setTraceUpdatesEnabled(isEnabled) {
          traceUpdatesEnabled = isEnabled;
        }

        return {
          cleanup: cleanup,
          clearErrorsAndWarnings: clearErrorsAndWarnings,
          clearErrorsForFiberID: clearErrorsForFiberID,
          clearWarningsForFiberID: clearWarningsForFiberID,
          copyElementPath: copyElementPath,
          deletePath: deletePath,
          findNativeNodesForFiberID: findNativeNodesForFiberID,
          flushInitialOperations: flushInitialOperations,
          getBestMatchForTrackedPath: getBestMatchForTrackedPath,
          getDisplayNameForFiberID: getDisplayNameForFiberID,
          getFiberIDForNative: getFiberIDForNative,
          getInstanceAndStyle: getInstanceAndStyle,
          getOwnersList: getOwnersList,
          getPathForElement: getPathForElement,
          getProfilingData: getProfilingData,
          handleCommitFiberRoot: handleCommitFiberRoot,
          handleCommitFiberUnmount: handleCommitFiberUnmount,
          handlePostCommitFiberRoot: handlePostCommitFiberRoot,
          inspectElement: inspectElement,
          logElementToConsole: logElementToConsole,
          patchConsoleForStrictMode: backend_console["b"],
          prepareViewAttributeSource: prepareViewAttributeSource,
          prepareViewElementSource: prepareViewElementSource,
          overrideError: overrideError,
          overrideSuspense: overrideSuspense,
          overrideValueAtPath: overrideValueAtPath,
          renamePath: renamePath,
          renderer: renderer,
          setTraceUpdatesEnabled: setTraceUpdatesEnabled,
          setTrackedPath: setTrackedPath,
          startProfiling: startProfiling,
          stopProfiling: stopProfiling,
          storeAsGlobal: storeAsGlobal,
          unpatchConsoleForStrictMode: backend_console["d"],
          updateComponentFilters: updateComponentFilters
        };
      }
    }, function (module, exports) {
      var process = module.exports = {};
      var cachedSetTimeout;
      var cachedClearTimeout;

      function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
      }

      function defaultClearTimeout() {
        throw new Error('clearTimeout has not been defined');
      }

      (function () {
        try {
          if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }

        try {
          if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();

      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          return setTimeout(fun, 0);
        }

        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }

        try {
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e) {
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }

      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          return clearTimeout(marker);
        }

        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }

        try {
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            return cachedClearTimeout.call(null, marker);
          } catch (e) {
            return cachedClearTimeout.call(this, marker);
          }
        }
      }

      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;

      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }

        draining = false;

        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }

        if (queue.length) {
          drainQueue();
        }
      }

      function drainQueue() {
        if (draining) {
          return;
        }

        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;

        while (len) {
          currentQueue = queue;
          queue = [];

          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }

          queueIndex = -1;
          len = queue.length;
        }

        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }

      process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);

        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }

        queue.push(new Item(fun, args));

        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };

      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }

      Item.prototype.run = function () {
        this.fun.apply(null, this.array);
      };

      process.title = 'browser';
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = '';
      process.versions = {};

      function noop() {}

      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;

      process.listeners = function (name) {
        return [];
      };

      process.binding = function (name) {
        throw new Error('process.binding is not supported');
      };

      process.cwd = function () {
        return '/';
      };

      process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
      };

      process.umask = function () {
        return 0;
      };
    }, function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.d(__webpack_exports__, "a", function () {
        return REACT_SUSPENSE_LIST_TYPE;
      });

      __webpack_require__.d(__webpack_exports__, "b", function () {
        return REACT_TRACING_MARKER_TYPE;
      });

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      var REACT_ELEMENT_TYPE = Symbol.for('react.element');
      var REACT_PORTAL_TYPE = Symbol.for('react.portal');
      var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
      var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
      var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
      var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
      var REACT_CONTEXT_TYPE = Symbol.for('react.context');
      var REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');
      var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
      var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
      var REACT_MEMO_TYPE = Symbol.for('react.memo');
      var REACT_LAZY_TYPE = Symbol.for('react.lazy');
      var REACT_SCOPE_TYPE = Symbol.for('react.scope');
      var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');
      var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
      var REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');
      var REACT_CACHE_TYPE = Symbol.for('react.cache');
      var REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');
      var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for('react.default_value');
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = '@@iterator';

      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || _typeof(maybeIterable) !== 'object') {
          return null;
        }

        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

        if (typeof maybeIterator === 'function') {
          return maybeIterator;
        }

        return null;
      }
    }, function (module, exports, __webpack_require__) {
      (function (setImmediate) {
        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        (function (name, definition) {
          if (true) {
            module.exports = definition();
          } else {}
        })("clipboard", function () {
          if (typeof document === 'undefined' || !document.addEventListener) {
            return null;
          }

          var clipboard = {};

          clipboard.copy = function () {
            var _intercept = false;
            var _data = null;
            var _bogusSelection = false;

            function cleanup() {
              _intercept = false;
              _data = null;

              if (_bogusSelection) {
                window.getSelection().removeAllRanges();
              }

              _bogusSelection = false;
            }

            document.addEventListener("copy", function (e) {
              if (_intercept) {
                for (var key in _data) {
                  e.clipboardData.setData(key, _data[key]);
                }

                e.preventDefault();
              }
            });

            function bogusSelect() {
              var sel = document.getSelection();

              if (!document.queryCommandEnabled("copy") && sel.isCollapsed) {
                var range = document.createRange();
                range.selectNodeContents(document.body);
                sel.removeAllRanges();
                sel.addRange(range);
                _bogusSelection = true;
              }
            }

            ;
            return function (data) {
              return new Promise(function (resolve, reject) {
                _intercept = true;

                if (typeof data === "string") {
                  _data = {
                    "text/plain": data
                  };
                } else if (data instanceof Node) {
                  _data = {
                    "text/html": new XMLSerializer().serializeToString(data)
                  };
                } else if (data instanceof Object) {
                  _data = data;
                } else {
                  reject("Invalid data type. Must be string, DOM node, or an object mapping MIME types to strings.");
                }

                function triggerCopy(tryBogusSelect) {
                  try {
                    if (document.execCommand("copy")) {
                      cleanup();
                      resolve();
                    } else {
                      if (!tryBogusSelect) {
                        bogusSelect();
                        triggerCopy(true);
                      } else {
                        cleanup();
                        throw new Error("Unable to copy. Perhaps it's not available in your browser?");
                      }
                    }
                  } catch (e) {
                    cleanup();
                    reject(e);
                  }
                }

                triggerCopy(false);
              });
            };
          }();

          clipboard.paste = function () {
            var _intercept = false;

            var _resolve;

            var _dataType;

            document.addEventListener("paste", function (e) {
              if (_intercept) {
                _intercept = false;
                e.preventDefault();
                var resolve = _resolve;
                _resolve = null;
                resolve(e.clipboardData.getData(_dataType));
              }
            });
            return function (dataType) {
              return new Promise(function (resolve, reject) {
                _intercept = true;
                _resolve = resolve;
                _dataType = dataType || "text/plain";

                try {
                  if (!document.execCommand("paste")) {
                    _intercept = false;
                    reject(new Error("Unable to paste. Pasting only works in Internet Explorer at the moment."));
                  }
                } catch (e) {
                  _intercept = false;
                  reject(new Error(e));
                }
              });
            };
          }();

          if (typeof ClipboardEvent === "undefined" && typeof window.clipboardData !== "undefined" && typeof window.clipboardData.setData !== "undefined") {
            (function (a) {
              function b(a, b) {
                return function () {
                  a.apply(b, arguments);
                };
              }

              function c(a) {
                if ("object" != _typeof(this)) throw new TypeError("Promises must be constructed via new");
                if ("function" != typeof a) throw new TypeError("not a function");
                this._state = null, this._value = null, this._deferreds = [], i(a, b(e, this), b(f, this));
              }

              function d(a) {
                var b = this;
                return null === this._state ? void this._deferreds.push(a) : void j(function () {
                  var c = b._state ? a.onFulfilled : a.onRejected;
                  if (null === c) return void (b._state ? a.resolve : a.reject)(b._value);
                  var d;

                  try {
                    d = c(b._value);
                  } catch (e) {
                    return void a.reject(e);
                  }

                  a.resolve(d);
                });
              }

              function e(a) {
                try {
                  if (a === this) throw new TypeError("A promise cannot be resolved with itself.");

                  if (a && ("object" == _typeof(a) || "function" == typeof a)) {
                    var c = a.then;
                    if ("function" == typeof c) return void i(b(c, a), b(e, this), b(f, this));
                  }

                  this._state = !0, this._value = a, g.call(this);
                } catch (d) {
                  f.call(this, d);
                }
              }

              function f(a) {
                this._state = !1, this._value = a, g.call(this);
              }

              function g() {
                for (var a = 0, b = this._deferreds.length; b > a; a++) {
                  d.call(this, this._deferreds[a]);
                }

                this._deferreds = null;
              }

              function h(a, b, c, d) {
                this.onFulfilled = "function" == typeof a ? a : null, this.onRejected = "function" == typeof b ? b : null, this.resolve = c, this.reject = d;
              }

              function i(a, b, c) {
                var d = !1;

                try {
                  a(function (a) {
                    d || (d = !0, b(a));
                  }, function (a) {
                    d || (d = !0, c(a));
                  });
                } catch (e) {
                  if (d) return;
                  d = !0, c(e);
                }
              }

              var j = c.immediateFn || "function" == typeof setImmediate && setImmediate || function (a) {
                setTimeout(a, 1);
              },
                  k = Array.isArray || function (a) {
                return "[object Array]" === Object.prototype.toString.call(a);
              };

              c.prototype["catch"] = function (a) {
                return this.then(null, a);
              }, c.prototype.then = function (a, b) {
                var e = this;
                return new c(function (c, f) {
                  d.call(e, new h(a, b, c, f));
                });
              }, c.all = function () {
                var a = Array.prototype.slice.call(1 === arguments.length && k(arguments[0]) ? arguments[0] : arguments);
                return new c(function (b, c) {
                  function d(f, g) {
                    try {
                      if (g && ("object" == _typeof(g) || "function" == typeof g)) {
                        var h = g.then;
                        if ("function" == typeof h) return void h.call(g, function (a) {
                          d(f, a);
                        }, c);
                      }

                      a[f] = g, 0 === --e && b(a);
                    } catch (i) {
                      c(i);
                    }
                  }

                  if (0 === a.length) return b([]);

                  for (var e = a.length, f = 0; f < a.length; f++) {
                    d(f, a[f]);
                  }
                });
              }, c.resolve = function (a) {
                return a && "object" == _typeof(a) && a.constructor === c ? a : new c(function (b) {
                  b(a);
                });
              }, c.reject = function (a) {
                return new c(function (b, c) {
                  c(a);
                });
              }, c.race = function (a) {
                return new c(function (b, c) {
                  for (var d = 0, e = a.length; e > d; d++) {
                    a[d].then(b, c);
                  }
                });
              }, true && module.exports ? module.exports = c : a.Promise || (a.Promise = c);
            })(this);

            clipboard.copy = function (data) {
              return new Promise(function (resolve, reject) {
                if (typeof data !== "string" && !("text/plain" in data)) {
                  throw new Error("You must provide a text/plain type.");
                }

                var strData = typeof data === "string" ? data : data["text/plain"];
                var copySucceeded = window.clipboardData.setData("Text", strData);

                if (copySucceeded) {
                  resolve();
                } else {
                  reject(new Error("Copying was rejected."));
                }
              });
            };

            clipboard.paste = function () {
              return new Promise(function (resolve, reject) {
                var strData = window.clipboardData.getData("Text");

                if (strData) {
                  resolve(strData);
                } else {
                  reject(new Error("Pasting was rejected."));
                }
              });
            };
          }

          return clipboard;
        });
      }).call(this, __webpack_require__(22).setImmediate);
    }, function (module, exports, __webpack_require__) {
      "use strict";

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      var Yallist = __webpack_require__(24);

      var MAX = Symbol('max');
      var LENGTH = Symbol('length');
      var LENGTH_CALCULATOR = Symbol('lengthCalculator');
      var ALLOW_STALE = Symbol('allowStale');
      var MAX_AGE = Symbol('maxAge');
      var DISPOSE = Symbol('dispose');
      var NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet');
      var LRU_LIST = Symbol('lruList');
      var CACHE = Symbol('cache');
      var UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet');

      var naiveLength = function naiveLength() {
        return 1;
      };

      var LRUCache = function () {
        function LRUCache(options) {
          _classCallCheck(this, LRUCache);

          if (typeof options === 'number') options = {
            max: options
          };
          if (!options) options = {};
          if (options.max && (typeof options.max !== 'number' || options.max < 0)) throw new TypeError('max must be a non-negative number');
          var max = this[MAX] = options.max || Infinity;
          var lc = options.length || naiveLength;
          this[LENGTH_CALCULATOR] = typeof lc !== 'function' ? naiveLength : lc;
          this[ALLOW_STALE] = options.stale || false;
          if (options.maxAge && typeof options.maxAge !== 'number') throw new TypeError('maxAge must be a number');
          this[MAX_AGE] = options.maxAge || 0;
          this[DISPOSE] = options.dispose;
          this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
          this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
          this.reset();
        }

        _createClass(LRUCache, [{
          key: "rforEach",
          value: function rforEach(fn, thisp) {
            thisp = thisp || this;

            for (var walker = this[LRU_LIST].tail; walker !== null;) {
              var prev = walker.prev;
              forEachStep(this, fn, walker, thisp);
              walker = prev;
            }
          }
        }, {
          key: "forEach",
          value: function forEach(fn, thisp) {
            thisp = thisp || this;

            for (var walker = this[LRU_LIST].head; walker !== null;) {
              var next = walker.next;
              forEachStep(this, fn, walker, thisp);
              walker = next;
            }
          }
        }, {
          key: "keys",
          value: function keys() {
            return this[LRU_LIST].toArray().map(function (k) {
              return k.key;
            });
          }
        }, {
          key: "values",
          value: function values() {
            return this[LRU_LIST].toArray().map(function (k) {
              return k.value;
            });
          }
        }, {
          key: "reset",
          value: function reset() {
            var _this = this;

            if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
              this[LRU_LIST].forEach(function (hit) {
                return _this[DISPOSE](hit.key, hit.value);
              });
            }

            this[CACHE] = new Map();
            this[LRU_LIST] = new Yallist();
            this[LENGTH] = 0;
          }
        }, {
          key: "dump",
          value: function dump() {
            var _this2 = this;

            return this[LRU_LIST].map(function (hit) {
              return isStale(_this2, hit) ? false : {
                k: hit.key,
                v: hit.value,
                e: hit.now + (hit.maxAge || 0)
              };
            }).toArray().filter(function (h) {
              return h;
            });
          }
        }, {
          key: "dumpLru",
          value: function dumpLru() {
            return this[LRU_LIST];
          }
        }, {
          key: "set",
          value: function set(key, value, maxAge) {
            maxAge = maxAge || this[MAX_AGE];
            if (maxAge && typeof maxAge !== 'number') throw new TypeError('maxAge must be a number');
            var now = maxAge ? Date.now() : 0;
            var len = this[LENGTH_CALCULATOR](value, key);

            if (this[CACHE].has(key)) {
              if (len > this[MAX]) {
                _del(this, this[CACHE].get(key));

                return false;
              }

              var node = this[CACHE].get(key);
              var item = node.value;

              if (this[DISPOSE]) {
                if (!this[NO_DISPOSE_ON_SET]) this[DISPOSE](key, item.value);
              }

              item.now = now;
              item.maxAge = maxAge;
              item.value = value;
              this[LENGTH] += len - item.length;
              item.length = len;
              this.get(key);
              trim(this);
              return true;
            }

            var hit = new Entry(key, value, len, now, maxAge);

            if (hit.length > this[MAX]) {
              if (this[DISPOSE]) this[DISPOSE](key, value);
              return false;
            }

            this[LENGTH] += hit.length;
            this[LRU_LIST].unshift(hit);
            this[CACHE].set(key, this[LRU_LIST].head);
            trim(this);
            return true;
          }
        }, {
          key: "has",
          value: function has(key) {
            if (!this[CACHE].has(key)) return false;
            var hit = this[CACHE].get(key).value;
            return !isStale(this, hit);
          }
        }, {
          key: "get",
          value: function get(key) {
            return _get(this, key, true);
          }
        }, {
          key: "peek",
          value: function peek(key) {
            return _get(this, key, false);
          }
        }, {
          key: "pop",
          value: function pop() {
            var node = this[LRU_LIST].tail;
            if (!node) return null;

            _del(this, node);

            return node.value;
          }
        }, {
          key: "del",
          value: function del(key) {
            _del(this, this[CACHE].get(key));
          }
        }, {
          key: "load",
          value: function load(arr) {
            this.reset();
            var now = Date.now();

            for (var l = arr.length - 1; l >= 0; l--) {
              var hit = arr[l];
              var expiresAt = hit.e || 0;
              if (expiresAt === 0) this.set(hit.k, hit.v);else {
                var maxAge = expiresAt - now;

                if (maxAge > 0) {
                  this.set(hit.k, hit.v, maxAge);
                }
              }
            }
          }
        }, {
          key: "prune",
          value: function prune() {
            var _this3 = this;

            this[CACHE].forEach(function (value, key) {
              return _get(_this3, key, false);
            });
          }
        }, {
          key: "max",
          set: function set(mL) {
            if (typeof mL !== 'number' || mL < 0) throw new TypeError('max must be a non-negative number');
            this[MAX] = mL || Infinity;
            trim(this);
          },
          get: function get() {
            return this[MAX];
          }
        }, {
          key: "allowStale",
          set: function set(allowStale) {
            this[ALLOW_STALE] = !!allowStale;
          },
          get: function get() {
            return this[ALLOW_STALE];
          }
        }, {
          key: "maxAge",
          set: function set(mA) {
            if (typeof mA !== 'number') throw new TypeError('maxAge must be a non-negative number');
            this[MAX_AGE] = mA;
            trim(this);
          },
          get: function get() {
            return this[MAX_AGE];
          }
        }, {
          key: "lengthCalculator",
          set: function set(lC) {
            var _this4 = this;

            if (typeof lC !== 'function') lC = naiveLength;

            if (lC !== this[LENGTH_CALCULATOR]) {
              this[LENGTH_CALCULATOR] = lC;
              this[LENGTH] = 0;
              this[LRU_LIST].forEach(function (hit) {
                hit.length = _this4[LENGTH_CALCULATOR](hit.value, hit.key);
                _this4[LENGTH] += hit.length;
              });
            }

            trim(this);
          },
          get: function get() {
            return this[LENGTH_CALCULATOR];
          }
        }, {
          key: "length",
          get: function get() {
            return this[LENGTH];
          }
        }, {
          key: "itemCount",
          get: function get() {
            return this[LRU_LIST].length;
          }
        }]);

        return LRUCache;
      }();

      var _get = function _get(self, key, doUse) {
        var node = self[CACHE].get(key);

        if (node) {
          var hit = node.value;

          if (isStale(self, hit)) {
            _del(self, node);

            if (!self[ALLOW_STALE]) return undefined;
          } else {
            if (doUse) {
              if (self[UPDATE_AGE_ON_GET]) node.value.now = Date.now();
              self[LRU_LIST].unshiftNode(node);
            }
          }

          return hit.value;
        }
      };

      var isStale = function isStale(self, hit) {
        if (!hit || !hit.maxAge && !self[MAX_AGE]) return false;
        var diff = Date.now() - hit.now;
        return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];
      };

      var trim = function trim(self) {
        if (self[LENGTH] > self[MAX]) {
          for (var walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null;) {
            var prev = walker.prev;

            _del(self, walker);

            walker = prev;
          }
        }
      };

      var _del = function _del(self, node) {
        if (node) {
          var hit = node.value;
          if (self[DISPOSE]) self[DISPOSE](hit.key, hit.value);
          self[LENGTH] -= hit.length;
          self[CACHE].delete(hit.key);
          self[LRU_LIST].removeNode(node);
        }
      };

      var Entry = function Entry(key, value, length, now, maxAge) {
        _classCallCheck(this, Entry);

        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
      };

      var forEachStep = function forEachStep(self, fn, node, thisp) {
        var hit = node.value;

        if (isStale(self, hit)) {
          _del(self, node);

          if (!self[ALLOW_STALE]) hit = undefined;
        }

        if (hit) fn.call(thisp, hit.value, hit.key, self);
      };

      module.exports = LRUCache;
    }, function (module, exports, __webpack_require__) {
      "use strict";

      if (true) {
        module.exports = __webpack_require__(27);
      } else {}
    }, function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.d(__webpack_exports__, "a", function () {
        return getStackByFiberInDevAndProd;
      });

      var ReactSymbols = __webpack_require__(3);

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            ownKeys(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;

      function disabledLog() {}

      disabledLog.__reactDisabledLog = true;

      function disableLogs() {
        if (disabledDepth === 0) {
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd;
          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          };
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }

        disabledDepth++;
      }

      function reenableLogs() {
        disabledDepth--;

        if (disabledDepth === 0) {
          var props = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          Object.defineProperties(console, {
            log: _objectSpread(_objectSpread({}, props), {}, {
              value: prevLog
            }),
            info: _objectSpread(_objectSpread({}, props), {}, {
              value: prevInfo
            }),
            warn: _objectSpread(_objectSpread({}, props), {}, {
              value: prevWarn
            }),
            error: _objectSpread(_objectSpread({}, props), {}, {
              value: prevError
            }),
            group: _objectSpread(_objectSpread({}, props), {}, {
              value: prevGroup
            }),
            groupCollapsed: _objectSpread(_objectSpread({}, props), {}, {
              value: prevGroupCollapsed
            }),
            groupEnd: _objectSpread(_objectSpread({}, props), {}, {
              value: prevGroupEnd
            })
          });
        }

        if (disabledDepth < 0) {
          console.error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
        }
      }

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      var prefix;

      function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) {
          try {
            throw Error();
          } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
          }
        }

        return '\n' + prefix + name;
      }

      var reentry = false;
      var componentFrameCache;

      if (false) {
        var PossiblyWeakMap;
      }

      function describeNativeComponentFrame(fn, construct, currentDispatcherRef) {
        if (!fn || reentry) {
          return '';
        }

        if (false) {
          var frame;
        }

        var control;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        reentry = true;
        var previousDispatcher = currentDispatcherRef.current;
        currentDispatcherRef.current = null;
        disableLogs();

        try {
          if (construct) {
            var Fake = function Fake() {
              throw Error();
            };

            Object.defineProperty(Fake.prototype, 'props', {
              set: function set() {
                throw Error();
              }
            });

            if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === 'object' && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }

              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }

              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }

            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === 'string') {
            var sampleLines = sample.stack.split('\n');
            var controlLines = control.stack.split('\n');
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;

            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }

            for (; s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;

                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                      if (false) {}

                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }

                break;
              }
            }
          }
        } finally {
          reentry = false;
          Error.prepareStackTrace = previousPrepareStackTrace;
          currentDispatcherRef.current = previousDispatcher;
          reenableLogs();
        }

        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

        if (false) {}

        return syntheticFrame;
      }

      function describeClassComponentFrame(ctor, source, ownerFn, currentDispatcherRef) {
        return describeNativeComponentFrame(ctor, true, currentDispatcherRef);
      }

      function describeFunctionComponentFrame(fn, source, ownerFn, currentDispatcherRef) {
        return describeNativeComponentFrame(fn, false, currentDispatcherRef);
      }

      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }

      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn, currentDispatcherRef) {
        if (true) {
          return '';
        }

        if (type == null) {
          return '';
        }

        if (typeof type === 'function') {
          return describeNativeComponentFrame(type, shouldConstruct(type), currentDispatcherRef);
        }

        if (typeof type === 'string') {
          return describeBuiltInComponentFrame(type, source, ownerFn);
        }

        switch (type) {
          case ReactSymbols["w"]:
          case ReactSymbols["x"]:
            return describeBuiltInComponentFrame('Suspense', source, ownerFn);

          case ReactSymbols["u"]:
          case ReactSymbols["v"]:
            return describeBuiltInComponentFrame('SuspenseList', source, ownerFn);
        }

        if (_typeof(type) === 'object') {
          switch (type.$$typeof) {
            case ReactSymbols["f"]:
            case ReactSymbols["g"]:
              return describeFunctionComponentFrame(type.render, source, ownerFn, currentDispatcherRef);

            case ReactSymbols["j"]:
            case ReactSymbols["k"]:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn, currentDispatcherRef);

            case ReactSymbols["h"]:
            case ReactSymbols["i"]:
              {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;

                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn, currentDispatcherRef);
                } catch (x) {}
              }
          }
        }

        return '';
      }

      function describeFiber(workTagMap, workInProgress, currentDispatcherRef) {
        var HostComponent = workTagMap.HostComponent,
            LazyComponent = workTagMap.LazyComponent,
            SuspenseComponent = workTagMap.SuspenseComponent,
            SuspenseListComponent = workTagMap.SuspenseListComponent,
            FunctionComponent = workTagMap.FunctionComponent,
            IndeterminateComponent = workTagMap.IndeterminateComponent,
            SimpleMemoComponent = workTagMap.SimpleMemoComponent,
            ForwardRef = workTagMap.ForwardRef,
            ClassComponent = workTagMap.ClassComponent;
        var owner = false ? undefined : null;
        var source = false ? undefined : null;

        switch (workInProgress.tag) {
          case HostComponent:
            return describeBuiltInComponentFrame(workInProgress.type, source, owner);

          case LazyComponent:
            return describeBuiltInComponentFrame('Lazy', source, owner);

          case SuspenseComponent:
            return describeBuiltInComponentFrame('Suspense', source, owner);

          case SuspenseListComponent:
            return describeBuiltInComponentFrame('SuspenseList', source, owner);

          case FunctionComponent:
          case IndeterminateComponent:
          case SimpleMemoComponent:
            return describeFunctionComponentFrame(workInProgress.type, source, owner, currentDispatcherRef);

          case ForwardRef:
            return describeFunctionComponentFrame(workInProgress.type.render, source, owner, currentDispatcherRef);

          case ClassComponent:
            return describeClassComponentFrame(workInProgress.type, source, owner, currentDispatcherRef);

          default:
            return '';
        }
      }

      function getStackByFiberInDevAndProd(workTagMap, workInProgress, currentDispatcherRef) {
        try {
          var info = '';
          var node = workInProgress;

          do {
            info += describeFiber(workTagMap, node, currentDispatcherRef);
            node = node.return;
          } while (node);

          return info;
        } catch (x) {
          return '\nError generating stack: ' + x.message + '\n' + x.stack;
        }
      }
    }, function (module, exports, __webpack_require__) {
      (function (global) {
        var scope = typeof global !== "undefined" && global || typeof self !== "undefined" && self || window;
        var apply = Function.prototype.apply;

        exports.setTimeout = function () {
          return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
        };

        exports.setInterval = function () {
          return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
        };

        exports.clearTimeout = exports.clearInterval = function (timeout) {
          if (timeout) {
            timeout.close();
          }
        };

        function Timeout(id, clearFn) {
          this._id = id;
          this._clearFn = clearFn;
        }

        Timeout.prototype.unref = Timeout.prototype.ref = function () {};

        Timeout.prototype.close = function () {
          this._clearFn.call(scope, this._id);
        };

        exports.enroll = function (item, msecs) {
          clearTimeout(item._idleTimeoutId);
          item._idleTimeout = msecs;
        };

        exports.unenroll = function (item) {
          clearTimeout(item._idleTimeoutId);
          item._idleTimeout = -1;
        };

        exports._unrefActive = exports.active = function (item) {
          clearTimeout(item._idleTimeoutId);
          var msecs = item._idleTimeout;

          if (msecs >= 0) {
            item._idleTimeoutId = setTimeout(function onTimeout() {
              if (item._onTimeout) item._onTimeout();
            }, msecs);
          }
        };

        __webpack_require__(23);

        exports.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof global !== "undefined" && global.setImmediate || this && this.setImmediate;
        exports.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof global !== "undefined" && global.clearImmediate || this && this.clearImmediate;
      }).call(this, __webpack_require__(13));
    }, function (module, exports, __webpack_require__) {
      (function (global, process) {
        (function (global, undefined) {
          "use strict";

          if (global.setImmediate) {
            return;
          }

          var nextHandle = 1;
          var tasksByHandle = {};
          var currentlyRunningATask = false;
          var doc = global.document;
          var registerImmediate;

          function setImmediate(callback) {
            if (typeof callback !== "function") {
              callback = new Function("" + callback);
            }

            var args = new Array(arguments.length - 1);

            for (var i = 0; i < args.length; i++) {
              args[i] = arguments[i + 1];
            }

            var task = {
              callback: callback,
              args: args
            };
            tasksByHandle[nextHandle] = task;
            registerImmediate(nextHandle);
            return nextHandle++;
          }

          function clearImmediate(handle) {
            delete tasksByHandle[handle];
          }

          function run(task) {
            var callback = task.callback;
            var args = task.args;

            switch (args.length) {
              case 0:
                callback();
                break;

              case 1:
                callback(args[0]);
                break;

              case 2:
                callback(args[0], args[1]);
                break;

              case 3:
                callback(args[0], args[1], args[2]);
                break;

              default:
                callback.apply(undefined, args);
                break;
            }
          }

          function runIfPresent(handle) {
            if (currentlyRunningATask) {
              setTimeout(runIfPresent, 0, handle);
            } else {
              var task = tasksByHandle[handle];

              if (task) {
                currentlyRunningATask = true;

                try {
                  run(task);
                } finally {
                  clearImmediate(handle);
                  currentlyRunningATask = false;
                }
              }
            }
          }

          function installNextTickImplementation() {
            registerImmediate = function registerImmediate(handle) {
              process.nextTick(function () {
                runIfPresent(handle);
              });
            };
          }

          function canUsePostMessage() {
            if (global.postMessage && !global.importScripts) {
              var postMessageIsAsynchronous = true;
              var oldOnMessage = global.onmessage;

              global.onmessage = function () {
                postMessageIsAsynchronous = false;
              };

              global.postMessage("", "*");
              global.onmessage = oldOnMessage;
              return postMessageIsAsynchronous;
            }
          }

          function installPostMessageImplementation() {
            var messagePrefix = "setImmediate$" + Math.random() + "$";

            var onGlobalMessage = function onGlobalMessage(event) {
              if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
              }
            };

            if (global.addEventListener) {
              global.addEventListener("message", onGlobalMessage, false);
            } else {
              global.attachEvent("onmessage", onGlobalMessage);
            }

            registerImmediate = function registerImmediate(handle) {
              global.postMessage(messagePrefix + handle, "*");
            };
          }

          function installMessageChannelImplementation() {
            var channel = new MessageChannel();

            channel.port1.onmessage = function (event) {
              var handle = event.data;
              runIfPresent(handle);
            };

            registerImmediate = function registerImmediate(handle) {
              channel.port2.postMessage(handle);
            };
          }

          function installReadyStateChangeImplementation() {
            var html = doc.documentElement;

            registerImmediate = function registerImmediate(handle) {
              var script = doc.createElement("script");

              script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
              };

              html.appendChild(script);
            };
          }

          function installSetTimeoutImplementation() {
            registerImmediate = function registerImmediate(handle) {
              setTimeout(runIfPresent, 0, handle);
            };
          }

          var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
          attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

          if ({}.toString.call(global.process) === "[object process]") {
            installNextTickImplementation();
          } else if (canUsePostMessage()) {
            installPostMessageImplementation();
          } else if (global.MessageChannel) {
            installMessageChannelImplementation();
          } else if (doc && "onreadystatechange" in doc.createElement("script")) {
            installReadyStateChangeImplementation();
          } else {
            installSetTimeoutImplementation();
          }

          attachTo.setImmediate = setImmediate;
          attachTo.clearImmediate = clearImmediate;
        })(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self);
      }).call(this, __webpack_require__(13), __webpack_require__(16));
    }, function (module, exports, __webpack_require__) {
      "use strict";

      module.exports = Yallist;
      Yallist.Node = Node;
      Yallist.create = Yallist;

      function Yallist(list) {
        var self = this;

        if (!(self instanceof Yallist)) {
          self = new Yallist();
        }

        self.tail = null;
        self.head = null;
        self.length = 0;

        if (list && typeof list.forEach === 'function') {
          list.forEach(function (item) {
            self.push(item);
          });
        } else if (arguments.length > 0) {
          for (var i = 0, l = arguments.length; i < l; i++) {
            self.push(arguments[i]);
          }
        }

        return self;
      }

      Yallist.prototype.removeNode = function (node) {
        if (node.list !== this) {
          throw new Error('removing node which does not belong to this list');
        }

        var next = node.next;
        var prev = node.prev;

        if (next) {
          next.prev = prev;
        }

        if (prev) {
          prev.next = next;
        }

        if (node === this.head) {
          this.head = next;
        }

        if (node === this.tail) {
          this.tail = prev;
        }

        node.list.length--;
        node.next = null;
        node.prev = null;
        node.list = null;
        return next;
      };

      Yallist.prototype.unshiftNode = function (node) {
        if (node === this.head) {
          return;
        }

        if (node.list) {
          node.list.removeNode(node);
        }

        var head = this.head;
        node.list = this;
        node.next = head;

        if (head) {
          head.prev = node;
        }

        this.head = node;

        if (!this.tail) {
          this.tail = node;
        }

        this.length++;
      };

      Yallist.prototype.pushNode = function (node) {
        if (node === this.tail) {
          return;
        }

        if (node.list) {
          node.list.removeNode(node);
        }

        var tail = this.tail;
        node.list = this;
        node.prev = tail;

        if (tail) {
          tail.next = node;
        }

        this.tail = node;

        if (!this.head) {
          this.head = node;
        }

        this.length++;
      };

      Yallist.prototype.push = function () {
        for (var i = 0, l = arguments.length; i < l; i++) {
          push(this, arguments[i]);
        }

        return this.length;
      };

      Yallist.prototype.unshift = function () {
        for (var i = 0, l = arguments.length; i < l; i++) {
          unshift(this, arguments[i]);
        }

        return this.length;
      };

      Yallist.prototype.pop = function () {
        if (!this.tail) {
          return undefined;
        }

        var res = this.tail.value;
        this.tail = this.tail.prev;

        if (this.tail) {
          this.tail.next = null;
        } else {
          this.head = null;
        }

        this.length--;
        return res;
      };

      Yallist.prototype.shift = function () {
        if (!this.head) {
          return undefined;
        }

        var res = this.head.value;
        this.head = this.head.next;

        if (this.head) {
          this.head.prev = null;
        } else {
          this.tail = null;
        }

        this.length--;
        return res;
      };

      Yallist.prototype.forEach = function (fn, thisp) {
        thisp = thisp || this;

        for (var walker = this.head, i = 0; walker !== null; i++) {
          fn.call(thisp, walker.value, i, this);
          walker = walker.next;
        }
      };

      Yallist.prototype.forEachReverse = function (fn, thisp) {
        thisp = thisp || this;

        for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
          fn.call(thisp, walker.value, i, this);
          walker = walker.prev;
        }
      };

      Yallist.prototype.get = function (n) {
        for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
          walker = walker.next;
        }

        if (i === n && walker !== null) {
          return walker.value;
        }
      };

      Yallist.prototype.getReverse = function (n) {
        for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
          walker = walker.prev;
        }

        if (i === n && walker !== null) {
          return walker.value;
        }
      };

      Yallist.prototype.map = function (fn, thisp) {
        thisp = thisp || this;
        var res = new Yallist();

        for (var walker = this.head; walker !== null;) {
          res.push(fn.call(thisp, walker.value, this));
          walker = walker.next;
        }

        return res;
      };

      Yallist.prototype.mapReverse = function (fn, thisp) {
        thisp = thisp || this;
        var res = new Yallist();

        for (var walker = this.tail; walker !== null;) {
          res.push(fn.call(thisp, walker.value, this));
          walker = walker.prev;
        }

        return res;
      };

      Yallist.prototype.reduce = function (fn, initial) {
        var acc;
        var walker = this.head;

        if (arguments.length > 1) {
          acc = initial;
        } else if (this.head) {
          walker = this.head.next;
          acc = this.head.value;
        } else {
          throw new TypeError('Reduce of empty list with no initial value');
        }

        for (var i = 0; walker !== null; i++) {
          acc = fn(acc, walker.value, i);
          walker = walker.next;
        }

        return acc;
      };

      Yallist.prototype.reduceReverse = function (fn, initial) {
        var acc;
        var walker = this.tail;

        if (arguments.length > 1) {
          acc = initial;
        } else if (this.tail) {
          walker = this.tail.prev;
          acc = this.tail.value;
        } else {
          throw new TypeError('Reduce of empty list with no initial value');
        }

        for (var i = this.length - 1; walker !== null; i--) {
          acc = fn(acc, walker.value, i);
          walker = walker.prev;
        }

        return acc;
      };

      Yallist.prototype.toArray = function () {
        var arr = new Array(this.length);

        for (var i = 0, walker = this.head; walker !== null; i++) {
          arr[i] = walker.value;
          walker = walker.next;
        }

        return arr;
      };

      Yallist.prototype.toArrayReverse = function () {
        var arr = new Array(this.length);

        for (var i = 0, walker = this.tail; walker !== null; i++) {
          arr[i] = walker.value;
          walker = walker.prev;
        }

        return arr;
      };

      Yallist.prototype.slice = function (from, to) {
        to = to || this.length;

        if (to < 0) {
          to += this.length;
        }

        from = from || 0;

        if (from < 0) {
          from += this.length;
        }

        var ret = new Yallist();

        if (to < from || to < 0) {
          return ret;
        }

        if (from < 0) {
          from = 0;
        }

        if (to > this.length) {
          to = this.length;
        }

        for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
          walker = walker.next;
        }

        for (; walker !== null && i < to; i++, walker = walker.next) {
          ret.push(walker.value);
        }

        return ret;
      };

      Yallist.prototype.sliceReverse = function (from, to) {
        to = to || this.length;

        if (to < 0) {
          to += this.length;
        }

        from = from || 0;

        if (from < 0) {
          from += this.length;
        }

        var ret = new Yallist();

        if (to < from || to < 0) {
          return ret;
        }

        if (from < 0) {
          from = 0;
        }

        if (to > this.length) {
          to = this.length;
        }

        for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
          walker = walker.prev;
        }

        for (; walker !== null && i > from; i--, walker = walker.prev) {
          ret.push(walker.value);
        }

        return ret;
      };

      Yallist.prototype.splice = function (start, deleteCount) {
        if (start > this.length) {
          start = this.length - 1;
        }

        if (start < 0) {
          start = this.length + start;
        }

        for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
          walker = walker.next;
        }

        var ret = [];

        for (var i = 0; walker && i < deleteCount; i++) {
          ret.push(walker.value);
          walker = this.removeNode(walker);
        }

        if (walker === null) {
          walker = this.tail;
        }

        if (walker !== this.head && walker !== this.tail) {
          walker = walker.prev;
        }

        for (var i = 2; i < arguments.length; i++) {
          walker = insert(this, walker, arguments[i]);
        }

        return ret;
      };

      Yallist.prototype.reverse = function () {
        var head = this.head;
        var tail = this.tail;

        for (var walker = head; walker !== null; walker = walker.prev) {
          var p = walker.prev;
          walker.prev = walker.next;
          walker.next = p;
        }

        this.head = tail;
        this.tail = head;
        return this;
      };

      function insert(self, node, value) {
        var inserted = node === self.head ? new Node(value, null, node, self) : new Node(value, node, node.next, self);

        if (inserted.next === null) {
          self.tail = inserted;
        }

        if (inserted.prev === null) {
          self.head = inserted;
        }

        self.length++;
        return inserted;
      }

      function push(self, item) {
        self.tail = new Node(item, self.tail, null, self);

        if (!self.head) {
          self.head = self.tail;
        }

        self.length++;
      }

      function unshift(self, item) {
        self.head = new Node(item, null, self.head, self);

        if (!self.tail) {
          self.tail = self.head;
        }

        self.length++;
      }

      function Node(value, prev, next, list) {
        if (!(this instanceof Node)) {
          return new Node(value, prev, next, list);
        }

        this.list = list;
        this.value = value;

        if (prev) {
          prev.next = this;
          this.prev = prev;
        } else {
          this.prev = null;
        }

        if (next) {
          next.prev = this;
          this.next = next;
        } else {
          this.next = null;
        }
      }

      try {
        __webpack_require__(25)(Yallist);
      } catch (er) {}
    }, function (module, exports, __webpack_require__) {
      "use strict";

      module.exports = function (Yallist) {
        Yallist.prototype[Symbol.iterator] = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/regenerator").mark(function _callee() {
          var walker;
          return _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/regenerator").wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  walker = this.head;

                case 1:
                  if (!walker) {
                    _context.next = 7;
                    break;
                  }

                  _context.next = 4;
                  return walker.value;

                case 4:
                  walker = walker.next;
                  _context.next = 1;
                  break;

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        });
      };
    }, function (module, exports, __webpack_require__) {
      "use strict";
      /**
       * @license React
       * react-is.production.min.js
       *
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      var b = Symbol.for("react.element"),
          c = Symbol.for("react.portal"),
          d = Symbol.for("react.fragment"),
          e = Symbol.for("react.strict_mode"),
          f = Symbol.for("react.profiler"),
          g = Symbol.for("react.provider"),
          h = Symbol.for("react.context"),
          k = Symbol.for("react.server_context"),
          l = Symbol.for("react.forward_ref"),
          m = Symbol.for("react.suspense"),
          n = Symbol.for("react.suspense_list"),
          p = Symbol.for("react.memo"),
          q = Symbol.for("react.lazy"),
          t = Symbol.for("react.offscreen"),
          u = Symbol.for("react.cache"),
          v;
      v = Symbol.for("react.module.reference");

      function w(a) {
        if ("object" === _typeof(a) && null !== a) {
          var r = a.$$typeof;

          switch (r) {
            case b:
              switch (a = a.type, a) {
                case d:
                case f:
                case e:
                case m:
                case n:
                  return a;

                default:
                  switch (a = a && a.$$typeof, a) {
                    case k:
                    case h:
                    case l:
                    case q:
                    case p:
                    case g:
                      return a;

                    default:
                      return r;
                  }

              }

            case c:
              return r;
          }
        }
      }

      exports.ContextConsumer = h;
      exports.ContextProvider = g;
      exports.Element = b;
      exports.ForwardRef = l;
      exports.Fragment = d;
      exports.Lazy = q;
      exports.Memo = p;
      exports.Portal = c;
      exports.Profiler = f;
      exports.StrictMode = e;
      exports.Suspense = m;
      exports.SuspenseList = n;

      exports.isAsyncMode = function () {
        return !1;
      };

      exports.isConcurrentMode = function () {
        return !1;
      };

      exports.isContextConsumer = function (a) {
        return w(a) === h;
      };

      exports.isContextProvider = function (a) {
        return w(a) === g;
      };

      exports.isElement = function (a) {
        return "object" === _typeof(a) && null !== a && a.$$typeof === b;
      };

      exports.isForwardRef = function (a) {
        return w(a) === l;
      };

      exports.isFragment = function (a) {
        return w(a) === d;
      };

      exports.isLazy = function (a) {
        return w(a) === q;
      };

      exports.isMemo = function (a) {
        return w(a) === p;
      };

      exports.isPortal = function (a) {
        return w(a) === c;
      };

      exports.isProfiler = function (a) {
        return w(a) === f;
      };

      exports.isStrictMode = function (a) {
        return w(a) === e;
      };

      exports.isSuspense = function (a) {
        return w(a) === m;
      };

      exports.isSuspenseList = function (a) {
        return w(a) === n;
      };

      exports.isValidElementType = function (a) {
        return "string" === typeof a || "function" === typeof a || a === d || a === f || a === e || a === m || a === n || a === t || a === u || "object" === _typeof(a) && null !== a && (a.$$typeof === q || a.$$typeof === p || a.$$typeof === g || a.$$typeof === h || a.$$typeof === l || a.$$typeof === v || void 0 !== a.getModuleId) ? !0 : !1;
      };

      exports.typeOf = w;
    }, function (module, exports, __webpack_require__) {
      "use strict";
      /**
       * @license React
       * react-debug-tools.production.min.js
       *
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      var h = __webpack_require__(28),
          l = __webpack_require__(30),
          r = Object.assign,
          w = l.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
          x = [],
          y = null;

      function z() {
        if (null === y) {
          var a = new Map();

          try {
            A.useContext({
              _currentValue: null
            }), A.useState(null), A.useReducer(function (a) {
              return a;
            }, null), A.useRef(null), "function" === typeof A.useCacheRefresh && A.useCacheRefresh(), A.useLayoutEffect(function () {}), A.useInsertionEffect(function () {}), A.useEffect(function () {}), A.useImperativeHandle(void 0, function () {
              return null;
            }), A.useDebugValue(null), A.useCallback(function () {}), A.useMemo(function () {
              return null;
            });
          } finally {
            var b = x;
            x = [];
          }

          for (var e = 0; e < b.length; e++) {
            var g = b[e];
            a.set(g.primitive, h.parse(g.stackError));
          }

          y = a;
        }

        return y;
      }

      var B = null;

      function C() {
        var a = B;
        null !== a && (B = a.next);
        return a;
      }

      var A = {
        getCacheForType: function getCacheForType() {
          throw Error("Not implemented.");
        },
        readContext: function readContext(a) {
          return a._currentValue;
        },
        useCacheRefresh: function useCacheRefresh() {
          var a = C();
          x.push({
            primitive: "CacheRefresh",
            stackError: Error(),
            value: null !== a ? a.memoizedState : function () {}
          });
          return function () {};
        },
        useCallback: function useCallback(a) {
          var b = C();
          x.push({
            primitive: "Callback",
            stackError: Error(),
            value: null !== b ? b.memoizedState[0] : a
          });
          return a;
        },
        useContext: function useContext(a) {
          x.push({
            primitive: "Context",
            stackError: Error(),
            value: a._currentValue
          });
          return a._currentValue;
        },
        useEffect: function useEffect(a) {
          C();
          x.push({
            primitive: "Effect",
            stackError: Error(),
            value: a
          });
        },
        useImperativeHandle: function useImperativeHandle(a) {
          C();
          var b = void 0;
          null !== a && "object" === _typeof(a) && (b = a.current);
          x.push({
            primitive: "ImperativeHandle",
            stackError: Error(),
            value: b
          });
        },
        useDebugValue: function useDebugValue(a, b) {
          x.push({
            primitive: "DebugValue",
            stackError: Error(),
            value: "function" === typeof b ? b(a) : a
          });
        },
        useLayoutEffect: function useLayoutEffect(a) {
          C();
          x.push({
            primitive: "LayoutEffect",
            stackError: Error(),
            value: a
          });
        },
        useInsertionEffect: function useInsertionEffect(a) {
          C();
          x.push({
            primitive: "InsertionEffect",
            stackError: Error(),
            value: a
          });
        },
        useMemo: function useMemo(a) {
          var b = C();
          a = null !== b ? b.memoizedState[0] : a();
          x.push({
            primitive: "Memo",
            stackError: Error(),
            value: a
          });
          return a;
        },
        useReducer: function useReducer(a, b, e) {
          a = C();
          b = null !== a ? a.memoizedState : void 0 !== e ? e(b) : b;
          x.push({
            primitive: "Reducer",
            stackError: Error(),
            value: b
          });
          return [b, function () {}];
        },
        useRef: function useRef(a) {
          var b = C();
          a = null !== b ? b.memoizedState : {
            current: a
          };
          x.push({
            primitive: "Ref",
            stackError: Error(),
            value: a.current
          });
          return a;
        },
        useState: function useState(a) {
          var b = C();
          a = null !== b ? b.memoizedState : "function" === typeof a ? a() : a;
          x.push({
            primitive: "State",
            stackError: Error(),
            value: a
          });
          return [a, function () {}];
        },
        useTransition: function useTransition() {
          C();
          C();
          x.push({
            primitive: "Transition",
            stackError: Error(),
            value: void 0
          });
          return [!1, function () {}];
        },
        useMutableSource: function useMutableSource(a, b) {
          C();
          C();
          C();
          C();
          a = b(a._source);
          x.push({
            primitive: "MutableSource",
            stackError: Error(),
            value: a
          });
          return a;
        },
        useSyncExternalStore: function useSyncExternalStore(a, b) {
          C();
          C();
          a = b();
          x.push({
            primitive: "SyncExternalStore",
            stackError: Error(),
            value: a
          });
          return a;
        },
        useDeferredValue: function useDeferredValue(a) {
          C();
          C();
          x.push({
            primitive: "DeferredValue",
            stackError: Error(),
            value: a
          });
          return a;
        },
        useId: function useId() {
          var a = C();
          a = null !== a ? a.memoizedState : "";
          x.push({
            primitive: "Id",
            stackError: Error(),
            value: a
          });
          return a;
        }
      },
          D = new Proxy(A, {
        get: function get(a, b) {
          if (a.hasOwnProperty(b)) return a[b];
          a = Error("Missing method in Dispatcher: " + b);
          a.name = "ReactDebugToolsUnsupportedHookError";
          throw a;
        }
      }),
          E = 0;

      function F(a, b, e) {
        var g = b[e].source,
            c = 0;

        a: for (; c < a.length; c++) {
          if (a[c].source === g) {
            for (var m = e + 1, q = c + 1; m < b.length && q < a.length; m++, q++) {
              if (a[q].source !== b[m].source) continue a;
            }

            return c;
          }
        }

        return -1;
      }

      function G(a, b) {
        if (!a) return !1;
        b = "use" + b;
        return a.length < b.length ? !1 : a.lastIndexOf(b) === a.length - b.length;
      }

      function H(a, b, e) {
        for (var g = [], c = null, m = g, q = 0, t = [], v = 0; v < b.length; v++) {
          var u = b[v];
          var d = a;
          var k = h.parse(u.stackError);

          b: {
            var n = k,
                p = F(n, d, E);
            if (-1 !== p) d = p;else {
              for (var f = 0; f < d.length && 5 > f; f++) {
                if (p = F(n, d, f), -1 !== p) {
                  E = f;
                  d = p;
                  break b;
                }
              }

              d = -1;
            }
          }

          b: {
            n = k;
            p = z().get(u.primitive);
            if (void 0 !== p) for (f = 0; f < p.length && f < n.length; f++) {
              if (p[f].source !== n[f].source) {
                f < n.length - 1 && G(n[f].functionName, u.primitive) && f++;
                f < n.length - 1 && G(n[f].functionName, u.primitive) && f++;
                n = f;
                break b;
              }
            }
            n = -1;
          }

          k = -1 === d || -1 === n || 2 > d - n ? null : k.slice(n, d - 1);

          if (null !== k) {
            d = 0;

            if (null !== c) {
              for (; d < k.length && d < c.length && k[k.length - d - 1].source === c[c.length - d - 1].source;) {
                d++;
              }

              for (c = c.length - 1; c > d; c--) {
                m = t.pop();
              }
            }

            for (c = k.length - d - 1; 1 <= c; c--) {
              d = [], n = k[c], (p = k[c - 1].functionName) ? (f = p.lastIndexOf("."), -1 === f && (f = 0), "use" === p.substr(f, 3) && (f += 3), p = p.substr(f)) : p = "", p = {
                id: null,
                isStateEditable: !1,
                name: p,
                value: void 0,
                subHooks: d
              }, e && (p.hookSource = {
                lineNumber: n.lineNumber,
                columnNumber: n.columnNumber,
                functionName: n.functionName,
                fileName: n.fileName
              }), m.push(p), t.push(m), m = d;
            }

            c = k;
          }

          d = u.primitive;
          u = {
            id: "Context" === d || "DebugValue" === d ? null : q++,
            isStateEditable: "Reducer" === d || "State" === d,
            name: d,
            value: u.value,
            subHooks: []
          };
          e && (d = {
            lineNumber: null,
            functionName: null,
            fileName: null,
            columnNumber: null
          }, k && 1 <= k.length && (k = k[0], d.lineNumber = k.lineNumber, d.functionName = k.functionName, d.fileName = k.fileName, d.columnNumber = k.columnNumber), u.hookSource = d);
          m.push(u);
        }

        I(g, null);
        return g;
      }

      function I(a, b) {
        for (var e = [], g = 0; g < a.length; g++) {
          var c = a[g];
          "DebugValue" === c.name && 0 === c.subHooks.length ? (a.splice(g, 1), g--, e.push(c)) : I(c.subHooks, c);
        }

        null !== b && (1 === e.length ? b.value = e[0].value : 1 < e.length && (b.value = e.map(function (a) {
          return a.value;
        })));
      }

      function J(a) {
        if (a instanceof Error && "ReactDebugToolsUnsupportedHookError" === a.name) throw a;
        var b = Error("Error rendering inspected component", {
          cause: a
        });
        b.name = "ReactDebugToolsRenderError";
        b.cause = a;
        throw b;
      }

      function K(a, b, e) {
        var g = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : !1;
        null == e && (e = w.ReactCurrentDispatcher);
        var c = e.current;
        e.current = D;

        try {
          var m = Error();
          a(b);
        } catch (t) {
          J(t);
        } finally {
          var q = x;
          x = [];
          e.current = c;
        }

        c = h.parse(m);
        return H(c, q, g);
      }

      function L(a) {
        a.forEach(function (a, e) {
          return e._currentValue = a;
        });
      }

      exports.inspectHooks = K;

      exports.inspectHooksOfFiber = function (a, b) {
        var e = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : !1;
        null == b && (b = w.ReactCurrentDispatcher);
        if (0 !== a.tag && 15 !== a.tag && 11 !== a.tag) throw Error("Unknown Fiber. Needs to be a function component to inspect hooks.");
        z();
        var g = a.type,
            c = a.memoizedProps;

        if (g !== a.elementType && g && g.defaultProps) {
          c = r({}, c);
          var m = g.defaultProps;

          for (q in m) {
            void 0 === c[q] && (c[q] = m[q]);
          }
        }

        B = a.memoizedState;
        var q = new Map();

        try {
          for (m = a; m;) {
            if (10 === m.tag) {
              var t = m.type._context;
              q.has(t) || (q.set(t, t._currentValue), t._currentValue = m.memoizedProps.value);
            }

            m = m.return;
          }

          if (11 === a.tag) {
            var v = g.render;
            g = c;
            var u = a.ref;
            t = b;
            var d = t.current;
            t.current = D;

            try {
              var k = Error();
              v(g, u);
            } catch (f) {
              J(f);
            } finally {
              var n = x;
              x = [];
              t.current = d;
            }

            var p = h.parse(k);
            return H(p, n, e);
          }

          return K(g, c, b, e);
        } finally {
          B = null, L(q);
        }
      };
    }, function (module, exports, __webpack_require__) {
      var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      (function (root, factory) {
        'use strict';

        if (true) {
          !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(29)], __WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else {}
      })(this, function ErrorStackParser(StackFrame) {
        'use strict';

        var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+:\d+/;
        var CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+:\d+|\(native\))/m;
        var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code])?$/;
        return {
          parse: function ErrorStackParser$$parse(error) {
            if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {
              return this.parseOpera(error);
            } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
              return this.parseV8OrIE(error);
            } else if (error.stack) {
              return this.parseFFOrSafari(error);
            } else {
              throw new Error('Cannot parse given Error object');
            }
          },
          extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
            if (urlLike.indexOf(':') === -1) {
              return [urlLike];
            }

            var regExp = /(.+?)(?::(\d+))?(?::(\d+))?$/;
            var parts = regExp.exec(urlLike.replace(/[()]/g, ''));
            return [parts[1], parts[2] || undefined, parts[3] || undefined];
          },
          parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
            var filtered = error.stack.split('\n').filter(function (line) {
              return !!line.match(CHROME_IE_STACK_REGEXP);
            }, this);
            return filtered.map(function (line) {
              if (line.indexOf('(eval ') > -1) {
                line = line.replace(/eval code/g, 'eval').replace(/(\(eval at [^()]*)|(\),.*$)/g, '');
              }

              var sanitizedLine = line.replace(/^\s+/, '').replace(/\(eval code/g, '(');
              var location = sanitizedLine.match(/ (\((.+):(\d+):(\d+)\)$)/);
              sanitizedLine = location ? sanitizedLine.replace(location[0], '') : sanitizedLine;
              var tokens = sanitizedLine.split(/\s+/).slice(1);
              var locationParts = this.extractLocation(location ? location[1] : tokens.pop());
              var functionName = tokens.join(' ') || undefined;
              var fileName = ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1 ? undefined : locationParts[0];
              return new StackFrame({
                functionName: functionName,
                fileName: fileName,
                lineNumber: locationParts[1],
                columnNumber: locationParts[2],
                source: line
              });
            }, this);
          },
          parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
            var filtered = error.stack.split('\n').filter(function (line) {
              return !line.match(SAFARI_NATIVE_CODE_REGEXP);
            }, this);
            return filtered.map(function (line) {
              if (line.indexOf(' > eval') > -1) {
                line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ':$1');
              }

              if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {
                return new StackFrame({
                  functionName: line
                });
              } else {
                var functionNameRegex = /((.*".+"[^@]*)?[^@]*)(?:@)/;
                var matches = line.match(functionNameRegex);
                var functionName = matches && matches[1] ? matches[1] : undefined;
                var locationParts = this.extractLocation(line.replace(functionNameRegex, ''));
                return new StackFrame({
                  functionName: functionName,
                  fileName: locationParts[0],
                  lineNumber: locationParts[1],
                  columnNumber: locationParts[2],
                  source: line
                });
              }
            }, this);
          },
          parseOpera: function ErrorStackParser$$parseOpera(e) {
            if (!e.stacktrace || e.message.indexOf('\n') > -1 && e.message.split('\n').length > e.stacktrace.split('\n').length) {
              return this.parseOpera9(e);
            } else if (!e.stack) {
              return this.parseOpera10(e);
            } else {
              return this.parseOpera11(e);
            }
          },
          parseOpera9: function ErrorStackParser$$parseOpera9(e) {
            var lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
            var lines = e.message.split('\n');
            var result = [];

            for (var i = 2, len = lines.length; i < len; i += 2) {
              var match = lineRE.exec(lines[i]);

              if (match) {
                result.push(new StackFrame({
                  fileName: match[2],
                  lineNumber: match[1],
                  source: lines[i]
                }));
              }
            }

            return result;
          },
          parseOpera10: function ErrorStackParser$$parseOpera10(e) {
            var lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
            var lines = e.stacktrace.split('\n');
            var result = [];

            for (var i = 0, len = lines.length; i < len; i += 2) {
              var match = lineRE.exec(lines[i]);

              if (match) {
                result.push(new StackFrame({
                  functionName: match[3] || undefined,
                  fileName: match[2],
                  lineNumber: match[1],
                  source: lines[i]
                }));
              }
            }

            return result;
          },
          parseOpera11: function ErrorStackParser$$parseOpera11(error) {
            var filtered = error.stack.split('\n').filter(function (line) {
              return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
            }, this);
            return filtered.map(function (line) {
              var tokens = line.split('@');
              var locationParts = this.extractLocation(tokens.pop());
              var functionCall = tokens.shift() || '';
              var functionName = functionCall.replace(/<anonymous function(: (\w+))?>/, '$2').replace(/\([^)]*\)/g, '') || undefined;
              var argsRaw;

              if (functionCall.match(/\(([^)]*)\)/)) {
                argsRaw = functionCall.replace(/^[^(]+\(([^)]*)\)$/, '$1');
              }

              var args = argsRaw === undefined || argsRaw === '[arguments not available]' ? undefined : argsRaw.split(',');
              return new StackFrame({
                functionName: functionName,
                args: args,
                fileName: locationParts[0],
                lineNumber: locationParts[1],
                columnNumber: locationParts[2],
                source: line
              });
            }, this);
          }
        };
      });
    }, function (module, exports, __webpack_require__) {
      var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      (function (root, factory) {
        'use strict';

        if (true) {
          !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else {}
      })(this, function () {
        'use strict';

        function _isNumber(n) {
          return !isNaN(parseFloat(n)) && isFinite(n);
        }

        function _capitalize(str) {
          return str.charAt(0).toUpperCase() + str.substring(1);
        }

        function _getter(p) {
          return function () {
            return this[p];
          };
        }

        var booleanProps = ['isConstructor', 'isEval', 'isNative', 'isToplevel'];
        var numericProps = ['columnNumber', 'lineNumber'];
        var stringProps = ['fileName', 'functionName', 'source'];
        var arrayProps = ['args'];
        var props = booleanProps.concat(numericProps, stringProps, arrayProps);

        function StackFrame(obj) {
          if (!obj) return;

          for (var i = 0; i < props.length; i++) {
            if (obj[props[i]] !== undefined) {
              this['set' + _capitalize(props[i])](obj[props[i]]);
            }
          }
        }

        StackFrame.prototype = {
          getArgs: function getArgs() {
            return this.args;
          },
          setArgs: function setArgs(v) {
            if (Object.prototype.toString.call(v) !== '[object Array]') {
              throw new TypeError('Args must be an Array');
            }

            this.args = v;
          },
          getEvalOrigin: function getEvalOrigin() {
            return this.evalOrigin;
          },
          setEvalOrigin: function setEvalOrigin(v) {
            if (v instanceof StackFrame) {
              this.evalOrigin = v;
            } else if (v instanceof Object) {
              this.evalOrigin = new StackFrame(v);
            } else {
              throw new TypeError('Eval Origin must be an Object or StackFrame');
            }
          },
          toString: function toString() {
            var fileName = this.getFileName() || '';
            var lineNumber = this.getLineNumber() || '';
            var columnNumber = this.getColumnNumber() || '';
            var functionName = this.getFunctionName() || '';

            if (this.getIsEval()) {
              if (fileName) {
                return '[eval] (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';
              }

              return '[eval]:' + lineNumber + ':' + columnNumber;
            }

            if (functionName) {
              return functionName + ' (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';
            }

            return fileName + ':' + lineNumber + ':' + columnNumber;
          }
        };

        StackFrame.fromString = function StackFrame$$fromString(str) {
          var argsStartIndex = str.indexOf('(');
          var argsEndIndex = str.lastIndexOf(')');
          var functionName = str.substring(0, argsStartIndex);
          var args = str.substring(argsStartIndex + 1, argsEndIndex).split(',');
          var locationString = str.substring(argsEndIndex + 1);

          if (locationString.indexOf('@') === 0) {
            var parts = /@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(locationString, '');
            var fileName = parts[1];
            var lineNumber = parts[2];
            var columnNumber = parts[3];
          }

          return new StackFrame({
            functionName: functionName,
            args: args || undefined,
            fileName: fileName,
            lineNumber: lineNumber || undefined,
            columnNumber: columnNumber || undefined
          });
        };

        for (var i = 0; i < booleanProps.length; i++) {
          StackFrame.prototype['get' + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);

          StackFrame.prototype['set' + _capitalize(booleanProps[i])] = function (p) {
            return function (v) {
              this[p] = Boolean(v);
            };
          }(booleanProps[i]);
        }

        for (var j = 0; j < numericProps.length; j++) {
          StackFrame.prototype['get' + _capitalize(numericProps[j])] = _getter(numericProps[j]);

          StackFrame.prototype['set' + _capitalize(numericProps[j])] = function (p) {
            return function (v) {
              if (!_isNumber(v)) {
                throw new TypeError(p + ' must be a Number');
              }

              this[p] = Number(v);
            };
          }(numericProps[j]);
        }

        for (var k = 0; k < stringProps.length; k++) {
          StackFrame.prototype['get' + _capitalize(stringProps[k])] = _getter(stringProps[k]);

          StackFrame.prototype['set' + _capitalize(stringProps[k])] = function (p) {
            return function (v) {
              this[p] = String(v);
            };
          }(stringProps[k]);
        }

        return StackFrame;
      });
    }, function (module, exports, __webpack_require__) {
      "use strict";

      if (true) {
        module.exports = __webpack_require__(31);
      } else {}
    }, function (module, exports, __webpack_require__) {
      "use strict";
      /**
       * @license React
       * react.production.min.js
       *
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      var l = Symbol.for("react.element"),
          n = Symbol.for("react.portal"),
          p = Symbol.for("react.fragment"),
          q = Symbol.for("react.strict_mode"),
          r = Symbol.for("react.profiler"),
          t = Symbol.for("react.provider"),
          u = Symbol.for("react.context"),
          v = Symbol.for("react.server_context"),
          w = Symbol.for("react.forward_ref"),
          x = Symbol.for("react.suspense"),
          y = Symbol.for("react.suspense_list"),
          z = Symbol.for("react.memo"),
          A = Symbol.for("react.lazy"),
          B = Symbol.for("react.debug_trace_mode"),
          C = Symbol.for("react.offscreen"),
          aa = Symbol.for("react.cache"),
          D = Symbol.for("react.default_value"),
          E = Symbol.iterator;

      function ba(a) {
        if (null === a || "object" !== _typeof(a)) return null;
        a = E && a[E] || a["@@iterator"];
        return "function" === typeof a ? a : null;
      }

      var F = {
        isMounted: function isMounted() {
          return !1;
        },
        enqueueForceUpdate: function enqueueForceUpdate() {},
        enqueueReplaceState: function enqueueReplaceState() {},
        enqueueSetState: function enqueueSetState() {}
      },
          G = Object.assign,
          H = {};

      function I(a, b, d) {
        this.props = a;
        this.context = b;
        this.refs = H;
        this.updater = d || F;
      }

      I.prototype.isReactComponent = {};

      I.prototype.setState = function (a, b) {
        if ("object" !== _typeof(a) && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, a, b, "setState");
      };

      I.prototype.forceUpdate = function (a) {
        this.updater.enqueueForceUpdate(this, a, "forceUpdate");
      };

      function J() {}

      J.prototype = I.prototype;

      function K(a, b, d) {
        this.props = a;
        this.context = b;
        this.refs = H;
        this.updater = d || F;
      }

      var L = K.prototype = new J();
      L.constructor = K;
      G(L, I.prototype);
      L.isPureReactComponent = !0;
      var M = Array.isArray,
          N = Object.prototype.hasOwnProperty,
          O = {
        current: null
      },
          P = {
        key: !0,
        ref: !0,
        __self: !0,
        __source: !0
      };

      function Q(a, b, d) {
        var c,
            e = {},
            k = null,
            h = null;
        if (null != b) for (c in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) {
          N.call(b, c) && !P.hasOwnProperty(c) && (e[c] = b[c]);
        }
        var g = arguments.length - 2;
        if (1 === g) e.children = d;else if (1 < g) {
          for (var f = Array(g), m = 0; m < g; m++) {
            f[m] = arguments[m + 2];
          }

          e.children = f;
        }
        if (a && a.defaultProps) for (c in g = a.defaultProps, g) {
          void 0 === e[c] && (e[c] = g[c]);
        }
        return {
          $$typeof: l,
          type: a,
          key: k,
          ref: h,
          props: e,
          _owner: O.current
        };
      }

      function ca(a, b) {
        return {
          $$typeof: l,
          type: a.type,
          key: b,
          ref: a.ref,
          props: a.props,
          _owner: a._owner
        };
      }

      function R(a) {
        return "object" === _typeof(a) && null !== a && a.$$typeof === l;
      }

      function escape(a) {
        var b = {
          "=": "=0",
          ":": "=2"
        };
        return "$" + a.replace(/[=:]/g, function (a) {
          return b[a];
        });
      }

      var S = /\/+/g;

      function T(a, b) {
        return "object" === _typeof(a) && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
      }

      function U(a, b, d, c, e) {
        var k = _typeof(a);

        if ("undefined" === k || "boolean" === k) a = null;
        var h = !1;
        if (null === a) h = !0;else switch (k) {
          case "string":
          case "number":
            h = !0;
            break;

          case "object":
            switch (a.$$typeof) {
              case l:
              case n:
                h = !0;
            }

        }
        if (h) return h = a, e = e(h), a = "" === c ? "." + T(h, 0) : c, M(e) ? (d = "", null != a && (d = a.replace(S, "$&/") + "/"), U(e, b, d, "", function (a) {
          return a;
        })) : null != e && (R(e) && (e = ca(e, d + (!e.key || h && h.key === e.key ? "" : ("" + e.key).replace(S, "$&/") + "/") + a)), b.push(e)), 1;
        h = 0;
        c = "" === c ? "." : c + ":";
        if (M(a)) for (var g = 0; g < a.length; g++) {
          k = a[g];
          var f = c + T(k, g);
          h += U(k, b, d, f, e);
        } else if (f = ba(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) {
          k = k.value, f = c + T(k, g++), h += U(k, b, d, f, e);
        } else if ("object" === k) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
        return h;
      }

      function V(a, b, d) {
        if (null == a) return a;
        var c = [],
            e = 0;
        U(a, c, "", "", function (a) {
          return b.call(d, a, e++);
        });
        return c;
      }

      function da(a) {
        if (-1 === a._status) {
          var b = a._result;
          b = b();
          b.then(function (b) {
            if (0 === a._status || -1 === a._status) a._status = 1, a._result = b;
          }, function (b) {
            if (0 === a._status || -1 === a._status) a._status = 2, a._result = b;
          });
          -1 === a._status && (a._status = 0, a._result = b);
        }

        if (1 === a._status) return a._result.default;
        throw a._result;
      }

      var W = {
        current: null
      },
          X = {
        transition: null
      },
          Y = {
        ReactCurrentDispatcher: W,
        ReactCurrentBatchConfig: X,
        ReactCurrentOwner: O,
        ContextRegistry: {}
      },
          Z = Y.ContextRegistry;
      exports.Children = {
        map: V,
        forEach: function forEach(a, b, d) {
          V(a, function () {
            b.apply(this, arguments);
          }, d);
        },
        count: function count(a) {
          var b = 0;
          V(a, function () {
            b++;
          });
          return b;
        },
        toArray: function toArray(a) {
          return V(a, function (a) {
            return a;
          }) || [];
        },
        only: function only(a) {
          if (!R(a)) throw Error("React.Children.only expected to receive a single React element child.");
          return a;
        }
      };
      exports.Component = I;
      exports.Fragment = p;
      exports.Profiler = r;
      exports.PureComponent = K;
      exports.StrictMode = q;
      exports.Suspense = x;
      exports.SuspenseList = y;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Y;

      exports.cloneElement = function (a, b, d) {
        if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
        var c = G({}, a.props),
            e = a.key,
            k = a.ref,
            h = a._owner;

        if (null != b) {
          void 0 !== b.ref && (k = b.ref, h = O.current);
          void 0 !== b.key && (e = "" + b.key);
          if (a.type && a.type.defaultProps) var g = a.type.defaultProps;

          for (f in b) {
            N.call(b, f) && !P.hasOwnProperty(f) && (c[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
          }
        }

        var f = arguments.length - 2;
        if (1 === f) c.children = d;else if (1 < f) {
          g = Array(f);

          for (var m = 0; m < f; m++) {
            g[m] = arguments[m + 2];
          }

          c.children = g;
        }
        return {
          $$typeof: l,
          type: a.type,
          key: e,
          ref: k,
          props: c,
          _owner: h
        };
      };

      exports.createContext = function (a) {
        a = {
          $$typeof: u,
          _currentValue: a,
          _currentValue2: a,
          _threadCount: 0,
          Provider: null,
          Consumer: null,
          _defaultValue: null,
          _globalName: null
        };
        a.Provider = {
          $$typeof: t,
          _context: a
        };
        return a.Consumer = a;
      };

      exports.createElement = Q;

      exports.createFactory = function (a) {
        var b = Q.bind(null, a);
        b.type = a;
        return b;
      };

      exports.createRef = function () {
        return {
          current: null
        };
      };

      exports.createServerContext = function (a, b) {
        var d = !0;

        if (!Z[a]) {
          d = !1;
          var c = {
            $$typeof: v,
            _currentValue: b,
            _currentValue2: b,
            _defaultValue: b,
            _threadCount: 0,
            Provider: null,
            Consumer: null,
            _globalName: a
          };
          c.Provider = {
            $$typeof: t,
            _context: c
          };
          Z[a] = c;
        }

        c = Z[a];
        if (c._defaultValue === D) c._defaultValue = b, c._currentValue === D && (c._currentValue = b), c._currentValue2 === D && (c._currentValue2 = b);else if (d) throw Error("ServerContext: " + a + " already defined");
        return c;
      };

      exports.forwardRef = function (a) {
        return {
          $$typeof: w,
          render: a
        };
      };

      exports.isValidElement = R;

      exports.lazy = function (a) {
        return {
          $$typeof: A,
          _payload: {
            _status: -1,
            _result: a
          },
          _init: da
        };
      };

      exports.memo = function (a, b) {
        return {
          $$typeof: z,
          type: a,
          compare: void 0 === b ? null : b
        };
      };

      exports.startTransition = function (a) {
        var b = X.transition;
        X.transition = {};

        try {
          a();
        } finally {
          X.transition = b;
        }
      };

      exports.unstable_Cache = aa;
      exports.unstable_DebugTracingMode = B;
      exports.unstable_Offscreen = C;

      exports.unstable_act = function () {
        throw Error("act(...) is not supported in production builds of React.");
      };

      exports.unstable_getCacheForType = function (a) {
        return W.current.getCacheForType(a);
      };

      exports.unstable_getCacheSignal = function () {
        return W.current.getCacheSignal();
      };

      exports.unstable_useCacheRefresh = function () {
        return W.current.useCacheRefresh();
      };

      exports.useCallback = function (a, b) {
        return W.current.useCallback(a, b);
      };

      exports.useContext = function (a) {
        return W.current.useContext(a);
      };

      exports.useDebugValue = function () {};

      exports.useDeferredValue = function (a) {
        return W.current.useDeferredValue(a);
      };

      exports.useEffect = function (a, b) {
        return W.current.useEffect(a, b);
      };

      exports.useId = function () {
        return W.current.useId();
      };

      exports.useImperativeHandle = function (a, b, d) {
        return W.current.useImperativeHandle(a, b, d);
      };

      exports.useInsertionEffect = function (a, b) {
        return W.current.useInsertionEffect(a, b);
      };

      exports.useLayoutEffect = function (a, b) {
        return W.current.useLayoutEffect(a, b);
      };

      exports.useMemo = function (a, b) {
        return W.current.useMemo(a, b);
      };

      exports.useReducer = function (a, b, d) {
        return W.current.useReducer(a, b, d);
      };

      exports.useRef = function (a) {
        return W.current.useRef(a);
      };

      exports.useState = function (a) {
        return W.current.useState(a);
      };

      exports.useSyncExternalStore = function (a, b, d) {
        return W.current.useSyncExternalStore(a, b, d);
      };

      exports.useTransition = function () {
        return W.current.useTransition();
      };

      exports.version = "18.2.0-experimental-52c434be1-20220512";
    }, function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);

      __webpack_require__.d(__webpack_exports__, "connectToDevTools", function () {
        return connectToDevTools;
      });

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      var EventEmitter = function () {
        function EventEmitter() {
          _classCallCheck(this, EventEmitter);

          _defineProperty(this, "listenersMap", new Map());
        }

        _createClass(EventEmitter, [{
          key: "addListener",
          value: function addListener(event, listener) {
            var listeners = this.listenersMap.get(event);

            if (listeners === undefined) {
              this.listenersMap.set(event, [listener]);
            } else {
              var index = listeners.indexOf(listener);

              if (index < 0) {
                listeners.push(listener);
              }
            }
          }
        }, {
          key: "emit",
          value: function emit(event) {
            var listeners = this.listenersMap.get(event);

            if (listeners !== undefined) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }

              if (listeners.length === 1) {
                var listener = listeners[0];
                listener.apply(null, args);
              } else {
                var didThrow = false;
                var caughtError = null;
                var clonedListeners = Array.from(listeners);

                for (var i = 0; i < clonedListeners.length; i++) {
                  var _listener = clonedListeners[i];

                  try {
                    _listener.apply(null, args);
                  } catch (error) {
                    if (caughtError === null) {
                      didThrow = true;
                      caughtError = error;
                    }
                  }
                }

                if (didThrow) {
                  throw caughtError;
                }
              }
            }
          }
        }, {
          key: "removeAllListeners",
          value: function removeAllListeners() {
            this.listenersMap.clear();
          }
        }, {
          key: "removeListener",
          value: function removeListener(event, listener) {
            var listeners = this.listenersMap.get(event);

            if (listeners !== undefined) {
              var index = listeners.indexOf(listener);

              if (index >= 0) {
                listeners.splice(index, 1);
              }
            }
          }
        }]);

        return EventEmitter;
      }();

      var lodash_throttle = __webpack_require__(14);

      var lodash_throttle_default = __webpack_require__.n(lodash_throttle);

      var constants = __webpack_require__(0);

      var storage = __webpack_require__(5);

      var simpleIsEqual = function simpleIsEqual(a, b) {
        return a === b;
      };

      var esm = function esm(resultFn) {
        var isEqual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : simpleIsEqual;
        var lastThis = void 0;
        var lastArgs = [];
        var lastResult = void 0;
        var calledOnce = false;

        var isNewArgEqualToLast = function isNewArgEqualToLast(newArg, index) {
          return isEqual(newArg, lastArgs[index]);
        };

        var result = function result() {
          for (var _len = arguments.length, newArgs = Array(_len), _key = 0; _key < _len; _key++) {
            newArgs[_key] = arguments[_key];
          }

          if (calledOnce && lastThis === this && newArgs.length === lastArgs.length && newArgs.every(isNewArgEqualToLast)) {
            return lastResult;
          }

          calledOnce = true;
          lastThis = this;
          lastArgs = newArgs;
          lastResult = resultFn.apply(this, newArgs);
          return lastResult;
        };

        return result;
      };

      function getOwnerWindow(node) {
        if (!node.ownerDocument) {
          return null;
        }

        return node.ownerDocument.defaultView;
      }

      function getOwnerIframe(node) {
        var nodeWindow = getOwnerWindow(node);

        if (nodeWindow) {
          return nodeWindow.frameElement;
        }

        return null;
      }

      function getBoundingClientRectWithBorderOffset(node) {
        var dimensions = getElementDimensions(node);
        return mergeRectOffsets([node.getBoundingClientRect(), {
          top: dimensions.borderTop,
          left: dimensions.borderLeft,
          bottom: dimensions.borderBottom,
          right: dimensions.borderRight,
          width: 0,
          height: 0
        }]);
      }

      function mergeRectOffsets(rects) {
        return rects.reduce(function (previousRect, rect) {
          if (previousRect == null) {
            return rect;
          }

          return {
            top: previousRect.top + rect.top,
            left: previousRect.left + rect.left,
            width: previousRect.width,
            height: previousRect.height,
            bottom: previousRect.bottom + rect.bottom,
            right: previousRect.right + rect.right
          };
        });
      }

      function getNestedBoundingClientRect(node, boundaryWindow) {
        var ownerIframe = getOwnerIframe(node);

        if (ownerIframe && ownerIframe !== boundaryWindow) {
          var rects = [node.getBoundingClientRect()];
          var currentIframe = ownerIframe;
          var onlyOneMore = false;

          while (currentIframe) {
            var rect = getBoundingClientRectWithBorderOffset(currentIframe);
            rects.push(rect);
            currentIframe = getOwnerIframe(currentIframe);

            if (onlyOneMore) {
              break;
            }

            if (currentIframe && getOwnerWindow(currentIframe) === boundaryWindow) {
              onlyOneMore = true;
            }
          }

          return mergeRectOffsets(rects);
        } else {
          return node.getBoundingClientRect();
        }
      }

      function getElementDimensions(domElement) {
        var calculatedStyle = window.getComputedStyle(domElement);
        return {
          borderLeft: parseInt(calculatedStyle.borderLeftWidth, 10),
          borderRight: parseInt(calculatedStyle.borderRightWidth, 10),
          borderTop: parseInt(calculatedStyle.borderTopWidth, 10),
          borderBottom: parseInt(calculatedStyle.borderBottomWidth, 10),
          marginLeft: parseInt(calculatedStyle.marginLeft, 10),
          marginRight: parseInt(calculatedStyle.marginRight, 10),
          marginTop: parseInt(calculatedStyle.marginTop, 10),
          marginBottom: parseInt(calculatedStyle.marginBottom, 10),
          paddingLeft: parseInt(calculatedStyle.paddingLeft, 10),
          paddingRight: parseInt(calculatedStyle.paddingRight, 10),
          paddingTop: parseInt(calculatedStyle.paddingTop, 10),
          paddingBottom: parseInt(calculatedStyle.paddingBottom, 10)
        };
      }

      function _createForOfIteratorHelper(o, allowArrayLike) {
        var it;

        if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
          if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;

            var F = function F() {};

            return {
              s: F,
              n: function n() {
                if (i >= o.length) return {
                  done: true
                };
                return {
                  done: false,
                  value: o[i++]
                };
              },
              e: function e(_e) {
                throw _e;
              },
              f: F
            };
          }

          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }

        var normalCompletion = true,
            didErr = false,
            err;
        return {
          s: function s() {
            it = o[Symbol.iterator]();
          },
          n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
          },
          e: function e(_e2) {
            didErr = true;
            err = _e2;
          },
          f: function f() {
            try {
              if (!normalCompletion && it.return != null) it.return();
            } finally {
              if (didErr) throw err;
            }
          }
        };
      }

      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
      }

      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      }

      function Overlay_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function Overlay_defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function Overlay_createClass(Constructor, protoProps, staticProps) {
        if (protoProps) Overlay_defineProperties(Constructor.prototype, protoProps);
        if (staticProps) Overlay_defineProperties(Constructor, staticProps);
        return Constructor;
      }

      var Overlay_assign = Object.assign;

      var OverlayRect = function () {
        function OverlayRect(doc, container) {
          Overlay_classCallCheck(this, OverlayRect);
          this.node = doc.createElement('div');
          this.border = doc.createElement('div');
          this.padding = doc.createElement('div');
          this.content = doc.createElement('div');
          this.border.style.borderColor = overlayStyles.border;
          this.padding.style.borderColor = overlayStyles.padding;
          this.content.style.backgroundColor = overlayStyles.background;
          Overlay_assign(this.node.style, {
            borderColor: overlayStyles.margin,
            pointerEvents: 'none',
            position: 'fixed'
          });
          this.node.style.zIndex = '10000000';
          this.node.appendChild(this.border);
          this.border.appendChild(this.padding);
          this.padding.appendChild(this.content);
          container.appendChild(this.node);
        }

        Overlay_createClass(OverlayRect, [{
          key: "remove",
          value: function remove() {
            if (this.node.parentNode) {
              this.node.parentNode.removeChild(this.node);
            }
          }
        }, {
          key: "update",
          value: function update(box, dims) {
            boxWrap(dims, 'margin', this.node);
            boxWrap(dims, 'border', this.border);
            boxWrap(dims, 'padding', this.padding);
            Overlay_assign(this.content.style, {
              height: box.height - dims.borderTop - dims.borderBottom - dims.paddingTop - dims.paddingBottom + 'px',
              width: box.width - dims.borderLeft - dims.borderRight - dims.paddingLeft - dims.paddingRight + 'px'
            });
            Overlay_assign(this.node.style, {
              top: box.top - dims.marginTop + 'px',
              left: box.left - dims.marginLeft + 'px'
            });
          }
        }]);
        return OverlayRect;
      }();

      var OverlayTip = function () {
        function OverlayTip(doc, container) {
          Overlay_classCallCheck(this, OverlayTip);
          this.tip = doc.createElement('div');
          Overlay_assign(this.tip.style, {
            display: 'flex',
            flexFlow: 'row nowrap',
            backgroundColor: '#333740',
            borderRadius: '2px',
            fontFamily: '"SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace',
            fontWeight: 'bold',
            padding: '3px 5px',
            pointerEvents: 'none',
            position: 'fixed',
            fontSize: '12px',
            whiteSpace: 'nowrap'
          });
          this.nameSpan = doc.createElement('span');
          this.tip.appendChild(this.nameSpan);
          Overlay_assign(this.nameSpan.style, {
            color: '#ee78e6',
            borderRight: '1px solid #aaaaaa',
            paddingRight: '0.5rem',
            marginRight: '0.5rem'
          });
          this.dimSpan = doc.createElement('span');
          this.tip.appendChild(this.dimSpan);
          Overlay_assign(this.dimSpan.style, {
            color: '#d7d7d7'
          });
          this.tip.style.zIndex = '10000000';
          container.appendChild(this.tip);
        }

        Overlay_createClass(OverlayTip, [{
          key: "remove",
          value: function remove() {
            if (this.tip.parentNode) {
              this.tip.parentNode.removeChild(this.tip);
            }
          }
        }, {
          key: "updateText",
          value: function updateText(name, width, height) {
            this.nameSpan.textContent = name;
            this.dimSpan.textContent = Math.round(width) + 'px × ' + Math.round(height) + 'px';
          }
        }, {
          key: "updatePosition",
          value: function updatePosition(dims, bounds) {
            var tipRect = this.tip.getBoundingClientRect();
            var tipPos = findTipPos(dims, bounds, {
              width: tipRect.width,
              height: tipRect.height
            });
            Overlay_assign(this.tip.style, tipPos.style);
          }
        }]);
        return OverlayTip;
      }();

      var Overlay_Overlay = function () {
        function Overlay() {
          Overlay_classCallCheck(this, Overlay);
          var currentWindow = window.__REACT_DEVTOOLS_TARGET_WINDOW__ || window;
          this.window = currentWindow;
          var tipBoundsWindow = window.__REACT_DEVTOOLS_TARGET_WINDOW__ || window;
          this.tipBoundsWindow = tipBoundsWindow;
          var doc = currentWindow.document;
          this.container = doc.createElement('div');
          this.container.style.zIndex = '10000000';
          this.tip = new OverlayTip(doc, this.container);
          this.rects = [];
          doc.body.appendChild(this.container);
        }

        Overlay_createClass(Overlay, [{
          key: "remove",
          value: function remove() {
            this.tip.remove();
            this.rects.forEach(function (rect) {
              rect.remove();
            });
            this.rects.length = 0;

            if (this.container.parentNode) {
              this.container.parentNode.removeChild(this.container);
            }
          }
        }, {
          key: "inspect",
          value: function inspect(nodes, name) {
            var _this = this;

            var elements = nodes.filter(function (node) {
              return node.nodeType === Node.ELEMENT_NODE;
            });

            while (this.rects.length > elements.length) {
              var rect = this.rects.pop();
              rect.remove();
            }

            if (elements.length === 0) {
              return;
            }

            while (this.rects.length < elements.length) {
              this.rects.push(new OverlayRect(this.window.document, this.container));
            }

            var outerBox = {
              top: Number.POSITIVE_INFINITY,
              right: Number.NEGATIVE_INFINITY,
              bottom: Number.NEGATIVE_INFINITY,
              left: Number.POSITIVE_INFINITY
            };
            elements.forEach(function (element, index) {
              var box = getNestedBoundingClientRect(element, _this.window);
              var dims = getElementDimensions(element);
              outerBox.top = Math.min(outerBox.top, box.top - dims.marginTop);
              outerBox.right = Math.max(outerBox.right, box.left + box.width + dims.marginRight);
              outerBox.bottom = Math.max(outerBox.bottom, box.top + box.height + dims.marginBottom);
              outerBox.left = Math.min(outerBox.left, box.left - dims.marginLeft);
              var rect = _this.rects[index];
              rect.update(box, dims);
            });

            if (!name) {
              name = elements[0].nodeName.toLowerCase();
              var node = elements[0];
              var hook = node.ownerDocument.defaultView.__REACT_DEVTOOLS_GLOBAL_HOOK__;

              if (hook != null && hook.rendererInterfaces != null) {
                var ownerName = null;

                var _iterator = _createForOfIteratorHelper(hook.rendererInterfaces.values()),
                    _step;

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    var rendererInterface = _step.value;
                    var id = rendererInterface.getFiberIDForNative(node, true);

                    if (id !== null) {
                      ownerName = rendererInterface.getDisplayNameForFiberID(id, true);
                      break;
                    }
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }

                if (ownerName) {
                  name += ' (in ' + ownerName + ')';
                }
              }
            }

            this.tip.updateText(name, outerBox.right - outerBox.left, outerBox.bottom - outerBox.top);
            var tipBounds = getNestedBoundingClientRect(this.tipBoundsWindow.document.documentElement, this.window);
            this.tip.updatePosition({
              top: outerBox.top,
              left: outerBox.left,
              height: outerBox.bottom - outerBox.top,
              width: outerBox.right - outerBox.left
            }, {
              top: tipBounds.top + this.tipBoundsWindow.scrollY,
              left: tipBounds.left + this.tipBoundsWindow.scrollX,
              height: this.tipBoundsWindow.innerHeight,
              width: this.tipBoundsWindow.innerWidth
            });
          }
        }]);
        return Overlay;
      }();

      function findTipPos(dims, bounds, tipSize) {
        var tipHeight = Math.max(tipSize.height, 20);
        var tipWidth = Math.max(tipSize.width, 60);
        var margin = 5;
        var top;

        if (dims.top + dims.height + tipHeight <= bounds.top + bounds.height) {
          if (dims.top + dims.height < bounds.top + 0) {
            top = bounds.top + margin;
          } else {
            top = dims.top + dims.height + margin;
          }
        } else if (dims.top - tipHeight <= bounds.top + bounds.height) {
          if (dims.top - tipHeight - margin < bounds.top + margin) {
            top = bounds.top + margin;
          } else {
            top = dims.top - tipHeight - margin;
          }
        } else {
          top = bounds.top + bounds.height - tipHeight - margin;
        }

        var left = dims.left + margin;

        if (dims.left < bounds.left) {
          left = bounds.left + margin;
        }

        if (dims.left + tipWidth > bounds.left + bounds.width) {
          left = bounds.left + bounds.width - tipWidth - margin;
        }

        top += 'px';
        left += 'px';
        return {
          style: {
            top: top,
            left: left
          }
        };
      }

      function boxWrap(dims, what, node) {
        Overlay_assign(node.style, {
          borderTopWidth: dims[what + 'Top'] + 'px',
          borderLeftWidth: dims[what + 'Left'] + 'px',
          borderRightWidth: dims[what + 'Right'] + 'px',
          borderBottomWidth: dims[what + 'Bottom'] + 'px',
          borderStyle: 'solid'
        });
      }

      var overlayStyles = {
        background: 'rgba(120, 170, 210, 0.7)',
        padding: 'rgba(77, 200, 0, 0.3)',
        margin: 'rgba(255, 155, 0, 0.3)',
        border: 'rgba(255, 200, 50, 0.3)'
      };
      var SHOW_DURATION = 2000;
      var timeoutID = null;
      var overlay = null;

      function hideOverlay() {
        timeoutID = null;

        if (overlay !== null) {
          overlay.remove();
          overlay = null;
        }
      }

      function showOverlay(elements, componentName, hideAfterTimeout) {
        if (window.document == null) {
          return;
        }

        if (timeoutID !== null) {
          clearTimeout(timeoutID);
        }

        if (elements == null) {
          return;
        }

        if (overlay === null) {
          overlay = new Overlay_Overlay();
        }

        overlay.inspect(elements, componentName);

        if (hideAfterTimeout) {
          timeoutID = setTimeout(hideOverlay, SHOW_DURATION);
        }
      }

      var iframesListeningTo = new Set();

      function setupHighlighter(bridge, agent) {
        bridge.addListener('clearNativeElementHighlight', clearNativeElementHighlight);
        bridge.addListener('highlightNativeElement', highlightNativeElement);
        bridge.addListener('shutdown', stopInspectingNative);
        bridge.addListener('startInspectingNative', startInspectingNative);
        bridge.addListener('stopInspectingNative', stopInspectingNative);

        function startInspectingNative() {
          registerListenersOnWindow(window);
        }

        function registerListenersOnWindow(window) {
          if (window && typeof window.addEventListener === 'function') {
            window.addEventListener('click', onClick, true);
            window.addEventListener('mousedown', onMouseEvent, true);
            window.addEventListener('mouseover', onMouseEvent, true);
            window.addEventListener('mouseup', onMouseEvent, true);
            window.addEventListener('pointerdown', onPointerDown, true);
            window.addEventListener('pointerover', onPointerOver, true);
            window.addEventListener('pointerup', onPointerUp, true);
          }
        }

        function stopInspectingNative() {
          hideOverlay();
          removeListenersOnWindow(window);
          iframesListeningTo.forEach(function (frame) {
            try {
              removeListenersOnWindow(frame.contentWindow);
            } catch (error) {}
          });
          iframesListeningTo = new Set();
        }

        function removeListenersOnWindow(window) {
          if (window && typeof window.removeEventListener === 'function') {
            window.removeEventListener('click', onClick, true);
            window.removeEventListener('mousedown', onMouseEvent, true);
            window.removeEventListener('mouseover', onMouseEvent, true);
            window.removeEventListener('mouseup', onMouseEvent, true);
            window.removeEventListener('pointerdown', onPointerDown, true);
            window.removeEventListener('pointerover', onPointerOver, true);
            window.removeEventListener('pointerup', onPointerUp, true);
          }
        }

        function clearNativeElementHighlight() {
          hideOverlay();
        }

        function highlightNativeElement(_ref) {
          var displayName = _ref.displayName,
              hideAfterTimeout = _ref.hideAfterTimeout,
              id = _ref.id,
              openNativeElementsPanel = _ref.openNativeElementsPanel,
              rendererID = _ref.rendererID,
              scrollIntoView = _ref.scrollIntoView;
          var renderer = agent.rendererInterfaces[rendererID];

          if (renderer == null) {
            console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
          }

          var nodes = null;

          if (renderer != null) {
            nodes = renderer.findNativeNodesForFiberID(id);
          }

          if (nodes != null && nodes[0] != null) {
            var node = nodes[0];

            if (scrollIntoView && typeof node.scrollIntoView === 'function') {
              node.scrollIntoView({
                block: 'nearest',
                inline: 'nearest'
              });
            }

            showOverlay(nodes, displayName, hideAfterTimeout);

            if (openNativeElementsPanel) {
              window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0 = node;
              bridge.send('syncSelectionToNativeElementsPanel');
            }
          } else {
            hideOverlay();
          }
        }

        function onClick(event) {
          event.preventDefault();
          event.stopPropagation();
          stopInspectingNative();
          bridge.send('stopInspectingNative', true);
        }

        function onMouseEvent(event) {
          event.preventDefault();
          event.stopPropagation();
        }

        function onPointerDown(event) {
          event.preventDefault();
          event.stopPropagation();
          selectFiberForNode(event.target);
        }

        function onPointerOver(event) {
          event.preventDefault();
          event.stopPropagation();
          var target = event.target;

          if (target.tagName === 'IFRAME') {
            var iframe = target;

            try {
              if (!iframesListeningTo.has(iframe)) {
                var _window = iframe.contentWindow;
                registerListenersOnWindow(_window);
                iframesListeningTo.add(iframe);
              }
            } catch (error) {}
          }

          showOverlay([target], null, false);
          selectFiberForNode(target);
        }

        function onPointerUp(event) {
          event.preventDefault();
          event.stopPropagation();
        }

        var selectFiberForNode = lodash_throttle_default()(esm(function (node) {
          var id = agent.getIDForNode(node);

          if (id !== null) {
            bridge.send('selectFiber', id);
          }
        }), 200, {
          leading: false
        });
      }

      var OUTLINE_COLOR = '#f0f0f0';
      var COLORS = ['#37afa9', '#63b19e', '#80b393', '#97b488', '#abb67d', '#beb771', '#cfb965', '#dfba57', '#efbb49', '#febc38'];
      var canvas = null;

      function draw(nodeToData) {
        if (canvas === null) {
          initialize();
        }

        var canvasFlow = canvas;
        canvasFlow.width = window.innerWidth;
        canvasFlow.height = window.innerHeight;
        var context = canvasFlow.getContext('2d');
        context.clearRect(0, 0, canvasFlow.width, canvasFlow.height);
        nodeToData.forEach(function (_ref) {
          var count = _ref.count,
              rect = _ref.rect;

          if (rect !== null) {
            var colorIndex = Math.min(COLORS.length - 1, count - 1);
            var color = COLORS[colorIndex];
            drawBorder(context, rect, color);
          }
        });
      }

      function drawBorder(context, rect, color) {
        var height = rect.height,
            left = rect.left,
            top = rect.top,
            width = rect.width;
        context.lineWidth = 1;
        context.strokeStyle = OUTLINE_COLOR;
        context.strokeRect(left - 1, top - 1, width + 2, height + 2);
        context.lineWidth = 1;
        context.strokeStyle = OUTLINE_COLOR;
        context.strokeRect(left + 1, top + 1, width - 1, height - 1);
        context.strokeStyle = color;
        context.setLineDash([0]);
        context.lineWidth = 1;
        context.strokeRect(left, top, width - 1, height - 1);
        context.setLineDash([0]);
      }

      function destroy() {
        if (canvas !== null) {
          if (canvas.parentNode != null) {
            canvas.parentNode.removeChild(canvas);
          }

          canvas = null;
        }
      }

      function initialize() {
        canvas = window.document.createElement('canvas');
        canvas.style.cssText = "\n    xx-background-color: red;\n    xx-opacity: 0.5;\n    bottom: 0;\n    left: 0;\n    pointer-events: none;\n    position: fixed;\n    right: 0;\n    top: 0;\n    z-index: 1000000000;\n  ";
        var root = window.document.documentElement;
        root.insertBefore(canvas, root.firstChild);
      }

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      var DISPLAY_DURATION = 250;
      var MAX_DISPLAY_DURATION = 3000;
      var REMEASUREMENT_AFTER_DURATION = 250;
      var getCurrentTime = (typeof performance === "undefined" ? "undefined" : _typeof(performance)) === 'object' && typeof performance.now === 'function' ? function () {
        return performance.now();
      } : function () {
        return Date.now();
      };
      var nodeToData = new Map();
      var TraceUpdates_agent = null;
      var drawAnimationFrameID = null;
      var isEnabled = false;
      var redrawTimeoutID = null;

      function TraceUpdates_initialize(injectedAgent) {
        TraceUpdates_agent = injectedAgent;
        TraceUpdates_agent.addListener('traceUpdates', traceUpdates);
      }

      function toggleEnabled(value) {
        isEnabled = value;

        if (!isEnabled) {
          nodeToData.clear();

          if (drawAnimationFrameID !== null) {
            cancelAnimationFrame(drawAnimationFrameID);
            drawAnimationFrameID = null;
          }

          if (redrawTimeoutID !== null) {
            clearTimeout(redrawTimeoutID);
            redrawTimeoutID = null;
          }

          destroy();
        }
      }

      function traceUpdates(nodes) {
        if (!isEnabled) {
          return;
        }

        nodes.forEach(function (node) {
          var data = nodeToData.get(node);
          var now = getCurrentTime();
          var lastMeasuredAt = data != null ? data.lastMeasuredAt : 0;
          var rect = data != null ? data.rect : null;

          if (rect === null || lastMeasuredAt + REMEASUREMENT_AFTER_DURATION < now) {
            lastMeasuredAt = now;
            rect = measureNode(node);
          }

          nodeToData.set(node, {
            count: data != null ? data.count + 1 : 1,
            expirationTime: data != null ? Math.min(now + MAX_DISPLAY_DURATION, data.expirationTime + DISPLAY_DURATION) : now + DISPLAY_DURATION,
            lastMeasuredAt: lastMeasuredAt,
            rect: rect
          });
        });

        if (redrawTimeoutID !== null) {
          clearTimeout(redrawTimeoutID);
          redrawTimeoutID = null;
        }

        if (drawAnimationFrameID === null) {
          drawAnimationFrameID = requestAnimationFrame(prepareToDraw);
        }
      }

      function prepareToDraw() {
        drawAnimationFrameID = null;
        redrawTimeoutID = null;
        var now = getCurrentTime();
        var earliestExpiration = Number.MAX_VALUE;
        nodeToData.forEach(function (data, node) {
          if (data.expirationTime < now) {
            nodeToData.delete(node);
          } else {
            earliestExpiration = Math.min(earliestExpiration, data.expirationTime);
          }
        });
        draw(nodeToData);

        if (earliestExpiration !== Number.MAX_VALUE) {
          redrawTimeoutID = setTimeout(prepareToDraw, earliestExpiration - now);
        }
      }

      function measureNode(node) {
        if (!node || typeof node.getBoundingClientRect !== 'function') {
          return null;
        }

        var currentWindow = window.__REACT_DEVTOOLS_TARGET_WINDOW__ || window;
        return getNestedBoundingClientRect(node, currentWindow);
      }

      var backend_console = __webpack_require__(8);

      function bridge_typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          bridge_typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          bridge_typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return bridge_typeof(obj);
      }

      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || bridge_unsupportedIterableToArray(arr) || _nonIterableSpread();
      }

      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      function bridge_unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return bridge_arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return bridge_arrayLikeToArray(o, minLen);
      }

      function _iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
      }

      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) return bridge_arrayLikeToArray(arr);
      }

      function bridge_arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      }

      function bridge_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function bridge_defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function bridge_createClass(Constructor, protoProps, staticProps) {
        if (protoProps) bridge_defineProperties(Constructor.prototype, protoProps);
        if (staticProps) bridge_defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();

        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived),
              result;

          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;

            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return _possibleConstructorReturn(this, result);
        };
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (bridge_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function bridge_defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      var BATCH_DURATION = 100;
      var BRIDGE_PROTOCOL = [{
        version: 0,
        minNpmVersion: '"<4.11.0"',
        maxNpmVersion: '"<4.11.0"'
      }, {
        version: 1,
        minNpmVersion: '4.13.0',
        maxNpmVersion: '4.21.0'
      }, {
        version: 2,
        minNpmVersion: '4.22.0',
        maxNpmVersion: null
      }];
      var currentBridgeProtocol = BRIDGE_PROTOCOL[BRIDGE_PROTOCOL.length - 1];

      var Bridge = function (_EventEmitter) {
        _inherits(Bridge, _EventEmitter);

        var _super = _createSuper(Bridge);

        function Bridge(wall) {
          var _this;

          bridge_classCallCheck(this, Bridge);
          _this = _super.call(this);
          bridge_defineProperty(_assertThisInitialized(_this), "_isShutdown", false);
          bridge_defineProperty(_assertThisInitialized(_this), "_messageQueue", []);
          bridge_defineProperty(_assertThisInitialized(_this), "_timeoutID", null);
          bridge_defineProperty(_assertThisInitialized(_this), "_wallUnlisten", null);
          bridge_defineProperty(_assertThisInitialized(_this), "_flush", function () {
            if (_this._timeoutID !== null) {
              clearTimeout(_this._timeoutID);
              _this._timeoutID = null;
            }

            if (_this._messageQueue.length) {
              for (var i = 0; i < _this._messageQueue.length; i += 2) {
                var _this$_wall;

                (_this$_wall = _this._wall).send.apply(_this$_wall, [_this._messageQueue[i]].concat(_toConsumableArray(_this._messageQueue[i + 1])));
              }

              _this._messageQueue.length = 0;
              _this._timeoutID = setTimeout(_this._flush, BATCH_DURATION);
            }
          });
          bridge_defineProperty(_assertThisInitialized(_this), "overrideValueAtPath", function (_ref) {
            var id = _ref.id,
                path = _ref.path,
                rendererID = _ref.rendererID,
                type = _ref.type,
                value = _ref.value;

            switch (type) {
              case 'context':
                _this.send('overrideContext', {
                  id: id,
                  path: path,
                  rendererID: rendererID,
                  wasForwarded: true,
                  value: value
                });

                break;

              case 'hooks':
                _this.send('overrideHookState', {
                  id: id,
                  path: path,
                  rendererID: rendererID,
                  wasForwarded: true,
                  value: value
                });

                break;

              case 'props':
                _this.send('overrideProps', {
                  id: id,
                  path: path,
                  rendererID: rendererID,
                  wasForwarded: true,
                  value: value
                });

                break;

              case 'state':
                _this.send('overrideState', {
                  id: id,
                  path: path,
                  rendererID: rendererID,
                  wasForwarded: true,
                  value: value
                });

                break;
            }
          });
          _this._wall = wall;
          _this._wallUnlisten = wall.listen(function (message) {
            if (message && message.event) {
              _assertThisInitialized(_this).emit(message.event, message.payload);
            }
          }) || null;

          _this.addListener('overrideValueAtPath', _this.overrideValueAtPath);

          return _this;
        }

        bridge_createClass(Bridge, [{
          key: "send",
          value: function send(event) {
            if (this._isShutdown) {
              console.warn("Cannot send message \"".concat(event, "\" through a Bridge that has been shutdown."));
              return;
            }

            for (var _len = arguments.length, payload = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              payload[_key - 1] = arguments[_key];
            }

            this._messageQueue.push(event, payload);

            if (!this._timeoutID) {
              this._timeoutID = setTimeout(this._flush, 0);
            }
          }
        }, {
          key: "shutdown",
          value: function shutdown() {
            if (this._isShutdown) {
              console.warn('Bridge was already shutdown.');
              return;
            }

            this.send('shutdown');
            this._isShutdown = true;

            this.addListener = function () {};

            this.emit = function () {};

            this.removeAllListeners();
            var wallUnlisten = this._wallUnlisten;

            if (wallUnlisten) {
              wallUnlisten();
            }

            do {
              this._flush();
            } while (this._messageQueue.length);

            if (this._timeoutID !== null) {
              clearTimeout(this._timeoutID);
              this._timeoutID = null;
            }
          }
        }, {
          key: "wall",
          get: function get() {
            return this._wall;
          }
        }]);
        return Bridge;
      }(EventEmitter);

      var src_bridge = Bridge;

      var utils = __webpack_require__(4);

      function agent_typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          agent_typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          agent_typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return agent_typeof(obj);
      }

      function agent_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function agent_defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function agent_createClass(Constructor, protoProps, staticProps) {
        if (protoProps) agent_defineProperties(Constructor.prototype, protoProps);
        if (staticProps) agent_defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function agent_inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) agent_setPrototypeOf(subClass, superClass);
      }

      function agent_setPrototypeOf(o, p) {
        agent_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return agent_setPrototypeOf(o, p);
      }

      function agent_createSuper(Derived) {
        var hasNativeReflectConstruct = agent_isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = agent_getPrototypeOf(Derived),
              result;

          if (hasNativeReflectConstruct) {
            var NewTarget = agent_getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return agent_possibleConstructorReturn(this, result);
        };
      }

      function agent_possibleConstructorReturn(self, call) {
        if (call && (agent_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return agent_assertThisInitialized(self);
      }

      function agent_assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function agent_isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function agent_getPrototypeOf(o) {
        agent_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return agent_getPrototypeOf(o);
      }

      function agent_defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      var agent_debug = function debug(methodName) {
        if (constants["s"]) {
          var _console;

          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          (_console = console).log.apply(_console, ["%cAgent %c".concat(methodName), 'color: purple; font-weight: bold;', 'font-weight: bold;'].concat(args));
        }
      };

      var agent_Agent = function (_EventEmitter) {
        agent_inherits(Agent, _EventEmitter);

        var _super = agent_createSuper(Agent);

        function Agent(bridge) {
          var _this;

          agent_classCallCheck(this, Agent);
          _this = _super.call(this);
          agent_defineProperty(agent_assertThisInitialized(_this), "_isProfiling", false);
          agent_defineProperty(agent_assertThisInitialized(_this), "_recordChangeDescriptions", false);
          agent_defineProperty(agent_assertThisInitialized(_this), "_rendererInterfaces", {});
          agent_defineProperty(agent_assertThisInitialized(_this), "_persistedSelection", null);
          agent_defineProperty(agent_assertThisInitialized(_this), "_persistedSelectionMatch", null);
          agent_defineProperty(agent_assertThisInitialized(_this), "_traceUpdatesEnabled", false);
          agent_defineProperty(agent_assertThisInitialized(_this), "clearErrorsAndWarnings", function (_ref) {
            var rendererID = _ref.rendererID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\""));
            } else {
              renderer.clearErrorsAndWarnings();
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "clearErrorsForFiberID", function (_ref2) {
            var id = _ref2.id,
                rendererID = _ref2.rendererID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\""));
            } else {
              renderer.clearErrorsForFiberID(id);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "clearWarningsForFiberID", function (_ref3) {
            var id = _ref3.id,
                rendererID = _ref3.rendererID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\""));
            } else {
              renderer.clearWarningsForFiberID(id);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "copyElementPath", function (_ref4) {
            var id = _ref4.id,
                path = _ref4.path,
                rendererID = _ref4.rendererID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              renderer.copyElementPath(id, path);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "deletePath", function (_ref5) {
            var hookID = _ref5.hookID,
                id = _ref5.id,
                path = _ref5.path,
                rendererID = _ref5.rendererID,
                type = _ref5.type;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              renderer.deletePath(type, id, hookID, path);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "getBackendVersion", function () {
            var version = "4.24.6-ca7a38ae4";

            if (version) {
              _this._bridge.send('backendVersion', version);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "getBridgeProtocol", function () {
            _this._bridge.send('bridgeProtocol', currentBridgeProtocol);
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "getProfilingData", function (_ref6) {
            var rendererID = _ref6.rendererID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\""));
            }

            _this._bridge.send('profilingData', renderer.getProfilingData());
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "getProfilingStatus", function () {
            _this._bridge.send('profilingStatus', _this._isProfiling);
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "getOwnersList", function (_ref7) {
            var id = _ref7.id,
                rendererID = _ref7.rendererID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              var owners = renderer.getOwnersList(id);

              _this._bridge.send('ownersList', {
                id: id,
                owners: owners
              });
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "inspectElement", function (_ref8) {
            var forceFullData = _ref8.forceFullData,
                id = _ref8.id,
                path = _ref8.path,
                rendererID = _ref8.rendererID,
                requestID = _ref8.requestID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              _this._bridge.send('inspectedElement', renderer.inspectElement(requestID, id, path, forceFullData));

              if (_this._persistedSelectionMatch === null || _this._persistedSelectionMatch.id !== id) {
                _this._persistedSelection = null;
                _this._persistedSelectionMatch = null;
                renderer.setTrackedPath(null);

                _this._throttledPersistSelection(rendererID, id);
              }
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "logElementToConsole", function (_ref9) {
            var id = _ref9.id,
                rendererID = _ref9.rendererID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              renderer.logElementToConsole(id);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "overrideError", function (_ref10) {
            var id = _ref10.id,
                rendererID = _ref10.rendererID,
                forceError = _ref10.forceError;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              renderer.overrideError(id, forceError);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "overrideSuspense", function (_ref11) {
            var id = _ref11.id,
                rendererID = _ref11.rendererID,
                forceFallback = _ref11.forceFallback;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              renderer.overrideSuspense(id, forceFallback);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "overrideValueAtPath", function (_ref12) {
            var hookID = _ref12.hookID,
                id = _ref12.id,
                path = _ref12.path,
                rendererID = _ref12.rendererID,
                type = _ref12.type,
                value = _ref12.value;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              renderer.overrideValueAtPath(type, id, hookID, path, value);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "overrideContext", function (_ref13) {
            var id = _ref13.id,
                path = _ref13.path,
                rendererID = _ref13.rendererID,
                wasForwarded = _ref13.wasForwarded,
                value = _ref13.value;

            if (!wasForwarded) {
              _this.overrideValueAtPath({
                id: id,
                path: path,
                rendererID: rendererID,
                type: 'context',
                value: value
              });
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "overrideHookState", function (_ref14) {
            var id = _ref14.id,
                hookID = _ref14.hookID,
                path = _ref14.path,
                rendererID = _ref14.rendererID,
                wasForwarded = _ref14.wasForwarded,
                value = _ref14.value;

            if (!wasForwarded) {
              _this.overrideValueAtPath({
                id: id,
                path: path,
                rendererID: rendererID,
                type: 'hooks',
                value: value
              });
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "overrideProps", function (_ref15) {
            var id = _ref15.id,
                path = _ref15.path,
                rendererID = _ref15.rendererID,
                wasForwarded = _ref15.wasForwarded,
                value = _ref15.value;

            if (!wasForwarded) {
              _this.overrideValueAtPath({
                id: id,
                path: path,
                rendererID: rendererID,
                type: 'props',
                value: value
              });
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "overrideState", function (_ref16) {
            var id = _ref16.id,
                path = _ref16.path,
                rendererID = _ref16.rendererID,
                wasForwarded = _ref16.wasForwarded,
                value = _ref16.value;

            if (!wasForwarded) {
              _this.overrideValueAtPath({
                id: id,
                path: path,
                rendererID: rendererID,
                type: 'state',
                value: value
              });
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "reloadAndProfile", function (recordChangeDescriptions) {
            Object(storage["e"])(constants["k"], 'true');
            Object(storage["e"])(constants["j"], recordChangeDescriptions ? 'true' : 'false');

            _this._bridge.send('reloadAppForProfiling');
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "renamePath", function (_ref17) {
            var hookID = _ref17.hookID,
                id = _ref17.id,
                newPath = _ref17.newPath,
                oldPath = _ref17.oldPath,
                rendererID = _ref17.rendererID,
                type = _ref17.type;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              renderer.renamePath(type, id, hookID, oldPath, newPath);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "setTraceUpdatesEnabled", function (traceUpdatesEnabled) {
            _this._traceUpdatesEnabled = traceUpdatesEnabled;
            toggleEnabled(traceUpdatesEnabled);

            for (var rendererID in _this._rendererInterfaces) {
              var renderer = _this._rendererInterfaces[rendererID];
              renderer.setTraceUpdatesEnabled(traceUpdatesEnabled);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "syncSelectionFromNativeElementsPanel", function () {
            var target = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0;

            if (target == null) {
              return;
            }

            _this.selectNode(target);
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "shutdown", function () {
            _this.emit('shutdown');
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "startProfiling", function (recordChangeDescriptions) {
            _this._recordChangeDescriptions = recordChangeDescriptions;
            _this._isProfiling = true;

            for (var rendererID in _this._rendererInterfaces) {
              var renderer = _this._rendererInterfaces[rendererID];
              renderer.startProfiling(recordChangeDescriptions);
            }

            _this._bridge.send('profilingStatus', _this._isProfiling);
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "stopProfiling", function () {
            _this._isProfiling = false;
            _this._recordChangeDescriptions = false;

            for (var rendererID in _this._rendererInterfaces) {
              var renderer = _this._rendererInterfaces[rendererID];
              renderer.stopProfiling();
            }

            _this._bridge.send('profilingStatus', _this._isProfiling);
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "storeAsGlobal", function (_ref18) {
            var count = _ref18.count,
                id = _ref18.id,
                path = _ref18.path,
                rendererID = _ref18.rendererID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              renderer.storeAsGlobal(id, path, count);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "updateConsolePatchSettings", function (_ref19) {
            var appendComponentStack = _ref19.appendComponentStack,
                breakOnConsoleErrors = _ref19.breakOnConsoleErrors,
                showInlineWarningsAndErrors = _ref19.showInlineWarningsAndErrors,
                hideConsoleLogsInStrictMode = _ref19.hideConsoleLogsInStrictMode,
                browserTheme = _ref19.browserTheme;
            Object(backend_console["a"])({
              appendComponentStack: appendComponentStack,
              breakOnConsoleErrors: breakOnConsoleErrors,
              showInlineWarningsAndErrors: showInlineWarningsAndErrors,
              hideConsoleLogsInStrictMode: hideConsoleLogsInStrictMode,
              browserTheme: browserTheme
            });
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "updateComponentFilters", function (componentFilters) {
            for (var rendererID in _this._rendererInterfaces) {
              var renderer = _this._rendererInterfaces[rendererID];
              renderer.updateComponentFilters(componentFilters);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "viewAttributeSource", function (_ref20) {
            var id = _ref20.id,
                path = _ref20.path,
                rendererID = _ref20.rendererID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              renderer.prepareViewAttributeSource(id, path);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "viewElementSource", function (_ref21) {
            var id = _ref21.id,
                rendererID = _ref21.rendererID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              renderer.prepareViewElementSource(id);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "onTraceUpdates", function (nodes) {
            _this.emit('traceUpdates', nodes);
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "onFastRefreshScheduled", function () {
            if (constants["s"]) {
              agent_debug('onFastRefreshScheduled');
            }

            _this._bridge.send('fastRefreshScheduled');
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "onHookOperations", function (operations) {
            if (constants["s"]) {
              agent_debug('onHookOperations', "(".concat(operations.length, ") [").concat(operations.join(', '), "]"));
            }

            _this._bridge.send('operations', operations);

            if (_this._persistedSelection !== null) {
              var rendererID = operations[0];

              if (_this._persistedSelection.rendererID === rendererID) {
                var renderer = _this._rendererInterfaces[rendererID];

                if (renderer == null) {
                  console.warn("Invalid renderer id \"".concat(rendererID, "\""));
                } else {
                  var prevMatch = _this._persistedSelectionMatch;
                  var nextMatch = renderer.getBestMatchForTrackedPath();
                  _this._persistedSelectionMatch = nextMatch;
                  var prevMatchID = prevMatch !== null ? prevMatch.id : null;
                  var nextMatchID = nextMatch !== null ? nextMatch.id : null;

                  if (prevMatchID !== nextMatchID) {
                    if (nextMatchID !== null) {
                      _this._bridge.send('selectFiber', nextMatchID);
                    }
                  }

                  if (nextMatch !== null && nextMatch.isFullMatch) {
                    _this._persistedSelection = null;
                    _this._persistedSelectionMatch = null;
                    renderer.setTrackedPath(null);
                  }
                }
              }
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "_throttledPersistSelection", lodash_throttle_default()(function (rendererID, id) {
            var renderer = _this._rendererInterfaces[rendererID];
            var path = renderer != null ? renderer.getPathForElement(id) : null;

            if (path !== null) {
              Object(storage["e"])(constants["i"], JSON.stringify({
                rendererID: rendererID,
                path: path
              }));
            } else {
              Object(storage["d"])(constants["i"]);
            }
          }, 1000));

          if (Object(storage["c"])(constants["k"]) === 'true') {
            _this._recordChangeDescriptions = Object(storage["c"])(constants["j"]) === 'true';
            _this._isProfiling = true;
            Object(storage["d"])(constants["j"]);
            Object(storage["d"])(constants["k"]);
          }

          var persistedSelectionString = Object(storage["c"])(constants["i"]);

          if (persistedSelectionString != null) {
            _this._persistedSelection = JSON.parse(persistedSelectionString);
          }

          _this._bridge = bridge;
          bridge.addListener('clearErrorsAndWarnings', _this.clearErrorsAndWarnings);
          bridge.addListener('clearErrorsForFiberID', _this.clearErrorsForFiberID);
          bridge.addListener('clearWarningsForFiberID', _this.clearWarningsForFiberID);
          bridge.addListener('copyElementPath', _this.copyElementPath);
          bridge.addListener('deletePath', _this.deletePath);
          bridge.addListener('getBackendVersion', _this.getBackendVersion);
          bridge.addListener('getBridgeProtocol', _this.getBridgeProtocol);
          bridge.addListener('getProfilingData', _this.getProfilingData);
          bridge.addListener('getProfilingStatus', _this.getProfilingStatus);
          bridge.addListener('getOwnersList', _this.getOwnersList);
          bridge.addListener('inspectElement', _this.inspectElement);
          bridge.addListener('logElementToConsole', _this.logElementToConsole);
          bridge.addListener('overrideError', _this.overrideError);
          bridge.addListener('overrideSuspense', _this.overrideSuspense);
          bridge.addListener('overrideValueAtPath', _this.overrideValueAtPath);
          bridge.addListener('reloadAndProfile', _this.reloadAndProfile);
          bridge.addListener('renamePath', _this.renamePath);
          bridge.addListener('setTraceUpdatesEnabled', _this.setTraceUpdatesEnabled);
          bridge.addListener('startProfiling', _this.startProfiling);
          bridge.addListener('stopProfiling', _this.stopProfiling);
          bridge.addListener('storeAsGlobal', _this.storeAsGlobal);
          bridge.addListener('syncSelectionFromNativeElementsPanel', _this.syncSelectionFromNativeElementsPanel);
          bridge.addListener('shutdown', _this.shutdown);
          bridge.addListener('updateConsolePatchSettings', _this.updateConsolePatchSettings);
          bridge.addListener('updateComponentFilters', _this.updateComponentFilters);
          bridge.addListener('viewAttributeSource', _this.viewAttributeSource);
          bridge.addListener('viewElementSource', _this.viewElementSource);
          bridge.addListener('overrideContext', _this.overrideContext);
          bridge.addListener('overrideHookState', _this.overrideHookState);
          bridge.addListener('overrideProps', _this.overrideProps);
          bridge.addListener('overrideState', _this.overrideState);

          if (_this._isProfiling) {
            bridge.send('profilingStatus', true);
          }

          var _version = "4.24.6-ca7a38ae4";

          if (_version) {
            _this._bridge.send('backendVersion', _version);
          }

          _this._bridge.send('bridgeProtocol', currentBridgeProtocol);

          var isBackendStorageAPISupported = false;

          try {
            localStorage.getItem('test');
            isBackendStorageAPISupported = true;
          } catch (error) {}

          bridge.send('isBackendStorageAPISupported', isBackendStorageAPISupported);
          bridge.send('isSynchronousXHRSupported', Object(utils["i"])());
          setupHighlighter(bridge, agent_assertThisInitialized(_this));
          TraceUpdates_initialize(agent_assertThisInitialized(_this));
          return _this;
        }

        agent_createClass(Agent, [{
          key: "getInstanceAndStyle",
          value: function getInstanceAndStyle(_ref22) {
            var id = _ref22.id,
                rendererID = _ref22.rendererID;
            var renderer = this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\""));
              return null;
            }

            return renderer.getInstanceAndStyle(id);
          }
        }, {
          key: "getIDForNode",
          value: function getIDForNode(node) {
            for (var rendererID in this._rendererInterfaces) {
              var renderer = this._rendererInterfaces[rendererID];

              try {
                var id = renderer.getFiberIDForNative(node, true);

                if (id !== null) {
                  return id;
                }
              } catch (error) {}
            }

            return null;
          }
        }, {
          key: "selectNode",
          value: function selectNode(target) {
            var id = this.getIDForNode(target);

            if (id !== null) {
              this._bridge.send('selectFiber', id);
            }
          }
        }, {
          key: "setRendererInterface",
          value: function setRendererInterface(rendererID, rendererInterface) {
            this._rendererInterfaces[rendererID] = rendererInterface;

            if (this._isProfiling) {
              rendererInterface.startProfiling(this._recordChangeDescriptions);
            }

            rendererInterface.setTraceUpdatesEnabled(this._traceUpdatesEnabled);
            var selection = this._persistedSelection;

            if (selection !== null && selection.rendererID === rendererID) {
              rendererInterface.setTrackedPath(selection.path);
            }
          }
        }, {
          key: "onUnsupportedRenderer",
          value: function onUnsupportedRenderer(rendererID) {
            this._bridge.send('unsupportedRendererVersion', rendererID);
          }
        }, {
          key: "rendererInterfaces",
          get: function get() {
            return this._rendererInterfaces;
          }
        }]);
        return Agent;
      }(EventEmitter);

      function hook_typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          hook_typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          hook_typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return hook_typeof(obj);
      }

      function hook_toConsumableArray(arr) {
        return hook_arrayWithoutHoles(arr) || hook_iterableToArray(arr) || hook_unsupportedIterableToArray(arr) || hook_nonIterableSpread();
      }

      function hook_nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      function hook_unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return hook_arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return hook_arrayLikeToArray(o, minLen);
      }

      function hook_iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
      }

      function hook_arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) return hook_arrayLikeToArray(arr);
      }

      function hook_arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      }

      function installHook(target) {
        if (target.hasOwnProperty('__REACT_DEVTOOLS_GLOBAL_HOOK__')) {
          return null;
        }

        var targetConsole = console;
        var targetConsoleMethods = {};

        for (var method in console) {
          targetConsoleMethods[method] = console[method];
        }

        function dangerous_setTargetConsoleForTesting(targetConsoleForTesting) {
          targetConsole = targetConsoleForTesting;
          targetConsoleMethods = {};

          for (var _method in targetConsole) {
            targetConsoleMethods[_method] = console[_method];
          }
        }

        function detectReactBuildType(renderer) {
          try {
            if (typeof renderer.version === 'string') {
              if (renderer.bundleType > 0) {
                return 'development';
              }

              return 'production';
            }

            var _toString = Function.prototype.toString;

            if (renderer.Mount && renderer.Mount._renderNewRootComponent) {
              var renderRootCode = _toString.call(renderer.Mount._renderNewRootComponent);

              if (renderRootCode.indexOf('function') !== 0) {
                return 'production';
              }

              if (renderRootCode.indexOf('storedMeasure') !== -1) {
                return 'development';
              }

              if (renderRootCode.indexOf('should be a pure function') !== -1) {
                if (renderRootCode.indexOf('NODE_ENV') !== -1) {
                  return 'development';
                }

                if (renderRootCode.indexOf('development') !== -1) {
                  return 'development';
                }

                if (renderRootCode.indexOf('true') !== -1) {
                  return 'development';
                }

                if (renderRootCode.indexOf('nextElement') !== -1 || renderRootCode.indexOf('nextComponent') !== -1) {
                  return 'unminified';
                } else {
                  return 'development';
                }
              }

              if (renderRootCode.indexOf('nextElement') !== -1 || renderRootCode.indexOf('nextComponent') !== -1) {
                return 'unminified';
              }

              return 'outdated';
            }
          } catch (err) {}

          return 'production';
        }

        function checkDCE(fn) {
          try {
            var _toString2 = Function.prototype.toString;

            var code = _toString2.call(fn);

            if (code.indexOf('^_^') > -1) {
              hasDetectedBadDCE = true;
              setTimeout(function () {
                throw new Error('React is running in production mode, but dead code ' + 'elimination has not been applied. Read how to correctly ' + 'configure React for production: ' + 'https://reactjs.org/link/perf-use-production-build');
              });
            }
          } catch (err) {}
        }

        function formatWithStyles(inputArgs, style) {
          if (inputArgs === undefined || inputArgs === null || inputArgs.length === 0 || typeof inputArgs[0] !== 'string' || inputArgs[0].match(/([^%]|^)(%c)/g) || style === undefined) {
            return inputArgs;
          }

          var REGEXP = /([^%]|^)((%%)*)(%([oOdisf]))/g;

          if (inputArgs[0].match(REGEXP)) {
            return ["%c".concat(inputArgs[0]), style].concat(hook_toConsumableArray(inputArgs.slice(1)));
          } else {
            var firstArg = inputArgs.reduce(function (formatStr, elem, i) {
              if (i > 0) {
                formatStr += ' ';
              }

              switch (hook_typeof(elem)) {
                case 'string':
                case 'boolean':
                case 'symbol':
                  return formatStr += '%s';

                case 'number':
                  var formatting = Number.isInteger(elem) ? '%i' : '%f';
                  return formatStr += formatting;

                default:
                  return formatStr += '%o';
              }
            }, '%c');
            return [firstArg, style].concat(hook_toConsumableArray(inputArgs));
          }
        }

        var unpatchFn = null;

        function patchConsoleForInitialRenderInStrictMode(_ref) {
          var hideConsoleLogsInStrictMode = _ref.hideConsoleLogsInStrictMode,
              browserTheme = _ref.browserTheme;
          var overrideConsoleMethods = ['error', 'trace', 'warn', 'log'];

          if (unpatchFn !== null) {
            return;
          }

          var originalConsoleMethods = {};

          unpatchFn = function unpatchFn() {
            for (var _method2 in originalConsoleMethods) {
              try {
                targetConsole[_method2] = originalConsoleMethods[_method2];
              } catch (error) {}
            }
          };

          overrideConsoleMethods.forEach(function (method) {
            try {
              var originalMethod = originalConsoleMethods[method] = targetConsole[method].__REACT_DEVTOOLS_STRICT_MODE_ORIGINAL_METHOD__ ? targetConsole[method].__REACT_DEVTOOLS_STRICT_MODE_ORIGINAL_METHOD__ : targetConsole[method];

              var overrideMethod = function overrideMethod() {
                if (!hideConsoleLogsInStrictMode) {
                  var color;

                  switch (method) {
                    case 'warn':
                      color = browserTheme === 'light' ? "rgba(250, 180, 50, 0.75)" : "rgba(250, 180, 50, 0.5)";
                      break;

                    case 'error':
                      color = browserTheme === 'light' ? "rgba(250, 123, 130, 0.75)" : "rgba(250, 123, 130, 0.5)";
                      break;

                    case 'log':
                    default:
                      color = browserTheme === 'light' ? "rgba(125, 125, 125, 0.75)" : "rgba(125, 125, 125, 0.5)";
                      break;
                  }

                  if (color) {
                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }

                    originalMethod.apply(void 0, hook_toConsumableArray(formatWithStyles(args, "color: ".concat(color))));
                  } else {
                    throw Error('Console color is not defined');
                  }
                }
              };

              overrideMethod.__REACT_DEVTOOLS_STRICT_MODE_ORIGINAL_METHOD__ = originalMethod;
              originalMethod.__REACT_DEVTOOLS_STRICT_MODE_OVERRIDE_METHOD__ = overrideMethod;
              targetConsole[method] = overrideMethod;
            } catch (error) {}
          });
        }

        function unpatchConsoleForInitialRenderInStrictMode() {
          if (unpatchFn !== null) {
            unpatchFn();
            unpatchFn = null;
          }
        }

        var uidCounter = 0;

        function inject(renderer) {
          var id = ++uidCounter;
          renderers.set(id, renderer);
          var reactBuildType = hasDetectedBadDCE ? 'deadcode' : detectReactBuildType(renderer);

          if (true) {
            try {
              var appendComponentStack = window.__REACT_DEVTOOLS_APPEND_COMPONENT_STACK__ !== false;
              var breakOnConsoleErrors = window.__REACT_DEVTOOLS_BREAK_ON_CONSOLE_ERRORS__ === true;
              var showInlineWarningsAndErrors = window.__REACT_DEVTOOLS_SHOW_INLINE_WARNINGS_AND_ERRORS__ !== false;
              var hideConsoleLogsInStrictMode = window.__REACT_DEVTOOLS_HIDE_CONSOLE_LOGS_IN_STRICT_MODE__ === true;
              var browserTheme = window.__REACT_DEVTOOLS_BROWSER_THEME__;
              Object(backend_console["c"])(renderer);
              Object(backend_console["a"])({
                appendComponentStack: appendComponentStack,
                breakOnConsoleErrors: breakOnConsoleErrors,
                showInlineWarningsAndErrors: showInlineWarningsAndErrors,
                hideConsoleLogsInStrictMode: hideConsoleLogsInStrictMode,
                browserTheme: browserTheme
              });
            } catch (error) {}
          }

          var attach = target.__REACT_DEVTOOLS_ATTACH__;

          if (typeof attach === 'function') {
            var rendererInterface = attach(hook, id, renderer, target);
            hook.rendererInterfaces.set(id, rendererInterface);
          }

          hook.emit('renderer', {
            id: id,
            renderer: renderer,
            reactBuildType: reactBuildType
          });
          return id;
        }

        var hasDetectedBadDCE = false;

        function sub(event, fn) {
          hook.on(event, fn);
          return function () {
            return hook.off(event, fn);
          };
        }

        function on(event, fn) {
          if (!listeners[event]) {
            listeners[event] = [];
          }

          listeners[event].push(fn);
        }

        function off(event, fn) {
          if (!listeners[event]) {
            return;
          }

          var index = listeners[event].indexOf(fn);

          if (index !== -1) {
            listeners[event].splice(index, 1);
          }

          if (!listeners[event].length) {
            delete listeners[event];
          }
        }

        function emit(event, data) {
          if (listeners[event]) {
            listeners[event].map(function (fn) {
              return fn(data);
            });
          }
        }

        function getFiberRoots(rendererID) {
          var roots = fiberRoots;

          if (!roots[rendererID]) {
            roots[rendererID] = new Set();
          }

          return roots[rendererID];
        }

        function onCommitFiberUnmount(rendererID, fiber) {
          var rendererInterface = rendererInterfaces.get(rendererID);

          if (rendererInterface != null) {
            rendererInterface.handleCommitFiberUnmount(fiber);
          }
        }

        function onCommitFiberRoot(rendererID, root, priorityLevel) {
          var mountedRoots = hook.getFiberRoots(rendererID);
          var current = root.current;
          var isKnownRoot = mountedRoots.has(root);
          var isUnmounting = current.memoizedState == null || current.memoizedState.element == null;

          if (!isKnownRoot && !isUnmounting) {
            mountedRoots.add(root);
          } else if (isKnownRoot && isUnmounting) {
            mountedRoots.delete(root);
          }

          var rendererInterface = rendererInterfaces.get(rendererID);

          if (rendererInterface != null) {
            rendererInterface.handleCommitFiberRoot(root, priorityLevel);
          }
        }

        function onPostCommitFiberRoot(rendererID, root) {
          var rendererInterface = rendererInterfaces.get(rendererID);

          if (rendererInterface != null) {
            rendererInterface.handlePostCommitFiberRoot(root);
          }
        }

        function setStrictMode(rendererID, isStrictMode) {
          var rendererInterface = rendererInterfaces.get(rendererID);

          if (rendererInterface != null) {
            if (isStrictMode) {
              rendererInterface.patchConsoleForStrictMode();
            } else {
              rendererInterface.unpatchConsoleForStrictMode();
            }
          } else {
            if (isStrictMode) {
              var hideConsoleLogsInStrictMode = window.__REACT_DEVTOOLS_HIDE_CONSOLE_LOGS_IN_STRICT_MODE__ === true;
              var browserTheme = window.__REACT_DEVTOOLS_BROWSER_THEME__;
              patchConsoleForInitialRenderInStrictMode({
                hideConsoleLogsInStrictMode: hideConsoleLogsInStrictMode,
                browserTheme: browserTheme
              });
            } else {
              unpatchConsoleForInitialRenderInStrictMode();
            }
          }
        }

        var openModuleRangesStack = [];
        var moduleRanges = [];

        function getTopStackFrameString(error) {
          var frames = error.stack.split('\n');
          var frame = frames.length > 1 ? frames[1] : null;
          return frame;
        }

        function getInternalModuleRanges() {
          return moduleRanges;
        }

        function registerInternalModuleStart(error) {
          var startStackFrame = getTopStackFrameString(error);

          if (startStackFrame !== null) {
            openModuleRangesStack.push(startStackFrame);
          }
        }

        function registerInternalModuleStop(error) {
          if (openModuleRangesStack.length > 0) {
            var startStackFrame = openModuleRangesStack.pop();
            var stopStackFrame = getTopStackFrameString(error);

            if (stopStackFrame !== null) {
              moduleRanges.push([startStackFrame, stopStackFrame]);
            }
          }
        }

        var fiberRoots = {};
        var rendererInterfaces = new Map();
        var listeners = {};
        var renderers = new Map();
        var hook = {
          rendererInterfaces: rendererInterfaces,
          listeners: listeners,
          renderers: renderers,
          emit: emit,
          getFiberRoots: getFiberRoots,
          inject: inject,
          on: on,
          off: off,
          sub: sub,
          supportsFiber: true,
          checkDCE: checkDCE,
          onCommitFiberUnmount: onCommitFiberUnmount,
          onCommitFiberRoot: onCommitFiberRoot,
          onPostCommitFiberRoot: onPostCommitFiberRoot,
          setStrictMode: setStrictMode,
          getInternalModuleRanges: getInternalModuleRanges,
          registerInternalModuleStart: registerInternalModuleStart,
          registerInternalModuleStop: registerInternalModuleStop
        };

        if (false) {}

        Object.defineProperty(target, '__REACT_DEVTOOLS_GLOBAL_HOOK__', {
          configurable: false,
          enumerable: false,
          get: function get() {
            return hook;
          }
        });
        return hook;
      }

      var backend_renderer = __webpack_require__(15);

      var types = __webpack_require__(1);

      var src_utils = __webpack_require__(2);

      function decorate(object, attr, fn) {
        var old = object[attr];

        object[attr] = function (instance) {
          return fn.call(this, old, arguments);
        };

        return old;
      }

      function decorateMany(source, fns) {
        var olds = {};

        for (var name in fns) {
          olds[name] = decorate(source, name, fns[name]);
        }

        return olds;
      }

      function restoreMany(source, olds) {
        for (var name in olds) {
          source[name] = olds[name];
        }
      }

      function forceUpdate(instance) {
        if (typeof instance.forceUpdate === 'function') {
          instance.forceUpdate();
        } else if (instance.updater != null && typeof instance.updater.enqueueForceUpdate === 'function') {
          instance.updater.enqueueForceUpdate(this, function () {}, 'forceUpdate');
        }
      }

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            ownKeys(Object(source), true).forEach(function (key) {
              renderer_defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      function renderer_defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function renderer_typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          renderer_typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          renderer_typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return renderer_typeof(obj);
      }

      function getData(internalInstance) {
        var displayName = null;
        var key = null;

        if (internalInstance._currentElement != null) {
          if (internalInstance._currentElement.key) {
            key = String(internalInstance._currentElement.key);
          }

          var elementType = internalInstance._currentElement.type;

          if (typeof elementType === 'string') {
            displayName = elementType;
          } else if (typeof elementType === 'function') {
            displayName = Object(src_utils["f"])(elementType);
          }
        }

        return {
          displayName: displayName,
          key: key
        };
      }

      function getElementType(internalInstance) {
        if (internalInstance._currentElement != null) {
          var elementType = internalInstance._currentElement.type;

          if (typeof elementType === 'function') {
            var publicInstance = internalInstance.getPublicInstance();

            if (publicInstance !== null) {
              return types["e"];
            } else {
              return types["h"];
            }
          } else if (typeof elementType === 'string') {
            return types["i"];
          }
        }

        return types["k"];
      }

      function getChildren(internalInstance) {
        var children = [];

        if (renderer_typeof(internalInstance) !== 'object') {} else if (internalInstance._currentElement === null || internalInstance._currentElement === false) {} else if (internalInstance._renderedComponent) {
          var child = internalInstance._renderedComponent;

          if (getElementType(child) !== types["k"]) {
            children.push(child);
          }
        } else if (internalInstance._renderedChildren) {
          var renderedChildren = internalInstance._renderedChildren;

          for (var name in renderedChildren) {
            var _child = renderedChildren[name];

            if (getElementType(_child) !== types["k"]) {
              children.push(_child);
            }
          }
        }

        return children;
      }

      function renderer_attach(hook, rendererID, renderer, global) {
        var idToInternalInstanceMap = new Map();
        var internalInstanceToIDMap = new WeakMap();
        var internalInstanceToRootIDMap = new WeakMap();
        var getInternalIDForNative = null;
        var findNativeNodeForInternalID;

        if (renderer.ComponentTree) {
          getInternalIDForNative = function getInternalIDForNative(node, findNearestUnfilteredAncestor) {
            var internalInstance = renderer.ComponentTree.getClosestInstanceFromNode(node);
            return internalInstanceToIDMap.get(internalInstance) || null;
          };

          findNativeNodeForInternalID = function findNativeNodeForInternalID(id) {
            var internalInstance = idToInternalInstanceMap.get(id);
            return renderer.ComponentTree.getNodeFromInstance(internalInstance);
          };
        } else if (renderer.Mount.getID && renderer.Mount.getNode) {
          getInternalIDForNative = function getInternalIDForNative(node, findNearestUnfilteredAncestor) {
            return null;
          };

          findNativeNodeForInternalID = function findNativeNodeForInternalID(id) {
            return null;
          };
        }

        function getDisplayNameForFiberID(id) {
          var internalInstance = idToInternalInstanceMap.get(id);
          return internalInstance ? getData(internalInstance).displayName : null;
        }

        function getID(internalInstance) {
          if (renderer_typeof(internalInstance) !== 'object' || internalInstance === null) {
            throw new Error('Invalid internal instance: ' + internalInstance);
          }

          if (!internalInstanceToIDMap.has(internalInstance)) {
            var _id = Object(src_utils["i"])();

            internalInstanceToIDMap.set(internalInstance, _id);
            idToInternalInstanceMap.set(_id, internalInstance);
          }

          return internalInstanceToIDMap.get(internalInstance);
        }

        function areEqualArrays(a, b) {
          if (a.length !== b.length) {
            return false;
          }

          for (var i = 0; i < a.length; i++) {
            if (a[i] !== b[i]) {
              return false;
            }
          }

          return true;
        }

        var parentIDStack = [];
        var oldReconcilerMethods = null;

        if (renderer.Reconciler) {
          oldReconcilerMethods = decorateMany(renderer.Reconciler, {
            mountComponent: function mountComponent(fn, args) {
              var internalInstance = args[0];
              var hostContainerInfo = args[3];

              if (getElementType(internalInstance) === types["k"]) {
                return fn.apply(this, args);
              }

              if (hostContainerInfo._topLevelWrapper === undefined) {
                return fn.apply(this, args);
              }

              var id = getID(internalInstance);
              var parentID = parentIDStack.length > 0 ? parentIDStack[parentIDStack.length - 1] : 0;
              recordMount(internalInstance, id, parentID);
              parentIDStack.push(id);
              internalInstanceToRootIDMap.set(internalInstance, getID(hostContainerInfo._topLevelWrapper));

              try {
                var result = fn.apply(this, args);
                parentIDStack.pop();
                return result;
              } catch (err) {
                parentIDStack = [];
                throw err;
              } finally {
                if (parentIDStack.length === 0) {
                  var rootID = internalInstanceToRootIDMap.get(internalInstance);

                  if (rootID === undefined) {
                    throw new Error('Expected to find root ID.');
                  }

                  flushPendingEvents(rootID);
                }
              }
            },
            performUpdateIfNecessary: function performUpdateIfNecessary(fn, args) {
              var internalInstance = args[0];

              if (getElementType(internalInstance) === types["k"]) {
                return fn.apply(this, args);
              }

              var id = getID(internalInstance);
              parentIDStack.push(id);
              var prevChildren = getChildren(internalInstance);

              try {
                var result = fn.apply(this, args);
                var nextChildren = getChildren(internalInstance);

                if (!areEqualArrays(prevChildren, nextChildren)) {
                  recordReorder(internalInstance, id, nextChildren);
                }

                parentIDStack.pop();
                return result;
              } catch (err) {
                parentIDStack = [];
                throw err;
              } finally {
                if (parentIDStack.length === 0) {
                  var rootID = internalInstanceToRootIDMap.get(internalInstance);

                  if (rootID === undefined) {
                    throw new Error('Expected to find root ID.');
                  }

                  flushPendingEvents(rootID);
                }
              }
            },
            receiveComponent: function receiveComponent(fn, args) {
              var internalInstance = args[0];

              if (getElementType(internalInstance) === types["k"]) {
                return fn.apply(this, args);
              }

              var id = getID(internalInstance);
              parentIDStack.push(id);
              var prevChildren = getChildren(internalInstance);

              try {
                var result = fn.apply(this, args);
                var nextChildren = getChildren(internalInstance);

                if (!areEqualArrays(prevChildren, nextChildren)) {
                  recordReorder(internalInstance, id, nextChildren);
                }

                parentIDStack.pop();
                return result;
              } catch (err) {
                parentIDStack = [];
                throw err;
              } finally {
                if (parentIDStack.length === 0) {
                  var rootID = internalInstanceToRootIDMap.get(internalInstance);

                  if (rootID === undefined) {
                    throw new Error('Expected to find root ID.');
                  }

                  flushPendingEvents(rootID);
                }
              }
            },
            unmountComponent: function unmountComponent(fn, args) {
              var internalInstance = args[0];

              if (getElementType(internalInstance) === types["k"]) {
                return fn.apply(this, args);
              }

              var id = getID(internalInstance);
              parentIDStack.push(id);

              try {
                var result = fn.apply(this, args);
                parentIDStack.pop();
                recordUnmount(internalInstance, id);
                return result;
              } catch (err) {
                parentIDStack = [];
                throw err;
              } finally {
                if (parentIDStack.length === 0) {
                  var rootID = internalInstanceToRootIDMap.get(internalInstance);

                  if (rootID === undefined) {
                    throw new Error('Expected to find root ID.');
                  }

                  flushPendingEvents(rootID);
                }
              }
            }
          });
        }

        function cleanup() {
          if (oldReconcilerMethods !== null) {
            if (renderer.Component) {
              restoreMany(renderer.Component.Mixin, oldReconcilerMethods);
            } else {
              restoreMany(renderer.Reconciler, oldReconcilerMethods);
            }
          }

          oldReconcilerMethods = null;
        }

        function recordMount(internalInstance, id, parentID) {
          var isRoot = parentID === 0;

          if (constants["s"]) {
            console.log('%crecordMount()', 'color: green; font-weight: bold;', id, getData(internalInstance).displayName);
          }

          if (isRoot) {
            var hasOwnerMetadata = internalInstance._currentElement != null && internalInstance._currentElement._owner != null;
            pushOperation(constants["l"]);
            pushOperation(id);
            pushOperation(types["m"]);
            pushOperation(0);
            pushOperation(0);
            pushOperation(0);
            pushOperation(hasOwnerMetadata ? 1 : 0);
          } else {
            var type = getElementType(internalInstance);

            var _getData = getData(internalInstance),
                displayName = _getData.displayName,
                key = _getData.key;

            var ownerID = internalInstance._currentElement != null && internalInstance._currentElement._owner != null ? getID(internalInstance._currentElement._owner) : 0;
            var displayNameStringID = getStringID(displayName);
            var keyStringID = getStringID(key);
            pushOperation(constants["l"]);
            pushOperation(id);
            pushOperation(type);
            pushOperation(parentID);
            pushOperation(ownerID);
            pushOperation(displayNameStringID);
            pushOperation(keyStringID);
          }
        }

        function recordReorder(internalInstance, id, nextChildren) {
          pushOperation(constants["o"]);
          pushOperation(id);
          var nextChildIDs = nextChildren.map(getID);
          pushOperation(nextChildIDs.length);

          for (var i = 0; i < nextChildIDs.length; i++) {
            pushOperation(nextChildIDs[i]);
          }
        }

        function recordUnmount(internalInstance, id) {
          pendingUnmountedIDs.push(id);
          idToInternalInstanceMap.delete(id);
        }

        function crawlAndRecordInitialMounts(id, parentID, rootID) {
          if (constants["s"]) {
            console.group('crawlAndRecordInitialMounts() id:', id);
          }

          var internalInstance = idToInternalInstanceMap.get(id);

          if (internalInstance != null) {
            internalInstanceToRootIDMap.set(internalInstance, rootID);
            recordMount(internalInstance, id, parentID);
            getChildren(internalInstance).forEach(function (child) {
              return crawlAndRecordInitialMounts(getID(child), id, rootID);
            });
          }

          if (constants["s"]) {
            console.groupEnd();
          }
        }

        function flushInitialOperations() {
          var roots = renderer.Mount._instancesByReactRootID || renderer.Mount._instancesByContainerID;

          for (var key in roots) {
            var internalInstance = roots[key];

            var _id2 = getID(internalInstance);

            crawlAndRecordInitialMounts(_id2, 0, _id2);
            flushPendingEvents(_id2);
          }
        }

        var pendingOperations = [];
        var pendingStringTable = new Map();
        var pendingUnmountedIDs = [];
        var pendingStringTableLength = 0;
        var pendingUnmountedRootID = null;

        function flushPendingEvents(rootID) {
          if (pendingOperations.length === 0 && pendingUnmountedIDs.length === 0 && pendingUnmountedRootID === null) {
            return;
          }

          var numUnmountIDs = pendingUnmountedIDs.length + (pendingUnmountedRootID === null ? 0 : 1);
          var operations = new Array(2 + 1 + pendingStringTableLength + (numUnmountIDs > 0 ? 2 + numUnmountIDs : 0) + pendingOperations.length);
          var i = 0;
          operations[i++] = rendererID;
          operations[i++] = rootID;
          operations[i++] = pendingStringTableLength;
          pendingStringTable.forEach(function (value, key) {
            operations[i++] = key.length;
            var encodedKey = Object(src_utils["m"])(key);

            for (var j = 0; j < encodedKey.length; j++) {
              operations[i + j] = encodedKey[j];
            }

            i += key.length;
          });

          if (numUnmountIDs > 0) {
            operations[i++] = constants["m"];
            operations[i++] = numUnmountIDs;

            for (var j = 0; j < pendingUnmountedIDs.length; j++) {
              operations[i++] = pendingUnmountedIDs[j];
            }

            if (pendingUnmountedRootID !== null) {
              operations[i] = pendingUnmountedRootID;
              i++;
            }
          }

          for (var _j = 0; _j < pendingOperations.length; _j++) {
            operations[i + _j] = pendingOperations[_j];
          }

          i += pendingOperations.length;

          if (constants["s"]) {
            Object(src_utils["j"])(operations);
          }

          hook.emit('operations', operations);
          pendingOperations.length = 0;
          pendingUnmountedIDs = [];
          pendingUnmountedRootID = null;
          pendingStringTable.clear();
          pendingStringTableLength = 0;
        }

        function pushOperation(op) {
          if (false) {}

          pendingOperations.push(op);
        }

        function getStringID(str) {
          if (str === null) {
            return 0;
          }

          var existingID = pendingStringTable.get(str);

          if (existingID !== undefined) {
            return existingID;
          }

          var stringID = pendingStringTable.size + 1;
          pendingStringTable.set(str, stringID);
          pendingStringTableLength += str.length + 1;
          return stringID;
        }

        var currentlyInspectedElementID = null;
        var currentlyInspectedPaths = {};

        function mergeInspectedPaths(path) {
          var current = currentlyInspectedPaths;
          path.forEach(function (key) {
            if (!current[key]) {
              current[key] = {};
            }

            current = current[key];
          });
        }

        function createIsPathAllowed(key) {
          return function isPathAllowed(path) {
            var current = currentlyInspectedPaths[key];

            if (!current) {
              return false;
            }

            for (var i = 0; i < path.length; i++) {
              current = current[path[i]];

              if (!current) {
                return false;
              }
            }

            return true;
          };
        }

        function getInstanceAndStyle(id) {
          var instance = null;
          var style = null;
          var internalInstance = idToInternalInstanceMap.get(id);

          if (internalInstance != null) {
            instance = internalInstance._instance || null;
            var element = internalInstance._currentElement;

            if (element != null && element.props != null) {
              style = element.props.style || null;
            }
          }

          return {
            instance: instance,
            style: style
          };
        }

        function updateSelectedElement(id) {
          var internalInstance = idToInternalInstanceMap.get(id);

          if (internalInstance == null) {
            console.warn("Could not find instance with id \"".concat(id, "\""));
            return;
          }

          switch (getElementType(internalInstance)) {
            case types["e"]:
              global.$r = internalInstance._instance;
              break;

            case types["h"]:
              var element = internalInstance._currentElement;

              if (element == null) {
                console.warn("Could not find element with id \"".concat(id, "\""));
                return;
              }

              global.$r = {
                props: element.props,
                type: element.type
              };
              break;

            default:
              global.$r = null;
              break;
          }
        }

        function storeAsGlobal(id, path, count) {
          var inspectedElement = inspectElementRaw(id);

          if (inspectedElement !== null) {
            var value = Object(src_utils["h"])(inspectedElement, path);
            var key = "$reactTemp".concat(count);
            window[key] = value;
            console.log(key);
            console.log(value);
          }
        }

        function copyElementPath(id, path) {
          var inspectedElement = inspectElementRaw(id);

          if (inspectedElement !== null) {
            Object(utils["b"])(Object(src_utils["h"])(inspectedElement, path));
          }
        }

        function inspectElement(requestID, id, path, forceFullData) {
          if (forceFullData || currentlyInspectedElementID !== id) {
            currentlyInspectedElementID = id;
            currentlyInspectedPaths = {};
          }

          var inspectedElement = inspectElementRaw(id);

          if (inspectedElement === null) {
            return {
              id: id,
              responseID: requestID,
              type: 'not-found'
            };
          }

          if (path !== null) {
            mergeInspectedPaths(path);
          }

          updateSelectedElement(id);
          inspectedElement.context = Object(utils["a"])(inspectedElement.context, createIsPathAllowed('context'));
          inspectedElement.props = Object(utils["a"])(inspectedElement.props, createIsPathAllowed('props'));
          inspectedElement.state = Object(utils["a"])(inspectedElement.state, createIsPathAllowed('state'));
          return {
            id: id,
            responseID: requestID,
            type: 'full-data',
            value: inspectedElement
          };
        }

        function inspectElementRaw(id) {
          var internalInstance = idToInternalInstanceMap.get(id);

          if (internalInstance == null) {
            return null;
          }

          var _getData2 = getData(internalInstance),
              displayName = _getData2.displayName,
              key = _getData2.key;

          var type = getElementType(internalInstance);
          var context = null;
          var owners = null;
          var props = null;
          var state = null;
          var source = null;
          var element = internalInstance._currentElement;

          if (element !== null) {
            props = element.props;
            source = element._source != null ? element._source : null;
            var owner = element._owner;

            if (owner) {
              owners = [];

              while (owner != null) {
                owners.push({
                  displayName: getData(owner).displayName || 'Unknown',
                  id: getID(owner),
                  key: element.key,
                  type: getElementType(owner)
                });

                if (owner._currentElement) {
                  owner = owner._currentElement._owner;
                }
              }
            }
          }

          var publicInstance = internalInstance._instance;

          if (publicInstance != null) {
            context = publicInstance.context || null;
            state = publicInstance.state || null;
          }

          var errors = [];
          var warnings = [];
          return {
            id: id,
            canEditHooks: false,
            canEditFunctionProps: false,
            canEditHooksAndDeletePaths: false,
            canEditHooksAndRenamePaths: false,
            canEditFunctionPropsDeletePaths: false,
            canEditFunctionPropsRenamePaths: false,
            canToggleError: false,
            isErrored: false,
            targetErrorBoundaryID: null,
            canToggleSuspense: false,
            canViewSource: type === types["e"] || type === types["h"],
            hasLegacyContext: true,
            displayName: displayName,
            type: type,
            key: key != null ? key : null,
            context: context,
            hooks: null,
            props: props,
            state: state,
            errors: errors,
            warnings: warnings,
            owners: owners,
            source: source,
            rootType: null,
            rendererPackageName: null,
            rendererVersion: null,
            plugins: {
              stylex: null
            }
          };
        }

        function logElementToConsole(id) {
          var result = inspectElementRaw(id);

          if (result === null) {
            console.warn("Could not find element with id \"".concat(id, "\""));
            return;
          }

          var supportsGroup = typeof console.groupCollapsed === 'function';

          if (supportsGroup) {
            console.groupCollapsed("[Click to expand] %c<".concat(result.displayName || 'Component', " />"), 'color: var(--dom-tag-name-color); font-weight: normal;');
          }

          if (result.props !== null) {
            console.log('Props:', result.props);
          }

          if (result.state !== null) {
            console.log('State:', result.state);
          }

          if (result.context !== null) {
            console.log('Context:', result.context);
          }

          var nativeNode = findNativeNodeForInternalID(id);

          if (nativeNode !== null) {
            console.log('Node:', nativeNode);
          }

          if (window.chrome || /firefox/i.test(navigator.userAgent)) {
            console.log('Right-click any value to save it as a global variable for further inspection.');
          }

          if (supportsGroup) {
            console.groupEnd();
          }
        }

        function prepareViewAttributeSource(id, path) {
          var inspectedElement = inspectElementRaw(id);

          if (inspectedElement !== null) {
            window.$attribute = Object(src_utils["h"])(inspectedElement, path);
          }
        }

        function prepareViewElementSource(id) {
          var internalInstance = idToInternalInstanceMap.get(id);

          if (internalInstance == null) {
            console.warn("Could not find instance with id \"".concat(id, "\""));
            return;
          }

          var element = internalInstance._currentElement;

          if (element == null) {
            console.warn("Could not find element with id \"".concat(id, "\""));
            return;
          }

          global.$type = element.type;
        }

        function deletePath(type, id, hookID, path) {
          var internalInstance = idToInternalInstanceMap.get(id);

          if (internalInstance != null) {
            var publicInstance = internalInstance._instance;

            if (publicInstance != null) {
              switch (type) {
                case 'context':
                  Object(src_utils["a"])(publicInstance.context, path);
                  forceUpdate(publicInstance);
                  break;

                case 'hooks':
                  throw new Error('Hooks not supported by this renderer');

                case 'props':
                  var element = internalInstance._currentElement;
                  internalInstance._currentElement = _objectSpread(_objectSpread({}, element), {}, {
                    props: Object(utils["c"])(element.props, path)
                  });
                  forceUpdate(publicInstance);
                  break;

                case 'state':
                  Object(src_utils["a"])(publicInstance.state, path);
                  forceUpdate(publicInstance);
                  break;
              }
            }
          }
        }

        function renamePath(type, id, hookID, oldPath, newPath) {
          var internalInstance = idToInternalInstanceMap.get(id);

          if (internalInstance != null) {
            var publicInstance = internalInstance._instance;

            if (publicInstance != null) {
              switch (type) {
                case 'context':
                  Object(src_utils["k"])(publicInstance.context, oldPath, newPath);
                  forceUpdate(publicInstance);
                  break;

                case 'hooks':
                  throw new Error('Hooks not supported by this renderer');

                case 'props':
                  var element = internalInstance._currentElement;
                  internalInstance._currentElement = _objectSpread(_objectSpread({}, element), {}, {
                    props: Object(utils["d"])(element.props, oldPath, newPath)
                  });
                  forceUpdate(publicInstance);
                  break;

                case 'state':
                  Object(src_utils["k"])(publicInstance.state, oldPath, newPath);
                  forceUpdate(publicInstance);
                  break;
              }
            }
          }
        }

        function overrideValueAtPath(type, id, hookID, path, value) {
          var internalInstance = idToInternalInstanceMap.get(id);

          if (internalInstance != null) {
            var publicInstance = internalInstance._instance;

            if (publicInstance != null) {
              switch (type) {
                case 'context':
                  Object(src_utils["l"])(publicInstance.context, path, value);
                  forceUpdate(publicInstance);
                  break;

                case 'hooks':
                  throw new Error('Hooks not supported by this renderer');

                case 'props':
                  var element = internalInstance._currentElement;
                  internalInstance._currentElement = _objectSpread(_objectSpread({}, element), {}, {
                    props: Object(utils["e"])(element.props, path, value)
                  });
                  forceUpdate(publicInstance);
                  break;

                case 'state':
                  Object(src_utils["l"])(publicInstance.state, path, value);
                  forceUpdate(publicInstance);
                  break;
              }
            }
          }
        }

        var getProfilingData = function getProfilingData() {
          throw new Error('getProfilingData not supported by this renderer');
        };

        var handleCommitFiberRoot = function handleCommitFiberRoot() {
          throw new Error('handleCommitFiberRoot not supported by this renderer');
        };

        var handleCommitFiberUnmount = function handleCommitFiberUnmount() {
          throw new Error('handleCommitFiberUnmount not supported by this renderer');
        };

        var handlePostCommitFiberRoot = function handlePostCommitFiberRoot() {
          throw new Error('handlePostCommitFiberRoot not supported by this renderer');
        };

        var overrideError = function overrideError() {
          throw new Error('overrideError not supported by this renderer');
        };

        var overrideSuspense = function overrideSuspense() {
          throw new Error('overrideSuspense not supported by this renderer');
        };

        var startProfiling = function startProfiling() {};

        var stopProfiling = function stopProfiling() {};

        function getBestMatchForTrackedPath() {
          return null;
        }

        function getPathForElement(id) {
          return null;
        }

        function updateComponentFilters(componentFilters) {}

        function setTraceUpdatesEnabled(enabled) {}

        function setTrackedPath(path) {}

        function getOwnersList(id) {
          return null;
        }

        function clearErrorsAndWarnings() {}

        function clearErrorsForFiberID(id) {}

        function clearWarningsForFiberID(id) {}

        function patchConsoleForStrictMode() {}

        function unpatchConsoleForStrictMode() {}

        return {
          clearErrorsAndWarnings: clearErrorsAndWarnings,
          clearErrorsForFiberID: clearErrorsForFiberID,
          clearWarningsForFiberID: clearWarningsForFiberID,
          cleanup: cleanup,
          copyElementPath: copyElementPath,
          deletePath: deletePath,
          flushInitialOperations: flushInitialOperations,
          getBestMatchForTrackedPath: getBestMatchForTrackedPath,
          getDisplayNameForFiberID: getDisplayNameForFiberID,
          getFiberIDForNative: getInternalIDForNative,
          getInstanceAndStyle: getInstanceAndStyle,
          findNativeNodesForFiberID: function findNativeNodesForFiberID(id) {
            var nativeNode = findNativeNodeForInternalID(id);
            return nativeNode == null ? null : [nativeNode];
          },
          getOwnersList: getOwnersList,
          getPathForElement: getPathForElement,
          getProfilingData: getProfilingData,
          handleCommitFiberRoot: handleCommitFiberRoot,
          handleCommitFiberUnmount: handleCommitFiberUnmount,
          handlePostCommitFiberRoot: handlePostCommitFiberRoot,
          inspectElement: inspectElement,
          logElementToConsole: logElementToConsole,
          overrideError: overrideError,
          overrideSuspense: overrideSuspense,
          overrideValueAtPath: overrideValueAtPath,
          renamePath: renamePath,
          patchConsoleForStrictMode: patchConsoleForStrictMode,
          prepareViewAttributeSource: prepareViewAttributeSource,
          prepareViewElementSource: prepareViewElementSource,
          renderer: renderer,
          setTraceUpdatesEnabled: setTraceUpdatesEnabled,
          setTrackedPath: setTrackedPath,
          startProfiling: startProfiling,
          stopProfiling: stopProfiling,
          storeAsGlobal: storeAsGlobal,
          unpatchConsoleForStrictMode: unpatchConsoleForStrictMode,
          updateComponentFilters: updateComponentFilters
        };
      }

      function initBackend(hook, agent, global) {
        if (hook == null) {
          return function () {};
        }

        var subs = [hook.sub('renderer-attached', function (_ref) {
          var id = _ref.id,
              renderer = _ref.renderer,
              rendererInterface = _ref.rendererInterface;
          agent.setRendererInterface(id, rendererInterface);
          rendererInterface.flushInitialOperations();
        }), hook.sub('unsupported-renderer-version', function (id) {
          agent.onUnsupportedRenderer(id);
        }), hook.sub('fastRefreshScheduled', agent.onFastRefreshScheduled), hook.sub('operations', agent.onHookOperations), hook.sub('traceUpdates', agent.onTraceUpdates)];

        var attachRenderer = function attachRenderer(id, renderer) {
          var rendererInterface = hook.rendererInterfaces.get(id);

          if (rendererInterface == null) {
            if (typeof renderer.findFiberByHostInstance === 'function') {
              rendererInterface = Object(backend_renderer["a"])(hook, id, renderer, global);
            } else if (renderer.ComponentTree) {
              rendererInterface = renderer_attach(hook, id, renderer, global);
            } else {}

            if (rendererInterface != null) {
              hook.rendererInterfaces.set(id, rendererInterface);
            }
          }

          if (rendererInterface != null) {
            hook.emit('renderer-attached', {
              id: id,
              renderer: renderer,
              rendererInterface: rendererInterface
            });
          } else {
            hook.emit('unsupported-renderer-version', id);
          }
        };

        hook.renderers.forEach(function (renderer, id) {
          attachRenderer(id, renderer);
        });
        subs.push(hook.sub('renderer', function (_ref2) {
          var id = _ref2.id,
              renderer = _ref2.renderer;
          attachRenderer(id, renderer);
        }));
        hook.emit('react-devtools', agent);
        hook.reactDevtoolsAgent = agent;

        var onAgentShutdown = function onAgentShutdown() {
          subs.forEach(function (fn) {
            return fn();
          });
          hook.rendererInterfaces.forEach(function (rendererInterface) {
            rendererInterface.cleanup();
          });
          hook.reactDevtoolsAgent = null;
        };

        agent.addListener('shutdown', onAgentShutdown);
        subs.push(function () {
          agent.removeListener('shutdown', onAgentShutdown);
        });
        return function () {
          subs.forEach(function (fn) {
            return fn();
          });
        };
      }

      function resolveBoxStyle(prefix, style) {
        var hasParts = false;
        var result = {
          bottom: 0,
          left: 0,
          right: 0,
          top: 0
        };
        var styleForAll = style[prefix];

        if (styleForAll != null) {
          for (var _i = 0, _Object$keys = Object.keys(result); _i < _Object$keys.length; _i++) {
            var key = _Object$keys[_i];
            result[key] = styleForAll;
          }

          hasParts = true;
        }

        var styleForHorizontal = style[prefix + 'Horizontal'];

        if (styleForHorizontal != null) {
          result.left = styleForHorizontal;
          result.right = styleForHorizontal;
          hasParts = true;
        } else {
          var styleForLeft = style[prefix + 'Left'];

          if (styleForLeft != null) {
            result.left = styleForLeft;
            hasParts = true;
          }

          var styleForRight = style[prefix + 'Right'];

          if (styleForRight != null) {
            result.right = styleForRight;
            hasParts = true;
          }

          var styleForEnd = style[prefix + 'End'];

          if (styleForEnd != null) {
            result.right = styleForEnd;
            hasParts = true;
          }

          var styleForStart = style[prefix + 'Start'];

          if (styleForStart != null) {
            result.left = styleForStart;
            hasParts = true;
          }
        }

        var styleForVertical = style[prefix + 'Vertical'];

        if (styleForVertical != null) {
          result.bottom = styleForVertical;
          result.top = styleForVertical;
          hasParts = true;
        } else {
          var styleForBottom = style[prefix + 'Bottom'];

          if (styleForBottom != null) {
            result.bottom = styleForBottom;
            hasParts = true;
          }

          var styleForTop = style[prefix + 'Top'];

          if (styleForTop != null) {
            result.top = styleForTop;
            hasParts = true;
          }
        }

        return hasParts ? result : null;
      }

      var isArray = __webpack_require__(6);

      function setupNativeStyleEditor_typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          setupNativeStyleEditor_typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          setupNativeStyleEditor_typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return setupNativeStyleEditor_typeof(obj);
      }

      function setupNativeStyleEditor_defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function setupNativeStyleEditor(bridge, agent, resolveNativeStyle, validAttributes) {
        bridge.addListener('NativeStyleEditor_measure', function (_ref) {
          var id = _ref.id,
              rendererID = _ref.rendererID;
          measureStyle(agent, bridge, resolveNativeStyle, id, rendererID);
        });
        bridge.addListener('NativeStyleEditor_renameAttribute', function (_ref2) {
          var id = _ref2.id,
              rendererID = _ref2.rendererID,
              oldName = _ref2.oldName,
              newName = _ref2.newName,
              value = _ref2.value;
          renameStyle(agent, id, rendererID, oldName, newName, value);
          setTimeout(function () {
            return measureStyle(agent, bridge, resolveNativeStyle, id, rendererID);
          });
        });
        bridge.addListener('NativeStyleEditor_setValue', function (_ref3) {
          var id = _ref3.id,
              rendererID = _ref3.rendererID,
              name = _ref3.name,
              value = _ref3.value;
          setStyle(agent, id, rendererID, name, value);
          setTimeout(function () {
            return measureStyle(agent, bridge, resolveNativeStyle, id, rendererID);
          });
        });
        bridge.send('isNativeStyleEditorSupported', {
          isSupported: true,
          validAttributes: validAttributes
        });
      }

      var EMPTY_BOX_STYLE = {
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
      };
      var componentIDToStyleOverrides = new Map();

      function measureStyle(agent, bridge, resolveNativeStyle, id, rendererID) {
        var data = agent.getInstanceAndStyle({
          id: id,
          rendererID: rendererID
        });

        if (!data || !data.style) {
          bridge.send('NativeStyleEditor_styleAndLayout', {
            id: id,
            layout: null,
            style: null
          });
          return;
        }

        var instance = data.instance,
            style = data.style;
        var resolvedStyle = resolveNativeStyle(style);
        var styleOverrides = componentIDToStyleOverrides.get(id);

        if (styleOverrides != null) {
          resolvedStyle = Object.assign({}, resolvedStyle, styleOverrides);
        }

        if (!instance || typeof instance.measure !== 'function') {
          bridge.send('NativeStyleEditor_styleAndLayout', {
            id: id,
            layout: null,
            style: resolvedStyle || null
          });
          return;
        }

        instance.measure(function (x, y, width, height, left, top) {
          if (typeof x !== 'number') {
            bridge.send('NativeStyleEditor_styleAndLayout', {
              id: id,
              layout: null,
              style: resolvedStyle || null
            });
            return;
          }

          var margin = resolvedStyle != null && resolveBoxStyle('margin', resolvedStyle) || EMPTY_BOX_STYLE;
          var padding = resolvedStyle != null && resolveBoxStyle('padding', resolvedStyle) || EMPTY_BOX_STYLE;
          bridge.send('NativeStyleEditor_styleAndLayout', {
            id: id,
            layout: {
              x: x,
              y: y,
              width: width,
              height: height,
              left: left,
              top: top,
              margin: margin,
              padding: padding
            },
            style: resolvedStyle || null
          });
        });
      }

      function shallowClone(object) {
        var cloned = {};

        for (var n in object) {
          cloned[n] = object[n];
        }

        return cloned;
      }

      function renameStyle(agent, id, rendererID, oldName, newName, value) {
        var _ref4;

        var data = agent.getInstanceAndStyle({
          id: id,
          rendererID: rendererID
        });

        if (!data || !data.style) {
          return;
        }

        var instance = data.instance,
            style = data.style;
        var newStyle = newName ? (_ref4 = {}, setupNativeStyleEditor_defineProperty(_ref4, oldName, undefined), setupNativeStyleEditor_defineProperty(_ref4, newName, value), _ref4) : setupNativeStyleEditor_defineProperty({}, oldName, undefined);
        var customStyle;

        if (instance !== null && typeof instance.setNativeProps === 'function') {
          var styleOverrides = componentIDToStyleOverrides.get(id);

          if (!styleOverrides) {
            componentIDToStyleOverrides.set(id, newStyle);
          } else {
            Object.assign(styleOverrides, newStyle);
          }

          instance.setNativeProps({
            style: newStyle
          });
        } else if (Object(isArray["a"])(style)) {
          var lastIndex = style.length - 1;

          if (setupNativeStyleEditor_typeof(style[lastIndex]) === 'object' && !Object(isArray["a"])(style[lastIndex])) {
            customStyle = shallowClone(style[lastIndex]);
            delete customStyle[oldName];

            if (newName) {
              customStyle[newName] = value;
            } else {
              customStyle[oldName] = undefined;
            }

            agent.overrideValueAtPath({
              type: 'props',
              id: id,
              rendererID: rendererID,
              path: ['style', lastIndex],
              value: customStyle
            });
          } else {
            agent.overrideValueAtPath({
              type: 'props',
              id: id,
              rendererID: rendererID,
              path: ['style'],
              value: style.concat([newStyle])
            });
          }
        } else if (setupNativeStyleEditor_typeof(style) === 'object') {
          customStyle = shallowClone(style);
          delete customStyle[oldName];

          if (newName) {
            customStyle[newName] = value;
          } else {
            customStyle[oldName] = undefined;
          }

          agent.overrideValueAtPath({
            type: 'props',
            id: id,
            rendererID: rendererID,
            path: ['style'],
            value: customStyle
          });
        } else {
          agent.overrideValueAtPath({
            type: 'props',
            id: id,
            rendererID: rendererID,
            path: ['style'],
            value: [style, newStyle]
          });
        }

        agent.emit('hideNativeHighlight');
      }

      function setStyle(agent, id, rendererID, name, value) {
        var data = agent.getInstanceAndStyle({
          id: id,
          rendererID: rendererID
        });

        if (!data || !data.style) {
          return;
        }

        var instance = data.instance,
            style = data.style;
        var newStyle = setupNativeStyleEditor_defineProperty({}, name, value);

        if (instance !== null && typeof instance.setNativeProps === 'function') {
          var styleOverrides = componentIDToStyleOverrides.get(id);

          if (!styleOverrides) {
            componentIDToStyleOverrides.set(id, newStyle);
          } else {
            Object.assign(styleOverrides, newStyle);
          }

          instance.setNativeProps({
            style: newStyle
          });
        } else if (Object(isArray["a"])(style)) {
          var lastLength = style.length - 1;

          if (setupNativeStyleEditor_typeof(style[lastLength]) === 'object' && !Object(isArray["a"])(style[lastLength])) {
            agent.overrideValueAtPath({
              type: 'props',
              id: id,
              rendererID: rendererID,
              path: ['style', lastLength, name],
              value: value
            });
          } else {
            agent.overrideValueAtPath({
              type: 'props',
              id: id,
              rendererID: rendererID,
              path: ['style'],
              value: style.concat([newStyle])
            });
          }
        } else {
          agent.overrideValueAtPath({
            type: 'props',
            id: id,
            rendererID: rendererID,
            path: ['style'],
            value: [style, newStyle]
          });
        }

        agent.emit('hideNativeHighlight');
      }

      installHook(window);
      var backend_hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
      var savedComponentFilters = Object(src_utils["e"])();

      function backend_debug(methodName) {
        if (constants["s"]) {
          var _console;

          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          (_console = console).log.apply(_console, ["%c[core/backend] %c".concat(methodName), 'color: teal; font-weight: bold;', 'font-weight: bold;'].concat(args));
        }
      }

      function connectToDevTools(options) {
        if (backend_hook == null) {
          return;
        }

        var _ref = options || {},
            _ref$host = _ref.host,
            host = _ref$host === void 0 ? 'localhost' : _ref$host,
            nativeStyleEditorValidAttributes = _ref.nativeStyleEditorValidAttributes,
            _ref$useHttps = _ref.useHttps,
            useHttps = _ref$useHttps === void 0 ? false : _ref$useHttps,
            _ref$port = _ref.port,
            port = _ref$port === void 0 ? 8097 : _ref$port,
            websocket = _ref.websocket,
            _ref$resolveRNStyle = _ref.resolveRNStyle,
            resolveRNStyle = _ref$resolveRNStyle === void 0 ? null : _ref$resolveRNStyle,
            _ref$retryConnectionD = _ref.retryConnectionDelay,
            retryConnectionDelay = _ref$retryConnectionD === void 0 ? 2000 : _ref$retryConnectionD,
            _ref$isAppActive = _ref.isAppActive,
            isAppActive = _ref$isAppActive === void 0 ? function () {
          return true;
        } : _ref$isAppActive;

        var protocol = useHttps ? 'wss' : 'ws';
        var retryTimeoutID = null;

        function scheduleRetry() {
          if (retryTimeoutID === null) {
            retryTimeoutID = setTimeout(function () {
              return connectToDevTools(options);
            }, retryConnectionDelay);
          }
        }

        if (!isAppActive()) {
          scheduleRetry();
          return;
        }

        var bridge = null;
        var messageListeners = [];
        var uri = protocol + '://' + host + ':' + port;
        var ws = websocket ? websocket : new window.WebSocket(uri);
        ws.onclose = handleClose;
        ws.onerror = handleFailed;
        ws.onmessage = handleMessage;

        ws.onopen = function () {
          bridge = new src_bridge({
            listen: function listen(fn) {
              messageListeners.push(fn);
              return function () {
                var index = messageListeners.indexOf(fn);

                if (index >= 0) {
                  messageListeners.splice(index, 1);
                }
              };
            },
            send: function send(event, payload, transferable) {
              if (ws.readyState === ws.OPEN) {
                if (constants["s"]) {
                  backend_debug('wall.send()', event, payload);
                }

                ws.send(JSON.stringify({
                  event: event,
                  payload: payload
                }));
              } else {
                if (constants["s"]) {
                  backend_debug('wall.send()', 'Shutting down bridge because of closed WebSocket connection');
                }

                if (bridge !== null) {
                  bridge.shutdown();
                }

                scheduleRetry();
              }
            }
          });
          bridge.addListener('inspectElement', function (_ref2) {
            var id = _ref2.id,
                rendererID = _ref2.rendererID;
            var renderer = agent.rendererInterfaces[rendererID];

            if (renderer != null) {
              var nodes = renderer.findNativeNodesForFiberID(id);

              if (nodes != null && nodes[0] != null) {
                agent.emit('showNativeHighlight', nodes[0]);
              }
            }
          });
          bridge.addListener('updateComponentFilters', function (componentFilters) {
            savedComponentFilters = componentFilters;
          });

          if (window.__REACT_DEVTOOLS_COMPONENT_FILTERS__ == null) {
            bridge.send('overrideComponentFilters', savedComponentFilters);
          }

          var agent = new agent_Agent(bridge);
          agent.addListener('shutdown', function () {
            backend_hook.emit('shutdown');
          });
          initBackend(backend_hook, agent, window);

          if (resolveRNStyle != null || backend_hook.resolveRNStyle != null) {
            setupNativeStyleEditor(bridge, agent, resolveRNStyle || backend_hook.resolveRNStyle, nativeStyleEditorValidAttributes || backend_hook.nativeStyleEditorValidAttributes || null);
          } else {
            var lazyResolveRNStyle;
            var lazyNativeStyleEditorValidAttributes;

            var initAfterTick = function initAfterTick() {
              if (bridge !== null) {
                setupNativeStyleEditor(bridge, agent, lazyResolveRNStyle, lazyNativeStyleEditorValidAttributes);
              }
            };

            if (!backend_hook.hasOwnProperty('resolveRNStyle')) {
              Object.defineProperty(backend_hook, 'resolveRNStyle', {
                enumerable: false,
                get: function get() {
                  return lazyResolveRNStyle;
                },
                set: function set(value) {
                  lazyResolveRNStyle = value;
                  initAfterTick();
                }
              });
            }

            if (!backend_hook.hasOwnProperty('nativeStyleEditorValidAttributes')) {
              Object.defineProperty(backend_hook, 'nativeStyleEditorValidAttributes', {
                enumerable: false,
                get: function get() {
                  return lazyNativeStyleEditorValidAttributes;
                },
                set: function set(value) {
                  lazyNativeStyleEditorValidAttributes = value;
                  initAfterTick();
                }
              });
            }
          }
        };

        function handleClose() {
          if (constants["s"]) {
            backend_debug('WebSocket.onclose');
          }

          if (bridge !== null) {
            bridge.emit('shutdown');
          }

          scheduleRetry();
        }

        function handleFailed() {
          if (constants["s"]) {
            backend_debug('WebSocket.onerror');
          }

          scheduleRetry();
        }

        function handleMessage(event) {
          var data;

          try {
            if (typeof event.data === 'string') {
              data = JSON.parse(event.data);

              if (constants["s"]) {
                backend_debug('WebSocket.onmessage', data);
              }
            } else {
              throw Error();
            }
          } catch (e) {
            console.error('[React DevTools] Failed to parse JSON: ' + event.data);
            return;
          }

          messageListeners.forEach(function (fn) {
            try {
              fn(data);
            } catch (error) {
              console.log('[React DevTools] Error calling listener', data);
              console.log('error:', error);
              throw error;
            }
          });
        }
      }
    }]);
  });
},168,[169],"node_modules/react-devtools-core/dist/backend.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var runtime = _$$_REQUIRE(_dependencyMap[0], "../helpers/regeneratorRuntime")();

  module.exports = runtime;

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    if (typeof globalThis === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }
},169,[170],"node_modules/@babel/runtime/regenerator/index.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _regeneratorRuntime() {
    "use strict";

    module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
      return exports;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    var exports = {},
        Op = Object.prototype,
        hasOwn = Op.hasOwnProperty,
        $Symbol = "function" == typeof Symbol ? Symbol : {},
        iteratorSymbol = $Symbol.iterator || "@@iterator",
        asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
        toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      return Object.defineProperty(obj, key, {
        value: value,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), obj[key];
    }

    try {
      define({}, "");
    } catch (err) {
      define = function define(obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
          generator = Object.create(protoGenerator.prototype),
          context = new Context(tryLocsList || []);
      return generator._invoke = function (innerFn, self, context) {
        var state = "suspendedStart";
        return function (method, arg) {
          if ("executing" === state) throw new Error("Generator is already running");

          if ("completed" === state) {
            if ("throw" === method) throw arg;
            return doneResult();
          }

          for (context.method = method, context.arg = arg;;) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
              if ("suspendedStart" === state) throw state = "completed", context.arg;
              context.dispatchException(context.arg);
            } else "return" === context.method && context.abrupt("return", context.arg);
            state = "executing";
            var record = tryCatch(innerFn, self, context);

            if ("normal" === record.type) {
              if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
              return {
                value: record.arg,
                done: context.done
              };
            }

            "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
          }
        };
      }(innerFn, self, context), generator;
    }

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    exports.wrap = wrap;
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });
    var getProto = Object.getPrototypeOf,
        NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if ("throw" !== record.type) {
          var result = record.arg,
              value = result.value;
          return value && "object" == _$$_REQUIRE(_dependencyMap[0], "./typeof.js")["default"](value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          }) : PromiseImpl.resolve(value).then(function (unwrapped) {
            result.value = unwrapped, resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }

        reject(record.arg);
      }

      var previousPromise;

      this._invoke = function (method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (undefined === method) {
        if (context.delegate = null, "throw" === context.method) {
          if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
          context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);
      if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
      var info = record.arg;
      return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
    }

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };
      1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal", delete record.arg, entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
    }

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) return iteratorMethod.call(iterable);
        if ("function" == typeof iterable.next) return iterable;

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            for (; ++i < iterable.length;) {
              if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
            }

            return next.value = undefined, next.done = !0, next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    function doneResult() {
      return {
        value: undefined,
        done: !0
      };
    }

    return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
      var ctor = "function" == typeof genFun && genFun.constructor;
      return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
    }, exports.mark = function (genFun) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
    }, exports.awrap = function (arg) {
      return {
        __await: arg
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      void 0 === PromiseImpl && (PromiseImpl = Promise);
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
      return this;
    }), define(Gp, "toString", function () {
      return "[object Generator]";
    }), exports.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      return keys.reverse(), function next() {
        for (; keys.length;) {
          var key = keys.pop();
          if (key in object) return next.value = key, next.done = !1, next;
        }

        return next.done = !0, next;
      };
    }, exports.values = values, Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
          "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
        }
      },
      stop: function stop() {
        this.done = !0;
        var rootRecord = this.tryEntries[0].completion;
        if ("throw" === rootRecord.type) throw rootRecord.arg;
        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) throw exception;
        var context = this;

        function handle(loc, caught) {
          return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i],
              record = entry.completion;
          if ("root" === entry.tryLoc) return handle("end");

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc"),
                hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            } else {
              if (!hasFinally) throw new Error("try statement without catch or finally");
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
        var record = finallyEntry ? finallyEntry.completion : {};
        return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if ("throw" === record.type) throw record.arg;
        return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if ("throw" === record.type) {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        return this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
      }
    }, exports;
  }

  module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;
},170,[33],"node_modules/@babel/runtime/helpers/regeneratorRuntime.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/getPrototypeOf"));

  var _NativeAppState = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "./NativeAppState"));

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var AppState = function (_NativeEventEmitter) {
    (0, _inherits2.default)(AppState, _NativeEventEmitter);

    var _super = _createSuper(AppState);

    function AppState() {
      var _this;

      (0, _classCallCheck2.default)(this, AppState);
      _this = _super.call(this, _NativeAppState.default);
      _this._supportedEvents = ['change', 'memoryWarning', 'blur', 'focus'];
      _this.isAvailable = true;
      _this._eventHandlers = _this._supportedEvents.reduce(function (handlers, key) {
        handlers[key] = new Map();
        return handlers;
      }, {});
      _this.currentState = _NativeAppState.default.getConstants().initialAppState;
      var eventUpdated = false;

      _this.addListener('appStateDidChange', function (appStateData) {
        eventUpdated = true;
        _this.currentState = appStateData.app_state;
      });

      _NativeAppState.default.getCurrentAppState(function (appStateData) {
        if (!eventUpdated && _this.currentState !== appStateData.app_state) {
          _this.currentState = appStateData.app_state;

          _this.emit('appStateDidChange', appStateData);
        }
      }, _$$_REQUIRE(_dependencyMap[7], "../Utilities/logError"));

      return _this;
    }

    (0, _createClass2.default)(AppState, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        _$$_REQUIRE(_dependencyMap[8], "invariant")(this._supportedEvents.indexOf(type) !== -1, 'Trying to subscribe to unknown event: "%s"', type);

        switch (type) {
          case 'change':
            {
              this._eventHandlers[type].set(handler, this.addListener('appStateDidChange', function (appStateData) {
                handler(appStateData.app_state);
              }));

              break;
            }

          case 'memoryWarning':
            {
              this._eventHandlers[type].set(handler, this.addListener('memoryWarning', handler));

              break;
            }

          case 'blur':
          case 'focus':
            {
              this._eventHandlers[type].set(handler, this.addListener('appStateFocusChange', function (hasFocus) {
                if (type === 'blur' && !hasFocus) {
                  handler();
                }

                if (type === 'focus' && hasFocus) {
                  handler();
                }
              }));
            }
        }
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        _$$_REQUIRE(_dependencyMap[8], "invariant")(this._supportedEvents.indexOf(type) !== -1, 'Trying to remove listener for unknown event: "%s"', type);

        if (!this._eventHandlers[type].has(handler)) {
          return;
        }

        this._eventHandlers[type].get(handler).remove();

        this._eventHandlers[type].delete(handler);
      }
    }]);
    return AppState;
  }(_$$_REQUIRE(_dependencyMap[9], "../EventEmitter/NativeEventEmitter"));

  function throwMissingNativeModule() {
    _$$_REQUIRE(_dependencyMap[8], "invariant")(false, 'Cannot use AppState module when native RCTAppState is not included in the build.\n' + 'Either include it, or check AppState.isAvailable before calling any methods.');
  }

  var MissingNativeAppStateShim = function (_EventEmitter) {
    (0, _inherits2.default)(MissingNativeAppStateShim, _EventEmitter);

    var _super2 = _createSuper(MissingNativeAppStateShim);

    function MissingNativeAppStateShim() {
      var _this2;

      (0, _classCallCheck2.default)(this, MissingNativeAppStateShim);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this2 = _super2.call.apply(_super2, [this].concat(args));
      _this2.isAvailable = false;
      _this2.currentState = null;
      return _this2;
    }

    (0, _createClass2.default)(MissingNativeAppStateShim, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        throwMissingNativeModule();
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        throwMissingNativeModule();
      }
    }, {
      key: "addListener",
      value: function addListener() {
        throwMissingNativeModule();
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        throwMissingNativeModule();
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription() {
        throwMissingNativeModule();
      }
    }]);
    return MissingNativeAppStateShim;
  }(_$$_REQUIRE(_dependencyMap[10], "../vendor/emitter/EventEmitter"));

  var AppStateInstance = _NativeAppState.default ? new AppState() : new MissingNativeAppStateShim();
  module.exports = AppStateInstance;
},171,[3,16,17,35,32,31,172,173,6,126,40],"node_modules/react-native/Libraries/AppState/AppState.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.getEnforcing('AppState');

  exports.default = _default;
},172,[5],"node_modules/react-native/Libraries/AppState/NativeAppState.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var logError = function logError() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 1 && args[0] instanceof Error) {
      var err = args[0];
      console.error('Error: "' + err.message + '".  Stack:\n' + err.stack);
    } else {
      console.error.apply(console, args);
    }
  };

  module.exports = logError;
},173,[],"node_modules/react-native/Libraries/Utilities/logError.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _ReactNativeViewViewConfigAndroid = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./ReactNativeViewViewConfigAndroid"));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2], "react-native");

  var ReactNativeViewConfig = {
    uiViewClassName: 'RCTView',
    baseModuleName: null,
    Manager: 'ViewManager',
    Commands: {},
    Constants: {},
    bubblingEventTypes: Object.assign({}, _ReactNativeViewViewConfigAndroid.default.bubblingEventTypes, {
      topBlur: {
        phasedRegistrationNames: {
          bubbled: 'onBlur',
          captured: 'onBlurCapture'
        }
      },
      topChange: {
        phasedRegistrationNames: {
          bubbled: 'onChange',
          captured: 'onChangeCapture'
        }
      },
      topEndEditing: {
        phasedRegistrationNames: {
          bubbled: 'onEndEditing',
          captured: 'onEndEditingCapture'
        }
      },
      topFocus: {
        phasedRegistrationNames: {
          bubbled: 'onFocus',
          captured: 'onFocusCapture'
        }
      },
      topKeyPress: {
        phasedRegistrationNames: {
          bubbled: 'onKeyPress',
          captured: 'onKeyPressCapture'
        }
      },
      topPress: {
        phasedRegistrationNames: {
          bubbled: 'onPress',
          captured: 'onPressCapture'
        }
      },
      topSubmitEditing: {
        phasedRegistrationNames: {
          bubbled: 'onSubmitEditing',
          captured: 'onSubmitEditingCapture'
        }
      },
      topTouchCancel: {
        phasedRegistrationNames: {
          bubbled: 'onTouchCancel',
          captured: 'onTouchCancelCapture'
        }
      },
      topTouchEnd: {
        phasedRegistrationNames: {
          bubbled: 'onTouchEnd',
          captured: 'onTouchEndCapture'
        }
      },
      topTouchMove: {
        phasedRegistrationNames: {
          bubbled: 'onTouchMove',
          captured: 'onTouchMoveCapture'
        }
      },
      topTouchStart: {
        phasedRegistrationNames: {
          bubbled: 'onTouchStart',
          captured: 'onTouchStartCapture'
        }
      }
    }),
    directEventTypes: Object.assign({}, _ReactNativeViewViewConfigAndroid.default.directEventTypes, {
      topAccessibilityAction: {
        registrationName: 'onAccessibilityAction'
      },
      topAccessibilityEscape: {
        registrationName: 'onAccessibilityEscape'
      },
      topAccessibilityTap: {
        registrationName: 'onAccessibilityTap'
      },
      topLayout: {
        registrationName: 'onLayout'
      },
      topMagicTap: {
        registrationName: 'onMagicTap'
      },
      onGestureHandlerEvent: {
        registrationName: 'onGestureHandlerEvent'
      },
      onGestureHandlerStateChange: {
        registrationName: 'onGestureHandlerStateChange'
      }
    }),
    validAttributes: Object.assign({}, _ReactNativeViewViewConfigAndroid.default.validAttributes, {
      accessibilityActions: true,
      accessibilityElementsHidden: true,
      accessibilityHint: true,
      accessibilityIgnoresInvertColors: true,
      accessibilityLabel: true,
      accessibilityLiveRegion: true,
      accessibilityRole: true,
      accessibilityStates: true,
      accessibilityState: true,
      accessibilityValue: true,
      accessibilityViewIsModal: true,
      accessible: true,
      alignContent: true,
      alignItems: true,
      alignSelf: true,
      aspectRatio: true,
      backfaceVisibility: true,
      backgroundColor: {
        process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
      },
      borderBottomColor: {
        process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
      },
      borderBottomEndRadius: true,
      borderBottomLeftRadius: true,
      borderBottomRightRadius: true,
      borderBottomStartRadius: true,
      borderBottomWidth: true,
      borderColor: {
        process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
      },
      borderEndColor: {
        process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
      },
      borderEndWidth: true,
      borderLeftColor: {
        process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
      },
      borderLeftWidth: true,
      borderRadius: true,
      borderRightColor: {
        process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
      },
      borderRightWidth: true,
      borderStartColor: {
        process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
      },
      borderStartWidth: true,
      borderStyle: true,
      borderTopColor: {
        process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
      },
      borderTopEndRadius: true,
      borderTopLeftRadius: true,
      borderTopRightRadius: true,
      borderTopStartRadius: true,
      borderTopWidth: true,
      borderWidth: true,
      bottom: true,
      clickable: true,
      collapsable: true,
      direction: true,
      display: true,
      elevation: true,
      end: true,
      flex: true,
      flexBasis: true,
      flexDirection: true,
      flexGrow: true,
      flexShrink: true,
      flexWrap: true,
      height: true,
      hitSlop: {
        diff: _$$_REQUIRE(_dependencyMap[4], "../../Utilities/differ/insetsDiffer")
      },
      importantForAccessibility: true,
      justifyContent: true,
      left: true,
      margin: true,
      marginBottom: true,
      marginEnd: true,
      marginHorizontal: true,
      marginLeft: true,
      marginRight: true,
      marginStart: true,
      marginTop: true,
      marginVertical: true,
      maxHeight: true,
      maxWidth: true,
      minHeight: true,
      minWidth: true,
      nativeID: true,
      needsOffscreenAlphaCompositing: true,
      onAccessibilityAction: true,
      onAccessibilityEscape: true,
      onAccessibilityTap: true,
      onLayout: true,
      onMagicTap: true,
      opacity: true,
      overflow: true,
      padding: true,
      paddingBottom: true,
      paddingEnd: true,
      paddingHorizontal: true,
      paddingLeft: true,
      paddingRight: true,
      paddingStart: true,
      paddingTop: true,
      paddingVertical: true,
      pointerEvents: true,
      position: true,
      removeClippedSubviews: true,
      renderToHardwareTextureAndroid: true,
      right: true,
      rotation: true,
      scaleX: true,
      scaleY: true,
      shadowColor: {
        process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
      },
      shadowOffset: {
        diff: _$$_REQUIRE(_dependencyMap[5], "../../Utilities/differ/sizesDiffer")
      },
      shadowOpacity: true,
      shadowRadius: true,
      shouldRasterizeIOS: true,
      start: true,
      style: {
        alignContent: true,
        alignItems: true,
        alignSelf: true,
        aspectRatio: true,
        backfaceVisibility: true,
        backgroundColor: {
          process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
        },
        borderBottomColor: {
          process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
        },
        borderBottomEndRadius: true,
        borderBottomLeftRadius: true,
        borderBottomRightRadius: true,
        borderBottomStartRadius: true,
        borderBottomWidth: true,
        borderColor: {
          process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
        },
        borderEndColor: {
          process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
        },
        borderEndWidth: true,
        borderLeftColor: {
          process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
        },
        borderLeftWidth: true,
        borderRadius: true,
        borderRightColor: {
          process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
        },
        borderRightWidth: true,
        borderStartColor: {
          process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
        },
        borderStartWidth: true,
        borderStyle: true,
        borderTopColor: {
          process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
        },
        borderTopEndRadius: true,
        borderTopLeftRadius: true,
        borderTopRightRadius: true,
        borderTopStartRadius: true,
        borderTopWidth: true,
        borderWidth: true,
        bottom: true,
        color: {
          process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
        },
        decomposedMatrix: true,
        direction: true,
        display: true,
        elevation: true,
        end: true,
        flex: true,
        flexBasis: true,
        flexDirection: true,
        flexGrow: true,
        flexShrink: true,
        flexWrap: true,
        fontFamily: true,
        fontSize: true,
        fontStyle: true,
        fontVariant: true,
        fontWeight: true,
        height: true,
        includeFontPadding: true,
        justifyContent: true,
        left: true,
        letterSpacing: true,
        lineHeight: true,
        margin: true,
        marginBottom: true,
        marginEnd: true,
        marginHorizontal: true,
        marginLeft: true,
        marginRight: true,
        marginStart: true,
        marginTop: true,
        marginVertical: true,
        maxHeight: true,
        maxWidth: true,
        minHeight: true,
        minWidth: true,
        opacity: true,
        overflow: true,
        overlayColor: {
          process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
        },
        padding: true,
        paddingBottom: true,
        paddingEnd: true,
        paddingHorizontal: true,
        paddingLeft: true,
        paddingRight: true,
        paddingStart: true,
        paddingTop: true,
        paddingVertical: true,
        position: true,
        resizeMode: true,
        right: true,
        rotation: true,
        scaleX: true,
        scaleY: true,
        shadowColor: {
          process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
        },
        shadowOffset: {
          diff: _$$_REQUIRE(_dependencyMap[5], "../../Utilities/differ/sizesDiffer")
        },
        shadowOpacity: true,
        shadowRadius: true,
        start: true,
        textAlign: true,
        textAlignVertical: true,
        textDecorationColor: {
          process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
        },
        textDecorationLine: true,
        textDecorationStyle: true,
        textShadowColor: {
          process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
        },
        textShadowOffset: true,
        textShadowRadius: true,
        textTransform: true,
        tintColor: {
          process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
        },
        top: true,
        transform: _reactNative.Platform.OS === 'ios' ? {
          diff: _$$_REQUIRE(_dependencyMap[6], "../../Utilities/differ/matricesDiffer")
        } : {
          process: _$$_REQUIRE(_dependencyMap[7], "../../StyleSheet/processTransform")
        },
        transformMatrix: true,
        translateX: true,
        translateY: true,
        width: true,
        writingDirection: true,
        zIndex: true
      },
      testID: true,
      top: true,
      transform: _reactNative.Platform.OS === 'ios' ? {
        diff: _$$_REQUIRE(_dependencyMap[6], "../../Utilities/differ/matricesDiffer")
      } : {
        process: _$$_REQUIRE(_dependencyMap[7], "../../StyleSheet/processTransform")
      },
      translateX: true,
      translateY: true,
      width: true,
      zIndex: true
    })
  };
  module.exports = ReactNativeViewConfig;
},174,[3,175,1,176,179,180,181,182],"node_modules/react-native/Libraries/Components/View/ReactNativeViewViewConfig.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactNativeViewViewConfigAndroid = {
    uiViewClassName: 'RCTView',
    bubblingEventTypes: {
      topSelect: {
        phasedRegistrationNames: {
          bubbled: 'onSelect',
          captured: 'onSelectCapture'
        }
      }
    },
    directEventTypes: {
      topClick: {
        registrationName: 'onClick'
      },
      topContentSizeChange: {
        registrationName: 'onContentSizeChange'
      },
      topLoadingError: {
        registrationName: 'onLoadingError'
      },
      topLoadingFinish: {
        registrationName: 'onLoadingFinish'
      },
      topLoadingStart: {
        registrationName: 'onLoadingStart'
      },
      topMessage: {
        registrationName: 'onMessage'
      },
      topMomentumScrollBegin: {
        registrationName: 'onMomentumScrollBegin'
      },
      topMomentumScrollEnd: {
        registrationName: 'onMomentumScrollEnd'
      },
      topScroll: {
        registrationName: 'onScroll'
      },
      topScrollBeginDrag: {
        registrationName: 'onScrollBeginDrag'
      },
      topScrollEndDrag: {
        registrationName: 'onScrollEndDrag'
      },
      topSelectionChange: {
        registrationName: 'onSelectionChange'
      }
    },
    validAttributes: {
      hasTVPreferredFocus: true,
      focusable: true,
      nativeBackgroundAndroid: true,
      nativeForegroundAndroid: true,
      nextFocusDown: true,
      nextFocusForward: true,
      nextFocusLeft: true,
      nextFocusRight: true,
      nextFocusUp: true
    }
  };
  module.exports = ReactNativeViewViewConfigAndroid;
},175,[],"node_modules/react-native/Libraries/Components/View/ReactNativeViewViewConfigAndroid.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function processColor(color) {
    if (color === undefined || color === null) {
      return color;
    }

    var normalizedColor = _$$_REQUIRE(_dependencyMap[0], "./normalizeColor")(color);

    if (normalizedColor === null || normalizedColor === undefined) {
      return undefined;
    }

    if (typeof normalizedColor === 'object') {
      var processColorObject = _$$_REQUIRE(_dependencyMap[1], "./PlatformColorValueTypes").processColorObject;

      var processedColorObj = processColorObject(normalizedColor);

      if (processedColorObj != null) {
        return processedColorObj;
      }
    }

    if (typeof normalizedColor !== 'number') {
      return null;
    }

    normalizedColor = (normalizedColor << 24 | normalizedColor >>> 8) >>> 0;

    if ("android" === 'android') {
      normalizedColor = normalizedColor | 0x0;
    }

    return normalizedColor;
  }

  module.exports = processColor;
},176,[177,178],"node_modules/react-native/Libraries/StyleSheet/processColor.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function normalizeColor(color) {
    var matchers = getMatchers();
    var match;

    if (typeof color === 'number') {
      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
        return color;
      }

      return null;
    }

    if (typeof color === 'object' && color != null) {
      var normalizeColorObject = _$$_REQUIRE(_dependencyMap[0], "./PlatformColorValueTypes").normalizeColorObject;

      var normalizedColorObj = normalizeColorObject(color);

      if (normalizedColorObj != null) {
        return color;
      }
    }

    if (typeof color !== 'string') {
      return null;
    }

    if (match = matchers.hex6.exec(color)) {
      return parseInt(match[1] + 'ff', 16) >>> 0;
    }

    if (names.hasOwnProperty(color)) {
      return names[color];
    }

    if (match = matchers.rgb.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 0x000000ff) >>> 0;
    }

    if (match = matchers.rgba.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
    }

    if (match = matchers.hex3.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + 'ff', 16) >>> 0;
    }

    if (match = matchers.hex8.exec(color)) {
      return parseInt(match[1], 16) >>> 0;
    }

    if (match = matchers.hex4.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
    }

    if (match = matchers.hsl.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> 0;
    }

    if (match = matchers.hsla.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
    }

    return null;
  }

  function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    }

    if (t > 1) {
      t -= 1;
    }

    if (t < 1 / 6) {
      return p + (q - p) * 6 * t;
    }

    if (t < 1 / 2) {
      return q;
    }

    if (t < 2 / 3) {
      return p + (q - p) * (2 / 3 - t) * 6;
    }

    return p;
  }

  function hslToRgb(h, s, l) {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    var r = hue2rgb(p, q, h + 1 / 3);
    var g = hue2rgb(p, q, h);
    var b = hue2rgb(p, q, h - 1 / 3);
    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
  }

  var NUMBER = '[-+]?\\d*\\.?\\d+';
  var PERCENTAGE = NUMBER + '%';

  function call() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
  }

  var cachedMatchers;

  function getMatchers() {
    if (cachedMatchers === undefined) {
      cachedMatchers = {
        rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
        rgba: new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER)),
        hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
        hsla: new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)),
        hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#([0-9a-fA-F]{6})$/,
        hex8: /^#([0-9a-fA-F]{8})$/
      };
    }

    return cachedMatchers;
  }

  function parse255(str) {
    var int = parseInt(str, 10);

    if (int < 0) {
      return 0;
    }

    if (int > 255) {
      return 255;
    }

    return int;
  }

  function parse360(str) {
    var int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
  }

  function parse1(str) {
    var num = parseFloat(str);

    if (num < 0) {
      return 0;
    }

    if (num > 1) {
      return 255;
    }

    return Math.round(num * 255);
  }

  function parsePercentage(str) {
    var int = parseFloat(str);

    if (int < 0) {
      return 0;
    }

    if (int > 100) {
      return 1;
    }

    return int / 100;
  }

  var names = {
    transparent: 0x00000000,
    aliceblue: 0xf0f8ffff,
    antiquewhite: 0xfaebd7ff,
    aqua: 0x00ffffff,
    aquamarine: 0x7fffd4ff,
    azure: 0xf0ffffff,
    beige: 0xf5f5dcff,
    bisque: 0xffe4c4ff,
    black: 0x000000ff,
    blanchedalmond: 0xffebcdff,
    blue: 0x0000ffff,
    blueviolet: 0x8a2be2ff,
    brown: 0xa52a2aff,
    burlywood: 0xdeb887ff,
    burntsienna: 0xea7e5dff,
    cadetblue: 0x5f9ea0ff,
    chartreuse: 0x7fff00ff,
    chocolate: 0xd2691eff,
    coral: 0xff7f50ff,
    cornflowerblue: 0x6495edff,
    cornsilk: 0xfff8dcff,
    crimson: 0xdc143cff,
    cyan: 0x00ffffff,
    darkblue: 0x00008bff,
    darkcyan: 0x008b8bff,
    darkgoldenrod: 0xb8860bff,
    darkgray: 0xa9a9a9ff,
    darkgreen: 0x006400ff,
    darkgrey: 0xa9a9a9ff,
    darkkhaki: 0xbdb76bff,
    darkmagenta: 0x8b008bff,
    darkolivegreen: 0x556b2fff,
    darkorange: 0xff8c00ff,
    darkorchid: 0x9932ccff,
    darkred: 0x8b0000ff,
    darksalmon: 0xe9967aff,
    darkseagreen: 0x8fbc8fff,
    darkslateblue: 0x483d8bff,
    darkslategray: 0x2f4f4fff,
    darkslategrey: 0x2f4f4fff,
    darkturquoise: 0x00ced1ff,
    darkviolet: 0x9400d3ff,
    deeppink: 0xff1493ff,
    deepskyblue: 0x00bfffff,
    dimgray: 0x696969ff,
    dimgrey: 0x696969ff,
    dodgerblue: 0x1e90ffff,
    firebrick: 0xb22222ff,
    floralwhite: 0xfffaf0ff,
    forestgreen: 0x228b22ff,
    fuchsia: 0xff00ffff,
    gainsboro: 0xdcdcdcff,
    ghostwhite: 0xf8f8ffff,
    gold: 0xffd700ff,
    goldenrod: 0xdaa520ff,
    gray: 0x808080ff,
    green: 0x008000ff,
    greenyellow: 0xadff2fff,
    grey: 0x808080ff,
    honeydew: 0xf0fff0ff,
    hotpink: 0xff69b4ff,
    indianred: 0xcd5c5cff,
    indigo: 0x4b0082ff,
    ivory: 0xfffff0ff,
    khaki: 0xf0e68cff,
    lavender: 0xe6e6faff,
    lavenderblush: 0xfff0f5ff,
    lawngreen: 0x7cfc00ff,
    lemonchiffon: 0xfffacdff,
    lightblue: 0xadd8e6ff,
    lightcoral: 0xf08080ff,
    lightcyan: 0xe0ffffff,
    lightgoldenrodyellow: 0xfafad2ff,
    lightgray: 0xd3d3d3ff,
    lightgreen: 0x90ee90ff,
    lightgrey: 0xd3d3d3ff,
    lightpink: 0xffb6c1ff,
    lightsalmon: 0xffa07aff,
    lightseagreen: 0x20b2aaff,
    lightskyblue: 0x87cefaff,
    lightslategray: 0x778899ff,
    lightslategrey: 0x778899ff,
    lightsteelblue: 0xb0c4deff,
    lightyellow: 0xffffe0ff,
    lime: 0x00ff00ff,
    limegreen: 0x32cd32ff,
    linen: 0xfaf0e6ff,
    magenta: 0xff00ffff,
    maroon: 0x800000ff,
    mediumaquamarine: 0x66cdaaff,
    mediumblue: 0x0000cdff,
    mediumorchid: 0xba55d3ff,
    mediumpurple: 0x9370dbff,
    mediumseagreen: 0x3cb371ff,
    mediumslateblue: 0x7b68eeff,
    mediumspringgreen: 0x00fa9aff,
    mediumturquoise: 0x48d1ccff,
    mediumvioletred: 0xc71585ff,
    midnightblue: 0x191970ff,
    mintcream: 0xf5fffaff,
    mistyrose: 0xffe4e1ff,
    moccasin: 0xffe4b5ff,
    navajowhite: 0xffdeadff,
    navy: 0x000080ff,
    oldlace: 0xfdf5e6ff,
    olive: 0x808000ff,
    olivedrab: 0x6b8e23ff,
    orange: 0xffa500ff,
    orangered: 0xff4500ff,
    orchid: 0xda70d6ff,
    palegoldenrod: 0xeee8aaff,
    palegreen: 0x98fb98ff,
    paleturquoise: 0xafeeeeff,
    palevioletred: 0xdb7093ff,
    papayawhip: 0xffefd5ff,
    peachpuff: 0xffdab9ff,
    peru: 0xcd853fff,
    pink: 0xffc0cbff,
    plum: 0xdda0ddff,
    powderblue: 0xb0e0e6ff,
    purple: 0x800080ff,
    rebeccapurple: 0x663399ff,
    red: 0xff0000ff,
    rosybrown: 0xbc8f8fff,
    royalblue: 0x4169e1ff,
    saddlebrown: 0x8b4513ff,
    salmon: 0xfa8072ff,
    sandybrown: 0xf4a460ff,
    seagreen: 0x2e8b57ff,
    seashell: 0xfff5eeff,
    sienna: 0xa0522dff,
    silver: 0xc0c0c0ff,
    skyblue: 0x87ceebff,
    slateblue: 0x6a5acdff,
    slategray: 0x708090ff,
    slategrey: 0x708090ff,
    snow: 0xfffafaff,
    springgreen: 0x00ff7fff,
    steelblue: 0x4682b4ff,
    tan: 0xd2b48cff,
    teal: 0x008080ff,
    thistle: 0xd8bfd8ff,
    tomato: 0xff6347ff,
    turquoise: 0x40e0d0ff,
    violet: 0xee82eeff,
    wheat: 0xf5deb3ff,
    white: 0xffffffff,
    whitesmoke: 0xf5f5f5ff,
    yellow: 0xffff00ff,
    yellowgreen: 0x9acd32ff
  };
  module.exports = normalizeColor;
},177,[178],"node_modules/react-native/Libraries/StyleSheet/normalizeColor.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.processColorObject = exports.normalizeColorObject = exports.PlatformColor = exports.ColorAndroidPrivate = void 0;

  var PlatformColor = function PlatformColor() {
    for (var _len = arguments.length, names = new Array(_len), _key = 0; _key < _len; _key++) {
      names[_key] = arguments[_key];
    }

    return {
      resource_paths: names
    };
  };

  exports.PlatformColor = PlatformColor;

  var ColorAndroidPrivate = function ColorAndroidPrivate(color) {
    return {
      resource_paths: [color]
    };
  };

  exports.ColorAndroidPrivate = ColorAndroidPrivate;

  var normalizeColorObject = function normalizeColorObject(color) {
    if ('resource_paths' in color) {
      return color;
    }

    return null;
  };

  exports.normalizeColorObject = normalizeColorObject;

  var processColorObject = function processColorObject(color) {
    return color;
  };

  exports.processColorObject = processColorObject;
},178,[],"node_modules/react-native/Libraries/StyleSheet/PlatformColorValueTypes.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var dummyInsets = {
    top: undefined,
    left: undefined,
    right: undefined,
    bottom: undefined
  };

  var insetsDiffer = function insetsDiffer(one, two) {
    one = one || dummyInsets;
    two = two || dummyInsets;
    return one !== two && (one.top !== two.top || one.left !== two.left || one.right !== two.right || one.bottom !== two.bottom);
  };

  module.exports = insetsDiffer;
},179,[],"node_modules/react-native/Libraries/Utilities/differ/insetsDiffer.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var dummySize = {
    width: undefined,
    height: undefined
  };

  var sizesDiffer = function sizesDiffer(one, two) {
    one = one || dummySize;
    two = two || dummySize;
    return one !== two && (one.width !== two.width || one.height !== two.height);
  };

  module.exports = sizesDiffer;
},180,[],"node_modules/react-native/Libraries/Utilities/differ/sizesDiffer.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var matricesDiffer = function matricesDiffer(one, two) {
    if (one === two) {
      return false;
    }

    return !one || !two || one[12] !== two[12] || one[13] !== two[13] || one[14] !== two[14] || one[5] !== two[5] || one[10] !== two[10] || one[0] !== two[0] || one[1] !== two[1] || one[2] !== two[2] || one[3] !== two[3] || one[4] !== two[4] || one[6] !== two[6] || one[7] !== two[7] || one[8] !== two[8] || one[9] !== two[9] || one[11] !== two[11] || one[15] !== two[15];
  };

  module.exports = matricesDiffer;
},181,[],"node_modules/react-native/Libraries/Utilities/differ/matricesDiffer.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function processTransform(transform) {
    if (__DEV__) {
      _validateTransforms(transform);
    }

    if ("android" === 'android' || "android" === 'ios') {
      return transform;
    }

    var result = _$$_REQUIRE(_dependencyMap[0], "../Utilities/MatrixMath").createIdentityMatrix();

    transform.forEach(function (transformation) {
      var key = Object.keys(transformation)[0];
      var value = transformation[key];

      switch (key) {
        case 'matrix':
          _$$_REQUIRE(_dependencyMap[0], "../Utilities/MatrixMath").multiplyInto(result, result, value);

          break;

        case 'perspective':
          _multiplyTransform(result, _$$_REQUIRE(_dependencyMap[0], "../Utilities/MatrixMath").reusePerspectiveCommand, [value]);

          break;

        case 'rotateX':
          _multiplyTransform(result, _$$_REQUIRE(_dependencyMap[0], "../Utilities/MatrixMath").reuseRotateXCommand, [_convertToRadians(value)]);

          break;

        case 'rotateY':
          _multiplyTransform(result, _$$_REQUIRE(_dependencyMap[0], "../Utilities/MatrixMath").reuseRotateYCommand, [_convertToRadians(value)]);

          break;

        case 'rotate':
        case 'rotateZ':
          _multiplyTransform(result, _$$_REQUIRE(_dependencyMap[0], "../Utilities/MatrixMath").reuseRotateZCommand, [_convertToRadians(value)]);

          break;

        case 'scale':
          _multiplyTransform(result, _$$_REQUIRE(_dependencyMap[0], "../Utilities/MatrixMath").reuseScaleCommand, [value]);

          break;

        case 'scaleX':
          _multiplyTransform(result, _$$_REQUIRE(_dependencyMap[0], "../Utilities/MatrixMath").reuseScaleXCommand, [value]);

          break;

        case 'scaleY':
          _multiplyTransform(result, _$$_REQUIRE(_dependencyMap[0], "../Utilities/MatrixMath").reuseScaleYCommand, [value]);

          break;

        case 'translate':
          _multiplyTransform(result, _$$_REQUIRE(_dependencyMap[0], "../Utilities/MatrixMath").reuseTranslate3dCommand, [value[0], value[1], value[2] || 0]);

          break;

        case 'translateX':
          _multiplyTransform(result, _$$_REQUIRE(_dependencyMap[0], "../Utilities/MatrixMath").reuseTranslate2dCommand, [value, 0]);

          break;

        case 'translateY':
          _multiplyTransform(result, _$$_REQUIRE(_dependencyMap[0], "../Utilities/MatrixMath").reuseTranslate2dCommand, [0, value]);

          break;

        case 'skewX':
          _multiplyTransform(result, _$$_REQUIRE(_dependencyMap[0], "../Utilities/MatrixMath").reuseSkewXCommand, [_convertToRadians(value)]);

          break;

        case 'skewY':
          _multiplyTransform(result, _$$_REQUIRE(_dependencyMap[0], "../Utilities/MatrixMath").reuseSkewYCommand, [_convertToRadians(value)]);

          break;

        default:
          throw new Error('Invalid transform name: ' + key);
      }
    });
    return result;
  }

  function _multiplyTransform(result, matrixMathFunction, args) {
    var matrixToApply = _$$_REQUIRE(_dependencyMap[0], "../Utilities/MatrixMath").createIdentityMatrix();

    var argsWithIdentity = [matrixToApply].concat(args);
    matrixMathFunction.apply(this, argsWithIdentity);

    _$$_REQUIRE(_dependencyMap[0], "../Utilities/MatrixMath").multiplyInto(result, result, matrixToApply);
  }

  function _convertToRadians(value) {
    var floatValue = parseFloat(value);
    return value.indexOf('rad') > -1 ? floatValue : floatValue * Math.PI / 180;
  }

  function _validateTransforms(transform) {
    transform.forEach(function (transformation) {
      var keys = Object.keys(transformation);

      _$$_REQUIRE(_dependencyMap[1], "invariant")(keys.length === 1, 'You must specify exactly one property per transform object. Passed properties: %s', _$$_REQUIRE(_dependencyMap[2], "../Utilities/stringifySafe").default(transformation));

      var key = keys[0];
      var value = transformation[key];

      _validateTransform(key, value, transformation);
    });
  }

  function _validateTransform(key, value, transformation) {
    _$$_REQUIRE(_dependencyMap[1], "invariant")(!value.getValue, 'You passed an Animated.Value to a normal component. ' + 'You need to wrap that component in an Animated. For example, ' + 'replace <View /> by <Animated.View />.');

    var multivalueTransforms = ['matrix', 'translate'];

    if (multivalueTransforms.indexOf(key) !== -1) {
      _$$_REQUIRE(_dependencyMap[1], "invariant")(Array.isArray(value), 'Transform with key of %s must have an array as the value: %s', key, _$$_REQUIRE(_dependencyMap[2], "../Utilities/stringifySafe").default(transformation));
    }

    switch (key) {
      case 'matrix':
        _$$_REQUIRE(_dependencyMap[1], "invariant")(value.length === 9 || value.length === 16, 'Matrix transform must have a length of 9 (2d) or 16 (3d). ' + 'Provided matrix has a length of %s: %s', value.length, _$$_REQUIRE(_dependencyMap[2], "../Utilities/stringifySafe").default(transformation));

        break;

      case 'translate':
        _$$_REQUIRE(_dependencyMap[1], "invariant")(value.length === 2 || value.length === 3, 'Transform with key translate must be an array of length 2 or 3, found %s: %s', value.length, _$$_REQUIRE(_dependencyMap[2], "../Utilities/stringifySafe").default(transformation));

        break;

      case 'rotateX':
      case 'rotateY':
      case 'rotateZ':
      case 'rotate':
      case 'skewX':
      case 'skewY':
        _$$_REQUIRE(_dependencyMap[1], "invariant")(typeof value === 'string', 'Transform with key of "%s" must be a string: %s', key, _$$_REQUIRE(_dependencyMap[2], "../Utilities/stringifySafe").default(transformation));

        _$$_REQUIRE(_dependencyMap[1], "invariant")(value.indexOf('deg') > -1 || value.indexOf('rad') > -1, 'Rotate transform must be expressed in degrees (deg) or radians ' + '(rad): %s', _$$_REQUIRE(_dependencyMap[2], "../Utilities/stringifySafe").default(transformation));

        break;

      case 'perspective':
        _$$_REQUIRE(_dependencyMap[1], "invariant")(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, _$$_REQUIRE(_dependencyMap[2], "../Utilities/stringifySafe").default(transformation));

        _$$_REQUIRE(_dependencyMap[1], "invariant")(value !== 0, 'Transform with key of "%s" cannot be zero: %s', key, _$$_REQUIRE(_dependencyMap[2], "../Utilities/stringifySafe").default(transformation));

        break;

      case 'translateX':
      case 'translateY':
      case 'scale':
      case 'scaleX':
      case 'scaleY':
        _$$_REQUIRE(_dependencyMap[1], "invariant")(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, _$$_REQUIRE(_dependencyMap[2], "../Utilities/stringifySafe").default(transformation));

        break;

      default:
        _$$_REQUIRE(_dependencyMap[1], "invariant")(false, 'Invalid transform %s: %s', key, _$$_REQUIRE(_dependencyMap[2], "../Utilities/stringifySafe").default(transformation));

    }
  }

  module.exports = processTransform;
},182,[183,6,21],"node_modules/react-native/Libraries/StyleSheet/processTransform.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var MatrixMath = {
    createIdentityMatrix: function createIdentityMatrix() {
      return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    },
    createCopy: function createCopy(m) {
      return [m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8], m[9], m[10], m[11], m[12], m[13], m[14], m[15]];
    },
    createOrthographic: function createOrthographic(left, right, bottom, top, near, far) {
      var a = 2 / (right - left);
      var b = 2 / (top - bottom);
      var c = -2 / (far - near);
      var tx = -(right + left) / (right - left);
      var ty = -(top + bottom) / (top - bottom);
      var tz = -(far + near) / (far - near);
      return [a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, tx, ty, tz, 1];
    },
    createFrustum: function createFrustum(left, right, bottom, top, near, far) {
      var r_width = 1 / (right - left);
      var r_height = 1 / (top - bottom);
      var r_depth = 1 / (near - far);
      var x = 2 * (near * r_width);
      var y = 2 * (near * r_height);
      var A = (right + left) * r_width;
      var B = (top + bottom) * r_height;
      var C = (far + near) * r_depth;
      var D = 2 * (far * near * r_depth);
      return [x, 0, 0, 0, 0, y, 0, 0, A, B, C, -1, 0, 0, D, 0];
    },
    createPerspective: function createPerspective(fovInRadians, aspect, near, far) {
      var h = 1 / Math.tan(fovInRadians / 2);
      var r_depth = 1 / (near - far);
      var C = (far + near) * r_depth;
      var D = 2 * (far * near * r_depth);
      return [h / aspect, 0, 0, 0, 0, h, 0, 0, 0, 0, C, -1, 0, 0, D, 0];
    },
    createTranslate2d: function createTranslate2d(x, y) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseTranslate2dCommand(mat, x, y);
      return mat;
    },
    reuseTranslate2dCommand: function reuseTranslate2dCommand(matrixCommand, x, y) {
      matrixCommand[12] = x;
      matrixCommand[13] = y;
    },
    reuseTranslate3dCommand: function reuseTranslate3dCommand(matrixCommand, x, y, z) {
      matrixCommand[12] = x;
      matrixCommand[13] = y;
      matrixCommand[14] = z;
    },
    createScale: function createScale(factor) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseScaleCommand(mat, factor);
      return mat;
    },
    reuseScaleCommand: function reuseScaleCommand(matrixCommand, factor) {
      matrixCommand[0] = factor;
      matrixCommand[5] = factor;
    },
    reuseScale3dCommand: function reuseScale3dCommand(matrixCommand, x, y, z) {
      matrixCommand[0] = x;
      matrixCommand[5] = y;
      matrixCommand[10] = z;
    },
    reusePerspectiveCommand: function reusePerspectiveCommand(matrixCommand, p) {
      matrixCommand[11] = -1 / p;
    },
    reuseScaleXCommand: function reuseScaleXCommand(matrixCommand, factor) {
      matrixCommand[0] = factor;
    },
    reuseScaleYCommand: function reuseScaleYCommand(matrixCommand, factor) {
      matrixCommand[5] = factor;
    },
    reuseScaleZCommand: function reuseScaleZCommand(matrixCommand, factor) {
      matrixCommand[10] = factor;
    },
    reuseRotateXCommand: function reuseRotateXCommand(matrixCommand, radians) {
      matrixCommand[5] = Math.cos(radians);
      matrixCommand[6] = Math.sin(radians);
      matrixCommand[9] = -Math.sin(radians);
      matrixCommand[10] = Math.cos(radians);
    },
    reuseRotateYCommand: function reuseRotateYCommand(matrixCommand, amount) {
      matrixCommand[0] = Math.cos(amount);
      matrixCommand[2] = -Math.sin(amount);
      matrixCommand[8] = Math.sin(amount);
      matrixCommand[10] = Math.cos(amount);
    },
    reuseRotateZCommand: function reuseRotateZCommand(matrixCommand, radians) {
      matrixCommand[0] = Math.cos(radians);
      matrixCommand[1] = Math.sin(radians);
      matrixCommand[4] = -Math.sin(radians);
      matrixCommand[5] = Math.cos(radians);
    },
    createRotateZ: function createRotateZ(radians) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseRotateZCommand(mat, radians);
      return mat;
    },
    reuseSkewXCommand: function reuseSkewXCommand(matrixCommand, radians) {
      matrixCommand[4] = Math.tan(radians);
    },
    reuseSkewYCommand: function reuseSkewYCommand(matrixCommand, radians) {
      matrixCommand[1] = Math.tan(radians);
    },
    multiplyInto: function multiplyInto(out, a, b) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3],
          a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7],
          a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11],
          a30 = a[12],
          a31 = a[13],
          a32 = a[14],
          a33 = a[15];
      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3];
      out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[4];
      b1 = b[5];
      b2 = b[6];
      b3 = b[7];
      out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[8];
      b1 = b[9];
      b2 = b[10];
      b3 = b[11];
      out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[12];
      b1 = b[13];
      b2 = b[14];
      b3 = b[15];
      out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    },
    determinant: function determinant(matrix) {
      var _matrix = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/slicedToArray")(matrix, 16),
          m00 = _matrix[0],
          m01 = _matrix[1],
          m02 = _matrix[2],
          m03 = _matrix[3],
          m10 = _matrix[4],
          m11 = _matrix[5],
          m12 = _matrix[6],
          m13 = _matrix[7],
          m20 = _matrix[8],
          m21 = _matrix[9],
          m22 = _matrix[10],
          m23 = _matrix[11],
          m30 = _matrix[12],
          m31 = _matrix[13],
          m32 = _matrix[14],
          m33 = _matrix[15];

      return m03 * m12 * m21 * m30 - m02 * m13 * m21 * m30 - m03 * m11 * m22 * m30 + m01 * m13 * m22 * m30 + m02 * m11 * m23 * m30 - m01 * m12 * m23 * m30 - m03 * m12 * m20 * m31 + m02 * m13 * m20 * m31 + m03 * m10 * m22 * m31 - m00 * m13 * m22 * m31 - m02 * m10 * m23 * m31 + m00 * m12 * m23 * m31 + m03 * m11 * m20 * m32 - m01 * m13 * m20 * m32 - m03 * m10 * m21 * m32 + m00 * m13 * m21 * m32 + m01 * m10 * m23 * m32 - m00 * m11 * m23 * m32 - m02 * m11 * m20 * m33 + m01 * m12 * m20 * m33 + m02 * m10 * m21 * m33 - m00 * m12 * m21 * m33 - m01 * m10 * m22 * m33 + m00 * m11 * m22 * m33;
    },
    inverse: function inverse(matrix) {
      var det = MatrixMath.determinant(matrix);

      if (!det) {
        return matrix;
      }

      var _matrix2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/slicedToArray")(matrix, 16),
          m00 = _matrix2[0],
          m01 = _matrix2[1],
          m02 = _matrix2[2],
          m03 = _matrix2[3],
          m10 = _matrix2[4],
          m11 = _matrix2[5],
          m12 = _matrix2[6],
          m13 = _matrix2[7],
          m20 = _matrix2[8],
          m21 = _matrix2[9],
          m22 = _matrix2[10],
          m23 = _matrix2[11],
          m30 = _matrix2[12],
          m31 = _matrix2[13],
          m32 = _matrix2[14],
          m33 = _matrix2[15];

      return [(m12 * m23 * m31 - m13 * m22 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 + m11 * m22 * m33) / det, (m03 * m22 * m31 - m02 * m23 * m31 - m03 * m21 * m32 + m01 * m23 * m32 + m02 * m21 * m33 - m01 * m22 * m33) / det, (m02 * m13 * m31 - m03 * m12 * m31 + m03 * m11 * m32 - m01 * m13 * m32 - m02 * m11 * m33 + m01 * m12 * m33) / det, (m03 * m12 * m21 - m02 * m13 * m21 - m03 * m11 * m22 + m01 * m13 * m22 + m02 * m11 * m23 - m01 * m12 * m23) / det, (m13 * m22 * m30 - m12 * m23 * m30 - m13 * m20 * m32 + m10 * m23 * m32 + m12 * m20 * m33 - m10 * m22 * m33) / det, (m02 * m23 * m30 - m03 * m22 * m30 + m03 * m20 * m32 - m00 * m23 * m32 - m02 * m20 * m33 + m00 * m22 * m33) / det, (m03 * m12 * m30 - m02 * m13 * m30 - m03 * m10 * m32 + m00 * m13 * m32 + m02 * m10 * m33 - m00 * m12 * m33) / det, (m02 * m13 * m20 - m03 * m12 * m20 + m03 * m10 * m22 - m00 * m13 * m22 - m02 * m10 * m23 + m00 * m12 * m23) / det, (m11 * m23 * m30 - m13 * m21 * m30 + m13 * m20 * m31 - m10 * m23 * m31 - m11 * m20 * m33 + m10 * m21 * m33) / det, (m03 * m21 * m30 - m01 * m23 * m30 - m03 * m20 * m31 + m00 * m23 * m31 + m01 * m20 * m33 - m00 * m21 * m33) / det, (m01 * m13 * m30 - m03 * m11 * m30 + m03 * m10 * m31 - m00 * m13 * m31 - m01 * m10 * m33 + m00 * m11 * m33) / det, (m03 * m11 * m20 - m01 * m13 * m20 - m03 * m10 * m21 + m00 * m13 * m21 + m01 * m10 * m23 - m00 * m11 * m23) / det, (m12 * m21 * m30 - m11 * m22 * m30 - m12 * m20 * m31 + m10 * m22 * m31 + m11 * m20 * m32 - m10 * m21 * m32) / det, (m01 * m22 * m30 - m02 * m21 * m30 + m02 * m20 * m31 - m00 * m22 * m31 - m01 * m20 * m32 + m00 * m21 * m32) / det, (m02 * m11 * m30 - m01 * m12 * m30 - m02 * m10 * m31 + m00 * m12 * m31 + m01 * m10 * m32 - m00 * m11 * m32) / det, (m01 * m12 * m20 - m02 * m11 * m20 + m02 * m10 * m21 - m00 * m12 * m21 - m01 * m10 * m22 + m00 * m11 * m22) / det];
    },
    transpose: function transpose(m) {
      return [m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]];
    },
    multiplyVectorByMatrix: function multiplyVectorByMatrix(v, m) {
      var _v = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/slicedToArray")(v, 4),
          vx = _v[0],
          vy = _v[1],
          vz = _v[2],
          vw = _v[3];

      return [vx * m[0] + vy * m[4] + vz * m[8] + vw * m[12], vx * m[1] + vy * m[5] + vz * m[9] + vw * m[13], vx * m[2] + vy * m[6] + vz * m[10] + vw * m[14], vx * m[3] + vy * m[7] + vz * m[11] + vw * m[15]];
    },
    v3Length: function v3Length(a) {
      return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
    },
    v3Normalize: function v3Normalize(vector, v3Length) {
      var im = 1 / (v3Length || MatrixMath.v3Length(vector));
      return [vector[0] * im, vector[1] * im, vector[2] * im];
    },
    v3Dot: function v3Dot(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    },
    v3Combine: function v3Combine(a, b, aScale, bScale) {
      return [aScale * a[0] + bScale * b[0], aScale * a[1] + bScale * b[1], aScale * a[2] + bScale * b[2]];
    },
    v3Cross: function v3Cross(a, b) {
      return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
    },
    quaternionToDegreesXYZ: function quaternionToDegreesXYZ(q, matrix, row) {
      var _q = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/slicedToArray")(q, 4),
          qx = _q[0],
          qy = _q[1],
          qz = _q[2],
          qw = _q[3];

      var qw2 = qw * qw;
      var qx2 = qx * qx;
      var qy2 = qy * qy;
      var qz2 = qz * qz;
      var test = qx * qy + qz * qw;
      var unit = qw2 + qx2 + qy2 + qz2;
      var conv = 180 / Math.PI;

      if (test > 0.49999 * unit) {
        return [0, 2 * Math.atan2(qx, qw) * conv, 90];
      }

      if (test < -0.49999 * unit) {
        return [0, -2 * Math.atan2(qx, qw) * conv, -90];
      }

      return [MatrixMath.roundTo3Places(Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.asin(2 * qx * qy + 2 * qz * qw) * conv)];
    },
    roundTo3Places: function roundTo3Places(n) {
      var arr = n.toString().split('e');
      return Math.round(arr[0] + 'e' + (arr[1] ? +arr[1] - 3 : 3)) * 0.001;
    },
    decomposeMatrix: function decomposeMatrix(transformMatrix) {
      _$$_REQUIRE(_dependencyMap[1], "invariant")(transformMatrix.length === 16, 'Matrix decomposition needs a list of 3d matrix values, received %s', transformMatrix);

      var perspective = [];
      var quaternion = [];
      var scale = [];
      var skew = [];
      var translation = [];

      if (!transformMatrix[15]) {
        return;
      }

      var matrix = [];
      var perspectiveMatrix = [];

      for (var i = 0; i < 4; i++) {
        matrix.push([]);

        for (var j = 0; j < 4; j++) {
          var value = transformMatrix[i * 4 + j] / transformMatrix[15];
          matrix[i].push(value);
          perspectiveMatrix.push(j === 3 ? 0 : value);
        }
      }

      perspectiveMatrix[15] = 1;

      if (!MatrixMath.determinant(perspectiveMatrix)) {
        return;
      }

      if (matrix[0][3] !== 0 || matrix[1][3] !== 0 || matrix[2][3] !== 0) {
        var rightHandSide = [matrix[0][3], matrix[1][3], matrix[2][3], matrix[3][3]];
        var inversePerspectiveMatrix = MatrixMath.inverse(perspectiveMatrix);
        var transposedInversePerspectiveMatrix = MatrixMath.transpose(inversePerspectiveMatrix);
        perspective = MatrixMath.multiplyVectorByMatrix(rightHandSide, transposedInversePerspectiveMatrix);
      } else {
        perspective[0] = perspective[1] = perspective[2] = 0;
        perspective[3] = 1;
      }

      for (var _i = 0; _i < 3; _i++) {
        translation[_i] = matrix[3][_i];
      }

      var row = [];

      for (var _i2 = 0; _i2 < 3; _i2++) {
        row[_i2] = [matrix[_i2][0], matrix[_i2][1], matrix[_i2][2]];
      }

      scale[0] = MatrixMath.v3Length(row[0]);
      row[0] = MatrixMath.v3Normalize(row[0], scale[0]);
      skew[0] = MatrixMath.v3Dot(row[0], row[1]);
      row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);
      scale[1] = MatrixMath.v3Length(row[1]);
      row[1] = MatrixMath.v3Normalize(row[1], scale[1]);
      skew[0] /= scale[1];
      skew[1] = MatrixMath.v3Dot(row[0], row[2]);
      row[2] = MatrixMath.v3Combine(row[2], row[0], 1.0, -skew[1]);
      skew[2] = MatrixMath.v3Dot(row[1], row[2]);
      row[2] = MatrixMath.v3Combine(row[2], row[1], 1.0, -skew[2]);
      scale[2] = MatrixMath.v3Length(row[2]);
      row[2] = MatrixMath.v3Normalize(row[2], scale[2]);
      skew[1] /= scale[2];
      skew[2] /= scale[2];
      var pdum3 = MatrixMath.v3Cross(row[1], row[2]);

      if (MatrixMath.v3Dot(row[0], pdum3) < 0) {
        for (var _i3 = 0; _i3 < 3; _i3++) {
          scale[_i3] *= -1;
          row[_i3][0] *= -1;
          row[_i3][1] *= -1;
          row[_i3][2] *= -1;
        }
      }

      quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));
      quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));
      quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));
      quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));

      if (row[2][1] > row[1][2]) {
        quaternion[0] = -quaternion[0];
      }

      if (row[0][2] > row[2][0]) {
        quaternion[1] = -quaternion[1];
      }

      if (row[1][0] > row[0][1]) {
        quaternion[2] = -quaternion[2];
      }

      var rotationDegrees;

      if (quaternion[0] < 0.001 && quaternion[0] >= 0 && quaternion[1] < 0.001 && quaternion[1] >= 0) {
        rotationDegrees = [0, 0, MatrixMath.roundTo3Places(Math.atan2(row[0][1], row[0][0]) * 180 / Math.PI)];
      } else {
        rotationDegrees = MatrixMath.quaternionToDegreesXYZ(quaternion, matrix, row);
      }

      return {
        rotationDegrees: rotationDegrees,
        perspective: perspective,
        quaternion: quaternion,
        scale: scale,
        skew: skew,
        translation: translation,
        rotate: rotationDegrees[2],
        rotateX: rotationDegrees[0],
        rotateY: rotationDegrees[1],
        scaleX: scale[0],
        scaleY: scale[1],
        translateX: translation[0],
        translateY: translation[1]
      };
    }
  };
  module.exports = MatrixMath;
},183,[8,6],"node_modules/react-native/Libraries/Utilities/MatrixMath.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function flattenStyle(style) {
    if (style === null || typeof style !== 'object') {
      return undefined;
    }

    if (!Array.isArray(style)) {
      return style;
    }

    var result = {};

    for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
      var computedStyle = flattenStyle(style[i]);

      if (computedStyle) {
        for (var key in computedStyle) {
          result[key] = computedStyle[key];
        }
      }
    }

    return result;
  }

  module.exports = flattenStyle;
},184,[],"node_modules/react-native/Libraries/StyleSheet/flattenStyle.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var JSInspector = {
    registerAgent: function registerAgent(type) {
      if (global.__registerInspectorAgent) {
        global.__registerInspectorAgent(type);
      }
    },
    getTimestamp: function getTimestamp() {
      return global.__inspectorTimestamp();
    }
  };
  module.exports = JSInspector;
},185,[],"node_modules/react-native/Libraries/JSInspector/JSInspector.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var Interceptor = function () {
    function Interceptor(agent) {
      _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/classCallCheck")(this, Interceptor);

      this._agent = agent;
      this._requests = new Map();
    }

    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/createClass")(Interceptor, [{
      key: "getData",
      value: function getData(requestId) {
        return this._requests.get(requestId);
      }
    }, {
      key: "requestSent",
      value: function requestSent(id, url, method, headers) {
        var requestId = String(id);

        this._requests.set(requestId, '');

        var request = {
          url: url,
          method: method,
          headers: headers,
          initialPriority: 'Medium'
        };
        var event = {
          requestId: requestId,
          documentURL: '',
          frameId: '1',
          loaderId: '1',
          request: request,
          timestamp: _$$_REQUIRE(_dependencyMap[4], "./JSInspector").getTimestamp(),
          initiator: {
            type: 'other'
          },
          type: 'Other'
        };

        this._agent.sendEvent('requestWillBeSent', event);
      }
    }, {
      key: "responseReceived",
      value: function responseReceived(id, url, status, headers) {
        var requestId = String(id);
        var response = {
          url: url,
          status: status,
          statusText: String(status),
          headers: headers,
          requestHeaders: {},
          mimeType: this._getMimeType(headers),
          connectionReused: false,
          connectionId: -1,
          encodedDataLength: 0,
          securityState: 'unknown'
        };
        var event = {
          requestId: requestId,
          frameId: '1',
          loaderId: '1',
          timestamp: _$$_REQUIRE(_dependencyMap[4], "./JSInspector").getTimestamp(),
          type: 'Other',
          response: response
        };

        this._agent.sendEvent('responseReceived', event);
      }
    }, {
      key: "dataReceived",
      value: function dataReceived(id, data) {
        var requestId = String(id);
        var existingData = this._requests.get(requestId) || '';

        this._requests.set(requestId, existingData.concat(data));

        var event = {
          requestId: requestId,
          timestamp: _$$_REQUIRE(_dependencyMap[4], "./JSInspector").getTimestamp(),
          dataLength: data.length,
          encodedDataLength: data.length
        };

        this._agent.sendEvent('dataReceived', event);
      }
    }, {
      key: "loadingFinished",
      value: function loadingFinished(id, encodedDataLength) {
        var event = {
          requestId: String(id),
          timestamp: _$$_REQUIRE(_dependencyMap[4], "./JSInspector").getTimestamp(),
          encodedDataLength: encodedDataLength
        };

        this._agent.sendEvent('loadingFinished', event);
      }
    }, {
      key: "loadingFailed",
      value: function loadingFailed(id, error) {
        var event = {
          requestId: String(id),
          timestamp: _$$_REQUIRE(_dependencyMap[4], "./JSInspector").getTimestamp(),
          type: 'Other',
          errorText: error
        };

        this._agent.sendEvent('loadingFailed', event);
      }
    }, {
      key: "_getMimeType",
      value: function _getMimeType(headers) {
        var contentType = headers['Content-Type'] || '';
        return contentType.split(';')[0];
      }
    }]);

    return Interceptor;
  }();

  var NetworkAgent = function (_InspectorAgent) {
    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/inherits")(NetworkAgent, _InspectorAgent);

    var _super = _createSuper(NetworkAgent);

    function NetworkAgent() {
      _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/classCallCheck")(this, NetworkAgent);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/createClass")(NetworkAgent, [{
      key: "enable",
      value: function enable(_ref) {
        var maxResourceBufferSize = _ref.maxResourceBufferSize,
            maxTotalBufferSize = _ref.maxTotalBufferSize;
        this._interceptor = new Interceptor(this);

        _$$_REQUIRE(_dependencyMap[6], "../Network/XMLHttpRequest").setInterceptor(this._interceptor);
      }
    }, {
      key: "disable",
      value: function disable() {
        _$$_REQUIRE(_dependencyMap[6], "../Network/XMLHttpRequest").setInterceptor(null);

        this._interceptor = null;
      }
    }, {
      key: "getResponseBody",
      value: function getResponseBody(_ref2) {
        var requestId = _ref2.requestId;
        return {
          body: this.interceptor().getData(requestId),
          base64Encoded: false
        };
      }
    }, {
      key: "interceptor",
      value: function interceptor() {
        if (this._interceptor) {
          return this._interceptor;
        } else {
          throw Error('_interceptor can not be null');
        }
      }
    }]);

    return NetworkAgent;
  }(_$$_REQUIRE(_dependencyMap[7], "./InspectorAgent"));

  NetworkAgent.DOMAIN = 'Network';
  module.exports = NetworkAgent;
},186,[31,32,16,17,185,35,111,187],"node_modules/react-native/Libraries/JSInspector/NetworkAgent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var InspectorAgent = function () {
    function InspectorAgent(eventSender) {
      _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/classCallCheck")(this, InspectorAgent);

      this._eventSender = eventSender;
    }

    _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/createClass")(InspectorAgent, [{
      key: "sendEvent",
      value: function sendEvent(name, params) {
        this._eventSender(name, params);
      }
    }]);

    return InspectorAgent;
  }();

  module.exports = InspectorAgent;
},187,[16,17],"node_modules/react-native/Libraries/JSInspector/InspectorAgent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (__DEV__) {
    var DevSettings = _$$_REQUIRE(_dependencyMap[0], "../Utilities/DevSettings");

    if (typeof DevSettings.reload !== 'function') {
      throw new Error('Could not find the reload() implementation.');
    }

    var ReactRefreshRuntime = _$$_REQUIRE(_dependencyMap[1], "react-refresh/runtime");

    ReactRefreshRuntime.injectIntoGlobalHook(global);
    var Refresh = {
      performFullRefresh: function performFullRefresh(reason) {
        DevSettings.reload(reason);
      },
      createSignatureFunctionForTransform: ReactRefreshRuntime.createSignatureFunctionForTransform,
      isLikelyComponentType: ReactRefreshRuntime.isLikelyComponentType,
      getFamilyByType: ReactRefreshRuntime.getFamilyByType,
      register: ReactRefreshRuntime.register,
      performReactRefresh: function performReactRefresh() {
        if (ReactRefreshRuntime.hasUnrecoverableErrors()) {
          DevSettings.reload('Fast Refresh - Unrecoverable');
          return;
        }

        ReactRefreshRuntime.performReactRefresh();
        DevSettings.onFastRefresh();
      }
    };
    _$$_REQUIRE.Refresh = Refresh;
  }
},188,[158,189],"node_modules/react-native/Libraries/Core/setUpReactRefresh.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (process.env.NODE_ENV === 'production') {
    module.exports = _$$_REQUIRE(_dependencyMap[0], "./cjs/react-refresh-runtime.production.min.js");
  } else {
    module.exports = _$$_REQUIRE(_dependencyMap[1], "./cjs/react-refresh-runtime.development.js");
  }
},189,[190,191],"node_modules/react-refresh/runtime.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React vundefined
   * react-refresh-runtime.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  throw Error("React Refresh runtime should not be included in the production bundle.");
},190,[],"node_modules/react-refresh/cjs/react-refresh-runtime.production.min.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React vundefined
   * react-refresh-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  if (process.env.NODE_ENV !== "production") {
    (function () {
      'use strict';

      var hasSymbol = typeof Symbol === 'function' && Symbol.for;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
      var allFamiliesByID = new Map();
      var allFamiliesByType = new PossiblyWeakMap();
      var allSignaturesByType = new PossiblyWeakMap();
      var updatedFamiliesByType = new PossiblyWeakMap();
      var pendingUpdates = [];
      var helpersByRendererID = new Map();
      var helpersByRoot = new Map();
      var mountedRoots = new Set();
      var failedRoots = new Map();
      var didSomeRootFailOnMount = false;

      function computeFullKey(signature) {
        if (signature.fullKey !== null) {
          return signature.fullKey;
        }

        var fullKey = signature.ownKey;
        var hooks;

        try {
          hooks = signature.getCustomHooks();
        } catch (err) {
          signature.forceReset = true;
          signature.fullKey = fullKey;
          return fullKey;
        }

        for (var i = 0; i < hooks.length; i++) {
          var hook = hooks[i];

          if (typeof hook !== 'function') {
            signature.forceReset = true;
            signature.fullKey = fullKey;
            return fullKey;
          }

          var nestedHookSignature = allSignaturesByType.get(hook);

          if (nestedHookSignature === undefined) {
            continue;
          }

          var nestedHookKey = computeFullKey(nestedHookSignature);

          if (nestedHookSignature.forceReset) {
            signature.forceReset = true;
          }

          fullKey += '\n---\n' + nestedHookKey;
        }

        signature.fullKey = fullKey;
        return fullKey;
      }

      function haveEqualSignatures(prevType, nextType) {
        var prevSignature = allSignaturesByType.get(prevType);
        var nextSignature = allSignaturesByType.get(nextType);

        if (prevSignature === undefined && nextSignature === undefined) {
          return true;
        }

        if (prevSignature === undefined || nextSignature === undefined) {
          return false;
        }

        if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) {
          return false;
        }

        if (nextSignature.forceReset) {
          return false;
        }

        return true;
      }

      function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
      }

      function canPreserveStateBetween(prevType, nextType) {
        if (isReactClass(prevType) || isReactClass(nextType)) {
          return false;
        }

        if (haveEqualSignatures(prevType, nextType)) {
          return true;
        }

        return false;
      }

      function resolveFamily(type) {
        return updatedFamiliesByType.get(type);
      }

      function performReactRefresh() {
        {
          if (pendingUpdates.length === 0) {
            return null;
          }

          var staleFamilies = new Set();
          var updatedFamilies = new Set();
          var updates = pendingUpdates;
          pendingUpdates = [];
          updates.forEach(function (_ref) {
            var family = _ref[0],
                nextType = _ref[1];
            var prevType = family.current;
            updatedFamiliesByType.set(prevType, family);
            updatedFamiliesByType.set(nextType, family);
            family.current = nextType;

            if (canPreserveStateBetween(prevType, nextType)) {
              updatedFamilies.add(family);
            } else {
              staleFamilies.add(family);
            }
          });
          var update = {
            updatedFamilies: updatedFamilies,
            staleFamilies: staleFamilies
          };
          helpersByRendererID.forEach(function (helpers) {
            helpers.setRefreshHandler(resolveFamily);
          });
          var didError = false;
          var firstError = null;
          failedRoots.forEach(function (element, root) {
            var helpers = helpersByRoot.get(root);

            if (helpers === undefined) {
              throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
            }

            try {
              helpers.scheduleRoot(root, element);
            } catch (err) {
              if (!didError) {
                didError = true;
                firstError = err;
              }
            }
          });
          mountedRoots.forEach(function (root) {
            var helpers = helpersByRoot.get(root);

            if (helpers === undefined) {
              throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
            }

            try {
              helpers.scheduleRefresh(root, update);
            } catch (err) {
              if (!didError) {
                didError = true;
                firstError = err;
              }
            }
          });

          if (didError) {
            throw firstError;
          }

          return update;
        }
      }

      function register(type, id) {
        {
          if (type === null) {
            return;
          }

          if (typeof type !== 'function' && typeof type !== 'object') {
            return;
          }

          if (allFamiliesByType.has(type)) {
            return;
          }

          var family = allFamiliesByID.get(id);

          if (family === undefined) {
            family = {
              current: type
            };
            allFamiliesByID.set(id, family);
          } else {
            pendingUpdates.push([family, type]);
          }

          allFamiliesByType.set(type, family);

          if (typeof type === 'object' && type !== null) {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                register(type.render, id + '$render');
                break;

              case REACT_MEMO_TYPE:
                register(type.type, id + '$type');
                break;
            }
          }
        }
      }

      function setSignature(type, key) {
        var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
        {
          allSignaturesByType.set(type, {
            forceReset: forceReset,
            ownKey: key,
            fullKey: null,
            getCustomHooks: getCustomHooks || function () {
              return [];
            }
          });
        }
      }

      function collectCustomHooksForSignature(type) {
        {
          var signature = allSignaturesByType.get(type);

          if (signature !== undefined) {
            computeFullKey(signature);
          }
        }
      }

      function getFamilyByID(id) {
        {
          return allFamiliesByID.get(id);
        }
      }

      function getFamilyByType(type) {
        {
          return allFamiliesByType.get(type);
        }
      }

      function findAffectedHostInstances(families) {
        {
          var affectedInstances = new Set();
          mountedRoots.forEach(function (root) {
            var helpers = helpersByRoot.get(root);

            if (helpers === undefined) {
              throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
            }

            var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
            instancesForRoot.forEach(function (inst) {
              affectedInstances.add(inst);
            });
          });
          return affectedInstances;
        }
      }

      function injectIntoGlobalHook(globalObject) {
        {
          var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;

          if (hook === undefined) {
            var nextID = 0;
            globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
              supportsFiber: true,
              inject: function inject(injected) {
                return nextID++;
              },
              onCommitFiberRoot: function onCommitFiberRoot(id, root, maybePriorityLevel, didError) {},
              onCommitFiberUnmount: function onCommitFiberUnmount() {}
            };
          }

          var oldInject = hook.inject;

          hook.inject = function (injected) {
            var id = oldInject.apply(this, arguments);

            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') {
              helpersByRendererID.set(id, injected);
            }

            return id;
          };

          var oldOnCommitFiberRoot = hook.onCommitFiberRoot;

          hook.onCommitFiberRoot = function (id, root, maybePriorityLevel, didError) {
            var helpers = helpersByRendererID.get(id);

            if (helpers === undefined) {
              return;
            }

            helpersByRoot.set(root, helpers);
            var current = root.current;
            var alternate = current.alternate;

            if (alternate !== null) {
              var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
              var isMounted = current.memoizedState != null && current.memoizedState.element != null;

              if (!wasMounted && isMounted) {
                mountedRoots.add(root);
                failedRoots.delete(root);
              } else if (wasMounted && isMounted) {} else if (wasMounted && !isMounted) {
                mountedRoots.delete(root);

                if (didError) {
                  failedRoots.set(root, alternate.memoizedState.element);
                } else {
                  helpersByRoot.delete(root);
                }
              } else if (!wasMounted && !isMounted) {
                if (didError && !failedRoots.has(root)) {
                  didSomeRootFailOnMount = true;
                }
              }
            } else {
              mountedRoots.add(root);
            }

            return oldOnCommitFiberRoot.apply(this, arguments);
          };
        }
      }

      function hasUnrecoverableErrors() {
        return didSomeRootFailOnMount;
      }

      function _getMountedRootCount() {
        {
          return mountedRoots.size;
        }
      }

      function createSignatureFunctionForTransform() {
        {
          var status = 'needsSignature';
          var savedType;
          var hasCustomHooks;
          return function (type, key, forceReset, getCustomHooks) {
            switch (status) {
              case 'needsSignature':
                if (type !== undefined) {
                  savedType = type;
                  hasCustomHooks = typeof getCustomHooks === 'function';
                  setSignature(type, key, forceReset, getCustomHooks);
                  status = 'needsCustomHooks';
                }

                break;

              case 'needsCustomHooks':
                if (hasCustomHooks) {
                  collectCustomHooksForSignature(savedType);
                }

                status = 'resolved';
                break;

              case 'resolved':
                break;
            }

            return type;
          };
        }
      }

      function isLikelyComponentType(type) {
        {
          switch (typeof type) {
            case 'function':
              {
                if (type.prototype != null) {
                  if (type.prototype.isReactComponent) {
                    return true;
                  }

                  var ownNames = Object.getOwnPropertyNames(type.prototype);

                  if (ownNames.length > 1 || ownNames[0] !== 'constructor') {
                    return false;
                  }

                  if (type.prototype.__proto__ !== Object.prototype) {
                    return false;
                  }
                }

                var name = type.name || type.displayName;
                return typeof name === 'string' && /^[A-Z]/.test(name);
              }

            case 'object':
              {
                if (type != null) {
                  switch (type.$$typeof) {
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_MEMO_TYPE:
                      return true;

                    default:
                      return false;
                  }
                }

                return false;
              }

            default:
              {
                return false;
              }
          }
        }
      }

      var ReactFreshRuntime = Object.freeze({
        performReactRefresh: performReactRefresh,
        register: register,
        setSignature: setSignature,
        collectCustomHooksForSignature: collectCustomHooksForSignature,
        getFamilyByID: getFamilyByID,
        getFamilyByType: getFamilyByType,
        findAffectedHostInstances: findAffectedHostInstances,
        injectIntoGlobalHook: injectIntoGlobalHook,
        hasUnrecoverableErrors: hasUnrecoverableErrors,
        _getMountedRootCount: _getMountedRootCount,
        createSignatureFunctionForTransform: createSignatureFunctionForTransform,
        isLikelyComponentType: isLikelyComponentType
      });
      var runtime = ReactFreshRuntime.default || ReactFreshRuntime;
      module.exports = runtime;
    })();
  }
},191,[],"node_modules/react-refresh/cjs/react-refresh-runtime.development.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (process.env.NODE_ENV === 'production') {
    module.exports = _$$_REQUIRE(_dependencyMap[0], "./cjs/scheduler.production.min.js");
  } else {
    module.exports = _$$_REQUIRE(_dependencyMap[1], "./cjs/scheduler.development.js");
  }
},192,[193,194],"node_modules/scheduler/index.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v0.19.1
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  var _f, g, h, k, l;

  if ("undefined" === typeof window || "function" !== typeof MessageChannel) {
    var p = null,
        q = null,
        t = function t() {
      if (null !== p) try {
        var a = exports.unstable_now();
        p(!0, a);
        p = null;
      } catch (b) {
        throw setTimeout(t, 0), b;
      }
    },
        u = Date.now();

    exports.unstable_now = function () {
      return Date.now() - u;
    };

    _f = function f(a) {
      null !== p ? setTimeout(_f, 0, a) : (p = a, setTimeout(t, 0));
    };

    g = function g(a, b) {
      q = setTimeout(a, b);
    };

    h = function h() {
      clearTimeout(q);
    };

    k = function k() {
      return !1;
    };

    l = exports.unstable_forceFrameRate = function () {};
  } else {
    var w = window.performance,
        x = window.Date,
        y = window.setTimeout,
        z = window.clearTimeout;

    if ("undefined" !== typeof console) {
      var A = window.cancelAnimationFrame;
      "function" !== typeof window.requestAnimationFrame && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
      "function" !== typeof A && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
    }

    if ("object" === typeof w && "function" === typeof w.now) exports.unstable_now = function () {
      return w.now();
    };else {
      var B = x.now();

      exports.unstable_now = function () {
        return x.now() - B;
      };
    }
    var C = !1,
        D = null,
        E = -1,
        F = 5,
        G = 0;

    k = function k() {
      return exports.unstable_now() >= G;
    };

    l = function l() {};

    exports.unstable_forceFrameRate = function (a) {
      0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported") : F = 0 < a ? Math.floor(1E3 / a) : 5;
    };

    var H = new MessageChannel(),
        I = H.port2;

    H.port1.onmessage = function () {
      if (null !== D) {
        var a = exports.unstable_now();
        G = a + F;

        try {
          D(!0, a) ? I.postMessage(null) : (C = !1, D = null);
        } catch (b) {
          throw I.postMessage(null), b;
        }
      } else C = !1;
    };

    _f = function _f(a) {
      D = a;
      C || (C = !0, I.postMessage(null));
    };

    g = function g(a, b) {
      E = y(function () {
        a(exports.unstable_now());
      }, b);
    };

    h = function h() {
      z(E);
      E = -1;
    };
  }

  function J(a, b) {
    var c = a.length;
    a.push(b);

    a: for (;;) {
      var d = c - 1 >>> 1,
          e = a[d];
      if (void 0 !== e && 0 < K(e, b)) a[d] = b, a[c] = e, c = d;else break a;
    }
  }

  function L(a) {
    a = a[0];
    return void 0 === a ? null : a;
  }

  function M(a) {
    var b = a[0];

    if (void 0 !== b) {
      var c = a.pop();

      if (c !== b) {
        a[0] = c;

        a: for (var d = 0, e = a.length; d < e;) {
          var m = 2 * (d + 1) - 1,
              n = a[m],
              v = m + 1,
              r = a[v];
          if (void 0 !== n && 0 > K(n, c)) void 0 !== r && 0 > K(r, n) ? (a[d] = r, a[v] = c, d = v) : (a[d] = n, a[m] = c, d = m);else if (void 0 !== r && 0 > K(r, c)) a[d] = r, a[v] = c, d = v;else break a;
        }
      }

      return b;
    }

    return null;
  }

  function K(a, b) {
    var c = a.sortIndex - b.sortIndex;
    return 0 !== c ? c : a.id - b.id;
  }

  var N = [],
      O = [],
      P = 1,
      Q = null,
      R = 3,
      S = !1,
      T = !1,
      U = !1;

  function V(a) {
    for (var b = L(O); null !== b;) {
      if (null === b.callback) M(O);else if (b.startTime <= a) M(O), b.sortIndex = b.expirationTime, J(N, b);else break;
      b = L(O);
    }
  }

  function W(a) {
    U = !1;
    V(a);
    if (!T) if (null !== L(N)) T = !0, _f(X);else {
      var b = L(O);
      null !== b && g(W, b.startTime - a);
    }
  }

  function X(a, b) {
    T = !1;
    U && (U = !1, h());
    S = !0;
    var c = R;

    try {
      V(b);

      for (Q = L(N); null !== Q && (!(Q.expirationTime > b) || a && !k());) {
        var d = Q.callback;

        if (null !== d) {
          Q.callback = null;
          R = Q.priorityLevel;
          var e = d(Q.expirationTime <= b);
          b = exports.unstable_now();
          "function" === typeof e ? Q.callback = e : Q === L(N) && M(N);
          V(b);
        } else M(N);

        Q = L(N);
      }

      if (null !== Q) var m = !0;else {
        var n = L(O);
        null !== n && g(W, n.startTime - b);
        m = !1;
      }
      return m;
    } finally {
      Q = null, R = c, S = !1;
    }
  }

  function Y(a) {
    switch (a) {
      case 1:
        return -1;

      case 2:
        return 250;

      case 5:
        return 1073741823;

      case 4:
        return 1E4;

      default:
        return 5E3;
    }
  }

  var Z = l;
  exports.unstable_IdlePriority = 5;
  exports.unstable_ImmediatePriority = 1;
  exports.unstable_LowPriority = 4;
  exports.unstable_NormalPriority = 3;
  exports.unstable_Profiling = null;
  exports.unstable_UserBlockingPriority = 2;

  exports.unstable_cancelCallback = function (a) {
    a.callback = null;
  };

  exports.unstable_continueExecution = function () {
    T || S || (T = !0, _f(X));
  };

  exports.unstable_getCurrentPriorityLevel = function () {
    return R;
  };

  exports.unstable_getFirstCallbackNode = function () {
    return L(N);
  };

  exports.unstable_next = function (a) {
    switch (R) {
      case 1:
      case 2:
      case 3:
        var b = 3;
        break;

      default:
        b = R;
    }

    var c = R;
    R = b;

    try {
      return a();
    } finally {
      R = c;
    }
  };

  exports.unstable_pauseExecution = function () {};

  exports.unstable_requestPaint = Z;

  exports.unstable_runWithPriority = function (a, b) {
    switch (a) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;

      default:
        a = 3;
    }

    var c = R;
    R = a;

    try {
      return b();
    } finally {
      R = c;
    }
  };

  exports.unstable_scheduleCallback = function (a, b, c) {
    var d = exports.unstable_now();

    if ("object" === typeof c && null !== c) {
      var e = c.delay;
      e = "number" === typeof e && 0 < e ? d + e : d;
      c = "number" === typeof c.timeout ? c.timeout : Y(a);
    } else c = Y(a), e = d;

    c = e + c;
    a = {
      id: P++,
      callback: b,
      priorityLevel: a,
      startTime: e,
      expirationTime: c,
      sortIndex: -1
    };
    e > d ? (a.sortIndex = e, J(O, a), null === L(N) && a === L(O) && (U ? h() : U = !0, g(W, e - d))) : (a.sortIndex = c, J(N, a), T || S || (T = !0, _f(X)));
    return a;
  };

  exports.unstable_shouldYield = function () {
    var a = exports.unstable_now();
    V(a);
    var b = L(N);
    return b !== Q && null !== Q && null !== b && null !== b.callback && b.startTime <= a && b.expirationTime < Q.expirationTime || k();
  };

  exports.unstable_wrapCallback = function (a) {
    var b = R;
    return function () {
      var c = R;
      R = b;

      try {
        return a.apply(this, arguments);
      } finally {
        R = c;
      }
    };
  };
},193,[],"node_modules/scheduler/cjs/scheduler.production.min.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v0.19.1
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  if (process.env.NODE_ENV !== "production") {
    (function () {
      'use strict';

      var enableSchedulerDebugging = false;
      var enableProfiling = true;

      var _requestHostCallback;

      var requestHostTimeout;
      var cancelHostTimeout;
      var shouldYieldToHost;
      var requestPaint;

      if (typeof window === 'undefined' || typeof MessageChannel !== 'function') {
        var _callback = null;
        var _timeoutID = null;

        var _flushCallback = function _flushCallback() {
          if (_callback !== null) {
            try {
              var currentTime = exports.unstable_now();
              var hasRemainingTime = true;

              _callback(hasRemainingTime, currentTime);

              _callback = null;
            } catch (e) {
              setTimeout(_flushCallback, 0);
              throw e;
            }
          }
        };

        var initialTime = Date.now();

        exports.unstable_now = function () {
          return Date.now() - initialTime;
        };

        _requestHostCallback = function requestHostCallback(cb) {
          if (_callback !== null) {
            setTimeout(_requestHostCallback, 0, cb);
          } else {
            _callback = cb;
            setTimeout(_flushCallback, 0);
          }
        };

        requestHostTimeout = function requestHostTimeout(cb, ms) {
          _timeoutID = setTimeout(cb, ms);
        };

        cancelHostTimeout = function cancelHostTimeout() {
          clearTimeout(_timeoutID);
        };

        shouldYieldToHost = function shouldYieldToHost() {
          return false;
        };

        requestPaint = exports.unstable_forceFrameRate = function () {};
      } else {
        var performance = window.performance;
        var _Date = window.Date;
        var _setTimeout = window.setTimeout;
        var _clearTimeout = window.clearTimeout;

        if (typeof console !== 'undefined') {
          var requestAnimationFrame = window.requestAnimationFrame;
          var cancelAnimationFrame = window.cancelAnimationFrame;

          if (typeof requestAnimationFrame !== 'function') {
            console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
          }

          if (typeof cancelAnimationFrame !== 'function') {
            console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
          }
        }

        if (typeof performance === 'object' && typeof performance.now === 'function') {
          exports.unstable_now = function () {
            return performance.now();
          };
        } else {
          var _initialTime = _Date.now();

          exports.unstable_now = function () {
            return _Date.now() - _initialTime;
          };
        }

        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var yieldInterval = 5;
        var deadline = 0;
        {
          shouldYieldToHost = function shouldYieldToHost() {
            return exports.unstable_now() >= deadline;
          };

          requestPaint = function requestPaint() {};
        }

        exports.unstable_forceFrameRate = function (fps) {
          if (fps < 0 || fps > 125) {
            console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');
            return;
          }

          if (fps > 0) {
            yieldInterval = Math.floor(1000 / fps);
          } else {
            yieldInterval = 5;
          }
        };

        var performWorkUntilDeadline = function performWorkUntilDeadline() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now();
            deadline = currentTime + yieldInterval;
            var hasTimeRemaining = true;

            try {
              var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

              if (!hasMoreWork) {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              } else {
                port.postMessage(null);
              }
            } catch (error) {
              port.postMessage(null);
              throw error;
            }
          } else {
            isMessageLoopRunning = false;
          }
        };

        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;

        _requestHostCallback = function _requestHostCallback(callback) {
          scheduledHostCallback = callback;

          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            port.postMessage(null);
          }
        };

        requestHostTimeout = function requestHostTimeout(callback, ms) {
          taskTimeoutID = _setTimeout(function () {
            callback(exports.unstable_now());
          }, ms);
        };

        cancelHostTimeout = function cancelHostTimeout() {
          _clearTimeout(taskTimeoutID);

          taskTimeoutID = -1;
        };
      }

      function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
      }

      function peek(heap) {
        var first = heap[0];
        return first === undefined ? null : first;
      }

      function pop(heap) {
        var first = heap[0];

        if (first !== undefined) {
          var last = heap.pop();

          if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
          }

          return first;
        } else {
          return null;
        }
      }

      function siftUp(heap, node, i) {
        var index = i;

        while (true) {
          var parentIndex = index - 1 >>> 1;
          var parent = heap[parentIndex];

          if (parent !== undefined && compare(parent, node) > 0) {
            heap[parentIndex] = node;
            heap[index] = parent;
            index = parentIndex;
          } else {
            return;
          }
        }
      }

      function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;

        while (index < length) {
          var leftIndex = (index + 1) * 2 - 1;
          var left = heap[leftIndex];
          var rightIndex = leftIndex + 1;
          var right = heap[rightIndex];

          if (left !== undefined && compare(left, node) < 0) {
            if (right !== undefined && compare(right, left) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              heap[index] = left;
              heap[leftIndex] = node;
              index = leftIndex;
            }
          } else if (right !== undefined && compare(right, node) < 0) {
            heap[index] = right;
            heap[rightIndex] = node;
            index = rightIndex;
          } else {
            return;
          }
        }
      }

      function compare(a, b) {
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
      }

      var NoPriority = 0;
      var ImmediatePriority = 1;
      var UserBlockingPriority = 2;
      var NormalPriority = 3;
      var LowPriority = 4;
      var IdlePriority = 5;
      var runIdCounter = 0;
      var mainThreadIdCounter = 0;
      var profilingStateSize = 4;
      var sharedProfilingBuffer = typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null;
      var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : [];
      var PRIORITY = 0;
      var CURRENT_TASK_ID = 1;
      var CURRENT_RUN_ID = 2;
      var QUEUE_SIZE = 3;
      {
        profilingState[PRIORITY] = NoPriority;
        profilingState[QUEUE_SIZE] = 0;
        profilingState[CURRENT_TASK_ID] = 0;
      }
      var INITIAL_EVENT_LOG_SIZE = 131072;
      var MAX_EVENT_LOG_SIZE = 524288;
      var eventLogSize = 0;
      var eventLogBuffer = null;
      var eventLog = null;
      var eventLogIndex = 0;
      var TaskStartEvent = 1;
      var TaskCompleteEvent = 2;
      var TaskErrorEvent = 3;
      var TaskCancelEvent = 4;
      var TaskRunEvent = 5;
      var TaskYieldEvent = 6;
      var SchedulerSuspendEvent = 7;
      var SchedulerResumeEvent = 8;

      function logEvent(entries) {
        if (eventLog !== null) {
          var offset = eventLogIndex;
          eventLogIndex += entries.length;

          if (eventLogIndex + 1 > eventLogSize) {
            eventLogSize *= 2;

            if (eventLogSize > MAX_EVENT_LOG_SIZE) {
              console['error']("Scheduler Profiling: Event log exceeded maximum size. Don't " + 'forget to call `stopLoggingProfilingEvents()`.');
              stopLoggingProfilingEvents();
              return;
            }

            var newEventLog = new Int32Array(eventLogSize * 4);
            newEventLog.set(eventLog);
            eventLogBuffer = newEventLog.buffer;
            eventLog = newEventLog;
          }

          eventLog.set(entries, offset);
        }
      }

      function startLoggingProfilingEvents() {
        eventLogSize = INITIAL_EVENT_LOG_SIZE;
        eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
        eventLog = new Int32Array(eventLogBuffer);
        eventLogIndex = 0;
      }

      function stopLoggingProfilingEvents() {
        var buffer = eventLogBuffer;
        eventLogSize = 0;
        eventLogBuffer = null;
        eventLog = null;
        eventLogIndex = 0;
        return buffer;
      }

      function markTaskStart(task, ms) {
        {
          profilingState[QUEUE_SIZE]++;

          if (eventLog !== null) {
            logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);
          }
        }
      }

      function markTaskCompleted(task, ms) {
        {
          profilingState[PRIORITY] = NoPriority;
          profilingState[CURRENT_TASK_ID] = 0;
          profilingState[QUEUE_SIZE]--;

          if (eventLog !== null) {
            logEvent([TaskCompleteEvent, ms * 1000, task.id]);
          }
        }
      }

      function markTaskCanceled(task, ms) {
        {
          profilingState[QUEUE_SIZE]--;

          if (eventLog !== null) {
            logEvent([TaskCancelEvent, ms * 1000, task.id]);
          }
        }
      }

      function markTaskErrored(task, ms) {
        {
          profilingState[PRIORITY] = NoPriority;
          profilingState[CURRENT_TASK_ID] = 0;
          profilingState[QUEUE_SIZE]--;

          if (eventLog !== null) {
            logEvent([TaskErrorEvent, ms * 1000, task.id]);
          }
        }
      }

      function markTaskRun(task, ms) {
        {
          runIdCounter++;
          profilingState[PRIORITY] = task.priorityLevel;
          profilingState[CURRENT_TASK_ID] = task.id;
          profilingState[CURRENT_RUN_ID] = runIdCounter;

          if (eventLog !== null) {
            logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);
          }
        }
      }

      function markTaskYield(task, ms) {
        {
          profilingState[PRIORITY] = NoPriority;
          profilingState[CURRENT_TASK_ID] = 0;
          profilingState[CURRENT_RUN_ID] = 0;

          if (eventLog !== null) {
            logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);
          }
        }
      }

      function markSchedulerSuspended(ms) {
        {
          mainThreadIdCounter++;

          if (eventLog !== null) {
            logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);
          }
        }
      }

      function markSchedulerUnsuspended(ms) {
        {
          if (eventLog !== null) {
            logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);
          }
        }
      }

      var maxSigned31BitInt = 1073741823;
      var IMMEDIATE_PRIORITY_TIMEOUT = -1;
      var USER_BLOCKING_PRIORITY = 250;
      var NORMAL_PRIORITY_TIMEOUT = 5000;
      var LOW_PRIORITY_TIMEOUT = 10000;
      var IDLE_PRIORITY = maxSigned31BitInt;
      var taskQueue = [];
      var timerQueue = [];
      var taskIdCounter = 1;
      var currentTask = null;
      var currentPriorityLevel = NormalPriority;
      var isPerformingWork = false;
      var isHostCallbackScheduled = false;
      var isHostTimeoutScheduled = false;

      function advanceTimers(currentTime) {
        var timer = peek(timerQueue);

        while (timer !== null) {
          if (timer.callback === null) {
            pop(timerQueue);
          } else if (timer.startTime <= currentTime) {
            pop(timerQueue);
            timer.sortIndex = timer.expirationTime;
            push(taskQueue, timer);
            {
              markTaskStart(timer, currentTime);
              timer.isQueued = true;
            }
          } else {
            return;
          }

          timer = peek(timerQueue);
        }
      }

      function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);

        if (!isHostCallbackScheduled) {
          if (peek(taskQueue) !== null) {
            isHostCallbackScheduled = true;

            _requestHostCallback(flushWork);
          } else {
            var firstTimer = peek(timerQueue);

            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
          }
        }
      }

      function flushWork(hasTimeRemaining, initialTime) {
        {
          markSchedulerUnsuspended(initialTime);
        }
        isHostCallbackScheduled = false;

        if (isHostTimeoutScheduled) {
          isHostTimeoutScheduled = false;
          cancelHostTimeout();
        }

        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;

        try {
          if (enableProfiling) {
            try {
              return workLoop(hasTimeRemaining, initialTime);
            } catch (error) {
              if (currentTask !== null) {
                var currentTime = exports.unstable_now();
                markTaskErrored(currentTask, currentTime);
                currentTask.isQueued = false;
              }

              throw error;
            }
          } else {
            return workLoop(hasTimeRemaining, initialTime);
          }
        } finally {
          currentTask = null;
          currentPriorityLevel = previousPriorityLevel;
          isPerformingWork = false;
          {
            var _currentTime = exports.unstable_now();

            markSchedulerSuspended(_currentTime);
          }
        }
      }

      function workLoop(hasTimeRemaining, initialTime) {
        var currentTime = initialTime;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);

        while (currentTask !== null && !enableSchedulerDebugging) {
          if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
            break;
          }

          var callback = currentTask.callback;

          if (callback !== null) {
            currentTask.callback = null;
            currentPriorityLevel = currentTask.priorityLevel;
            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
            markTaskRun(currentTask, currentTime);
            var continuationCallback = callback(didUserCallbackTimeout);
            currentTime = exports.unstable_now();

            if (typeof continuationCallback === 'function') {
              currentTask.callback = continuationCallback;
              markTaskYield(currentTask, currentTime);
            } else {
              {
                markTaskCompleted(currentTask, currentTime);
                currentTask.isQueued = false;
              }

              if (currentTask === peek(taskQueue)) {
                pop(taskQueue);
              }
            }

            advanceTimers(currentTime);
          } else {
            pop(taskQueue);
          }

          currentTask = peek(taskQueue);
        }

        if (currentTask !== null) {
          return true;
        } else {
          var firstTimer = peek(timerQueue);

          if (firstTimer !== null) {
            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }

          return false;
        }
      }

      function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch (priorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
          case LowPriority:
          case IdlePriority:
            break;

          default:
            priorityLevel = NormalPriority;
        }

        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;

        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }

      function unstable_next(eventHandler) {
        var priorityLevel;

        switch (currentPriorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
            priorityLevel = NormalPriority;
            break;

          default:
            priorityLevel = currentPriorityLevel;
            break;
        }

        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;

        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }

      function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function () {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;

          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      }

      function timeoutForPriorityLevel(priorityLevel) {
        switch (priorityLevel) {
          case ImmediatePriority:
            return IMMEDIATE_PRIORITY_TIMEOUT;

          case UserBlockingPriority:
            return USER_BLOCKING_PRIORITY;

          case IdlePriority:
            return IDLE_PRIORITY;

          case LowPriority:
            return LOW_PRIORITY_TIMEOUT;

          case NormalPriority:
          default:
            return NORMAL_PRIORITY_TIMEOUT;
        }
      }

      function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;
        var timeout;

        if (typeof options === 'object' && options !== null) {
          var delay = options.delay;

          if (typeof delay === 'number' && delay > 0) {
            startTime = currentTime + delay;
          } else {
            startTime = currentTime;
          }

          timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);
        } else {
          timeout = timeoutForPriorityLevel(priorityLevel);
          startTime = currentTime;
        }

        var expirationTime = startTime + timeout;
        var newTask = {
          id: taskIdCounter++,
          callback: callback,
          priorityLevel: priorityLevel,
          startTime: startTime,
          expirationTime: expirationTime,
          sortIndex: -1
        };
        {
          newTask.isQueued = false;
        }

        if (startTime > currentTime) {
          newTask.sortIndex = startTime;
          push(timerQueue, newTask);

          if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
            if (isHostTimeoutScheduled) {
              cancelHostTimeout();
            } else {
              isHostTimeoutScheduled = true;
            }

            requestHostTimeout(handleTimeout, startTime - currentTime);
          }
        } else {
          newTask.sortIndex = expirationTime;
          push(taskQueue, newTask);
          {
            markTaskStart(newTask, currentTime);
            newTask.isQueued = true;
          }

          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;

            _requestHostCallback(flushWork);
          }
        }

        return newTask;
      }

      function unstable_pauseExecution() {}

      function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
          isHostCallbackScheduled = true;

          _requestHostCallback(flushWork);
        }
      }

      function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
      }

      function unstable_cancelCallback(task) {
        {
          if (task.isQueued) {
            var currentTime = exports.unstable_now();
            markTaskCanceled(task, currentTime);
            task.isQueued = false;
          }
        }
        task.callback = null;
      }

      function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
      }

      function unstable_shouldYield() {
        var currentTime = exports.unstable_now();
        advanceTimers(currentTime);
        var firstTask = peek(taskQueue);
        return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
      }

      var unstable_requestPaint = requestPaint;
      var unstable_Profiling = {
        startLoggingProfilingEvents: startLoggingProfilingEvents,
        stopLoggingProfilingEvents: stopLoggingProfilingEvents,
        sharedProfilingBuffer: sharedProfilingBuffer
      };
      exports.unstable_IdlePriority = IdlePriority;
      exports.unstable_ImmediatePriority = ImmediatePriority;
      exports.unstable_LowPriority = LowPriority;
      exports.unstable_NormalPriority = NormalPriority;
      exports.unstable_Profiling = unstable_Profiling;
      exports.unstable_UserBlockingPriority = UserBlockingPriority;
      exports.unstable_cancelCallback = unstable_cancelCallback;
      exports.unstable_continueExecution = unstable_continueExecution;
      exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
      exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
      exports.unstable_next = unstable_next;
      exports.unstable_pauseExecution = unstable_pauseExecution;
      exports.unstable_requestPaint = unstable_requestPaint;
      exports.unstable_runWithPriority = unstable_runWithPriority;
      exports.unstable_scheduleCallback = unstable_scheduleCallback;
      exports.unstable_shouldYield = unstable_shouldYield;
      exports.unstable_wrapCallback = unstable_wrapCallback;
    })();
  }
},194,[],"node_modules/scheduler/cjs/scheduler.development.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (process.env.NODE_ENV === 'production') {
    module.exports = _$$_REQUIRE(_dependencyMap[0], "./cjs/scheduler-tracing.production.min.js");
  } else {
    module.exports = _$$_REQUIRE(_dependencyMap[1], "./cjs/scheduler-tracing.development.js");
  }
},195,[196,197],"node_modules/scheduler/tracing.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v0.19.1
   * scheduler-tracing.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  var b = 0;
  exports.__interactionsRef = null;
  exports.__subscriberRef = null;

  exports.unstable_clear = function (a) {
    return a();
  };

  exports.unstable_getCurrent = function () {
    return null;
  };

  exports.unstable_getThreadID = function () {
    return ++b;
  };

  exports.unstable_subscribe = function () {};

  exports.unstable_trace = function (a, d, c) {
    return c();
  };

  exports.unstable_unsubscribe = function () {};

  exports.unstable_wrap = function (a) {
    return a;
  };
},196,[],"node_modules/scheduler/cjs/scheduler-tracing.production.min.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v0.19.1
   * scheduler-tracing.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  if (process.env.NODE_ENV !== "production") {
    (function () {
      'use strict';

      var DEFAULT_THREAD_ID = 0;
      var interactionIDCounter = 0;
      var threadIDCounter = 0;
      exports.__interactionsRef = null;
      exports.__subscriberRef = null;
      {
        exports.__interactionsRef = {
          current: new Set()
        };
        exports.__subscriberRef = {
          current: null
        };
      }

      function unstable_clear(callback) {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = new Set();

        try {
          return callback();
        } finally {
          exports.__interactionsRef.current = prevInteractions;
        }
      }

      function unstable_getCurrent() {
        {
          return exports.__interactionsRef.current;
        }
      }

      function unstable_getThreadID() {
        return ++threadIDCounter;
      }

      function unstable_trace(name, timestamp, callback) {
        var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
        var interaction = {
          __count: 1,
          id: interactionIDCounter++,
          name: name,
          timestamp: timestamp
        };
        var prevInteractions = exports.__interactionsRef.current;
        var interactions = new Set(prevInteractions);
        interactions.add(interaction);
        exports.__interactionsRef.current = interactions;
        var subscriber = exports.__subscriberRef.current;
        var returnValue;

        try {
          if (subscriber !== null) {
            subscriber.onInteractionTraced(interaction);
          }
        } finally {
          try {
            if (subscriber !== null) {
              subscriber.onWorkStarted(interactions, threadID);
            }
          } finally {
            try {
              returnValue = callback();
            } finally {
              exports.__interactionsRef.current = prevInteractions;

              try {
                if (subscriber !== null) {
                  subscriber.onWorkStopped(interactions, threadID);
                }
              } finally {
                interaction.__count--;

                if (subscriber !== null && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              }
            }
          }
        }

        return returnValue;
      }

      function unstable_wrap(callback) {
        var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
        var wrappedInteractions = exports.__interactionsRef.current;
        var subscriber = exports.__subscriberRef.current;

        if (subscriber !== null) {
          subscriber.onWorkScheduled(wrappedInteractions, threadID);
        }

        wrappedInteractions.forEach(function (interaction) {
          interaction.__count++;
        });
        var hasRun = false;

        function wrapped() {
          var prevInteractions = exports.__interactionsRef.current;
          exports.__interactionsRef.current = wrappedInteractions;
          subscriber = exports.__subscriberRef.current;

          try {
            var returnValue;

            try {
              if (subscriber !== null) {
                subscriber.onWorkStarted(wrappedInteractions, threadID);
              }
            } finally {
              try {
                returnValue = callback.apply(undefined, arguments);
              } finally {
                exports.__interactionsRef.current = prevInteractions;

                if (subscriber !== null) {
                  subscriber.onWorkStopped(wrappedInteractions, threadID);
                }
              }
            }

            return returnValue;
          } finally {
            if (!hasRun) {
              hasRun = true;
              wrappedInteractions.forEach(function (interaction) {
                interaction.__count--;

                if (subscriber !== null && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              });
            }
          }
        }

        wrapped.cancel = function cancel() {
          subscriber = exports.__subscriberRef.current;

          try {
            if (subscriber !== null) {
              subscriber.onWorkCanceled(wrappedInteractions, threadID);
            }
          } finally {
            wrappedInteractions.forEach(function (interaction) {
              interaction.__count--;

              if (subscriber && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            });
          }
        };

        return wrapped;
      }

      var subscribers = null;
      {
        subscribers = new Set();
      }

      function unstable_subscribe(subscriber) {
        {
          subscribers.add(subscriber);

          if (subscribers.size === 1) {
            exports.__subscriberRef.current = {
              onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
              onInteractionTraced: onInteractionTraced,
              onWorkCanceled: onWorkCanceled,
              onWorkScheduled: onWorkScheduled,
              onWorkStarted: onWorkStarted,
              onWorkStopped: onWorkStopped
            };
          }
        }
      }

      function unstable_unsubscribe(subscriber) {
        {
          subscribers.delete(subscriber);

          if (subscribers.size === 0) {
            exports.__subscriberRef.current = null;
          }
        }
      }

      function onInteractionTraced(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
          try {
            subscriber.onInteractionTraced(interaction);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });

        if (didCatchError) {
          throw caughtError;
        }
      }

      function onInteractionScheduledWorkCompleted(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
          try {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });

        if (didCatchError) {
          throw caughtError;
        }
      }

      function onWorkScheduled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
          try {
            subscriber.onWorkScheduled(interactions, threadID);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });

        if (didCatchError) {
          throw caughtError;
        }
      }

      function onWorkStarted(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
          try {
            subscriber.onWorkStarted(interactions, threadID);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });

        if (didCatchError) {
          throw caughtError;
        }
      }

      function onWorkStopped(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
          try {
            subscriber.onWorkStopped(interactions, threadID);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });

        if (didCatchError) {
          throw caughtError;
        }
      }

      function onWorkCanceled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
          try {
            subscriber.onWorkCanceled(interactions, threadID);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });

        if (didCatchError) {
          throw caughtError;
        }
      }

      exports.unstable_clear = unstable_clear;
      exports.unstable_getCurrent = unstable_getCurrent;
      exports.unstable_getThreadID = unstable_getThreadID;
      exports.unstable_subscribe = unstable_subscribe;
      exports.unstable_trace = unstable_trace;
      exports.unstable_unsubscribe = unstable_unsubscribe;
      exports.unstable_wrap = unstable_wrap;
    })();
  }
},197,[],"node_modules/scheduler/cjs/scheduler-tracing.development.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  _$$_REQUIRE(_dependencyMap[0], "react-native/Libraries/ReactPrivate/ReactNativePrivateInitializeCore");

  var React = _$$_REQUIRE(_dependencyMap[1], "react");

  function getParent(inst) {
    do {
      inst = inst.return;
    } while (inst && 5 !== inst.tag);

    return inst ? inst : null;
  }

  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
      path.push(inst), inst = getParent(inst);
    }

    for (inst = path.length; 0 < inst--;) {
      fn(path[inst], "captured", arg);
    }

    for (inst = 0; inst < path.length; inst++) {
      fn(path[inst], "bubbled", arg);
    }
  }

  function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);

    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this.onError(error);
    }
  }

  var hasError = !1,
      caughtError = null,
      hasRethrowError = !1,
      rethrowError = null,
      reporter = {
    onError: function onError(error) {
      hasError = !0;
      caughtError = error;
    }
  };

  function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    hasError = !1;
    caughtError = null;
    invokeGuardedCallbackImpl.apply(reporter, arguments);
  }

  function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback.apply(this, arguments);

    if (hasError) {
      if (hasError) {
        var error = caughtError;
        hasError = !1;
        caughtError = null;
      } else throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");

      hasRethrowError || (hasRethrowError = !0, rethrowError = error);
    }
  }

  var getFiberCurrentPropsFromNode = null,
      getInstanceFromNode = null,
      getNodeFromInstance = null;

  function executeDispatch(event, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
    event.currentTarget = null;
  }

  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    if (Array.isArray(dispatchListener)) throw Error("executeDirectDispatch(...): Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }

  function getListener(inst, registrationName) {
    var listener = inst.stateNode;
    if (!listener) return null;
    var props = getFiberCurrentPropsFromNode(listener);
    if (!props) return null;
    listener = props[registrationName];

    a: switch (registrationName) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
      case "onMouseEnter":
        (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
        inst = !props;
        break a;

      default:
        inst = !1;
    }

    if (inst) return null;
    if (listener && "function" !== typeof listener) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
    return listener;
  }

  function accumulateInto(current, next) {
    if (null == next) throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
    if (null == current) return next;

    if (Array.isArray(current)) {
      if (Array.isArray(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }

    return Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }

  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }

  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }

  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }

  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;

      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }

  function functionThatReturnsTrue() {
    return !0;
  }

  function functionThatReturnsFalse() {
    return !1;
  }

  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    dispatchConfig = this.constructor.Interface;

    for (var propName in dispatchConfig) {
      dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    }

    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : !1 === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }

  Object.assign(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = !0;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = !1), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = !0), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function persist() {
      this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function destructor() {
      var Interface = this.constructor.Interface,
          propName;

      for (propName in Interface) {
        this[propName] = null;
      }

      this.nativeEvent = this._targetInst = this.dispatchConfig = null;
      this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
      this._dispatchInstances = this._dispatchListeners = null;
    }
  });
  SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function currentTarget() {
      return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };

  SyntheticEvent.extend = function (Interface) {
    function E() {}

    function Class() {
      return Super.apply(this, arguments);
    }

    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();
    Object.assign(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = Object.assign({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };

  addEventPoolingTo(SyntheticEvent);

  function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }

    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }

  function releasePooledEvent(event) {
    if (!(event instanceof this)) throw Error("Trying to release an event instance into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }

  function addEventPoolingTo(EventConstructor) {
    EventConstructor.eventPool = [];
    EventConstructor.getPooled = getPooledEvent;
    EventConstructor.release = releasePooledEvent;
  }

  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function touchHistory() {
      return null;
    }
  });

  function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
  }

  function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
  }

  var startDependencies = ["topTouchStart"],
      moveDependencies = ["topTouchMove"],
      endDependencies = ["topTouchCancel", "topTouchEnd"],
      touchBank = [],
      touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
  };

  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }

  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    if (null == _ref) throw Error("Touch object is missing identifier.");
    return _ref;
  }

  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: !0,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }

  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = !0, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
  }

  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = !1, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
  }

  var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
      if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) {
        if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      }
    },
    touchHistory: touchHistory
  };

  function accumulate(current, next) {
    if (null == next) throw Error("accumulate(...): Accumulated items must not be null or undefined.");
    return null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  var responderInst = null,
      trackedTouchCount = 0;

  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }

  var eventTypes = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      },
      dependencies: startDependencies
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      },
      dependencies: ["topScroll"]
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      },
      dependencies: ["topSelectionChange"]
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      },
      dependencies: moveDependencies
    },
    responderStart: {
      registrationName: "onResponderStart",
      dependencies: startDependencies
    },
    responderMove: {
      registrationName: "onResponderMove",
      dependencies: moveDependencies
    },
    responderEnd: {
      registrationName: "onResponderEnd",
      dependencies: endDependencies
    },
    responderRelease: {
      registrationName: "onResponderRelease",
      dependencies: endDependencies
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest",
      dependencies: []
    },
    responderGrant: {
      registrationName: "onResponderGrant",
      dependencies: []
    },
    responderReject: {
      registrationName: "onResponderReject",
      dependencies: []
    },
    responderTerminate: {
      registrationName: "onResponderTerminate",
      dependencies: []
    }
  },
      ResponderEventPlugin = {
    _getResponder: function _getResponder() {
      return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (isStartish(topLevelType)) trackedTouchCount += 1;else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;else return null;
      ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);

      if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
        var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        if (responderInst) b: {
          var JSCompiler_temp = responderInst;

          for (var depthA = 0, tempA = JSCompiler_temp; tempA; tempA = getParent(tempA)) {
            depthA++;
          }

          tempA = 0;

          for (var tempB = targetInst; tempB; tempB = getParent(tempB)) {
            tempA++;
          }

          for (; 0 < depthA - tempA;) {
            JSCompiler_temp = getParent(JSCompiler_temp), depthA--;
          }

          for (; 0 < tempA - depthA;) {
            targetInst = getParent(targetInst), tempA--;
          }

          for (; depthA--;) {
            if (JSCompiler_temp === targetInst || JSCompiler_temp === targetInst.alternate) break b;
            JSCompiler_temp = getParent(JSCompiler_temp);
            targetInst = getParent(targetInst);
          }

          JSCompiler_temp = null;
        } else JSCompiler_temp = targetInst;
        targetInst = JSCompiler_temp === responderInst;
        JSCompiler_temp = ResponderSyntheticEvent.getPooled(shouldSetEventType, JSCompiler_temp, nativeEvent, nativeEventTarget);
        JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory;
        targetInst ? forEachAccumulated(JSCompiler_temp, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(JSCompiler_temp, accumulateTwoPhaseDispatchesSingle);

        b: {
          shouldSetEventType = JSCompiler_temp._dispatchListeners;
          targetInst = JSCompiler_temp._dispatchInstances;
          if (Array.isArray(shouldSetEventType)) for (depthA = 0; depthA < shouldSetEventType.length && !JSCompiler_temp.isPropagationStopped(); depthA++) {
            if (shouldSetEventType[depthA](JSCompiler_temp, targetInst[depthA])) {
              shouldSetEventType = targetInst[depthA];
              break b;
            }
          } else if (shouldSetEventType && shouldSetEventType(JSCompiler_temp, targetInst)) {
            shouldSetEventType = targetInst;
            break b;
          }
          shouldSetEventType = null;
        }

        JSCompiler_temp._dispatchInstances = null;
        JSCompiler_temp._dispatchListeners = null;
        JSCompiler_temp.isPersistent() || JSCompiler_temp.constructor.release(JSCompiler_temp);
        if (shouldSetEventType && shouldSetEventType !== responderInst) {
          if (JSCompiler_temp = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, shouldSetEventType, nativeEvent, nativeEventTarget), JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp, accumulateDirectDispatchesSingle), targetInst = !0 === executeDirectDispatch(JSCompiler_temp), responderInst) {
            if (depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), depthA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(depthA, accumulateDirectDispatchesSingle), tempA = !depthA._dispatchListeners || executeDirectDispatch(depthA), depthA.isPersistent() || depthA.constructor.release(depthA), tempA) {
              depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
              depthA.touchHistory = ResponderTouchHistoryStore.touchHistory;
              forEachAccumulated(depthA, accumulateDirectDispatchesSingle);
              var JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [JSCompiler_temp, depthA]);
              changeResponder(shouldSetEventType, targetInst);
            } else shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, shouldSetEventType, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
          } else JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, JSCompiler_temp), changeResponder(shouldSetEventType, targetInst);
        } else JSCompiler_temp$jscomp$0 = null;
      } else JSCompiler_temp$jscomp$0 = null;

      shouldSetEventType = responderInst && isStartish(topLevelType);
      JSCompiler_temp = responderInst && isMoveish(topLevelType);
      targetInst = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
      if (shouldSetEventType = shouldSetEventType ? eventTypes.responderStart : JSCompiler_temp ? eventTypes.responderMove : targetInst ? eventTypes.responderEnd : null) shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, responderInst, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
      shouldSetEventType = responderInst && "topTouchCancel" === topLevelType;
      if (topLevelType = responderInst && !shouldSetEventType && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
        if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (JSCompiler_temp = 0; JSCompiler_temp < topLevelType.length; JSCompiler_temp++) {
          if (targetInst = topLevelType[JSCompiler_temp].target, null !== targetInst && void 0 !== targetInst && 0 !== targetInst) {
            depthA = getInstanceFromNode(targetInst);

            b: {
              for (targetInst = responderInst; depthA;) {
                if (targetInst === depthA || targetInst === depthA.alternate) {
                  targetInst = !0;
                  break b;
                }

                depthA = getParent(depthA);
              }

              targetInst = !1;
            }

            if (targetInst) {
              topLevelType = !1;
              break a;
            }
          }
        }
        topLevelType = !0;
      }
      if (topLevelType = shouldSetEventType ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, nativeEvent), changeResponder(null);
      return JSCompiler_temp$jscomp$0;
    },
    GlobalResponderHandler: null,
    injection: {
      injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
        ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
      }
    }
  },
      eventPluginOrder = null,
      namesToPlugins = {};

  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
          pluginIndex = eventPluginOrder.indexOf(pluginName);
      if (!(-1 < pluginIndex)) throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`.");

      if (!plugins[pluginIndex]) {
        if (!pluginModule.extractEvents) throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not.");
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;

        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = void 0;
          var dispatchConfig = pluginIndex[eventName],
              pluginModule$jscomp$0 = pluginModule,
              eventName$jscomp$0 = eventName;
          if (eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0)) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName$jscomp$0 + "`.");
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) {
              phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule$jscomp$0, eventName$jscomp$0);
            }

            JSCompiler_inline_result = !0;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule$jscomp$0, eventName$jscomp$0), JSCompiler_inline_result = !0) : JSCompiler_inline_result = !1;

          if (!JSCompiler_inline_result) throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
        }
      }
    }
  }

  function publishRegistrationName(registrationName, pluginModule) {
    if (registrationNameModules[registrationName]) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`.");
    registrationNameModules[registrationName] = pluginModule;
  }

  var plugins = [],
      eventNameDispatchConfigs = {},
      registrationNameModules = {},
      customBubblingEventTypes = _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").ReactNativeViewConfigRegistry.customBubblingEventTypes,
      customDirectEventTypes = _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").ReactNativeViewConfigRegistry.customDirectEventTypes;

  if (eventPluginOrder) throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
  eventPluginOrder = Array.prototype.slice.call(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  recomputePluginOrdering();
  var injectedNamesToPlugins$jscomp$inline_94 = {
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: {
      eventTypes: {},
      extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (null == targetInst) return null;
        var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType];
        if (!bubbleDispatchConfig && !directDispatchConfig) throw Error('Unsupported top level event type "' + topLevelType + '" dispatched');
        topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        if (bubbleDispatchConfig) forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);else return null;
        return topLevelType;
      }
    }
  },
      isOrderingDirty$jscomp$inline_95 = !1,
      pluginName$jscomp$inline_96;

  for (pluginName$jscomp$inline_96 in injectedNamesToPlugins$jscomp$inline_94) {
    if (injectedNamesToPlugins$jscomp$inline_94.hasOwnProperty(pluginName$jscomp$inline_96)) {
      var pluginModule$jscomp$inline_97 = injectedNamesToPlugins$jscomp$inline_94[pluginName$jscomp$inline_96];

      if (!namesToPlugins.hasOwnProperty(pluginName$jscomp$inline_96) || namesToPlugins[pluginName$jscomp$inline_96] !== pluginModule$jscomp$inline_97) {
        if (namesToPlugins[pluginName$jscomp$inline_96]) throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName$jscomp$inline_96 + "`.");
        namesToPlugins[pluginName$jscomp$inline_96] = pluginModule$jscomp$inline_97;
        isOrderingDirty$jscomp$inline_95 = !0;
      }
    }
  }

  isOrderingDirty$jscomp$inline_95 && recomputePluginOrdering();
  var instanceCache = new Map(),
      instanceProps = new Map();

  function getInstanceFromTag(tag) {
    return instanceCache.get(tag) || null;
  }

  function batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
  }

  var isInsideEventHandler = !1;

  function batchedUpdates(fn, bookkeeping) {
    if (isInsideEventHandler) return fn(bookkeeping);
    isInsideEventHandler = !0;

    try {
      return batchedUpdatesImpl(fn, bookkeeping);
    } finally {
      isInsideEventHandler = !1;
    }
  }

  var eventQueue = null;

  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
          dispatchInstances = e._dispatchInstances;
      if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) {
        executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);
      } else dispatchListeners && executeDispatch(e, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }

  var EMPTY_NATIVE_EVENT = {};

  function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
        inst = getInstanceFromTag(rootNodeID),
        target = null;
    null != inst && (target = inst.stateNode);
    batchedUpdates(function () {
      var events = target;

      for (var events$jscomp$0 = null, i = 0; i < plugins.length; i++) {
        var possiblePlugin = plugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, inst, nativeEvent, events, 1)) && (events$jscomp$0 = accumulateInto(events$jscomp$0, possiblePlugin));
      }

      events = events$jscomp$0;
      null !== events && (eventQueue = accumulateInto(eventQueue, events));
      events = eventQueue;
      eventQueue = null;

      if (events) {
        forEachAccumulated(events, executeDispatchesAndReleaseTopLevel);
        if (eventQueue) throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
        if (hasRethrowError) throw events = rethrowError, hasRethrowError = !1, rethrowError = null, events;
      }
    });
  }

  _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").RCTEventEmitter.register({
    receiveEvent: function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {
      _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
      if ("topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType) {
        var JSCompiler_temp = [];

        for (var i = 0; i < changedIndices.length; i++) {
          var index = changedIndices[i];
          JSCompiler_temp.push(touches[index]);
          touches[index] = null;
        }

        for (i = changedIndices = 0; i < touches.length; i++) {
          index = touches[i], null !== index && (touches[changedIndices++] = index);
        }

        touches.length = changedIndices;
      } else for (JSCompiler_temp = [], i = 0; i < changedIndices.length; i++) {
        JSCompiler_temp.push(touches[changedIndices[i]]);
      }

      for (changedIndices = 0; changedIndices < JSCompiler_temp.length; changedIndices++) {
        i = JSCompiler_temp[changedIndices];
        i.changedTouches = JSCompiler_temp;
        i.touches = touches;
        index = null;
        var target = i.target;
        null === target || void 0 === target || 1 > target || (index = target);

        _receiveRootNodeIDEvent(index, eventTopLevelType, i);
      }
    }
  });

  getFiberCurrentPropsFromNode = function getFiberCurrentPropsFromNode(stateNode) {
    return instanceProps.get(stateNode._nativeTag) || null;
  };

  getInstanceFromNode = getInstanceFromTag;

  getNodeFromInstance = function getNodeFromInstance(inst) {
    inst = inst.stateNode;
    var tag = inst._nativeTag;
    void 0 === tag && (inst = inst.canonical, tag = inst._nativeTag);
    if (!tag) throw Error("All native instances should have a tag.");
    return inst;
  };

  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function onChange(from, to, blockNativeResponder) {
      null !== to ? _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.setJSResponder(to.stateNode._nativeTag, blockNativeResponder) : _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.clearJSResponder();
    }
  });
  var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  ReactSharedInternals.hasOwnProperty("ReactCurrentDispatcher") || (ReactSharedInternals.ReactCurrentDispatcher = {
    current: null
  });
  ReactSharedInternals.hasOwnProperty("ReactCurrentBatchConfig") || (ReactSharedInternals.ReactCurrentBatchConfig = {
    suspense: null
  });
  var hasSymbol = "function" === typeof Symbol && Symbol.for,
      REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103,
      REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106,
      REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107,
      REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108,
      REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114,
      REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109,
      REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110,
      REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111,
      REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112,
      REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113,
      REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120,
      REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115,
      REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116,
      REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121,
      MAYBE_ITERATOR_SYMBOL = "function" === typeof Symbol && Symbol.iterator;

  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }

  function initializeLazyComponentType(lazyComponent) {
    if (-1 === lazyComponent._status) {
      var ctor = lazyComponent._result;
      ctor || (ctor = lazyComponent._ctor);
      ctor = ctor();
      lazyComponent._status = 0;
      lazyComponent._result = ctor;
      ctor.then(function (moduleObject) {
        0 === lazyComponent._status && (moduleObject = moduleObject.default, lazyComponent._status = 1, lazyComponent._result = moduleObject);
      }, function (error) {
        0 === lazyComponent._status && (lazyComponent._status = 2, lazyComponent._result = error);
      });
    }
  }

  function getComponentName(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.displayName || type.name || null;
    if ("string" === typeof type) return type;

    switch (type) {
      case REACT_FRAGMENT_TYPE:
        return "Fragment";

      case REACT_PORTAL_TYPE:
        return "Portal";

      case REACT_PROFILER_TYPE:
        return "Profiler";

      case REACT_STRICT_MODE_TYPE:
        return "StrictMode";

      case REACT_SUSPENSE_TYPE:
        return "Suspense";

      case REACT_SUSPENSE_LIST_TYPE:
        return "SuspenseList";
    }

    if ("object" === typeof type) switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return (type.displayName || "Context") + ".Consumer";

      case REACT_PROVIDER_TYPE:
        return (type._context.displayName || "Context") + ".Provider";

      case REACT_FORWARD_REF_TYPE:
        var innerType = type.render;
        innerType = innerType.displayName || innerType.name || "";
        return type.displayName || ("" !== innerType ? "ForwardRef(" + innerType + ")" : "ForwardRef");

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type.render);

      case REACT_LAZY_TYPE:
        if (type = 1 === type._status ? type._result : null) return getComponentName(type);
    }
    return null;
  }

  function getNearestMountedFiber(fiber) {
    var node = fiber,
        nearestMounted = fiber;
    if (fiber.alternate) for (; node.return;) {
      node = node.return;
    } else {
      fiber = node;

      do {
        node = fiber, 0 !== (node.effectTag & 1026) && (nearestMounted = node.return), fiber = node.return;
      } while (fiber);
    }
    return 3 === node.tag ? nearestMounted : null;
  }

  function assertIsMounted(fiber) {
    if (getNearestMountedFiber(fiber) !== fiber) throw Error("Unable to find node on an unmounted component.");
  }

  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;

    if (!alternate) {
      alternate = getNearestMountedFiber(fiber);
      if (null === alternate) throw Error("Unable to find node on an unmounted component.");
      return alternate !== fiber ? null : fiber;
    }

    for (var a = fiber, b = alternate;;) {
      var parentA = a.return;
      if (null === parentA) break;
      var parentB = parentA.alternate;

      if (null === parentB) {
        b = parentA.return;

        if (null !== b) {
          a = b;
          continue;
        }

        break;
      }

      if (parentA.child === parentB.child) {
        for (parentB = parentA.child; parentB;) {
          if (parentB === a) return assertIsMounted(parentA), fiber;
          if (parentB === b) return assertIsMounted(parentA), alternate;
          parentB = parentB.sibling;
        }

        throw Error("Unable to find node on an unmounted component.");
      }

      if (a.return !== b.return) a = parentA, b = parentB;else {
        for (var didFindChild = !1, _child = parentA.child; _child;) {
          if (_child === a) {
            didFindChild = !0;
            a = parentA;
            b = parentB;
            break;
          }

          if (_child === b) {
            didFindChild = !0;
            b = parentA;
            a = parentB;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          for (_child = parentB.child; _child;) {
            if (_child === a) {
              didFindChild = !0;
              a = parentB;
              b = parentA;
              break;
            }

            if (_child === b) {
              didFindChild = !0;
              b = parentB;
              a = parentA;
              break;
            }

            _child = _child.sibling;
          }

          if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
        }
      }
      if (a.alternate !== b) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }

    if (3 !== a.tag) throw Error("Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
  }

  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child) node.child.return = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node.return || node.return === parent) return null;
          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    return null;
  }

  var emptyObject = {},
      removedKeys = null,
      removedKeyCount = 0,
      deepDifferOptions = {
    unsafelyIgnoreFunctions: !0
  };

  function defaultDiffer(prevProp, nextProp) {
    return "object" !== typeof nextProp || null === nextProp ? !0 : _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").deepDiffer(prevProp, nextProp, deepDifferOptions);
  }

  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) {
      restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && 0 < removedKeyCount) for (i in removedKeys) {
      if (removedKeys[i]) {
        var nextProp = node[i];

        if (void 0 !== nextProp) {
          var attributeConfig = validAttributes[i];

          if (attributeConfig) {
            "function" === typeof nextProp && (nextProp = !0);
            "undefined" === typeof nextProp && (nextProp = null);
            if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
            removedKeys[i] = !1;
            removedKeyCount--;
          }
        }
      }
    }
  }

  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);

    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
          i;

      for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      }

      for (; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      }

      for (; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      }

      return updatePayload;
    }

    return Array.isArray(prevProp) ? diffProperties(updatePayload, _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").flattenStyle(nextProp), validAttributes);
  }

  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);

    for (var i = 0; i < nextProp.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }

    return updatePayload;
  }

  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);

    for (var i = 0; i < prevProp.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }

    return updatePayload;
  }

  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;

    for (propKey in nextProps) {
      if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = !0, "function" === typeof prevProp && (prevProp = !0));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = !1);
        if (updatePayload && void 0 !== updatePayload[propKey]) {
          if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
          }
        } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) defaultDiffer(prevProp, nextProp) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
          if (void 0 === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
      }
    }

    for (var _propKey in prevProps) {
      void 0 === nextProps[_propKey] && (!(attributeConfig = validAttributes[_propKey]) || updatePayload && void 0 !== updatePayload[_propKey] || (prevProp = prevProps[_propKey], void 0 !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[_propKey] = null, removedKeys || (removedKeys = {}), removedKeys[_propKey] || (removedKeys[_propKey] = !0, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    }

    return updatePayload;
  }

  function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
    return function () {
      if (callback && ("boolean" !== typeof context.__isMounted || context.__isMounted)) return callback.apply(context, arguments);
    };
  }

  var ReactNativeFiberHostComponent = function () {
    function ReactNativeFiberHostComponent(tag, viewConfig) {
      this._nativeTag = tag;
      this._children = [];
      this.viewConfig = viewConfig;
    }

    var _proto = ReactNativeFiberHostComponent.prototype;

    _proto.blur = function () {
      _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").TextInputState.blurTextInput(this);
    };

    _proto.focus = function () {
      _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").TextInputState.focusTextInput(this);
    };

    _proto.measure = function (callback) {
      _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.measure(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    _proto.measureInWindow = function (callback) {
      _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.measureInWindow(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    _proto.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      if ("number" === typeof relativeToNativeNode) var relativeNode = relativeToNativeNode;else relativeToNativeNode._nativeTag && (relativeNode = relativeToNativeNode._nativeTag);
      null != relativeNode && _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.measureLayout(this._nativeTag, relativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
    };

    _proto.setNativeProps = function (nativeProps) {
      nativeProps = diffProperties(null, emptyObject, nativeProps, this.viewConfig.validAttributes);
      null != nativeProps && _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, nativeProps);
    };

    return ReactNativeFiberHostComponent;
  }();

  function shim() {
    throw Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue.");
  }

  var getViewConfigForType = _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").ReactNativeViewConfigRegistry.get,
      UPDATE_SIGNAL = {},
      nextReactTag = 3;

  function allocateTag() {
    var tag = nextReactTag;
    1 === tag % 10 && (tag += 2);
    nextReactTag = tag + 2;
    return tag;
  }

  function recursivelyUncacheFiberNode(node) {
    if ("number" === typeof node) instanceCache.delete(node), instanceProps.delete(node);else {
      var tag = node._nativeTag;
      instanceCache.delete(tag);
      instanceProps.delete(tag);

      node._children.forEach(recursivelyUncacheFiberNode);
    }
  }

  function finalizeInitialChildren(parentInstance) {
    if (0 === parentInstance._children.length) return !1;

    var nativeTags = parentInstance._children.map(function (child) {
      return "number" === typeof child ? child : child._nativeTag;
    });

    _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.setChildren(parentInstance._nativeTag, nativeTags);

    return !1;
  }

  var scheduleTimeout = setTimeout,
      cancelTimeout = clearTimeout,
      valueStack = [],
      index = -1;

  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }

  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }

  var emptyContextObject = {},
      contextStackCursor = {
    current: emptyContextObject
  },
      didPerformWorkStackCursor = {
    current: !1
  },
      previousContext = emptyContextObject;

  function getMaskedContext(workInProgress, unmaskedContext) {
    var contextTypes = workInProgress.type.contextTypes;
    if (!contextTypes) return emptyContextObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {},
        key;

    for (key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    instance && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return context;
  }

  function isContextProvider(type) {
    type = type.childContextTypes;
    return null !== type && void 0 !== type;
  }

  function popContext() {
    pop(didPerformWorkStackCursor);
    pop(contextStackCursor);
  }

  function pushTopLevelContextObject(fiber, context, didChange) {
    if (contextStackCursor.current !== emptyContextObject) throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
    push(contextStackCursor, context);
    push(didPerformWorkStackCursor, didChange);
  }

  function processChildContext(fiber, type, parentContext) {
    var instance = fiber.stateNode;
    fiber = type.childContextTypes;
    if ("function" !== typeof instance.getChildContext) return parentContext;
    instance = instance.getChildContext();

    for (var contextKey in instance) {
      if (!(contextKey in fiber)) throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
    }

    return Object.assign({}, parentContext, {}, instance);
  }

  function pushContextProvider(workInProgress) {
    workInProgress = (workInProgress = workInProgress.stateNode) && workInProgress.__reactInternalMemoizedMergedChildContext || emptyContextObject;
    previousContext = contextStackCursor.current;
    push(contextStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current);
    return !0;
  }

  function invalidateContextProvider(workInProgress, type, didChange) {
    var instance = workInProgress.stateNode;
    if (!instance) throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
    didChange ? (workInProgress = processChildContext(workInProgress, type, previousContext), instance.__reactInternalMemoizedMergedChildContext = workInProgress, pop(didPerformWorkStackCursor), pop(contextStackCursor), push(contextStackCursor, workInProgress)) : pop(didPerformWorkStackCursor);
    push(didPerformWorkStackCursor, didChange);
  }

  var fakeCallbackNode = {},
      requestPaint = void 0 !== _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_requestPaint ? _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_requestPaint : function () {},
      syncQueue = null,
      immediateQueueCallbackNode = null,
      isFlushingSyncQueue = !1,
      initialTimeMs = _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_now(),
      now = 1e4 > initialTimeMs ? _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_now : function () {
    return _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_now() - initialTimeMs;
  };

  function getCurrentPriorityLevel() {
    switch (_$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_getCurrentPriorityLevel()) {
      case _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_ImmediatePriority:
        return 99;

      case _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_UserBlockingPriority:
        return 98;

      case _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_NormalPriority:
        return 97;

      case _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_LowPriority:
        return 96;

      case _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_IdlePriority:
        return 95;

      default:
        throw Error("Unknown priority level.");
    }
  }

  function reactPriorityToSchedulerPriority(reactPriorityLevel) {
    switch (reactPriorityLevel) {
      case 99:
        return _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_ImmediatePriority;

      case 98:
        return _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_UserBlockingPriority;

      case 97:
        return _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_NormalPriority;

      case 96:
        return _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_LowPriority;

      case 95:
        return _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_IdlePriority;

      default:
        throw Error("Unknown priority level.");
    }
  }

  function runWithPriority(reactPriorityLevel, fn) {
    reactPriorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
    return _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_runWithPriority(reactPriorityLevel, fn);
  }

  function scheduleCallback(reactPriorityLevel, callback, options) {
    reactPriorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
    return _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_scheduleCallback(reactPriorityLevel, callback, options);
  }

  function scheduleSyncCallback(callback) {
    null === syncQueue ? (syncQueue = [callback], immediateQueueCallbackNode = _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_scheduleCallback(_$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_ImmediatePriority, flushSyncCallbackQueueImpl)) : syncQueue.push(callback);
    return fakeCallbackNode;
  }

  function flushSyncCallbackQueue() {
    if (null !== immediateQueueCallbackNode) {
      var node = immediateQueueCallbackNode;
      immediateQueueCallbackNode = null;

      _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_cancelCallback(node);
    }

    flushSyncCallbackQueueImpl();
  }

  function flushSyncCallbackQueueImpl() {
    if (!isFlushingSyncQueue && null !== syncQueue) {
      isFlushingSyncQueue = !0;
      var i = 0;

      try {
        var queue = syncQueue;
        runWithPriority(99, function () {
          for (; i < queue.length; i++) {
            var callback = queue[i];

            do {
              callback = callback(!0);
            } while (null !== callback);
          }
        });
        syncQueue = null;
      } catch (error) {
        throw null !== syncQueue && (syncQueue = syncQueue.slice(i + 1)), _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_scheduleCallback(_$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_ImmediatePriority, flushSyncCallbackQueue), error;
      } finally {
        isFlushingSyncQueue = !1;
      }
    }
  }

  function is(x, y) {
    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
  }

  var objectIs = "function" === typeof Object.is ? Object.is : is,
      hasOwnProperty = Object.prototype.hasOwnProperty;

  function shallowEqual(objA, objB) {
    if (objectIs(objA, objB)) return !0;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return !1;
    var keysA = Object.keys(objA),
        keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return !1;

    for (keysB = 0; keysB < keysA.length; keysB++) {
      if (!hasOwnProperty.call(objB, keysA[keysB]) || !objectIs(objA[keysA[keysB]], objB[keysA[keysB]])) return !1;
    }

    return !0;
  }

  var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

  function getStackByFiberInDevAndProd(workInProgress) {
    var info = "";

    do {
      a: switch (workInProgress.tag) {
        case 3:
        case 4:
        case 6:
        case 7:
        case 10:
        case 9:
          var JSCompiler_inline_result = "";
          break a;

        default:
          var owner = workInProgress._debugOwner,
              source = workInProgress._debugSource,
              name = getComponentName(workInProgress.type);
          JSCompiler_inline_result = null;
          owner && (JSCompiler_inline_result = getComponentName(owner.type));
          owner = name;
          name = "";
          source ? name = " (at " + source.fileName.replace(BEFORE_SLASH_RE, "") + ":" + source.lineNumber + ")" : JSCompiler_inline_result && (name = " (created by " + JSCompiler_inline_result + ")");
          JSCompiler_inline_result = "\n    in " + (owner || "Unknown") + name;
      }

      info += JSCompiler_inline_result;
      workInProgress = workInProgress.return;
    } while (workInProgress);

    return info;
  }

  function resolveDefaultProps(Component, baseProps) {
    if (Component && Component.defaultProps) {
      baseProps = Object.assign({}, baseProps);
      Component = Component.defaultProps;

      for (var propName in Component) {
        void 0 === baseProps[propName] && (baseProps[propName] = Component[propName]);
      }
    }

    return baseProps;
  }

  var valueCursor = {
    current: null
  },
      currentlyRenderingFiber = null,
      lastContextDependency = null,
      lastContextWithAllBitsObserved = null;

  function resetContextDependencies() {
    lastContextWithAllBitsObserved = lastContextDependency = currentlyRenderingFiber = null;
  }

  function popProvider(providerFiber) {
    var currentValue = valueCursor.current;
    pop(valueCursor);
    providerFiber.type._context._currentValue = currentValue;
  }

  function scheduleWorkOnParentPath(parent, renderExpirationTime) {
    for (; null !== parent;) {
      var alternate = parent.alternate;
      if (parent.childExpirationTime < renderExpirationTime) parent.childExpirationTime = renderExpirationTime, null !== alternate && alternate.childExpirationTime < renderExpirationTime && (alternate.childExpirationTime = renderExpirationTime);else if (null !== alternate && alternate.childExpirationTime < renderExpirationTime) alternate.childExpirationTime = renderExpirationTime;else break;
      parent = parent.return;
    }
  }

  function prepareToReadContext(workInProgress, renderExpirationTime) {
    currentlyRenderingFiber = workInProgress;
    lastContextWithAllBitsObserved = lastContextDependency = null;
    workInProgress = workInProgress.dependencies;
    null !== workInProgress && null !== workInProgress.firstContext && (workInProgress.expirationTime >= renderExpirationTime && (didReceiveUpdate = !0), workInProgress.firstContext = null);
  }

  function readContext(context, observedBits) {
    if (lastContextWithAllBitsObserved !== context && !1 !== observedBits && 0 !== observedBits) {
      if ("number" !== typeof observedBits || 1073741823 === observedBits) lastContextWithAllBitsObserved = context, observedBits = 1073741823;
      observedBits = {
        context: context,
        observedBits: observedBits,
        next: null
      };

      if (null === lastContextDependency) {
        if (null === currentlyRenderingFiber) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        lastContextDependency = observedBits;
        currentlyRenderingFiber.dependencies = {
          expirationTime: 0,
          firstContext: observedBits,
          responders: null
        };
      } else lastContextDependency = lastContextDependency.next = observedBits;
    }

    return context._currentValue;
  }

  var hasForceUpdate = !1;

  function initializeUpdateQueue(fiber) {
    fiber.updateQueue = {
      baseState: fiber.memoizedState,
      baseQueue: null,
      shared: {
        pending: null
      },
      effects: null
    };
  }

  function cloneUpdateQueue(current, workInProgress) {
    current = current.updateQueue;
    workInProgress.updateQueue === current && (workInProgress.updateQueue = {
      baseState: current.baseState,
      baseQueue: current.baseQueue,
      shared: current.shared,
      effects: current.effects
    });
  }

  function createUpdate(expirationTime, suspenseConfig) {
    expirationTime = {
      expirationTime: expirationTime,
      suspenseConfig: suspenseConfig,
      tag: 0,
      payload: null,
      callback: null,
      next: null
    };
    return expirationTime.next = expirationTime;
  }

  function enqueueUpdate(fiber, update) {
    fiber = fiber.updateQueue;

    if (null !== fiber) {
      fiber = fiber.shared;
      var pending = fiber.pending;
      null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
      fiber.pending = update;
    }
  }

  function enqueueCapturedUpdate(workInProgress, update) {
    var current = workInProgress.alternate;
    null !== current && cloneUpdateQueue(current, workInProgress);
    workInProgress = workInProgress.updateQueue;
    current = workInProgress.baseQueue;
    null === current ? (workInProgress.baseQueue = update.next = update, update.next = update) : (update.next = current.next, current.next = update);
  }

  function processUpdateQueue(workInProgress$jscomp$0, props, instance, renderExpirationTime) {
    var queue = workInProgress$jscomp$0.updateQueue;
    hasForceUpdate = !1;
    var baseQueue = queue.baseQueue,
        pendingQueue = queue.shared.pending;

    if (null !== pendingQueue) {
      if (null !== baseQueue) {
        var baseFirst = baseQueue.next;
        baseQueue.next = pendingQueue.next;
        pendingQueue.next = baseFirst;
      }

      baseQueue = pendingQueue;
      queue.shared.pending = null;
      baseFirst = workInProgress$jscomp$0.alternate;
      null !== baseFirst && (baseFirst = baseFirst.updateQueue, null !== baseFirst && (baseFirst.baseQueue = pendingQueue));
    }

    if (null !== baseQueue) {
      baseFirst = baseQueue.next;
      var newState = queue.baseState,
          newExpirationTime = 0,
          newBaseState = null,
          newBaseQueueFirst = null,
          newBaseQueueLast = null;

      if (null !== baseFirst) {
        var update = baseFirst;

        do {
          pendingQueue = update.expirationTime;

          if (pendingQueue < renderExpirationTime) {
            var clone = {
              expirationTime: update.expirationTime,
              suspenseConfig: update.suspenseConfig,
              tag: update.tag,
              payload: update.payload,
              callback: update.callback,
              next: null
            };
            null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = clone, newBaseState = newState) : newBaseQueueLast = newBaseQueueLast.next = clone;
            pendingQueue > newExpirationTime && (newExpirationTime = pendingQueue);
          } else {
            null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
              expirationTime: 1073741823,
              suspenseConfig: update.suspenseConfig,
              tag: update.tag,
              payload: update.payload,
              callback: update.callback,
              next: null
            });
            markRenderEventTimeAndConfig(pendingQueue, update.suspenseConfig);

            a: {
              var workInProgress = workInProgress$jscomp$0,
                  update$jscomp$0 = update;
              pendingQueue = props;
              clone = instance;

              switch (update$jscomp$0.tag) {
                case 1:
                  workInProgress = update$jscomp$0.payload;

                  if ("function" === typeof workInProgress) {
                    newState = workInProgress.call(clone, newState, pendingQueue);
                    break a;
                  }

                  newState = workInProgress;
                  break a;

                case 3:
                  workInProgress.effectTag = workInProgress.effectTag & -4097 | 64;

                case 0:
                  workInProgress = update$jscomp$0.payload;
                  pendingQueue = "function" === typeof workInProgress ? workInProgress.call(clone, newState, pendingQueue) : workInProgress;
                  if (null === pendingQueue || void 0 === pendingQueue) break a;
                  newState = Object.assign({}, newState, pendingQueue);
                  break a;

                case 2:
                  hasForceUpdate = !0;
              }
            }

            null !== update.callback && (workInProgress$jscomp$0.effectTag |= 32, pendingQueue = queue.effects, null === pendingQueue ? queue.effects = [update] : pendingQueue.push(update));
          }

          update = update.next;
          if (null === update || update === baseFirst) if (pendingQueue = queue.shared.pending, null === pendingQueue) break;else update = baseQueue.next = pendingQueue.next, pendingQueue.next = baseFirst, queue.baseQueue = baseQueue = pendingQueue, queue.shared.pending = null;
        } while (1);
      }

      null === newBaseQueueLast ? newBaseState = newState : newBaseQueueLast.next = newBaseQueueFirst;
      queue.baseState = newBaseState;
      queue.baseQueue = newBaseQueueLast;
      markUnprocessedUpdateTime(newExpirationTime);
      workInProgress$jscomp$0.expirationTime = newExpirationTime;
      workInProgress$jscomp$0.memoizedState = newState;
    }
  }

  function commitUpdateQueue(finishedWork, finishedQueue, instance) {
    finishedWork = finishedQueue.effects;
    finishedQueue.effects = null;
    if (null !== finishedWork) for (finishedQueue = 0; finishedQueue < finishedWork.length; finishedQueue++) {
      var effect = finishedWork[finishedQueue],
          callback = effect.callback;

      if (null !== callback) {
        effect.callback = null;
        if ("function" !== typeof callback) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        callback.call(instance);
      }
    }
  }

  var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig,
      emptyRefsObject = new React.Component().refs;

  function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || void 0 === getDerivedStateFromProps ? ctor : Object.assign({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    0 === workInProgress.expirationTime && (workInProgress.updateQueue.baseState = getDerivedStateFromProps);
  }

  var classComponentUpdater = {
    isMounted: function isMounted(component) {
      return (component = component._reactInternalFiber) ? getNearestMountedFiber(component) === component : !1;
    },
    enqueueSetState: function enqueueSetState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTimeForUpdate(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.payload = payload;
      void 0 !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleWork(inst, currentTime);
    },
    enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTimeForUpdate(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.tag = 1;
      suspenseConfig.payload = payload;
      void 0 !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleWork(inst, currentTime);
    },
    enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTimeForUpdate(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.tag = 2;
      void 0 !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleWork(inst, currentTime);
    }
  };

  function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : !0;
  }

  function constructClassInstance(workInProgress, ctor, props) {
    var isLegacyContextConsumer = !1,
        unmaskedContext = emptyContextObject;
    var context = ctor.contextType;
    "object" === typeof context && null !== context ? context = readContext(context) : (unmaskedContext = isContextProvider(ctor) ? previousContext : contextStackCursor.current, isLegacyContextConsumer = ctor.contextTypes, context = (isLegacyContextConsumer = null !== isLegacyContextConsumer && void 0 !== isLegacyContextConsumer) ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject);
    ctor = new ctor(props, context);
    workInProgress.memoizedState = null !== ctor.state && void 0 !== ctor.state ? ctor.state : null;
    ctor.updater = classComponentUpdater;
    workInProgress.stateNode = ctor;
    ctor._reactInternalFiber = workInProgress;
    isLegacyContextConsumer && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return ctor;
  }

  function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }

  function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = emptyRefsObject;
    initializeUpdateQueue(workInProgress);
    var contextType = ctor.contextType;
    "object" === typeof contextType && null !== contextType ? instance.context = readContext(contextType) : (contextType = isContextProvider(ctor) ? previousContext : contextStackCursor.current, instance.context = getMaskedContext(workInProgress, contextType));
    processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
    instance.state = workInProgress.memoizedState;
    contextType = ctor.getDerivedStateFromProps;
    "function" === typeof contextType && (applyDerivedStateFromProps(workInProgress, ctor, contextType, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState);
    "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4);
  }

  var isArray = Array.isArray;

  function coerceRef(returnFiber, current, element) {
    returnFiber = element.ref;

    if (null !== returnFiber && "function" !== typeof returnFiber && "object" !== typeof returnFiber) {
      if (element._owner) {
        element = element._owner;

        if (element) {
          if (1 !== element.tag) throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref");
          var inst = element.stateNode;
        }

        if (!inst) throw Error("Missing owner for string ref " + returnFiber + ". This error is likely caused by a bug in React. Please file an issue.");
        var stringRef = "" + returnFiber;
        if (null !== current && null !== current.ref && "function" === typeof current.ref && current.ref._stringRef === stringRef) return current.ref;

        current = function current(value) {
          var refs = inst.refs;
          refs === emptyRefsObject && (refs = inst.refs = {});
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };

        current._stringRef = stringRef;
        return current;
      }

      if ("string" !== typeof returnFiber) throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
      if (!element._owner) throw Error("Element ref was specified as a string (" + returnFiber + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.");
    }

    return returnFiber;
  }

  function throwOnInvalidObjectType(returnFiber, newChild) {
    if ("textarea" !== returnFiber.type) throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + ").");
  }

  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var last = returnFiber.lastEffect;
        null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        childToDelete.nextEffect = null;
        childToDelete.effectTag = 8;
      }
    }

    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;

      for (; null !== currentFirstChild;) {
        deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return null;
    }

    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) {
        null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return returnFiber;
    }

    function useFiber(fiber, pendingProps) {
      fiber = createWorkInProgress(fiber, pendingProps);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }

    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.effectTag = 2, lastPlacedIndex) : newIndex;
      newFiber.effectTag = 2;
      return lastPlacedIndex;
    }

    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = 2);
      return newFiber;
    }

    function updateTextNode(returnFiber, current, textContent, expirationTime) {
      if (null === current || 6 !== current.tag) return current = createFiberFromText(textContent, returnFiber.mode, expirationTime), current.return = returnFiber, current;
      current = useFiber(current, textContent);
      current.return = returnFiber;
      return current;
    }

    function updateElement(returnFiber, current, element, expirationTime) {
      if (null !== current && current.elementType === element.type) return expirationTime = useFiber(current, element.props), expirationTime.ref = coerceRef(returnFiber, current, element), expirationTime.return = returnFiber, expirationTime;
      expirationTime = createFiberFromTypeAndProps(element.type, element.key, element.props, null, returnFiber.mode, expirationTime);
      expirationTime.ref = coerceRef(returnFiber, current, element);
      expirationTime.return = returnFiber;
      return expirationTime;
    }

    function updatePortal(returnFiber, current, portal, expirationTime) {
      if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) return current = createFiberFromPortal(portal, returnFiber.mode, expirationTime), current.return = returnFiber, current;
      current = useFiber(current, portal.children || []);
      current.return = returnFiber;
      return current;
    }

    function updateFragment(returnFiber, current, fragment, expirationTime, key) {
      if (null === current || 7 !== current.tag) return current = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key), current.return = returnFiber, current;
      current = useFiber(current, fragment);
      current.return = returnFiber;
      return current;
    }

    function createChild(returnFiber, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return expirationTime = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, null, newChild), expirationTime.return = returnFiber, expirationTime;

          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null), newChild.return = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key) : updateElement(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, expirationTime) : null;
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, existingChildren, newChild.props.children, expirationTime, newChild.key) : updateElement(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, expirationTime);
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;

      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) {
          oldFiber = createChild(returnFiber, newChildren[newIdx], expirationTime), null !== oldFiber && (currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
        }

        return resultingFirstChild;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
        nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], expirationTime), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }

    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      if ("function" !== typeof iteratorFn) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      if (null == newChildrenIterable) throw Error("An iterable object provided no iterator.");

      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;

      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) {
          step = createChild(returnFiber, step.value, expirationTime), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        }

        return iteratorFn;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) {
        step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, expirationTime), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }

    return function (returnFiber, currentFirstChild, newChild, expirationTime) {
      var isUnkeyedTopLevelFragment = "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key;
      isUnkeyedTopLevelFragment && (newChild = newChild.props.children);
      var isObject = "object" === typeof newChild && null !== newChild;
      if (isObject) switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          a: {
            isObject = newChild.key;

            for (isUnkeyedTopLevelFragment = currentFirstChild; null !== isUnkeyedTopLevelFragment;) {
              if (isUnkeyedTopLevelFragment.key === isObject) {
                switch (isUnkeyedTopLevelFragment.tag) {
                  case 7:
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment.sibling);
                      currentFirstChild = useFiber(isUnkeyedTopLevelFragment, newChild.props.children);
                      currentFirstChild.return = returnFiber;
                      returnFiber = currentFirstChild;
                      break a;
                    }

                    break;

                  default:
                    if (isUnkeyedTopLevelFragment.elementType === newChild.type) {
                      deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment.sibling);
                      currentFirstChild = useFiber(isUnkeyedTopLevelFragment, newChild.props);
                      currentFirstChild.ref = coerceRef(returnFiber, isUnkeyedTopLevelFragment, newChild);
                      currentFirstChild.return = returnFiber;
                      returnFiber = currentFirstChild;
                      break a;
                    }

                }

                deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment);
                break;
              } else deleteChild(returnFiber, isUnkeyedTopLevelFragment);

              isUnkeyedTopLevelFragment = isUnkeyedTopLevelFragment.sibling;
            }

            newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.mode, expirationTime, newChild.key), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (expirationTime = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, currentFirstChild, newChild), expirationTime.return = returnFiber, returnFiber = expirationTime);
          }

          return placeSingleChild(returnFiber);

        case REACT_PORTAL_TYPE:
          a: {
            for (isUnkeyedTopLevelFragment = newChild.key; null !== currentFirstChild;) {
              if (currentFirstChild.key === isUnkeyedTopLevelFragment) {
                if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  currentFirstChild = useFiber(currentFirstChild, newChild.children || []);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, currentFirstChild);
                  break;
                }
              } else deleteChild(returnFiber, currentFirstChild);
              currentFirstChild = currentFirstChild.sibling;
            }

            currentFirstChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
            currentFirstChild.return = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);
      }
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.mode, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild), placeSingleChild(returnFiber);
      if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
      if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
      isObject && throwOnInvalidObjectType(returnFiber, newChild);
      if ("undefined" === typeof newChild && !isUnkeyedTopLevelFragment) switch (returnFiber.tag) {
        case 1:
        case 0:
          throw returnFiber = returnFiber.type, Error((returnFiber.displayName || returnFiber.name || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
      }
      return deleteRemainingChildren(returnFiber, currentFirstChild);
    };
  }

  var reconcileChildFibers = ChildReconciler(!0),
      mountChildFibers = ChildReconciler(!1),
      NO_CONTEXT = {},
      contextStackCursor$1 = {
    current: NO_CONTEXT
  },
      contextFiberStackCursor = {
    current: NO_CONTEXT
  },
      rootInstanceStackCursor = {
    current: NO_CONTEXT
  };

  function requiredContext(c) {
    if (c === NO_CONTEXT) throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
    return c;
  }

  function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance);
    push(contextFiberStackCursor, fiber);
    push(contextStackCursor$1, NO_CONTEXT);
    pop(contextStackCursor$1);
    push(contextStackCursor$1, {
      isInAParentText: !1
    });
  }

  function popHostContainer() {
    pop(contextStackCursor$1);
    pop(contextFiberStackCursor);
    pop(rootInstanceStackCursor);
  }

  function pushHostContext(fiber) {
    requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor$1.current);
    var nextContext = fiber.type;
    nextContext = "AndroidTextInput" === nextContext || "RCTMultilineTextInputView" === nextContext || "RCTSinglelineTextInputView" === nextContext || "RCTText" === nextContext || "RCTVirtualText" === nextContext;
    nextContext = context.isInAParentText !== nextContext ? {
      isInAParentText: nextContext
    } : context;
    context !== nextContext && (push(contextFiberStackCursor, fiber), push(contextStackCursor$1, nextContext));
  }

  function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1), pop(contextFiberStackCursor));
  }

  var suspenseStackCursor = {
    current: 0
  };

  function findFirstSuspended(row) {
    for (var node = row; null !== node;) {
      if (13 === node.tag) {
        var state = node.memoizedState;
        if (null !== state && (null === state.dehydrated || shim() || shim())) return node;
      } else if (19 === node.tag && void 0 !== node.memoizedProps.revealOrder) {
        if (0 !== (node.effectTag & 64)) return node;
      } else if (null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === row) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === row) return null;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }

    return null;
  }

  function createDeprecatedResponderListener(responder, props) {
    return {
      responder: responder,
      props: props
    };
  }

  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,
      ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig,
      renderExpirationTime = 0,
      currentlyRenderingFiber$1 = null,
      currentHook = null,
      workInProgressHook = null,
      didScheduleRenderPhaseUpdate = !1;

  function throwInvalidHookError() {
    throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
  }

  function areHookInputsEqual(nextDeps, prevDeps) {
    if (null === prevDeps) return !1;

    for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
      if (!objectIs(nextDeps[i], prevDeps[i])) return !1;
    }

    return !0;
  }

  function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderExpirationTime) {
    renderExpirationTime = nextRenderExpirationTime;
    currentlyRenderingFiber$1 = workInProgress;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.expirationTime = 0;
    ReactCurrentDispatcher.current = null === current || null === current.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
    current = Component(props, secondArg);

    if (workInProgress.expirationTime === renderExpirationTime) {
      nextRenderExpirationTime = 0;

      do {
        workInProgress.expirationTime = 0;
        if (!(25 > nextRenderExpirationTime)) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        nextRenderExpirationTime += 1;
        workInProgressHook = currentHook = null;
        workInProgress.updateQueue = null;
        ReactCurrentDispatcher.current = HooksDispatcherOnRerender;
        current = Component(props, secondArg);
      } while (workInProgress.expirationTime === renderExpirationTime);
    }

    ReactCurrentDispatcher.current = ContextOnlyDispatcher;
    workInProgress = null !== currentHook && null !== currentHook.next;
    renderExpirationTime = 0;
    workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
    didScheduleRenderPhaseUpdate = !1;
    if (workInProgress) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
    return current;
  }

  function mountWorkInProgressHook() {
    var hook = {
      memoizedState: null,
      baseState: null,
      baseQueue: null,
      queue: null,
      next: null
    };
    null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
    return workInProgressHook;
  }

  function updateWorkInProgressHook() {
    if (null === currentHook) {
      var nextCurrentHook = currentlyRenderingFiber$1.alternate;
      nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
    } else nextCurrentHook = currentHook.next;

    var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState : workInProgressHook.next;
    if (null !== nextWorkInProgressHook) workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;else {
      if (null === nextCurrentHook) throw Error("Rendered more hooks than during the previous render.");
      currentHook = nextCurrentHook;
      nextCurrentHook = {
        memoizedState: currentHook.memoizedState,
        baseState: currentHook.baseState,
        baseQueue: currentHook.baseQueue,
        queue: currentHook.queue,
        next: null
      };
      null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
    }
    return workInProgressHook;
  }

  function basicStateReducer(state, action) {
    return "function" === typeof action ? action(state) : action;
  }

  function updateReducer(reducer) {
    var hook = updateWorkInProgressHook(),
        queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
    queue.lastRenderedReducer = reducer;
    var current = currentHook,
        baseQueue = current.baseQueue,
        pendingQueue = queue.pending;

    if (null !== pendingQueue) {
      if (null !== baseQueue) {
        var baseFirst = baseQueue.next;
        baseQueue.next = pendingQueue.next;
        pendingQueue.next = baseFirst;
      }

      current.baseQueue = baseQueue = pendingQueue;
      queue.pending = null;
    }

    if (null !== baseQueue) {
      baseQueue = baseQueue.next;
      current = current.baseState;
      var newBaseQueueLast = baseFirst = pendingQueue = null,
          update = baseQueue;

      do {
        var updateExpirationTime = update.expirationTime;

        if (updateExpirationTime < renderExpirationTime) {
          var clone = {
            expirationTime: update.expirationTime,
            suspenseConfig: update.suspenseConfig,
            action: update.action,
            eagerReducer: update.eagerReducer,
            eagerState: update.eagerState,
            next: null
          };
          null === newBaseQueueLast ? (baseFirst = newBaseQueueLast = clone, pendingQueue = current) : newBaseQueueLast = newBaseQueueLast.next = clone;
          updateExpirationTime > currentlyRenderingFiber$1.expirationTime && (currentlyRenderingFiber$1.expirationTime = updateExpirationTime, markUnprocessedUpdateTime(updateExpirationTime));
        } else null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
          expirationTime: 1073741823,
          suspenseConfig: update.suspenseConfig,
          action: update.action,
          eagerReducer: update.eagerReducer,
          eagerState: update.eagerState,
          next: null
        }), markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig), current = update.eagerReducer === reducer ? update.eagerState : reducer(current, update.action);

        update = update.next;
      } while (null !== update && update !== baseQueue);

      null === newBaseQueueLast ? pendingQueue = current : newBaseQueueLast.next = baseFirst;
      objectIs(current, hook.memoizedState) || (didReceiveUpdate = !0);
      hook.memoizedState = current;
      hook.baseState = pendingQueue;
      hook.baseQueue = newBaseQueueLast;
      queue.lastRenderedState = current;
    }

    return [hook.memoizedState, queue.dispatch];
  }

  function rerenderReducer(reducer) {
    var hook = updateWorkInProgressHook(),
        queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
    queue.lastRenderedReducer = reducer;
    var dispatch = queue.dispatch,
        lastRenderPhaseUpdate = queue.pending,
        newState = hook.memoizedState;

    if (null !== lastRenderPhaseUpdate) {
      queue.pending = null;
      var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;

      do {
        newState = reducer(newState, update.action), update = update.next;
      } while (update !== lastRenderPhaseUpdate);

      objectIs(newState, hook.memoizedState) || (didReceiveUpdate = !0);
      hook.memoizedState = newState;
      null === hook.baseQueue && (hook.baseState = newState);
      queue.lastRenderedState = newState;
    }

    return [newState, dispatch];
  }

  function mountState(initialState) {
    var hook = mountWorkInProgressHook();
    "function" === typeof initialState && (initialState = initialState());
    hook.memoizedState = hook.baseState = initialState;
    initialState = hook.queue = {
      pending: null,
      dispatch: null,
      lastRenderedReducer: basicStateReducer,
      lastRenderedState: initialState
    };
    initialState = initialState.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, initialState);
    return [hook.memoizedState, initialState];
  }

  function pushEffect(tag, create, destroy, deps) {
    tag = {
      tag: tag,
      create: create,
      destroy: destroy,
      deps: deps,
      next: null
    };
    create = currentlyRenderingFiber$1.updateQueue;
    null === create ? (create = {
      lastEffect: null
    }, currentlyRenderingFiber$1.updateQueue = create, create.lastEffect = tag.next = tag) : (destroy = create.lastEffect, null === destroy ? create.lastEffect = tag.next = tag : (deps = destroy.next, destroy.next = tag, tag.next = deps, create.lastEffect = tag));
    return tag;
  }

  function updateRef() {
    return updateWorkInProgressHook().memoizedState;
  }

  function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
    var hook = mountWorkInProgressHook();
    currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
    hook.memoizedState = pushEffect(1 | hookEffectTag, create, void 0, void 0 === deps ? null : deps);
  }

  function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
    var hook = updateWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var destroy = void 0;

    if (null !== currentHook) {
      var prevEffect = currentHook.memoizedState;
      destroy = prevEffect.destroy;

      if (null !== deps && areHookInputsEqual(deps, prevEffect.deps)) {
        pushEffect(hookEffectTag, create, destroy, deps);
        return;
      }
    }

    currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
    hook.memoizedState = pushEffect(1 | hookEffectTag, create, destroy, deps);
  }

  function mountEffect(create, deps) {
    return mountEffectImpl(516, 4, create, deps);
  }

  function updateEffect(create, deps) {
    return updateEffectImpl(516, 4, create, deps);
  }

  function updateLayoutEffect(create, deps) {
    return updateEffectImpl(4, 2, create, deps);
  }

  function imperativeHandleEffect(create, ref) {
    if ("function" === typeof ref) return create = create(), ref(create), function () {
      ref(null);
    };
    if (null !== ref && void 0 !== ref) return create = create(), ref.current = create, function () {
      ref.current = null;
    };
  }

  function updateImperativeHandle(ref, create, deps) {
    deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
    return updateEffectImpl(4, 2, imperativeHandleEffect.bind(null, create, ref), deps);
  }

  function mountDebugValue() {}

  function mountCallback(callback, deps) {
    mountWorkInProgressHook().memoizedState = [callback, void 0 === deps ? null : deps];
    return callback;
  }

  function updateCallback(callback, deps) {
    var hook = updateWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    hook.memoizedState = [callback, deps];
    return callback;
  }

  function updateMemo(nextCreate, deps) {
    var hook = updateWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    nextCreate = nextCreate();
    hook.memoizedState = [nextCreate, deps];
    return nextCreate;
  }

  function startTransition(setPending, config, callback) {
    var priorityLevel = getCurrentPriorityLevel();
    runWithPriority(98 > priorityLevel ? 98 : priorityLevel, function () {
      setPending(!0);
    });
    runWithPriority(97 < priorityLevel ? 97 : priorityLevel, function () {
      var previousConfig = ReactCurrentBatchConfig$1.suspense;
      ReactCurrentBatchConfig$1.suspense = void 0 === config ? null : config;

      try {
        setPending(!1), callback();
      } finally {
        ReactCurrentBatchConfig$1.suspense = previousConfig;
      }
    });
  }

  function dispatchAction(fiber, queue, action) {
    var currentTime = requestCurrentTimeForUpdate(),
        suspenseConfig = ReactCurrentBatchConfig.suspense;
    currentTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    suspenseConfig = {
      expirationTime: currentTime,
      suspenseConfig: suspenseConfig,
      action: action,
      eagerReducer: null,
      eagerState: null,
      next: null
    };
    var pending = queue.pending;
    null === pending ? suspenseConfig.next = suspenseConfig : (suspenseConfig.next = pending.next, pending.next = suspenseConfig);
    queue.pending = suspenseConfig;
    pending = fiber.alternate;
    if (fiber === currentlyRenderingFiber$1 || null !== pending && pending === currentlyRenderingFiber$1) didScheduleRenderPhaseUpdate = !0, suspenseConfig.expirationTime = renderExpirationTime, currentlyRenderingFiber$1.expirationTime = renderExpirationTime;else {
      if (0 === fiber.expirationTime && (null === pending || 0 === pending.expirationTime) && (pending = queue.lastRenderedReducer, null !== pending)) try {
        var currentState = queue.lastRenderedState,
            eagerState = pending(currentState, action);
        suspenseConfig.eagerReducer = pending;
        suspenseConfig.eagerState = eagerState;
        if (objectIs(eagerState, currentState)) return;
      } catch (error) {} finally {}
      scheduleWork(fiber, currentTime);
    }
  }

  function updateEventListener() {}

  var ContextOnlyDispatcher = {
    readContext: readContext,
    useCallback: throwInvalidHookError,
    useContext: throwInvalidHookError,
    useEffect: throwInvalidHookError,
    useImperativeHandle: throwInvalidHookError,
    useLayoutEffect: throwInvalidHookError,
    useMemo: throwInvalidHookError,
    useReducer: throwInvalidHookError,
    useRef: throwInvalidHookError,
    useState: throwInvalidHookError,
    useDebugValue: throwInvalidHookError,
    useResponder: throwInvalidHookError,
    useDeferredValue: throwInvalidHookError,
    useTransition: throwInvalidHookError,
    useEvent: throwInvalidHookError
  },
      HooksDispatcherOnMount = {
    readContext: readContext,
    useCallback: mountCallback,
    useContext: readContext,
    useEffect: mountEffect,
    useImperativeHandle: function useImperativeHandle(ref, create, deps) {
      deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
      return mountEffectImpl(4, 2, imperativeHandleEffect.bind(null, create, ref), deps);
    },
    useLayoutEffect: function useLayoutEffect(create, deps) {
      return mountEffectImpl(4, 2, create, deps);
    },
    useMemo: function useMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      deps = void 0 === deps ? null : deps;
      nextCreate = nextCreate();
      hook.memoizedState = [nextCreate, deps];
      return nextCreate;
    },
    useReducer: function useReducer(reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      initialArg = void 0 !== init ? init(initialArg) : initialArg;
      hook.memoizedState = hook.baseState = initialArg;
      reducer = hook.queue = {
        pending: null,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialArg
      };
      reducer = reducer.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, reducer);
      return [hook.memoizedState, reducer];
    },
    useRef: function useRef(initialValue) {
      var hook = mountWorkInProgressHook();
      initialValue = {
        current: initialValue
      };
      return hook.memoizedState = initialValue;
    },
    useState: mountState,
    useDebugValue: mountDebugValue,
    useResponder: createDeprecatedResponderListener,
    useDeferredValue: function useDeferredValue(value, config) {
      var _mountState = mountState(value),
          prevValue = _mountState[0],
          setValue = _mountState[1];

      mountEffect(function () {
        var previousConfig = ReactCurrentBatchConfig$1.suspense;
        ReactCurrentBatchConfig$1.suspense = void 0 === config ? null : config;

        try {
          setValue(value);
        } finally {
          ReactCurrentBatchConfig$1.suspense = previousConfig;
        }
      }, [value, config]);
      return prevValue;
    },
    useTransition: function useTransition(config) {
      var _mountState2 = mountState(!1),
          isPending = _mountState2[0];

      _mountState2 = _mountState2[1];
      return [mountCallback(startTransition.bind(null, _mountState2, config), [_mountState2, config]), isPending];
    },
    useEvent: function useEvent() {}
  },
      HooksDispatcherOnUpdate = {
    readContext: readContext,
    useCallback: updateCallback,
    useContext: readContext,
    useEffect: updateEffect,
    useImperativeHandle: updateImperativeHandle,
    useLayoutEffect: updateLayoutEffect,
    useMemo: updateMemo,
    useReducer: updateReducer,
    useRef: updateRef,
    useState: function useState() {
      return updateReducer(basicStateReducer);
    },
    useDebugValue: mountDebugValue,
    useResponder: createDeprecatedResponderListener,
    useDeferredValue: function useDeferredValue(value, config) {
      var _updateState = updateReducer(basicStateReducer),
          prevValue = _updateState[0],
          setValue = _updateState[1];

      updateEffect(function () {
        var previousConfig = ReactCurrentBatchConfig$1.suspense;
        ReactCurrentBatchConfig$1.suspense = void 0 === config ? null : config;

        try {
          setValue(value);
        } finally {
          ReactCurrentBatchConfig$1.suspense = previousConfig;
        }
      }, [value, config]);
      return prevValue;
    },
    useTransition: function useTransition(config) {
      var _updateState2 = updateReducer(basicStateReducer),
          isPending = _updateState2[0];

      _updateState2 = _updateState2[1];
      return [updateCallback(startTransition.bind(null, _updateState2, config), [_updateState2, config]), isPending];
    },
    useEvent: updateEventListener
  },
      HooksDispatcherOnRerender = {
    readContext: readContext,
    useCallback: updateCallback,
    useContext: readContext,
    useEffect: updateEffect,
    useImperativeHandle: updateImperativeHandle,
    useLayoutEffect: updateLayoutEffect,
    useMemo: updateMemo,
    useReducer: rerenderReducer,
    useRef: updateRef,
    useState: function useState() {
      return rerenderReducer(basicStateReducer);
    },
    useDebugValue: mountDebugValue,
    useResponder: createDeprecatedResponderListener,
    useDeferredValue: function useDeferredValue(value, config) {
      var _rerenderState = rerenderReducer(basicStateReducer),
          prevValue = _rerenderState[0],
          setValue = _rerenderState[1];

      updateEffect(function () {
        var previousConfig = ReactCurrentBatchConfig$1.suspense;
        ReactCurrentBatchConfig$1.suspense = void 0 === config ? null : config;

        try {
          setValue(value);
        } finally {
          ReactCurrentBatchConfig$1.suspense = previousConfig;
        }
      }, [value, config]);
      return prevValue;
    },
    useTransition: function useTransition(config) {
      var _rerenderState2 = rerenderReducer(basicStateReducer),
          isPending = _rerenderState2[0];

      _rerenderState2 = _rerenderState2[1];
      return [updateCallback(startTransition.bind(null, _rerenderState2, config), [_rerenderState2, config]), isPending];
    },
    useEvent: updateEventListener
  },
      ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner,
      didReceiveUpdate = !1;

  function reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime) {
    workInProgress.child = null === current ? mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime) : reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
  }

  function updateForwardRef(current, workInProgress, Component, nextProps, renderExpirationTime) {
    Component = Component.render;
    var ref = workInProgress.ref;
    prepareToReadContext(workInProgress, renderExpirationTime);
    nextProps = renderWithHooks(current, workInProgress, Component, nextProps, ref, renderExpirationTime);
    if (null !== current && !didReceiveUpdate) return workInProgress.updateQueue = current.updateQueue, workInProgress.effectTag &= -517, current.expirationTime <= renderExpirationTime && (current.expirationTime = 0), bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    reconcileChildren(current, workInProgress, nextProps, renderExpirationTime);
    return workInProgress.child;
  }

  function updateMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    if (null === current) {
      var type = Component.type;
      if ("function" === typeof type && !shouldConstruct(type) && void 0 === type.defaultProps && null === Component.compare && void 0 === Component.defaultProps) return workInProgress.tag = 15, workInProgress.type = type, updateSimpleMemoComponent(current, workInProgress, type, nextProps, updateExpirationTime, renderExpirationTime);
      current = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
      current.ref = workInProgress.ref;
      current.return = workInProgress;
      return workInProgress.child = current;
    }

    type = current.child;
    if (updateExpirationTime < renderExpirationTime && (updateExpirationTime = type.memoizedProps, Component = Component.compare, Component = null !== Component ? Component : shallowEqual, Component(updateExpirationTime, nextProps) && current.ref === workInProgress.ref)) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    current = createWorkInProgress(type, nextProps);
    current.ref = workInProgress.ref;
    current.return = workInProgress;
    return workInProgress.child = current;
  }

  function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    return null !== current && shallowEqual(current.memoizedProps, nextProps) && current.ref === workInProgress.ref && (didReceiveUpdate = !1, updateExpirationTime < renderExpirationTime) ? (workInProgress.expirationTime = current.expirationTime, bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime)) : updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime);
  }

  function markRef(current, workInProgress) {
    var ref = workInProgress.ref;
    if (null === current && null !== ref || null !== current && current.ref !== ref) workInProgress.effectTag |= 128;
  }

  function updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
    var context = isContextProvider(Component) ? previousContext : contextStackCursor.current;
    context = getMaskedContext(workInProgress, context);
    prepareToReadContext(workInProgress, renderExpirationTime);
    Component = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);
    if (null !== current && !didReceiveUpdate) return workInProgress.updateQueue = current.updateQueue, workInProgress.effectTag &= -517, current.expirationTime <= renderExpirationTime && (current.expirationTime = 0), bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    reconcileChildren(current, workInProgress, Component, renderExpirationTime);
    return workInProgress.child;
  }

  function updateClassComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
    if (isContextProvider(Component)) {
      var hasContext = !0;
      pushContextProvider(workInProgress);
    } else hasContext = !1;

    prepareToReadContext(workInProgress, renderExpirationTime);
    if (null === workInProgress.stateNode) null !== current && (current.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2), constructClassInstance(workInProgress, Component, nextProps), mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime), nextProps = !0;else if (null === current) {
      var instance = workInProgress.stateNode,
          oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context,
          contextType = Component.contextType;
      "object" === typeof contextType && null !== contextType ? contextType = readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType));
      var getDerivedStateFromProps = Component.getDerivedStateFromProps,
          hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
      hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType);
      hasForceUpdate = !1;
      var oldState = workInProgress.memoizedState;
      instance.state = oldState;
      processUpdateQueue(workInProgress, nextProps, instance, renderExpirationTime);
      oldContext = workInProgress.memoizedState;
      oldProps !== nextProps || oldState !== oldContext || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, oldContext, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4)) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), instance.props = nextProps, instance.state = oldContext, instance.context = contextType, nextProps = oldProps) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), nextProps = !1);
    } else instance = workInProgress.stateNode, cloneUpdateQueue(current, workInProgress), oldProps = workInProgress.memoizedProps, instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps), oldContext = instance.context, contextType = Component.contextType, "object" === typeof contextType && null !== contextType ? contextType = readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType)), getDerivedStateFromProps = Component.getDerivedStateFromProps, (hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate) || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType), hasForceUpdate = !1, oldContext = workInProgress.memoizedState, instance.state = oldContext, processUpdateQueue(workInProgress, nextProps, instance, renderExpirationTime), oldState = workInProgress.memoizedState, oldProps !== nextProps || oldContext !== oldState || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldState = workInProgress.memoizedState), (getDerivedStateFromProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldContext, oldState, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(nextProps, oldState, contextType), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(nextProps, oldState, contextType)), "function" === typeof instance.componentDidUpdate && (workInProgress.effectTag |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.effectTag |= 256)) : ("function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 256), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldState), instance.props = nextProps, instance.state = oldState, instance.context = contextType, nextProps = getDerivedStateFromProps) : ("function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 256), nextProps = !1);
    return finishClassComponent(current, workInProgress, Component, nextProps, hasContext, renderExpirationTime);
  }

  function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
    markRef(current, workInProgress);
    var didCaptureError = 0 !== (workInProgress.effectTag & 64);
    if (!shouldUpdate && !didCaptureError) return hasContext && invalidateContextProvider(workInProgress, Component, !1), bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    shouldUpdate = workInProgress.stateNode;
    ReactCurrentOwner$1.current = workInProgress;
    var nextChildren = didCaptureError && "function" !== typeof Component.getDerivedStateFromError ? null : shouldUpdate.render();
    workInProgress.effectTag |= 1;
    null !== current && didCaptureError ? (workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderExpirationTime), workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime)) : reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
    workInProgress.memoizedState = shouldUpdate.state;
    hasContext && invalidateContextProvider(workInProgress, Component, !0);
    return workInProgress.child;
  }

  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;
    root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, !1);
    pushHostContainer(workInProgress, root.containerInfo);
  }

  var SUSPENDED_MARKER = {
    dehydrated: null,
    retryTime: 0
  };

  function updateSuspenseComponent(current, workInProgress, renderExpirationTime) {
    var mode = workInProgress.mode,
        nextProps = workInProgress.pendingProps,
        suspenseContext = suspenseStackCursor.current,
        nextDidTimeout = !1,
        JSCompiler_temp;
    (JSCompiler_temp = 0 !== (workInProgress.effectTag & 64)) || (JSCompiler_temp = 0 !== (suspenseContext & 2) && (null === current || null !== current.memoizedState));
    JSCompiler_temp ? (nextDidTimeout = !0, workInProgress.effectTag &= -65) : null !== current && null === current.memoizedState || void 0 === nextProps.fallback || !0 === nextProps.unstable_avoidThisFallback || (suspenseContext |= 1);
    push(suspenseStackCursor, suspenseContext & 1);

    if (null === current) {
      if (nextDidTimeout) {
        nextDidTimeout = nextProps.fallback;
        nextProps = createFiberFromFragment(null, mode, 0, null);
        nextProps.return = workInProgress;
        if (0 === (workInProgress.mode & 2)) for (current = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, nextProps.child = current; null !== current;) {
          current.return = nextProps, current = current.sibling;
        }
        renderExpirationTime = createFiberFromFragment(nextDidTimeout, mode, renderExpirationTime, null);
        renderExpirationTime.return = workInProgress;
        nextProps.sibling = renderExpirationTime;
        workInProgress.memoizedState = SUSPENDED_MARKER;
        workInProgress.child = nextProps;
        return renderExpirationTime;
      }

      mode = nextProps.children;
      workInProgress.memoizedState = null;
      return workInProgress.child = mountChildFibers(workInProgress, null, mode, renderExpirationTime);
    }

    if (null !== current.memoizedState) {
      current = current.child;
      mode = current.sibling;

      if (nextDidTimeout) {
        nextProps = nextProps.fallback;
        renderExpirationTime = createWorkInProgress(current, current.pendingProps);
        renderExpirationTime.return = workInProgress;
        if (0 === (workInProgress.mode & 2) && (nextDidTimeout = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, nextDidTimeout !== current.child)) for (renderExpirationTime.child = nextDidTimeout; null !== nextDidTimeout;) {
          nextDidTimeout.return = renderExpirationTime, nextDidTimeout = nextDidTimeout.sibling;
        }
        mode = createWorkInProgress(mode, nextProps);
        mode.return = workInProgress;
        renderExpirationTime.sibling = mode;
        renderExpirationTime.childExpirationTime = 0;
        workInProgress.memoizedState = SUSPENDED_MARKER;
        workInProgress.child = renderExpirationTime;
        return mode;
      }

      renderExpirationTime = reconcileChildFibers(workInProgress, current.child, nextProps.children, renderExpirationTime);
      workInProgress.memoizedState = null;
      return workInProgress.child = renderExpirationTime;
    }

    current = current.child;

    if (nextDidTimeout) {
      nextDidTimeout = nextProps.fallback;
      nextProps = createFiberFromFragment(null, mode, 0, null);
      nextProps.return = workInProgress;
      nextProps.child = current;
      null !== current && (current.return = nextProps);
      if (0 === (workInProgress.mode & 2)) for (current = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, nextProps.child = current; null !== current;) {
        current.return = nextProps, current = current.sibling;
      }
      renderExpirationTime = createFiberFromFragment(nextDidTimeout, mode, renderExpirationTime, null);
      renderExpirationTime.return = workInProgress;
      nextProps.sibling = renderExpirationTime;
      renderExpirationTime.effectTag |= 2;
      nextProps.childExpirationTime = 0;
      workInProgress.memoizedState = SUSPENDED_MARKER;
      workInProgress.child = nextProps;
      return renderExpirationTime;
    }

    workInProgress.memoizedState = null;
    return workInProgress.child = reconcileChildFibers(workInProgress, current, nextProps.children, renderExpirationTime);
  }

  function scheduleWorkOnFiber(fiber, renderExpirationTime) {
    fiber.expirationTime < renderExpirationTime && (fiber.expirationTime = renderExpirationTime);
    var alternate = fiber.alternate;
    null !== alternate && alternate.expirationTime < renderExpirationTime && (alternate.expirationTime = renderExpirationTime);
    scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
  }

  function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
    var renderState = workInProgress.memoizedState;
    null === renderState ? workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      renderingStartTime: 0,
      last: lastContentRow,
      tail: tail,
      tailExpiration: 0,
      tailMode: tailMode,
      lastEffect: lastEffectBeforeRendering
    } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailExpiration = 0, renderState.tailMode = tailMode, renderState.lastEffect = lastEffectBeforeRendering);
  }

  function updateSuspenseListComponent(current, workInProgress, renderExpirationTime) {
    var nextProps = workInProgress.pendingProps,
        revealOrder = nextProps.revealOrder,
        tailMode = nextProps.tail;
    reconcileChildren(current, workInProgress, nextProps.children, renderExpirationTime);
    nextProps = suspenseStackCursor.current;
    if (0 !== (nextProps & 2)) nextProps = nextProps & 1 | 2, workInProgress.effectTag |= 64;else {
      if (null !== current && 0 !== (current.effectTag & 64)) a: for (current = workInProgress.child; null !== current;) {
        if (13 === current.tag) null !== current.memoizedState && scheduleWorkOnFiber(current, renderExpirationTime);else if (19 === current.tag) scheduleWorkOnFiber(current, renderExpirationTime);else if (null !== current.child) {
          current.child.return = current;
          current = current.child;
          continue;
        }
        if (current === workInProgress) break a;

        for (; null === current.sibling;) {
          if (null === current.return || current.return === workInProgress) break a;
          current = current.return;
        }

        current.sibling.return = current.return;
        current = current.sibling;
      }
      nextProps &= 1;
    }
    push(suspenseStackCursor, nextProps);
    if (0 === (workInProgress.mode & 2)) workInProgress.memoizedState = null;else switch (revealOrder) {
      case "forwards":
        renderExpirationTime = workInProgress.child;

        for (revealOrder = null; null !== renderExpirationTime;) {
          current = renderExpirationTime.alternate, null !== current && null === findFirstSuspended(current) && (revealOrder = renderExpirationTime), renderExpirationTime = renderExpirationTime.sibling;
        }

        renderExpirationTime = revealOrder;
        null === renderExpirationTime ? (revealOrder = workInProgress.child, workInProgress.child = null) : (revealOrder = renderExpirationTime.sibling, renderExpirationTime.sibling = null);
        initSuspenseListRenderState(workInProgress, !1, revealOrder, renderExpirationTime, tailMode, workInProgress.lastEffect);
        break;

      case "backwards":
        renderExpirationTime = null;
        revealOrder = workInProgress.child;

        for (workInProgress.child = null; null !== revealOrder;) {
          current = revealOrder.alternate;

          if (null !== current && null === findFirstSuspended(current)) {
            workInProgress.child = revealOrder;
            break;
          }

          current = revealOrder.sibling;
          revealOrder.sibling = renderExpirationTime;
          renderExpirationTime = revealOrder;
          revealOrder = current;
        }

        initSuspenseListRenderState(workInProgress, !0, renderExpirationTime, null, tailMode, workInProgress.lastEffect);
        break;

      case "together":
        initSuspenseListRenderState(workInProgress, !1, null, null, void 0, workInProgress.lastEffect);
        break;

      default:
        workInProgress.memoizedState = null;
    }
    return workInProgress.child;
  }

  function bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime) {
    null !== current && (workInProgress.dependencies = current.dependencies);
    var updateExpirationTime = workInProgress.expirationTime;
    0 !== updateExpirationTime && markUnprocessedUpdateTime(updateExpirationTime);
    if (workInProgress.childExpirationTime < renderExpirationTime) return null;
    if (null !== current && workInProgress.child !== current.child) throw Error("Resuming work not yet implemented.");

    if (null !== workInProgress.child) {
      current = workInProgress.child;
      renderExpirationTime = createWorkInProgress(current, current.pendingProps);
      workInProgress.child = renderExpirationTime;

      for (renderExpirationTime.return = workInProgress; null !== current.sibling;) {
        current = current.sibling, renderExpirationTime = renderExpirationTime.sibling = createWorkInProgress(current, current.pendingProps), renderExpirationTime.return = workInProgress;
      }

      renderExpirationTime.sibling = null;
    }

    return workInProgress.child;
  }

  var appendAllChildren, updateHostContainer, updateHostComponent$1, updateHostText$1;

  appendAllChildren = function appendAllChildren(parent, workInProgress) {
    for (var node = workInProgress.child; null !== node;) {
      if (5 === node.tag || 6 === node.tag) parent._children.push(node.stateNode);else if (4 !== node.tag && null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function updateHostContainer() {};

  updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps) {
    current.memoizedProps !== newProps && (requiredContext(contextStackCursor$1.current), workInProgress.updateQueue = UPDATE_SIGNAL) && (workInProgress.effectTag |= 4);
  };

  updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
    oldText !== newText && (workInProgress.effectTag |= 4);
  };

  function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
    switch (renderState.tailMode) {
      case "hidden":
        hasRenderedATailFallback = renderState.tail;

        for (var lastTailNode = null; null !== hasRenderedATailFallback;) {
          null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
        }

        null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
        break;

      case "collapsed":
        lastTailNode = renderState.tail;

        for (var _lastTailNode = null; null !== lastTailNode;) {
          null !== lastTailNode.alternate && (_lastTailNode = lastTailNode), lastTailNode = lastTailNode.sibling;
        }

        null === _lastTailNode ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : _lastTailNode.sibling = null;
    }
  }

  function completeWork(current, workInProgress, renderExpirationTime) {
    var newProps = workInProgress.pendingProps;

    switch (workInProgress.tag) {
      case 2:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return null;

      case 1:
        return isContextProvider(workInProgress.type) && popContext(), null;

      case 3:
        return popHostContainer(), pop(didPerformWorkStackCursor), pop(contextStackCursor), current = workInProgress.stateNode, current.pendingContext && (current.context = current.pendingContext, current.pendingContext = null), updateHostContainer(workInProgress), null;

      case 5:
        popHostContext(workInProgress);
        var rootContainerInstance = requiredContext(rootInstanceStackCursor.current);
        renderExpirationTime = workInProgress.type;
        if (null !== current && null != workInProgress.stateNode) updateHostComponent$1(current, workInProgress, renderExpirationTime, newProps, rootContainerInstance), current.ref !== workInProgress.ref && (workInProgress.effectTag |= 128);else {
          if (!newProps) {
            if (null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
            return null;
          }

          requiredContext(contextStackCursor$1.current);
          current = allocateTag();
          renderExpirationTime = getViewConfigForType(renderExpirationTime);
          var updatePayload = diffProperties(null, emptyObject, newProps, renderExpirationTime.validAttributes);

          _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.createView(current, renderExpirationTime.uiViewClassName, rootContainerInstance, updatePayload);

          rootContainerInstance = new ReactNativeFiberHostComponent(current, renderExpirationTime, workInProgress);
          instanceCache.set(current, workInProgress);
          instanceProps.set(current, newProps);
          appendAllChildren(rootContainerInstance, workInProgress, !1, !1);
          workInProgress.stateNode = rootContainerInstance;
          finalizeInitialChildren(rootContainerInstance) && (workInProgress.effectTag |= 4);
          null !== workInProgress.ref && (workInProgress.effectTag |= 128);
        }
        return null;

      case 6:
        if (current && null != workInProgress.stateNode) updateHostText$1(current, workInProgress, current.memoizedProps, newProps);else {
          if ("string" !== typeof newProps && null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
          current = requiredContext(rootInstanceStackCursor.current);
          if (!requiredContext(contextStackCursor$1.current).isInAParentText) throw Error("Text strings must be rendered within a <Text> component.");
          rootContainerInstance = allocateTag();

          _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.createView(rootContainerInstance, "RCTRawText", current, {
            text: newProps
          });

          instanceCache.set(rootContainerInstance, workInProgress);
          workInProgress.stateNode = rootContainerInstance;
        }
        return null;

      case 13:
        pop(suspenseStackCursor);
        newProps = workInProgress.memoizedState;
        if (0 !== (workInProgress.effectTag & 64)) return workInProgress.expirationTime = renderExpirationTime, workInProgress;
        newProps = null !== newProps;
        rootContainerInstance = !1;
        null !== current && (renderExpirationTime = current.memoizedState, rootContainerInstance = null !== renderExpirationTime, newProps || null === renderExpirationTime || (renderExpirationTime = current.child.sibling, null !== renderExpirationTime && (updatePayload = workInProgress.firstEffect, null !== updatePayload ? (workInProgress.firstEffect = renderExpirationTime, renderExpirationTime.nextEffect = updatePayload) : (workInProgress.firstEffect = workInProgress.lastEffect = renderExpirationTime, renderExpirationTime.nextEffect = null), renderExpirationTime.effectTag = 8)));
        if (newProps && !rootContainerInstance && 0 !== (workInProgress.mode & 2)) if (null === current && !0 !== workInProgress.memoizedProps.unstable_avoidThisFallback || 0 !== (suspenseStackCursor.current & 1)) workInProgressRootExitStatus === RootIncomplete && (workInProgressRootExitStatus = RootSuspended);else {
          if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) workInProgressRootExitStatus = RootSuspendedWithDelay;
          0 !== workInProgressRootNextUnprocessedUpdateTime && null !== workInProgressRoot && (markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1), markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime));
        }
        if (newProps || rootContainerInstance) workInProgress.effectTag |= 4;
        return null;

      case 4:
        return popHostContainer(), updateHostContainer(workInProgress), null;

      case 10:
        return popProvider(workInProgress), null;

      case 17:
        return isContextProvider(workInProgress.type) && popContext(), null;

      case 19:
        pop(suspenseStackCursor);
        newProps = workInProgress.memoizedState;
        if (null === newProps) return null;
        rootContainerInstance = 0 !== (workInProgress.effectTag & 64);
        updatePayload = newProps.rendering;
        if (null === updatePayload) {
          if (rootContainerInstance) cutOffTailIfNeeded(newProps, !1);else {
            if (workInProgressRootExitStatus !== RootIncomplete || null !== current && 0 !== (current.effectTag & 64)) for (current = workInProgress.child; null !== current;) {
              updatePayload = findFirstSuspended(current);

              if (null !== updatePayload) {
                workInProgress.effectTag |= 64;
                cutOffTailIfNeeded(newProps, !1);
                current = updatePayload.updateQueue;
                null !== current && (workInProgress.updateQueue = current, workInProgress.effectTag |= 4);
                null === newProps.lastEffect && (workInProgress.firstEffect = null);
                workInProgress.lastEffect = newProps.lastEffect;
                current = renderExpirationTime;

                for (newProps = workInProgress.child; null !== newProps;) {
                  rootContainerInstance = newProps, renderExpirationTime = current, rootContainerInstance.effectTag &= 2, rootContainerInstance.nextEffect = null, rootContainerInstance.firstEffect = null, rootContainerInstance.lastEffect = null, updatePayload = rootContainerInstance.alternate, null === updatePayload ? (rootContainerInstance.childExpirationTime = 0, rootContainerInstance.expirationTime = renderExpirationTime, rootContainerInstance.child = null, rootContainerInstance.memoizedProps = null, rootContainerInstance.memoizedState = null, rootContainerInstance.updateQueue = null, rootContainerInstance.dependencies = null) : (rootContainerInstance.childExpirationTime = updatePayload.childExpirationTime, rootContainerInstance.expirationTime = updatePayload.expirationTime, rootContainerInstance.child = updatePayload.child, rootContainerInstance.memoizedProps = updatePayload.memoizedProps, rootContainerInstance.memoizedState = updatePayload.memoizedState, rootContainerInstance.updateQueue = updatePayload.updateQueue, renderExpirationTime = updatePayload.dependencies, rootContainerInstance.dependencies = null === renderExpirationTime ? null : {
                    expirationTime: renderExpirationTime.expirationTime,
                    firstContext: renderExpirationTime.firstContext,
                    responders: renderExpirationTime.responders
                  }), newProps = newProps.sibling;
                }

                push(suspenseStackCursor, suspenseStackCursor.current & 1 | 2);
                return workInProgress.child;
              }

              current = current.sibling;
            }
          }
        } else {
          if (!rootContainerInstance) if (current = findFirstSuspended(updatePayload), null !== current) {
            if (workInProgress.effectTag |= 64, rootContainerInstance = !0, current = current.updateQueue, null !== current && (workInProgress.updateQueue = current, workInProgress.effectTag |= 4), cutOffTailIfNeeded(newProps, !0), null === newProps.tail && "hidden" === newProps.tailMode && !updatePayload.alternate) return workInProgress = workInProgress.lastEffect = newProps.lastEffect, null !== workInProgress && (workInProgress.nextEffect = null), null;
          } else 2 * now() - newProps.renderingStartTime > newProps.tailExpiration && 1 < renderExpirationTime && (workInProgress.effectTag |= 64, rootContainerInstance = !0, cutOffTailIfNeeded(newProps, !1), workInProgress.expirationTime = workInProgress.childExpirationTime = renderExpirationTime - 1);
          newProps.isBackwards ? (updatePayload.sibling = workInProgress.child, workInProgress.child = updatePayload) : (current = newProps.last, null !== current ? current.sibling = updatePayload : workInProgress.child = updatePayload, newProps.last = updatePayload);
        }
        return null !== newProps.tail ? (0 === newProps.tailExpiration && (newProps.tailExpiration = now() + 500), current = newProps.tail, newProps.rendering = current, newProps.tail = current.sibling, newProps.lastEffect = workInProgress.lastEffect, newProps.renderingStartTime = now(), current.sibling = null, workInProgress = suspenseStackCursor.current, push(suspenseStackCursor, rootContainerInstance ? workInProgress & 1 | 2 : workInProgress & 1), current) : null;
    }

    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
  }

  function unwindWork(workInProgress) {
    switch (workInProgress.tag) {
      case 1:
        isContextProvider(workInProgress.type) && popContext();
        var effectTag = workInProgress.effectTag;
        return effectTag & 4096 ? (workInProgress.effectTag = effectTag & -4097 | 64, workInProgress) : null;

      case 3:
        popHostContainer();
        pop(didPerformWorkStackCursor);
        pop(contextStackCursor);
        effectTag = workInProgress.effectTag;
        if (0 !== (effectTag & 64)) throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
        workInProgress.effectTag = effectTag & -4097 | 64;
        return workInProgress;

      case 5:
        return popHostContext(workInProgress), null;

      case 13:
        return pop(suspenseStackCursor), effectTag = workInProgress.effectTag, effectTag & 4096 ? (workInProgress.effectTag = effectTag & -4097 | 64, workInProgress) : null;

      case 19:
        return pop(suspenseStackCursor), null;

      case 4:
        return popHostContainer(), null;

      case 10:
        return popProvider(workInProgress), null;

      default:
        return null;
    }
  }

  function createCapturedValue(value, source) {
    return {
      value: value,
      source: source,
      stack: getStackByFiberInDevAndProd(source)
    };
  }

  if ("function" !== typeof _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").ReactFiberErrorDialog.showErrorDialog) throw Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function.");

  function logCapturedError(capturedError) {
    !1 !== _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").ReactFiberErrorDialog.showErrorDialog(capturedError) && console.error(capturedError.error);
  }

  var PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set;

  function logError(boundary, errorInfo) {
    var source = errorInfo.source,
        stack = errorInfo.stack;
    null === stack && null !== source && (stack = getStackByFiberInDevAndProd(source));
    errorInfo = {
      componentName: null !== source ? getComponentName(source.type) : null,
      componentStack: null !== stack ? stack : "",
      error: errorInfo.value,
      errorBoundary: null,
      errorBoundaryName: null,
      errorBoundaryFound: !1,
      willRetry: !1
    };
    null !== boundary && 1 === boundary.tag && (errorInfo.errorBoundary = boundary.stateNode, errorInfo.errorBoundaryName = getComponentName(boundary.type), errorInfo.errorBoundaryFound = !0, errorInfo.willRetry = !0);

    try {
      logCapturedError(errorInfo);
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }

  function safelyCallComponentWillUnmount(current, instance) {
    try {
      instance.props = current.memoizedProps, instance.state = current.memoizedState, instance.componentWillUnmount();
    } catch (unmountError) {
      captureCommitPhaseError(current, unmountError);
    }
  }

  function safelyDetachRef(current) {
    var ref = current.ref;
    if (null !== ref) if ("function" === typeof ref) try {
      ref(null);
    } catch (refError) {
      captureCommitPhaseError(current, refError);
    } else ref.current = null;
  }

  function commitBeforeMutationLifeCycles(current, finishedWork) {
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 15:
      case 22:
        return;

      case 1:
        if (finishedWork.effectTag & 256 && null !== current) {
          var prevProps = current.memoizedProps,
              prevState = current.memoizedState;
          current = finishedWork.stateNode;
          finishedWork = current.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
          current.__reactInternalSnapshotBeforeUpdate = finishedWork;
        }

        return;

      case 3:
      case 5:
      case 6:
      case 4:
      case 17:
        return;
    }

    throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
  }

  function commitHookEffectListUnmount(tag, finishedWork) {
    finishedWork = finishedWork.updateQueue;
    finishedWork = null !== finishedWork ? finishedWork.lastEffect : null;

    if (null !== finishedWork) {
      var effect = finishedWork = finishedWork.next;

      do {
        if ((effect.tag & tag) === tag) {
          var destroy = effect.destroy;
          effect.destroy = void 0;
          void 0 !== destroy && destroy();
        }

        effect = effect.next;
      } while (effect !== finishedWork);
    }
  }

  function commitHookEffectListMount(tag, finishedWork) {
    finishedWork = finishedWork.updateQueue;
    finishedWork = null !== finishedWork ? finishedWork.lastEffect : null;

    if (null !== finishedWork) {
      var effect = finishedWork = finishedWork.next;

      do {
        if ((effect.tag & tag) === tag) {
          var create = effect.create;
          effect.destroy = create();
        }

        effect = effect.next;
      } while (effect !== finishedWork);
    }
  }

  function commitLifeCycles(finishedRoot, current, finishedWork) {
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 15:
      case 22:
        commitHookEffectListMount(3, finishedWork);
        return;

      case 1:
        finishedRoot = finishedWork.stateNode;
        if (finishedWork.effectTag & 4) if (null === current) finishedRoot.componentDidMount();else {
          var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
          finishedRoot.componentDidUpdate(prevProps, current.memoizedState, finishedRoot.__reactInternalSnapshotBeforeUpdate);
        }
        current = finishedWork.updateQueue;
        null !== current && commitUpdateQueue(finishedWork, current, finishedRoot);
        return;

      case 3:
        current = finishedWork.updateQueue;

        if (null !== current) {
          finishedRoot = null;
          if (null !== finishedWork.child) switch (finishedWork.child.tag) {
            case 5:
              finishedRoot = finishedWork.child.stateNode;
              break;

            case 1:
              finishedRoot = finishedWork.child.stateNode;
          }
          commitUpdateQueue(finishedWork, current, finishedRoot);
        }

        return;

      case 5:
        return;

      case 6:
        return;

      case 4:
        return;

      case 12:
        return;

      case 13:
        return;

      case 19:
      case 17:
      case 20:
      case 21:
        return;
    }

    throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
  }

  function commitUnmount(finishedRoot, current$jscomp$0, renderPriorityLevel) {
    "function" === typeof onCommitFiberUnmount && onCommitFiberUnmount(current$jscomp$0);

    switch (current$jscomp$0.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
      case 22:
        finishedRoot = current$jscomp$0.updateQueue;

        if (null !== finishedRoot && (finishedRoot = finishedRoot.lastEffect, null !== finishedRoot)) {
          var firstEffect = finishedRoot.next;
          runWithPriority(97 < renderPriorityLevel ? 97 : renderPriorityLevel, function () {
            var effect = firstEffect;

            do {
              var _destroy = effect.destroy;

              if (void 0 !== _destroy) {
                var current = current$jscomp$0;

                try {
                  _destroy();
                } catch (error) {
                  captureCommitPhaseError(current, error);
                }
              }

              effect = effect.next;
            } while (effect !== firstEffect);
          });
        }

        break;

      case 1:
        safelyDetachRef(current$jscomp$0);
        renderPriorityLevel = current$jscomp$0.stateNode;
        "function" === typeof renderPriorityLevel.componentWillUnmount && safelyCallComponentWillUnmount(current$jscomp$0, renderPriorityLevel);
        break;

      case 5:
        safelyDetachRef(current$jscomp$0);
        break;

      case 4:
        unmountHostComponents(finishedRoot, current$jscomp$0, renderPriorityLevel);
    }
  }

  function detachFiber(current) {
    var alternate = current.alternate;
    current.return = null;
    current.child = null;
    current.memoizedState = null;
    current.updateQueue = null;
    current.dependencies = null;
    current.alternate = null;
    current.firstEffect = null;
    current.lastEffect = null;
    current.pendingProps = null;
    current.memoizedProps = null;
    current.stateNode = null;
    null !== alternate && detachFiber(alternate);
  }

  function isHostParent(fiber) {
    return 5 === fiber.tag || 3 === fiber.tag || 4 === fiber.tag;
  }

  function commitPlacement(finishedWork) {
    a: {
      for (var parent = finishedWork.return; null !== parent;) {
        if (isHostParent(parent)) {
          var parentFiber = parent;
          break a;
        }

        parent = parent.return;
      }

      throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }

    parent = parentFiber.stateNode;

    switch (parentFiber.tag) {
      case 5:
        var isContainer = !1;
        break;

      case 3:
        parent = parent.containerInfo;
        isContainer = !0;
        break;

      case 4:
        parent = parent.containerInfo;
        isContainer = !0;
        break;

      default:
        throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
    }

    parentFiber.effectTag & 16 && (parentFiber.effectTag &= -17);

    a: b: for (parentFiber = finishedWork;;) {
      for (; null === parentFiber.sibling;) {
        if (null === parentFiber.return || isHostParent(parentFiber.return)) {
          parentFiber = null;
          break a;
        }

        parentFiber = parentFiber.return;
      }

      parentFiber.sibling.return = parentFiber.return;

      for (parentFiber = parentFiber.sibling; 5 !== parentFiber.tag && 6 !== parentFiber.tag && 18 !== parentFiber.tag;) {
        if (parentFiber.effectTag & 2) continue b;
        if (null === parentFiber.child || 4 === parentFiber.tag) continue b;else parentFiber.child.return = parentFiber, parentFiber = parentFiber.child;
      }

      if (!(parentFiber.effectTag & 2)) {
        parentFiber = parentFiber.stateNode;
        break a;
      }
    }

    isContainer ? insertOrAppendPlacementNodeIntoContainer(finishedWork, parentFiber, parent) : insertOrAppendPlacementNode(finishedWork, parentFiber, parent);
  }

  function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
    var tag = node.tag,
        isHost = 5 === tag || 6 === tag;
    if (isHost) {
      if (node = isHost ? node.stateNode : node.stateNode.instance, before) {
        if ("number" === typeof parent) throw Error("Container does not support insertBefore operation");
      } else _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.setChildren(parent, ["number" === typeof node ? node : node._nativeTag]);
    } else if (4 !== tag && (node = node.child, null !== node)) for (insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling; null !== node;) {
      insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling;
    }
  }

  function insertOrAppendPlacementNode(node, before, parent) {
    var tag = node.tag,
        isHost = 5 === tag || 6 === tag;
    if (isHost) node = isHost ? node.stateNode : node.stateNode.instance, before ? (tag = parent._children, isHost = tag.indexOf(node), 0 <= isHost ? (tag.splice(isHost, 1), before = tag.indexOf(before), tag.splice(before, 0, node), _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.manageChildren(parent._nativeTag, [isHost], [before], [], [], [])) : (before = tag.indexOf(before), tag.splice(before, 0, node), _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.manageChildren(parent._nativeTag, [], [], ["number" === typeof node ? node : node._nativeTag], [before], []))) : (before = "number" === typeof node ? node : node._nativeTag, tag = parent._children, isHost = tag.indexOf(node), 0 <= isHost ? (tag.splice(isHost, 1), tag.push(node), _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.manageChildren(parent._nativeTag, [isHost], [tag.length - 1], [], [], [])) : (tag.push(node), _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.manageChildren(parent._nativeTag, [], [], [before], [tag.length - 1], [])));else if (4 !== tag && (node = node.child, null !== node)) for (insertOrAppendPlacementNode(node, before, parent), node = node.sibling; null !== node;) {
      insertOrAppendPlacementNode(node, before, parent), node = node.sibling;
    }
  }

  function unmountHostComponents(finishedRoot$jscomp$0, current, renderPriorityLevel$jscomp$0) {
    for (var node = current, currentParentIsValid = !1, currentParent, currentParentIsContainer;;) {
      if (!currentParentIsValid) {
        currentParentIsValid = node.return;

        a: for (;;) {
          if (null === currentParentIsValid) throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          currentParent = currentParentIsValid.stateNode;

          switch (currentParentIsValid.tag) {
            case 5:
              currentParentIsContainer = !1;
              break a;

            case 3:
              currentParent = currentParent.containerInfo;
              currentParentIsContainer = !0;
              break a;

            case 4:
              currentParent = currentParent.containerInfo;
              currentParentIsContainer = !0;
              break a;
          }

          currentParentIsValid = currentParentIsValid.return;
        }

        currentParentIsValid = !0;
      }

      if (5 === node.tag || 6 === node.tag) {
        a: for (var finishedRoot = finishedRoot$jscomp$0, root = node, renderPriorityLevel = renderPriorityLevel$jscomp$0, node$jscomp$0 = root;;) {
          if (commitUnmount(finishedRoot, node$jscomp$0, renderPriorityLevel), null !== node$jscomp$0.child && 4 !== node$jscomp$0.tag) node$jscomp$0.child.return = node$jscomp$0, node$jscomp$0 = node$jscomp$0.child;else {
            if (node$jscomp$0 === root) break a;

            for (; null === node$jscomp$0.sibling;) {
              if (null === node$jscomp$0.return || node$jscomp$0.return === root) break a;
              node$jscomp$0 = node$jscomp$0.return;
            }

            node$jscomp$0.sibling.return = node$jscomp$0.return;
            node$jscomp$0 = node$jscomp$0.sibling;
          }
        }

        currentParentIsContainer ? (finishedRoot = currentParent, recursivelyUncacheFiberNode(node.stateNode), _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.manageChildren(finishedRoot, [], [], [], [], [0])) : (finishedRoot = currentParent, renderPriorityLevel = node.stateNode, recursivelyUncacheFiberNode(renderPriorityLevel), root = finishedRoot._children, renderPriorityLevel = root.indexOf(renderPriorityLevel), root.splice(renderPriorityLevel, 1), _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.manageChildren(finishedRoot._nativeTag, [], [], [], [], [renderPriorityLevel]));
      } else if (4 === node.tag) {
        if (null !== node.child) {
          currentParent = node.stateNode.containerInfo;
          currentParentIsContainer = !0;
          node.child.return = node;
          node = node.child;
          continue;
        }
      } else if (commitUnmount(finishedRoot$jscomp$0, node, renderPriorityLevel$jscomp$0), null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === current) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === current) return;
        node = node.return;
        4 === node.tag && (currentParentIsValid = !1);
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  function commitWork(current, finishedWork) {
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
      case 22:
        commitHookEffectListUnmount(3, finishedWork);
        return;

      case 1:
        return;

      case 5:
        var instance = finishedWork.stateNode;

        if (null != instance) {
          var newProps = finishedWork.memoizedProps;
          current = null !== current ? current.memoizedProps : newProps;
          var updatePayload = finishedWork.updateQueue;
          finishedWork.updateQueue = null;
          null !== updatePayload && (finishedWork = instance.viewConfig, instanceProps.set(instance._nativeTag, newProps), newProps = diffProperties(null, current, newProps, finishedWork.validAttributes), null != newProps && _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.updateView(instance._nativeTag, finishedWork.uiViewClassName, newProps));
        }

        return;

      case 6:
        if (null === finishedWork.stateNode) throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");

        _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.updateView(finishedWork.stateNode, "RCTRawText", {
          text: finishedWork.memoizedProps
        });

        return;

      case 3:
        return;

      case 12:
        return;

      case 13:
        instance = finishedWork;
        null === finishedWork.memoizedState ? newProps = !1 : (newProps = !0, instance = finishedWork.child, globalMostRecentFallbackTime = now());
        if (null !== instance) a: for (current = instance;;) {
          if (5 === current.tag) {
            if (updatePayload = current.stateNode, newProps) {
              var viewConfig = updatePayload.viewConfig;
              var updatePayload$jscomp$0 = diffProperties(null, emptyObject, {
                style: {
                  display: "none"
                }
              }, viewConfig.validAttributes);

              _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.updateView(updatePayload._nativeTag, viewConfig.uiViewClassName, updatePayload$jscomp$0);
            } else {
              updatePayload = current.stateNode;
              updatePayload$jscomp$0 = current.memoizedProps;
              viewConfig = updatePayload.viewConfig;
              var prevProps = Object.assign({}, updatePayload$jscomp$0, {
                style: [updatePayload$jscomp$0.style, {
                  display: "none"
                }]
              });
              updatePayload$jscomp$0 = diffProperties(null, prevProps, updatePayload$jscomp$0, viewConfig.validAttributes);

              _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.updateView(updatePayload._nativeTag, viewConfig.uiViewClassName, updatePayload$jscomp$0);
            }
          } else {
            if (6 === current.tag) throw Error("Not yet implemented.");

            if (13 === current.tag && null !== current.memoizedState && null === current.memoizedState.dehydrated) {
              updatePayload = current.child.sibling;
              updatePayload.return = current;
              current = updatePayload;
              continue;
            } else if (null !== current.child) {
              current.child.return = current;
              current = current.child;
              continue;
            }
          }
          if (current === instance) break;

          for (; null === current.sibling;) {
            if (null === current.return || current.return === instance) break a;
            current = current.return;
          }

          current.sibling.return = current.return;
          current = current.sibling;
        }
        attachSuspenseRetryListeners(finishedWork);
        return;

      case 19:
        attachSuspenseRetryListeners(finishedWork);
        return;

      case 17:
        return;
    }

    throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
  }

  function attachSuspenseRetryListeners(finishedWork) {
    var thenables = finishedWork.updateQueue;

    if (null !== thenables) {
      finishedWork.updateQueue = null;
      var retryCache = finishedWork.stateNode;
      null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
      thenables.forEach(function (thenable) {
        var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
        retryCache.has(thenable) || (retryCache.add(thenable), thenable.then(retry, retry));
      });
    }
  }

  var PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map;

  function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime, null);
    expirationTime.tag = 3;
    expirationTime.payload = {
      element: null
    };
    var error = errorInfo.value;

    expirationTime.callback = function () {
      hasUncaughtError || (hasUncaughtError = !0, firstUncaughtError = error);
      logError(fiber, errorInfo);
    };

    return expirationTime;
  }

  function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime, null);
    expirationTime.tag = 3;
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

    if ("function" === typeof getDerivedStateFromError) {
      var error = errorInfo.value;

      expirationTime.payload = function () {
        logError(fiber, errorInfo);
        return getDerivedStateFromError(error);
      };
    }

    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (expirationTime.callback = function () {
      "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this), logError(fiber, errorInfo));
      var stack = errorInfo.stack;
      this.componentDidCatch(errorInfo.value, {
        componentStack: null !== stack ? stack : ""
      });
    });
    return expirationTime;
  }

  var ceil = Math.ceil,
      ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
      ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
      NoContext = 0,
      LegacyUnbatchedContext = 8,
      RenderContext = 16,
      CommitContext = 32,
      RootIncomplete = 0,
      RootFatalErrored = 1,
      RootErrored = 2,
      RootSuspended = 3,
      RootSuspendedWithDelay = 4,
      RootCompleted = 5,
      executionContext = NoContext,
      workInProgressRoot = null,
      workInProgress = null,
      renderExpirationTime$1 = 0,
      workInProgressRootExitStatus = RootIncomplete,
      workInProgressRootFatalError = null,
      workInProgressRootLatestProcessedExpirationTime = 1073741823,
      workInProgressRootLatestSuspenseTimeout = 1073741823,
      workInProgressRootCanSuspendUsingConfig = null,
      workInProgressRootNextUnprocessedUpdateTime = 0,
      workInProgressRootHasPendingPing = !1,
      globalMostRecentFallbackTime = 0,
      FALLBACK_THROTTLE_MS = 500,
      nextEffect = null,
      hasUncaughtError = !1,
      firstUncaughtError = null,
      legacyErrorBoundariesThatAlreadyFailed = null,
      rootDoesHavePassiveEffects = !1,
      rootWithPendingPassiveEffects = null,
      pendingPassiveEffectsRenderPriority = 90,
      rootsWithPendingDiscreteUpdates = null,
      nestedUpdateCount = 0,
      rootWithNestedUpdates = null,
      currentEventTime = 0;

  function requestCurrentTimeForUpdate() {
    return (executionContext & (RenderContext | CommitContext)) !== NoContext ? 1073741821 - (now() / 10 | 0) : 0 !== currentEventTime ? currentEventTime : currentEventTime = 1073741821 - (now() / 10 | 0);
  }

  function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
    fiber = fiber.mode;
    if (0 === (fiber & 2)) return 1073741823;
    var priorityLevel = getCurrentPriorityLevel();
    if (0 === (fiber & 4)) return 99 === priorityLevel ? 1073741823 : 1073741822;
    if ((executionContext & RenderContext) !== NoContext) return renderExpirationTime$1;
    if (null !== suspenseConfig) currentTime = 1073741821 - 25 * (((1073741821 - currentTime + (suspenseConfig.timeoutMs | 0 || 5e3) / 10) / 25 | 0) + 1);else switch (priorityLevel) {
      case 99:
        currentTime = 1073741823;
        break;

      case 98:
        currentTime = 1073741821 - 10 * (((1073741821 - currentTime + 15) / 10 | 0) + 1);
        break;

      case 97:
      case 96:
        currentTime = 1073741821 - 25 * (((1073741821 - currentTime + 500) / 25 | 0) + 1);
        break;

      case 95:
        currentTime = 2;
        break;

      default:
        throw Error("Expected a valid priority level");
    }
    null !== workInProgressRoot && currentTime === renderExpirationTime$1 && --currentTime;
    return currentTime;
  }

  function scheduleWork(fiber, expirationTime) {
    if (50 < nestedUpdateCount) throw nestedUpdateCount = 0, rootWithNestedUpdates = null, Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
    fiber = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

    if (null !== fiber) {
      var priorityLevel = getCurrentPriorityLevel();
      1073741823 === expirationTime ? (executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext ? performSyncWorkOnRoot(fiber) : (ensureRootIsScheduled(fiber), executionContext === NoContext && flushSyncCallbackQueue()) : ensureRootIsScheduled(fiber);
      (executionContext & 4) === NoContext || 98 !== priorityLevel && 99 !== priorityLevel || (null === rootsWithPendingDiscreteUpdates ? rootsWithPendingDiscreteUpdates = new Map([[fiber, expirationTime]]) : (priorityLevel = rootsWithPendingDiscreteUpdates.get(fiber), (void 0 === priorityLevel || priorityLevel > expirationTime) && rootsWithPendingDiscreteUpdates.set(fiber, expirationTime)));
    }
  }

  function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
    fiber.expirationTime < expirationTime && (fiber.expirationTime = expirationTime);
    var alternate = fiber.alternate;
    null !== alternate && alternate.expirationTime < expirationTime && (alternate.expirationTime = expirationTime);
    var node = fiber.return,
        root = null;
    if (null === node && 3 === fiber.tag) root = fiber.stateNode;else for (; null !== node;) {
      alternate = node.alternate;
      node.childExpirationTime < expirationTime && (node.childExpirationTime = expirationTime);
      null !== alternate && alternate.childExpirationTime < expirationTime && (alternate.childExpirationTime = expirationTime);

      if (null === node.return && 3 === node.tag) {
        root = node.stateNode;
        break;
      }

      node = node.return;
    }
    null !== root && (workInProgressRoot === root && (markUnprocessedUpdateTime(expirationTime), workInProgressRootExitStatus === RootSuspendedWithDelay && markRootSuspendedAtTime(root, renderExpirationTime$1)), markRootUpdatedAtTime(root, expirationTime));
    return root;
  }

  function getNextRootExpirationTimeToWorkOn(root) {
    var lastExpiredTime = root.lastExpiredTime;
    if (0 !== lastExpiredTime) return lastExpiredTime;
    lastExpiredTime = root.firstPendingTime;
    if (!isRootSuspendedAtTime(root, lastExpiredTime)) return lastExpiredTime;
    var lastPingedTime = root.lastPingedTime;
    root = root.nextKnownPendingLevel;
    root = lastPingedTime > root ? lastPingedTime : root;
    return 2 >= root && lastExpiredTime !== root ? 0 : root;
  }

  function ensureRootIsScheduled(root) {
    if (0 !== root.lastExpiredTime) root.callbackExpirationTime = 1073741823, root.callbackPriority = 99, root.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));else {
      var expirationTime = getNextRootExpirationTimeToWorkOn(root),
          existingCallbackNode = root.callbackNode;
      if (0 === expirationTime) null !== existingCallbackNode && (root.callbackNode = null, root.callbackExpirationTime = 0, root.callbackPriority = 90);else {
        var priorityLevel = requestCurrentTimeForUpdate();
        1073741823 === expirationTime ? priorityLevel = 99 : 1 === expirationTime || 2 === expirationTime ? priorityLevel = 95 : (priorityLevel = 10 * (1073741821 - expirationTime) - 10 * (1073741821 - priorityLevel), priorityLevel = 0 >= priorityLevel ? 99 : 250 >= priorityLevel ? 98 : 5250 >= priorityLevel ? 97 : 95);

        if (null !== existingCallbackNode) {
          var existingCallbackPriority = root.callbackPriority;
          if (root.callbackExpirationTime === expirationTime && existingCallbackPriority >= priorityLevel) return;
          existingCallbackNode !== fakeCallbackNode && _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_cancelCallback(existingCallbackNode);
        }

        root.callbackExpirationTime = expirationTime;
        root.callbackPriority = priorityLevel;
        expirationTime = 1073741823 === expirationTime ? scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root)) : scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root), {
          timeout: 10 * (1073741821 - expirationTime) - now()
        });
        root.callbackNode = expirationTime;
      }
    }
  }

  function performConcurrentWorkOnRoot(root, didTimeout) {
    currentEventTime = 0;

    if (didTimeout) {
      didTimeout = requestCurrentTimeForUpdate();
      var lastExpiredTime = root.lastExpiredTime;
      if (0 === lastExpiredTime || lastExpiredTime > didTimeout) root.lastExpiredTime = didTimeout;
      ensureRootIsScheduled(root);
      return null;
    }

    lastExpiredTime = getNextRootExpirationTimeToWorkOn(root);
    if (0 === lastExpiredTime) return null;
    didTimeout = root.callbackNode;
    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw Error("Should not already be working.");
    flushPassiveEffects();
    var expirationTime = lastExpiredTime;
    var exitStatus = executionContext;
    executionContext |= RenderContext;
    var prevDispatcher = pushDispatcher();
    root === workInProgressRoot && expirationTime === renderExpirationTime$1 || prepareFreshStack(root, expirationTime);

    do {
      try {
        workLoopConcurrent();
        break;
      } catch (thrownValue) {
        handleError(root, thrownValue);
      }
    } while (1);

    resetContextDependencies();
    ReactCurrentDispatcher$1.current = prevDispatcher;
    executionContext = exitStatus;
    null !== workInProgress ? exitStatus = RootIncomplete : (workInProgressRoot = null, exitStatus = workInProgressRootExitStatus);

    if (exitStatus !== RootIncomplete) {
      exitStatus === RootErrored && (lastExpiredTime = 2 < lastExpiredTime ? 2 : lastExpiredTime, exitStatus = renderRootSync(root, lastExpiredTime));
      if (exitStatus === RootFatalErrored) throw didTimeout = workInProgressRootFatalError, prepareFreshStack(root, lastExpiredTime), markRootSuspendedAtTime(root, lastExpiredTime), ensureRootIsScheduled(root), didTimeout;
      expirationTime = root.finishedWork = root.current.alternate;
      root.finishedExpirationTime = lastExpiredTime;

      switch (exitStatus) {
        case RootIncomplete:
        case RootFatalErrored:
          throw Error("Root did not complete. This is a bug in React.");

        case RootErrored:
          commitRoot(root);
          break;

        case RootSuspended:
          markRootSuspendedAtTime(root, lastExpiredTime);
          exitStatus = root.lastSuspendedTime;
          lastExpiredTime === exitStatus && (root.nextKnownPendingLevel = getRemainingExpirationTime(expirationTime));

          if (1073741823 === workInProgressRootLatestProcessedExpirationTime && (expirationTime = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(), 10 < expirationTime)) {
            if (workInProgressRootHasPendingPing && (prevDispatcher = root.lastPingedTime, 0 === prevDispatcher || prevDispatcher >= lastExpiredTime)) {
              root.lastPingedTime = lastExpiredTime;
              prepareFreshStack(root, lastExpiredTime);
              break;
            }

            prevDispatcher = getNextRootExpirationTimeToWorkOn(root);
            if (0 !== prevDispatcher && prevDispatcher !== lastExpiredTime) break;

            if (0 !== exitStatus && exitStatus !== lastExpiredTime) {
              root.lastPingedTime = exitStatus;
              break;
            }

            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), expirationTime);
            break;
          }

          commitRoot(root);
          break;

        case RootSuspendedWithDelay:
          markRootSuspendedAtTime(root, lastExpiredTime);
          exitStatus = root.lastSuspendedTime;
          lastExpiredTime === exitStatus && (root.nextKnownPendingLevel = getRemainingExpirationTime(expirationTime));

          if (workInProgressRootHasPendingPing && (expirationTime = root.lastPingedTime, 0 === expirationTime || expirationTime >= lastExpiredTime)) {
            root.lastPingedTime = lastExpiredTime;
            prepareFreshStack(root, lastExpiredTime);
            break;
          }

          expirationTime = getNextRootExpirationTimeToWorkOn(root);
          if (0 !== expirationTime && expirationTime !== lastExpiredTime) break;

          if (0 !== exitStatus && exitStatus !== lastExpiredTime) {
            root.lastPingedTime = exitStatus;
            break;
          }

          1073741823 !== workInProgressRootLatestSuspenseTimeout ? expirationTime = 10 * (1073741821 - workInProgressRootLatestSuspenseTimeout) - now() : 1073741823 === workInProgressRootLatestProcessedExpirationTime ? expirationTime = 0 : (expirationTime = 10 * (1073741821 - workInProgressRootLatestProcessedExpirationTime) - 5e3, exitStatus = now(), lastExpiredTime = 10 * (1073741821 - lastExpiredTime) - exitStatus, expirationTime = exitStatus - expirationTime, 0 > expirationTime && (expirationTime = 0), expirationTime = (120 > expirationTime ? 120 : 480 > expirationTime ? 480 : 1080 > expirationTime ? 1080 : 1920 > expirationTime ? 1920 : 3e3 > expirationTime ? 3e3 : 4320 > expirationTime ? 4320 : 1960 * ceil(expirationTime / 1960)) - expirationTime, lastExpiredTime < expirationTime && (expirationTime = lastExpiredTime));

          if (10 < expirationTime) {
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), expirationTime);
            break;
          }

          commitRoot(root);
          break;

        case RootCompleted:
          if (1073741823 !== workInProgressRootLatestProcessedExpirationTime && null !== workInProgressRootCanSuspendUsingConfig) {
            prevDispatcher = workInProgressRootLatestProcessedExpirationTime;
            var suspenseConfig = workInProgressRootCanSuspendUsingConfig;
            expirationTime = suspenseConfig.busyMinDurationMs | 0;
            0 >= expirationTime ? expirationTime = 0 : (exitStatus = suspenseConfig.busyDelayMs | 0, prevDispatcher = now() - (10 * (1073741821 - prevDispatcher) - (suspenseConfig.timeoutMs | 0 || 5e3)), expirationTime = prevDispatcher <= exitStatus ? 0 : exitStatus + expirationTime - prevDispatcher);

            if (10 < expirationTime) {
              markRootSuspendedAtTime(root, lastExpiredTime);
              root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), expirationTime);
              break;
            }
          }

          commitRoot(root);
          break;

        default:
          throw Error("Unknown root exit status.");
      }
    }

    ensureRootIsScheduled(root);
    return root.callbackNode === didTimeout ? performConcurrentWorkOnRoot.bind(null, root) : null;
  }

  function performSyncWorkOnRoot(root) {
    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw Error("Should not already be working.");
    flushPassiveEffects();
    var lastExpiredTime = root.lastExpiredTime;
    lastExpiredTime = 0 !== lastExpiredTime ? root === workInProgressRoot && renderExpirationTime$1 >= lastExpiredTime ? renderExpirationTime$1 : lastExpiredTime : 1073741823;
    var exitStatus = renderRootSync(root, lastExpiredTime);
    0 !== root.tag && exitStatus === RootErrored && (lastExpiredTime = 2 < lastExpiredTime ? 2 : lastExpiredTime, exitStatus = renderRootSync(root, lastExpiredTime));
    if (exitStatus === RootFatalErrored) throw exitStatus = workInProgressRootFatalError, prepareFreshStack(root, lastExpiredTime), markRootSuspendedAtTime(root, lastExpiredTime), ensureRootIsScheduled(root), exitStatus;
    root.finishedWork = root.current.alternate;
    root.finishedExpirationTime = lastExpiredTime;
    commitRoot(root);
    ensureRootIsScheduled(root);
    return null;
  }

  function prepareFreshStack(root, expirationTime) {
    root.finishedWork = null;
    root.finishedExpirationTime = 0;
    var timeoutHandle = root.timeoutHandle;
    -1 !== timeoutHandle && (root.timeoutHandle = -1, cancelTimeout(timeoutHandle));
    if (null !== workInProgress) for (timeoutHandle = workInProgress.return; null !== timeoutHandle;) {
      var interruptedWork = timeoutHandle;

      switch (interruptedWork.tag) {
        case 1:
          interruptedWork = interruptedWork.type.childContextTypes;
          null !== interruptedWork && void 0 !== interruptedWork && popContext();
          break;

        case 3:
          popHostContainer();
          pop(didPerformWorkStackCursor);
          pop(contextStackCursor);
          break;

        case 5:
          popHostContext(interruptedWork);
          break;

        case 4:
          popHostContainer();
          break;

        case 13:
          pop(suspenseStackCursor);
          break;

        case 19:
          pop(suspenseStackCursor);
          break;

        case 10:
          popProvider(interruptedWork);
      }

      timeoutHandle = timeoutHandle.return;
    }
    workInProgressRoot = root;
    workInProgress = createWorkInProgress(root.current, null);
    renderExpirationTime$1 = expirationTime;
    workInProgressRootExitStatus = RootIncomplete;
    workInProgressRootFatalError = null;
    workInProgressRootLatestSuspenseTimeout = workInProgressRootLatestProcessedExpirationTime = 1073741823;
    workInProgressRootCanSuspendUsingConfig = null;
    workInProgressRootNextUnprocessedUpdateTime = 0;
    workInProgressRootHasPendingPing = !1;
  }

  function handleError(root$jscomp$0, thrownValue) {
    do {
      try {
        resetContextDependencies();
        ReactCurrentDispatcher.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) for (var hook = currentlyRenderingFiber$1.memoizedState; null !== hook;) {
          var queue = hook.queue;
          null !== queue && (queue.pending = null);
          hook = hook.next;
        }
        renderExpirationTime = 0;
        workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
        didScheduleRenderPhaseUpdate = !1;
        if (null === workInProgress || null === workInProgress.return) return workInProgressRootExitStatus = RootFatalErrored, workInProgressRootFatalError = thrownValue, workInProgress = null;

        a: {
          var root = root$jscomp$0,
              returnFiber = workInProgress.return,
              sourceFiber = workInProgress,
              value = thrownValue;
          thrownValue = renderExpirationTime$1;
          sourceFiber.effectTag |= 2048;
          sourceFiber.firstEffect = sourceFiber.lastEffect = null;

          if (null !== value && "object" === typeof value && "function" === typeof value.then) {
            var thenable = value;

            if (0 === (sourceFiber.mode & 2)) {
              var currentSource = sourceFiber.alternate;
              currentSource ? (sourceFiber.updateQueue = currentSource.updateQueue, sourceFiber.memoizedState = currentSource.memoizedState, sourceFiber.expirationTime = currentSource.expirationTime) : (sourceFiber.updateQueue = null, sourceFiber.memoizedState = null);
            }

            var hasInvisibleParentBoundary = 0 !== (suspenseStackCursor.current & 1),
                _workInProgress = returnFiber;

            do {
              var JSCompiler_temp;

              if (JSCompiler_temp = 13 === _workInProgress.tag) {
                var nextState = _workInProgress.memoizedState;
                if (null !== nextState) JSCompiler_temp = null !== nextState.dehydrated ? !0 : !1;else {
                  var props = _workInProgress.memoizedProps;
                  JSCompiler_temp = void 0 === props.fallback ? !1 : !0 !== props.unstable_avoidThisFallback ? !0 : hasInvisibleParentBoundary ? !1 : !0;
                }
              }

              if (JSCompiler_temp) {
                var thenables = _workInProgress.updateQueue;

                if (null === thenables) {
                  var updateQueue = new Set();
                  updateQueue.add(thenable);
                  _workInProgress.updateQueue = updateQueue;
                } else thenables.add(thenable);

                if (0 === (_workInProgress.mode & 2)) {
                  _workInProgress.effectTag |= 64;
                  sourceFiber.effectTag &= -2981;
                  if (1 === sourceFiber.tag) if (null === sourceFiber.alternate) sourceFiber.tag = 17;else {
                    var update = createUpdate(1073741823, null);
                    update.tag = 2;
                    enqueueUpdate(sourceFiber, update);
                  }
                  sourceFiber.expirationTime = 1073741823;
                  break a;
                }

                value = void 0;
                sourceFiber = thrownValue;
                var pingCache = root.pingCache;
                null === pingCache ? (pingCache = root.pingCache = new PossiblyWeakMap(), value = new Set(), pingCache.set(thenable, value)) : (value = pingCache.get(thenable), void 0 === value && (value = new Set(), pingCache.set(thenable, value)));

                if (!value.has(sourceFiber)) {
                  value.add(sourceFiber);
                  var ping = pingSuspendedRoot.bind(null, root, thenable, sourceFiber);
                  thenable.then(ping, ping);
                }

                _workInProgress.effectTag |= 4096;
                _workInProgress.expirationTime = thrownValue;
                break a;
              }

              _workInProgress = _workInProgress.return;
            } while (null !== _workInProgress);

            value = Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber));
          }

          workInProgressRootExitStatus !== RootCompleted && (workInProgressRootExitStatus = RootErrored);
          value = createCapturedValue(value, sourceFiber);
          _workInProgress = returnFiber;

          do {
            switch (_workInProgress.tag) {
              case 3:
                thenable = value;
                _workInProgress.effectTag |= 4096;
                _workInProgress.expirationTime = thrownValue;

                var _update = createRootErrorUpdate(_workInProgress, thenable, thrownValue);

                enqueueCapturedUpdate(_workInProgress, _update);
                break a;

              case 1:
                thenable = value;
                var ctor = _workInProgress.type,
                    instance = _workInProgress.stateNode;

                if (0 === (_workInProgress.effectTag & 64) && ("function" === typeof ctor.getDerivedStateFromError || null !== instance && "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance)))) {
                  _workInProgress.effectTag |= 4096;
                  _workInProgress.expirationTime = thrownValue;

                  var _update2 = createClassErrorUpdate(_workInProgress, thenable, thrownValue);

                  enqueueCapturedUpdate(_workInProgress, _update2);
                  break a;
                }

            }

            _workInProgress = _workInProgress.return;
          } while (null !== _workInProgress);
        }

        workInProgress = completeUnitOfWork(workInProgress);
      } catch (yetAnotherThrownValue) {
        thrownValue = yetAnotherThrownValue;
        continue;
      }

      break;
    } while (1);
  }

  function pushDispatcher() {
    var prevDispatcher = ReactCurrentDispatcher$1.current;
    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
    return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
  }

  function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
    expirationTime < workInProgressRootLatestProcessedExpirationTime && 2 < expirationTime && (workInProgressRootLatestProcessedExpirationTime = expirationTime);
    null !== suspenseConfig && expirationTime < workInProgressRootLatestSuspenseTimeout && 2 < expirationTime && (workInProgressRootLatestSuspenseTimeout = expirationTime, workInProgressRootCanSuspendUsingConfig = suspenseConfig);
  }

  function markUnprocessedUpdateTime(expirationTime) {
    expirationTime > workInProgressRootNextUnprocessedUpdateTime && (workInProgressRootNextUnprocessedUpdateTime = expirationTime);
  }

  function renderRootSync(root, expirationTime) {
    var prevExecutionContext = executionContext;
    executionContext |= RenderContext;
    var prevDispatcher = pushDispatcher();
    root === workInProgressRoot && expirationTime === renderExpirationTime$1 || prepareFreshStack(root, expirationTime);

    do {
      try {
        workLoopSync();
        break;
      } catch (thrownValue) {
        handleError(root, thrownValue);
      }
    } while (1);

    resetContextDependencies();
    executionContext = prevExecutionContext;
    ReactCurrentDispatcher$1.current = prevDispatcher;
    if (null !== workInProgress) throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
    workInProgressRoot = null;
    return workInProgressRootExitStatus;
  }

  function workLoopSync() {
    for (; null !== workInProgress;) {
      workInProgress = performUnitOfWork(workInProgress);
    }
  }

  function workLoopConcurrent() {
    for (; null !== workInProgress && !_$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_shouldYield();) {
      workInProgress = performUnitOfWork(workInProgress);
    }
  }

  function performUnitOfWork(unitOfWork) {
    var next = beginWork$1(unitOfWork.alternate, unitOfWork, renderExpirationTime$1);
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next && (next = completeUnitOfWork(unitOfWork));
    ReactCurrentOwner$2.current = null;
    return next;
  }

  function completeUnitOfWork(unitOfWork) {
    workInProgress = unitOfWork;

    do {
      var current = workInProgress.alternate;
      unitOfWork = workInProgress.return;

      if (0 === (workInProgress.effectTag & 2048)) {
        current = completeWork(current, workInProgress, renderExpirationTime$1);

        if (1 === renderExpirationTime$1 || 1 !== workInProgress.childExpirationTime) {
          for (var newChildExpirationTime = 0, _child = workInProgress.child; null !== _child;) {
            var _childUpdateExpirationTime = _child.expirationTime,
                _childChildExpirationTime = _child.childExpirationTime;
            _childUpdateExpirationTime > newChildExpirationTime && (newChildExpirationTime = _childUpdateExpirationTime);
            _childChildExpirationTime > newChildExpirationTime && (newChildExpirationTime = _childChildExpirationTime);
            _child = _child.sibling;
          }

          workInProgress.childExpirationTime = newChildExpirationTime;
        }

        if (null !== current) return current;
        null !== unitOfWork && 0 === (unitOfWork.effectTag & 2048) && (null === unitOfWork.firstEffect && (unitOfWork.firstEffect = workInProgress.firstEffect), null !== workInProgress.lastEffect && (null !== unitOfWork.lastEffect && (unitOfWork.lastEffect.nextEffect = workInProgress.firstEffect), unitOfWork.lastEffect = workInProgress.lastEffect), 1 < workInProgress.effectTag && (null !== unitOfWork.lastEffect ? unitOfWork.lastEffect.nextEffect = workInProgress : unitOfWork.firstEffect = workInProgress, unitOfWork.lastEffect = workInProgress));
      } else {
        current = unwindWork(workInProgress);
        if (null !== current) return current.effectTag &= 2047, current;
        null !== unitOfWork && (unitOfWork.firstEffect = unitOfWork.lastEffect = null, unitOfWork.effectTag |= 2048);
      }

      current = workInProgress.sibling;
      if (null !== current) return current;
      workInProgress = unitOfWork;
    } while (null !== workInProgress);

    workInProgressRootExitStatus === RootIncomplete && (workInProgressRootExitStatus = RootCompleted);
    return null;
  }

  function getRemainingExpirationTime(fiber) {
    var updateExpirationTime = fiber.expirationTime;
    fiber = fiber.childExpirationTime;
    return updateExpirationTime > fiber ? updateExpirationTime : fiber;
  }

  function commitRoot(root) {
    var renderPriorityLevel = getCurrentPriorityLevel();
    runWithPriority(99, commitRootImpl.bind(null, root, renderPriorityLevel));
    return null;
  }

  function commitRootImpl(root$jscomp$0, renderPriorityLevel$jscomp$0) {
    do {
      flushPassiveEffects();
    } while (null !== rootWithPendingPassiveEffects);

    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw Error("Should not already be working.");
    var finishedWork = root$jscomp$0.finishedWork,
        expirationTime = root$jscomp$0.finishedExpirationTime;
    if (null === finishedWork) return null;
    root$jscomp$0.finishedWork = null;
    root$jscomp$0.finishedExpirationTime = 0;
    if (finishedWork === root$jscomp$0.current) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
    root$jscomp$0.callbackNode = null;
    root$jscomp$0.callbackExpirationTime = 0;
    root$jscomp$0.callbackPriority = 90;
    root$jscomp$0.nextKnownPendingLevel = 0;
    var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
    root$jscomp$0.firstPendingTime = remainingExpirationTimeBeforeCommit;
    expirationTime <= root$jscomp$0.lastSuspendedTime ? root$jscomp$0.firstSuspendedTime = root$jscomp$0.lastSuspendedTime = root$jscomp$0.nextKnownPendingLevel = 0 : expirationTime <= root$jscomp$0.firstSuspendedTime && (root$jscomp$0.firstSuspendedTime = expirationTime - 1);
    expirationTime <= root$jscomp$0.lastPingedTime && (root$jscomp$0.lastPingedTime = 0);
    expirationTime <= root$jscomp$0.lastExpiredTime && (root$jscomp$0.lastExpiredTime = 0);
    root$jscomp$0 === workInProgressRoot && (workInProgress = workInProgressRoot = null, renderExpirationTime$1 = 0);
    1 < finishedWork.effectTag ? null !== finishedWork.lastEffect ? (finishedWork.lastEffect.nextEffect = finishedWork, remainingExpirationTimeBeforeCommit = finishedWork.firstEffect) : remainingExpirationTimeBeforeCommit = finishedWork : remainingExpirationTimeBeforeCommit = finishedWork.firstEffect;

    if (null !== remainingExpirationTimeBeforeCommit) {
      var prevExecutionContext = executionContext;
      executionContext |= CommitContext;
      ReactCurrentOwner$2.current = null;
      nextEffect = remainingExpirationTimeBeforeCommit;

      do {
        try {
          commitBeforeMutationEffects();
        } catch (error) {
          if (null === nextEffect) throw Error("Should be working on an effect.");
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      nextEffect = remainingExpirationTimeBeforeCommit;

      do {
        try {
          for (var root = root$jscomp$0, renderPriorityLevel = renderPriorityLevel$jscomp$0; null !== nextEffect;) {
            var effectTag = nextEffect.effectTag;

            if (effectTag & 128) {
              var current = nextEffect.alternate;

              if (null !== current) {
                var currentRef = current.ref;
                null !== currentRef && ("function" === typeof currentRef ? currentRef(null) : currentRef.current = null);
              }
            }

            switch (effectTag & 1038) {
              case 2:
                commitPlacement(nextEffect);
                nextEffect.effectTag &= -3;
                break;

              case 6:
                commitPlacement(nextEffect);
                nextEffect.effectTag &= -3;
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 1024:
                nextEffect.effectTag &= -1025;
                break;

              case 1028:
                nextEffect.effectTag &= -1025;
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 4:
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 8:
                var current$jscomp$0 = nextEffect;
                unmountHostComponents(root, current$jscomp$0, renderPriorityLevel);
                detachFiber(current$jscomp$0);
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw Error("Should be working on an effect.");
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      root$jscomp$0.current = finishedWork;
      nextEffect = remainingExpirationTimeBeforeCommit;

      do {
        try {
          for (effectTag = root$jscomp$0; null !== nextEffect;) {
            var effectTag$jscomp$0 = nextEffect.effectTag;
            effectTag$jscomp$0 & 36 && commitLifeCycles(effectTag, nextEffect.alternate, nextEffect);

            if (effectTag$jscomp$0 & 128) {
              current = void 0;
              var ref = nextEffect.ref;

              if (null !== ref) {
                var instance = nextEffect.stateNode;

                switch (nextEffect.tag) {
                  case 5:
                    current = instance;
                    break;

                  default:
                    current = instance;
                }

                "function" === typeof ref ? ref(current) : ref.current = current;
              }
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw Error("Should be working on an effect.");
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      nextEffect = null;
      requestPaint();
      executionContext = prevExecutionContext;
    } else root$jscomp$0.current = finishedWork;

    if (rootDoesHavePassiveEffects) rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = root$jscomp$0, pendingPassiveEffectsRenderPriority = renderPriorityLevel$jscomp$0;else for (nextEffect = remainingExpirationTimeBeforeCommit; null !== nextEffect;) {
      renderPriorityLevel$jscomp$0 = nextEffect.nextEffect, nextEffect.nextEffect = null, nextEffect = renderPriorityLevel$jscomp$0;
    }
    renderPriorityLevel$jscomp$0 = root$jscomp$0.firstPendingTime;
    0 === renderPriorityLevel$jscomp$0 && (legacyErrorBoundariesThatAlreadyFailed = null);
    1073741823 === renderPriorityLevel$jscomp$0 ? root$jscomp$0 === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root$jscomp$0) : nestedUpdateCount = 0;
    "function" === typeof onCommitFiberRoot && onCommitFiberRoot(finishedWork.stateNode, expirationTime);
    ensureRootIsScheduled(root$jscomp$0);
    if (hasUncaughtError) throw hasUncaughtError = !1, root$jscomp$0 = firstUncaughtError, firstUncaughtError = null, root$jscomp$0;
    if ((executionContext & LegacyUnbatchedContext) !== NoContext) return null;
    flushSyncCallbackQueue();
    return null;
  }

  function commitBeforeMutationEffects() {
    for (; null !== nextEffect;) {
      var effectTag = nextEffect.effectTag;
      0 !== (effectTag & 256) && commitBeforeMutationLifeCycles(nextEffect.alternate, nextEffect);
      0 === (effectTag & 512) || rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = !0, scheduleCallback(97, function () {
        flushPassiveEffects();
        return null;
      }));
      nextEffect = nextEffect.nextEffect;
    }
  }

  function flushPassiveEffects() {
    if (90 !== pendingPassiveEffectsRenderPriority) {
      var priorityLevel = 97 < pendingPassiveEffectsRenderPriority ? 97 : pendingPassiveEffectsRenderPriority;
      pendingPassiveEffectsRenderPriority = 90;
      return runWithPriority(priorityLevel, flushPassiveEffectsImpl);
    }
  }

  function flushPassiveEffectsImpl() {
    if (null === rootWithPendingPassiveEffects) return !1;
    var root = rootWithPendingPassiveEffects;
    rootWithPendingPassiveEffects = null;
    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw Error("Cannot flush passive effects while already rendering.");
    var prevExecutionContext = executionContext;
    executionContext |= CommitContext;

    for (root = root.current.firstEffect; null !== root;) {
      try {
        var finishedWork = root;
        if (0 !== (finishedWork.effectTag & 512)) switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
          case 22:
            commitHookEffectListUnmount(5, finishedWork), commitHookEffectListMount(5, finishedWork);
        }
      } catch (error) {
        if (null === root) throw Error("Should be working on an effect.");
        captureCommitPhaseError(root, error);
      }

      finishedWork = root.nextEffect;
      root.nextEffect = null;
      root = finishedWork;
    }

    executionContext = prevExecutionContext;
    flushSyncCallbackQueue();
    return !0;
  }

  function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
    sourceFiber = createCapturedValue(error, sourceFiber);
    sourceFiber = createRootErrorUpdate(rootFiber, sourceFiber, 1073741823);
    enqueueUpdate(rootFiber, sourceFiber);
    rootFiber = markUpdateTimeFromFiberToRoot(rootFiber, 1073741823);
    null !== rootFiber && ensureRootIsScheduled(rootFiber);
  }

  function captureCommitPhaseError(sourceFiber, error) {
    if (3 === sourceFiber.tag) captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);else for (var fiber = sourceFiber.return; null !== fiber;) {
      if (3 === fiber.tag) {
        captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
        break;
      } else if (1 === fiber.tag) {
        var instance = fiber.stateNode;

        if ("function" === typeof fiber.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
          sourceFiber = createCapturedValue(error, sourceFiber);
          sourceFiber = createClassErrorUpdate(fiber, sourceFiber, 1073741823);
          enqueueUpdate(fiber, sourceFiber);
          fiber = markUpdateTimeFromFiberToRoot(fiber, 1073741823);
          null !== fiber && ensureRootIsScheduled(fiber);
          break;
        }
      }

      fiber = fiber.return;
    }
  }

  function pingSuspendedRoot(root, thenable, suspendedTime) {
    var pingCache = root.pingCache;
    null !== pingCache && pingCache.delete(thenable);
    workInProgressRoot === root && renderExpirationTime$1 === suspendedTime ? workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && 1073741823 === workInProgressRootLatestProcessedExpirationTime && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS ? prepareFreshStack(root, renderExpirationTime$1) : workInProgressRootHasPendingPing = !0 : isRootSuspendedAtTime(root, suspendedTime) && (thenable = root.lastPingedTime, 0 !== thenable && thenable < suspendedTime || (root.lastPingedTime = suspendedTime, ensureRootIsScheduled(root)));
  }

  function resolveRetryThenable(boundaryFiber, thenable) {
    var retryCache = boundaryFiber.stateNode;
    null !== retryCache && retryCache.delete(thenable);
    thenable = 0;
    0 === thenable && (thenable = requestCurrentTimeForUpdate(), thenable = computeExpirationForFiber(thenable, boundaryFiber, null));
    boundaryFiber = markUpdateTimeFromFiberToRoot(boundaryFiber, thenable);
    null !== boundaryFiber && ensureRootIsScheduled(boundaryFiber);
  }

  var beginWork$1;

  beginWork$1 = function beginWork$1(current, workInProgress, renderExpirationTime) {
    var updateExpirationTime = workInProgress.expirationTime;
    if (null !== current) {
      if (current.memoizedProps !== workInProgress.pendingProps || didPerformWorkStackCursor.current) didReceiveUpdate = !0;else {
        if (updateExpirationTime < renderExpirationTime) {
          didReceiveUpdate = !1;

          switch (workInProgress.tag) {
            case 3:
              pushHostRootContext(workInProgress);
              break;

            case 5:
              pushHostContext(workInProgress);
              break;

            case 1:
              isContextProvider(workInProgress.type) && pushContextProvider(workInProgress);
              break;

            case 4:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;

            case 10:
              updateExpirationTime = workInProgress.memoizedProps.value;
              var context = workInProgress.type._context;
              push(valueCursor, context._currentValue);
              context._currentValue = updateExpirationTime;
              break;

            case 13:
              if (null !== workInProgress.memoizedState) {
                updateExpirationTime = workInProgress.child.childExpirationTime;
                if (0 !== updateExpirationTime && updateExpirationTime >= renderExpirationTime) return updateSuspenseComponent(current, workInProgress, renderExpirationTime);
                push(suspenseStackCursor, suspenseStackCursor.current & 1);
                workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
                return null !== workInProgress ? workInProgress.sibling : null;
              }

              push(suspenseStackCursor, suspenseStackCursor.current & 1);
              break;

            case 19:
              updateExpirationTime = workInProgress.childExpirationTime >= renderExpirationTime;

              if (0 !== (current.effectTag & 64)) {
                if (updateExpirationTime) return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
                workInProgress.effectTag |= 64;
              }

              context = workInProgress.memoizedState;
              null !== context && (context.rendering = null, context.tail = null);
              push(suspenseStackCursor, suspenseStackCursor.current);
              if (!updateExpirationTime) return null;
          }

          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
        }

        didReceiveUpdate = !1;
      }
    } else didReceiveUpdate = !1;
    workInProgress.expirationTime = 0;

    switch (workInProgress.tag) {
      case 2:
        updateExpirationTime = workInProgress.type;
        null !== current && (current.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2);
        current = workInProgress.pendingProps;
        context = getMaskedContext(workInProgress, contextStackCursor.current);
        prepareToReadContext(workInProgress, renderExpirationTime);
        context = renderWithHooks(null, workInProgress, updateExpirationTime, current, context, renderExpirationTime);
        workInProgress.effectTag |= 1;

        if ("object" === typeof context && null !== context && "function" === typeof context.render && void 0 === context.$$typeof) {
          workInProgress.tag = 1;
          workInProgress.memoizedState = null;
          workInProgress.updateQueue = null;

          if (isContextProvider(updateExpirationTime)) {
            var hasContext = !0;
            pushContextProvider(workInProgress);
          } else hasContext = !1;

          workInProgress.memoizedState = null !== context.state && void 0 !== context.state ? context.state : null;
          initializeUpdateQueue(workInProgress);
          var getDerivedStateFromProps = updateExpirationTime.getDerivedStateFromProps;
          "function" === typeof getDerivedStateFromProps && applyDerivedStateFromProps(workInProgress, updateExpirationTime, getDerivedStateFromProps, current);
          context.updater = classComponentUpdater;
          workInProgress.stateNode = context;
          context._reactInternalFiber = workInProgress;
          mountClassInstance(workInProgress, updateExpirationTime, current, renderExpirationTime);
          workInProgress = finishClassComponent(null, workInProgress, updateExpirationTime, !0, hasContext, renderExpirationTime);
        } else workInProgress.tag = 0, reconcileChildren(null, workInProgress, context, renderExpirationTime), workInProgress = workInProgress.child;

        return workInProgress;

      case 16:
        a: {
          context = workInProgress.elementType;
          null !== current && (current.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2);
          current = workInProgress.pendingProps;
          initializeLazyComponentType(context);
          if (1 !== context._status) throw context._result;
          context = context._result;
          workInProgress.type = context;
          hasContext = workInProgress.tag = resolveLazyComponentTag(context);
          current = resolveDefaultProps(context, current);

          switch (hasContext) {
            case 0:
              workInProgress = updateFunctionComponent(null, workInProgress, context, current, renderExpirationTime);
              break a;

            case 1:
              workInProgress = updateClassComponent(null, workInProgress, context, current, renderExpirationTime);
              break a;

            case 11:
              workInProgress = updateForwardRef(null, workInProgress, context, current, renderExpirationTime);
              break a;

            case 14:
              workInProgress = updateMemoComponent(null, workInProgress, context, resolveDefaultProps(context.type, current), updateExpirationTime, renderExpirationTime);
              break a;
          }

          throw Error("Element type is invalid. Received a promise that resolves to: " + context + ". Lazy element type must resolve to a class or function.");
        }

        return workInProgress;

      case 0:
        return updateExpirationTime = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === updateExpirationTime ? context : resolveDefaultProps(updateExpirationTime, context), updateFunctionComponent(current, workInProgress, updateExpirationTime, context, renderExpirationTime);

      case 1:
        return updateExpirationTime = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === updateExpirationTime ? context : resolveDefaultProps(updateExpirationTime, context), updateClassComponent(current, workInProgress, updateExpirationTime, context, renderExpirationTime);

      case 3:
        pushHostRootContext(workInProgress);
        updateExpirationTime = workInProgress.updateQueue;
        if (null === current || null === updateExpirationTime) throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
        updateExpirationTime = workInProgress.pendingProps;
        context = workInProgress.memoizedState;
        context = null !== context ? context.element : null;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, updateExpirationTime, null, renderExpirationTime);
        updateExpirationTime = workInProgress.memoizedState.element;
        updateExpirationTime === context ? workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime) : (reconcileChildren(current, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress = workInProgress.child);
        return workInProgress;

      case 5:
        return pushHostContext(workInProgress), updateExpirationTime = workInProgress.pendingProps.children, markRef(current, workInProgress), reconcileChildren(current, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress = workInProgress.child, workInProgress;

      case 6:
        return null;

      case 13:
        return updateSuspenseComponent(current, workInProgress, renderExpirationTime);

      case 4:
        return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), updateExpirationTime = workInProgress.pendingProps, null === current ? workInProgress.child = reconcileChildFibers(workInProgress, null, updateExpirationTime, renderExpirationTime) : reconcileChildren(current, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 11:
        return updateExpirationTime = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === updateExpirationTime ? context : resolveDefaultProps(updateExpirationTime, context), updateForwardRef(current, workInProgress, updateExpirationTime, context, renderExpirationTime);

      case 7:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps, renderExpirationTime), workInProgress.child;

      case 8:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderExpirationTime), workInProgress.child;

      case 12:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderExpirationTime), workInProgress.child;

      case 10:
        a: {
          updateExpirationTime = workInProgress.type._context;
          context = workInProgress.pendingProps;
          getDerivedStateFromProps = workInProgress.memoizedProps;
          hasContext = context.value;
          var context$jscomp$0 = workInProgress.type._context;
          push(valueCursor, context$jscomp$0._currentValue);
          context$jscomp$0._currentValue = hasContext;
          if (null !== getDerivedStateFromProps) if (context$jscomp$0 = getDerivedStateFromProps.value, hasContext = objectIs(context$jscomp$0, hasContext) ? 0 : ("function" === typeof updateExpirationTime._calculateChangedBits ? updateExpirationTime._calculateChangedBits(context$jscomp$0, hasContext) : 1073741823) | 0, 0 === hasContext) {
            if (getDerivedStateFromProps.children === context.children && !didPerformWorkStackCursor.current) {
              workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
              break a;
            }
          } else for (context$jscomp$0 = workInProgress.child, null !== context$jscomp$0 && (context$jscomp$0.return = workInProgress); null !== context$jscomp$0;) {
            var list = context$jscomp$0.dependencies;

            if (null !== list) {
              getDerivedStateFromProps = context$jscomp$0.child;

              for (var dependency = list.firstContext; null !== dependency;) {
                if (dependency.context === updateExpirationTime && 0 !== (dependency.observedBits & hasContext)) {
                  1 === context$jscomp$0.tag && (dependency = createUpdate(renderExpirationTime, null), dependency.tag = 2, enqueueUpdate(context$jscomp$0, dependency));
                  context$jscomp$0.expirationTime < renderExpirationTime && (context$jscomp$0.expirationTime = renderExpirationTime);
                  dependency = context$jscomp$0.alternate;
                  null !== dependency && dependency.expirationTime < renderExpirationTime && (dependency.expirationTime = renderExpirationTime);
                  scheduleWorkOnParentPath(context$jscomp$0.return, renderExpirationTime);
                  list.expirationTime < renderExpirationTime && (list.expirationTime = renderExpirationTime);
                  break;
                }

                dependency = dependency.next;
              }
            } else getDerivedStateFromProps = 10 === context$jscomp$0.tag ? context$jscomp$0.type === workInProgress.type ? null : context$jscomp$0.child : context$jscomp$0.child;

            if (null !== getDerivedStateFromProps) getDerivedStateFromProps.return = context$jscomp$0;else for (getDerivedStateFromProps = context$jscomp$0; null !== getDerivedStateFromProps;) {
              if (getDerivedStateFromProps === workInProgress) {
                getDerivedStateFromProps = null;
                break;
              }

              context$jscomp$0 = getDerivedStateFromProps.sibling;

              if (null !== context$jscomp$0) {
                context$jscomp$0.return = getDerivedStateFromProps.return;
                getDerivedStateFromProps = context$jscomp$0;
                break;
              }

              getDerivedStateFromProps = getDerivedStateFromProps.return;
            }
            context$jscomp$0 = getDerivedStateFromProps;
          }
          reconcileChildren(current, workInProgress, context.children, renderExpirationTime);
          workInProgress = workInProgress.child;
        }

        return workInProgress;

      case 9:
        return context = workInProgress.type, hasContext = workInProgress.pendingProps, updateExpirationTime = hasContext.children, prepareToReadContext(workInProgress, renderExpirationTime), context = readContext(context, hasContext.unstable_observedBits), updateExpirationTime = updateExpirationTime(context), workInProgress.effectTag |= 1, reconcileChildren(current, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 14:
        return context = workInProgress.type, hasContext = resolveDefaultProps(context, workInProgress.pendingProps), hasContext = resolveDefaultProps(context.type, hasContext), updateMemoComponent(current, workInProgress, context, hasContext, updateExpirationTime, renderExpirationTime);

      case 15:
        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);

      case 17:
        return updateExpirationTime = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === updateExpirationTime ? context : resolveDefaultProps(updateExpirationTime, context), null !== current && (current.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2), workInProgress.tag = 1, isContextProvider(updateExpirationTime) ? (current = !0, pushContextProvider(workInProgress)) : current = !1, prepareToReadContext(workInProgress, renderExpirationTime), constructClassInstance(workInProgress, updateExpirationTime, context), mountClassInstance(workInProgress, updateExpirationTime, context, renderExpirationTime), finishClassComponent(null, workInProgress, updateExpirationTime, !0, current, renderExpirationTime);

      case 19:
        return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
    }

    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
  };

  var onCommitFiberRoot = null,
      onCommitFiberUnmount = null;

  function injectInternals(internals) {
    if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;
    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (hook.isDisabled || !hook.supportsFiber) return !0;

    try {
      var rendererID = hook.inject(internals);

      onCommitFiberRoot = function onCommitFiberRoot(root) {
        try {
          hook.onCommitFiberRoot(rendererID, root, void 0, 64 === (root.current.effectTag & 64));
        } catch (err) {}
      };

      onCommitFiberUnmount = function onCommitFiberUnmount(fiber) {
        try {
          hook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {}
      };
    } catch (err) {}

    return !0;
  }

  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.effectTag = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.childExpirationTime = this.expirationTime = 0;
    this.alternate = null;
  }

  function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
  }

  function resolveLazyComponentTag(Component) {
    if ("function" === typeof Component) return shouldConstruct(Component) ? 1 : 0;

    if (void 0 !== Component && null !== Component) {
      Component = Component.$$typeof;
      if (Component === REACT_FORWARD_REF_TYPE) return 11;
      if (Component === REACT_MEMO_TYPE) return 14;
    }

    return 2;
  }

  function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = new FiberNode(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.effectTag = 0, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null);
    workInProgress.childExpirationTime = current.childExpirationTime;
    workInProgress.expirationTime = current.expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    pendingProps = current.dependencies;
    workInProgress.dependencies = null === pendingProps ? null : {
      expirationTime: pendingProps.expirationTime,
      firstContext: pendingProps.firstContext,
      responders: pendingProps.responders
    };
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }

  function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
    var fiberTag = 2;
    owner = type;
    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);else if ("string" === typeof type) fiberTag = 5;else a: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

      case REACT_CONCURRENT_MODE_TYPE:
        fiberTag = 8;
        mode |= 7;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = 8;
        mode |= 1;
        break;

      case REACT_PROFILER_TYPE:
        return type = new FiberNode(12, pendingProps, key, mode | 8), type.elementType = REACT_PROFILER_TYPE, type.type = REACT_PROFILER_TYPE, type.expirationTime = expirationTime, type;

      case REACT_SUSPENSE_TYPE:
        return type = new FiberNode(13, pendingProps, key, mode), type.type = REACT_SUSPENSE_TYPE, type.elementType = REACT_SUSPENSE_TYPE, type.expirationTime = expirationTime, type;

      case REACT_SUSPENSE_LIST_TYPE:
        return type = new FiberNode(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.expirationTime = expirationTime, type;

      default:
        if ("object" === typeof type && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
            fiberTag = 10;
            break a;

          case REACT_CONTEXT_TYPE:
            fiberTag = 9;
            break a;

          case REACT_FORWARD_REF_TYPE:
            fiberTag = 11;
            break a;

          case REACT_MEMO_TYPE:
            fiberTag = 14;
            break a;

          case REACT_LAZY_TYPE:
            fiberTag = 16;
            owner = null;
            break a;

          case REACT_BLOCK_TYPE:
            fiberTag = 22;
            break a;
        }
        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (null == type ? type : typeof type) + ".");
    }
    key = new FiberNode(fiberTag, pendingProps, key, mode);
    key.elementType = type;
    key.type = owner;
    key.expirationTime = expirationTime;
    return key;
  }

  function createFiberFromFragment(elements, mode, expirationTime, key) {
    elements = new FiberNode(7, elements, key, mode);
    elements.expirationTime = expirationTime;
    return elements;
  }

  function createFiberFromText(content, mode, expirationTime) {
    content = new FiberNode(6, content, null, mode);
    content.expirationTime = expirationTime;
    return content;
  }

  function createFiberFromPortal(portal, mode, expirationTime) {
    mode = new FiberNode(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.expirationTime = expirationTime;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }

  function FiberRootNode(containerInfo, tag, hydrate) {
    this.tag = tag;
    this.current = null;
    this.containerInfo = containerInfo;
    this.pingCache = this.pendingChildren = null;
    this.finishedExpirationTime = 0;
    this.finishedWork = null;
    this.timeoutHandle = -1;
    this.pendingContext = this.context = null;
    this.hydrate = hydrate;
    this.callbackNode = null;
    this.callbackPriority = 90;
    this.lastExpiredTime = this.lastPingedTime = this.nextKnownPendingLevel = this.lastSuspendedTime = this.firstSuspendedTime = this.firstPendingTime = 0;
  }

  function isRootSuspendedAtTime(root, expirationTime) {
    var firstSuspendedTime = root.firstSuspendedTime;
    root = root.lastSuspendedTime;
    return 0 !== firstSuspendedTime && firstSuspendedTime >= expirationTime && root <= expirationTime;
  }

  function markRootSuspendedAtTime(root, expirationTime) {
    var firstSuspendedTime = root.firstSuspendedTime,
        lastSuspendedTime = root.lastSuspendedTime;
    firstSuspendedTime < expirationTime && (root.firstSuspendedTime = expirationTime);
    if (lastSuspendedTime > expirationTime || 0 === firstSuspendedTime) root.lastSuspendedTime = expirationTime;
    expirationTime <= root.lastPingedTime && (root.lastPingedTime = 0);
    expirationTime <= root.lastExpiredTime && (root.lastExpiredTime = 0);
  }

  function markRootUpdatedAtTime(root, expirationTime) {
    expirationTime > root.firstPendingTime && (root.firstPendingTime = expirationTime);
    var firstSuspendedTime = root.firstSuspendedTime;
    0 !== firstSuspendedTime && (expirationTime >= firstSuspendedTime ? root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = 0 : expirationTime >= root.lastSuspendedTime && (root.lastSuspendedTime = expirationTime + 1), expirationTime > root.nextKnownPendingLevel && (root.nextKnownPendingLevel = expirationTime));
  }

  function findHostInstance(component) {
    var fiber = component._reactInternalFiber;

    if (void 0 === fiber) {
      if ("function" === typeof component.render) throw Error("Unable to find node on an unmounted component.");
      throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
    }

    component = findCurrentHostFiber(fiber);
    return null === component ? null : component.stateNode;
  }

  function updateContainer(element, container, parentComponent, callback) {
    var current = container.current,
        currentTime = requestCurrentTimeForUpdate(),
        suspenseConfig = ReactCurrentBatchConfig.suspense;
    currentTime = computeExpirationForFiber(currentTime, current, suspenseConfig);

    a: if (parentComponent) {
      parentComponent = parentComponent._reactInternalFiber;

      b: {
        if (getNearestMountedFiber(parentComponent) !== parentComponent || 1 !== parentComponent.tag) throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var parentContext = parentComponent;

        do {
          switch (parentContext.tag) {
            case 3:
              parentContext = parentContext.stateNode.context;
              break b;

            case 1:
              if (isContextProvider(parentContext.type)) {
                parentContext = parentContext.stateNode.__reactInternalMemoizedMergedChildContext;
                break b;
              }

          }

          parentContext = parentContext.return;
        } while (null !== parentContext);

        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }

      if (1 === parentComponent.tag) {
        var Component = parentComponent.type;

        if (isContextProvider(Component)) {
          parentComponent = processChildContext(parentComponent, Component, parentContext);
          break a;
        }
      }

      parentComponent = parentContext;
    } else parentComponent = emptyContextObject;

    null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
    container = createUpdate(currentTime, suspenseConfig);
    container.payload = {
      element: element
    };
    callback = void 0 === callback ? null : callback;
    null !== callback && (container.callback = callback);
    enqueueUpdate(current, container);
    scheduleWork(current, currentTime);
    return currentTime;
  }

  function createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }

  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical._nativeTag;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical._nativeTag : componentOrHandle._nativeTag;
  }

  function unmountComponentAtNode(containerTag) {
    var root = roots.get(containerTag);
    root && updateContainer(null, root, null, function () {
      roots.delete(containerTag);
    });
  }

  batchedUpdatesImpl = function batchedUpdatesImpl(fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= 1;

    try {
      return fn(a);
    } finally {
      executionContext = prevExecutionContext, executionContext === NoContext && flushSyncCallbackQueue();
    }
  };

  var roots = new Map();

  (function (devToolsConfig) {
    var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
    return injectInternals({
      bundleType: devToolsConfig.bundleType,
      version: devToolsConfig.version,
      rendererPackageName: devToolsConfig.rendererPackageName,
      rendererConfig: devToolsConfig.rendererConfig,
      overrideHookState: null,
      overrideProps: null,
      setSuspenseHandler: null,
      scheduleUpdate: null,
      currentDispatcherRef: ReactSharedInternals.ReactCurrentDispatcher,
      findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
        fiber = findCurrentHostFiber(fiber);
        return null === fiber ? null : fiber.stateNode;
      },
      findFiberByHostInstance: function findFiberByHostInstance(instance) {
        return _findFiberByHostInstance ? _findFiberByHostInstance(instance) : null;
      },
      findHostInstancesForRefresh: null,
      scheduleRefresh: null,
      scheduleRoot: null,
      setRefreshHandler: null,
      getCurrentFiber: null
    });
  })({
    findFiberByHostInstance: getInstanceFromTag,
    bundleType: 0,
    version: "16.13.0",
    rendererPackageName: "react-native-renderer",
    rendererConfig: {
      getInspectorDataForViewTag: function getInspectorDataForViewTag() {
        throw Error("getInspectorDataForViewTag() is not available in production");
      },
      getInspectorDataForViewAtPoint: function () {
        throw Error("getInspectorDataForViewAtPoint() is not available in production.");
      }.bind(null, findNodeHandle)
    }
  });

  exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
    computeComponentStackForErrorReporting: function computeComponentStackForErrorReporting(reactTag) {
      return (reactTag = getInstanceFromTag(reactTag)) ? getStackByFiberInDevAndProd(reactTag) : "";
    }
  };

  exports.createPortal = function (children, containerTag) {
    return createPortal(children, containerTag, null, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
  };

  exports.dispatchCommand = function (handle, command, args) {
    null != handle._nativeTag && (handle._internalInstanceHandle ? nativeFabricUIManager.dispatchCommand(handle._internalInstanceHandle.stateNode.node, command, args) : _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.dispatchViewManagerCommand(handle._nativeTag, command, args));
  };

  exports.findHostInstance_DEPRECATED = function (componentOrHandle) {
    if (null == componentOrHandle) return null;
    if (componentOrHandle._nativeTag) return componentOrHandle;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical : componentOrHandle;
  };

  exports.findNodeHandle = findNodeHandle;

  exports.render = function (element, containerTag, callback) {
    var root = roots.get(containerTag);

    if (!root) {
      root = new FiberRootNode(containerTag, 0, !1);
      var uninitializedFiber = new FiberNode(3, null, null, 0);
      root.current = uninitializedFiber;
      uninitializedFiber.stateNode = root;
      initializeUpdateQueue(uninitializedFiber);
      roots.set(containerTag, root);
    }

    updateContainer(element, root, null, callback);

    a: if (element = root.current, element.child) switch (element.child.tag) {
      case 5:
        element = element.child.stateNode;
        break a;

      default:
        element = element.child.stateNode;
    } else element = null;

    return element;
  };

  exports.unmountComponentAtNode = unmountComponentAtNode;

  exports.unmountComponentAtNodeAndRemoveContainer = function (containerTag) {
    unmountComponentAtNode(containerTag);

    _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.removeRootView(containerTag);
  };

  exports.unstable_batchedUpdates = batchedUpdates;
},198,[87,49,58,192],"node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-prod.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Commands = void 0;

  var _requireNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../ReactNative/requireNativeComponent"));

  var _codegenNativeCommands = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Utilities/codegenNativeCommands"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3], "react"));

  var _RCTSinglelineTextInputViewConfig = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "./RCTSinglelineTextInputViewConfig"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['focus', 'blur', 'setTextAndSelection']
  });
  exports.Commands = Commands;
  var SinglelineTextInputNativeComponent;

  if (global.RN$Bridgeless) {
    _$$_REQUIRE(_dependencyMap[5], "../../Renderer/shims/ReactNativeViewConfigRegistry").register('RCTSinglelineTextInputView', function () {
      return _RCTSinglelineTextInputViewConfig.default;
    });

    SinglelineTextInputNativeComponent = 'RCTSinglelineTextInputView';
  } else {
    SinglelineTextInputNativeComponent = (0, _requireNativeComponent.default)('RCTSinglelineTextInputView');
  }

  var _default = SinglelineTextInputNativeComponent;
  exports.default = _default;
},199,[3,56,200,49,201,83],"node_modules/react-native/Libraries/Components/TextInput/RCTSingelineTextInputNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  function codegenNativeCommands(options) {
    var commandObj = {};
    options.supportedCommands.forEach(function (command) {
      commandObj[command] = function (ref) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        (0, _$$_REQUIRE(_dependencyMap[0], "../../Libraries/Renderer/shims/ReactNative").dispatchCommand)(ref, command, args);
      };
    });
    return commandObj;
  }

  var _default = codegenNativeCommands;
  exports.default = _default;
},200,[85],"node_modules/react-native/Libraries/Utilities/codegenNativeCommands.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _ReactNativeViewViewConfig = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../Components/View/ReactNativeViewViewConfig"));

  var RCTSinglelineTextInputViewConfig = {
    uiViewClassName: 'RCTSinglelineTextInputView',
    bubblingEventTypes: {
      topBlur: {
        phasedRegistrationNames: {
          bubbled: 'onBlur',
          captured: 'onBlurCapture'
        }
      },
      topChange: {
        phasedRegistrationNames: {
          bubbled: 'onChange',
          captured: 'onChangeCapture'
        }
      },
      topEndEditing: {
        phasedRegistrationNames: {
          bubbled: 'onEndEditing',
          captured: 'onEndEditingCapture'
        }
      },
      topFocus: {
        phasedRegistrationNames: {
          bubbled: 'onFocus',
          captured: 'onFocusCapture'
        }
      },
      topKeyPress: {
        phasedRegistrationNames: {
          bubbled: 'onKeyPress',
          captured: 'onKeyPressCapture'
        }
      },
      topSubmitEditing: {
        phasedRegistrationNames: {
          bubbled: 'onSubmitEditing',
          captured: 'onSubmitEditingCapture'
        }
      },
      topTouchCancel: {
        phasedRegistrationNames: {
          bubbled: 'onTouchCancel',
          captured: 'onTouchCancelCapture'
        }
      },
      topTouchEnd: {
        phasedRegistrationNames: {
          bubbled: 'onTouchEnd',
          captured: 'onTouchEndCapture'
        }
      },
      topTouchMove: {
        phasedRegistrationNames: {
          bubbled: 'onTouchMove',
          captured: 'onTouchMoveCapture'
        }
      }
    },
    directEventTypes: {},
    validAttributes: Object.assign({}, _ReactNativeViewViewConfig.default.validAttributes, {
      fontSize: true,
      fontWeight: true,
      fontVariant: true,
      textShadowOffset: {
        diff: _$$_REQUIRE(_dependencyMap[2], "../../Utilities/differ/sizesDiffer")
      },
      allowFontScaling: true,
      fontStyle: true,
      textTransform: true,
      textAlign: true,
      fontFamily: true,
      lineHeight: true,
      isHighlighted: true,
      writingDirection: true,
      textDecorationLine: true,
      textShadowRadius: true,
      letterSpacing: true,
      textDecorationStyle: true,
      textDecorationColor: {
        process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
      },
      color: {
        process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
      },
      maxFontSizeMultiplier: true,
      textShadowColor: {
        process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
      },
      editable: true,
      inputAccessoryViewID: true,
      caretHidden: true,
      enablesReturnKeyAutomatically: true,
      placeholderTextColor: {
        process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
      },
      onSelectionChange: true,
      clearButtonMode: true,
      onContentSizeChange: true,
      keyboardType: true,
      selection: true,
      returnKeyType: true,
      blurOnSubmit: true,
      mostRecentEventCount: true,
      onChange: true,
      scrollEnabled: true,
      selectionColor: {
        process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processColor")
      },
      contextMenuHidden: true,
      secureTextEntry: true,
      onTextInput: true,
      placeholder: true,
      autoCorrect: true,
      onScroll: true,
      multiline: true,
      textContentType: true,
      maxLength: true,
      autoCapitalize: true,
      keyboardAppearance: true,
      passwordRules: true,
      spellCheck: true,
      selectTextOnFocus: true,
      text: true,
      clearTextOnFocus: true
    })
  };
  module.exports = RCTSinglelineTextInputViewConfig;
},201,[3,174,180,176],"node_modules/react-native/Libraries/Components/TextInput/RCTSinglelineTextInputViewConfig.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Commands = void 0;

  var _requireNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../ReactNative/requireNativeComponent"));

  var _codegenNativeCommands = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Utilities/codegenNativeCommands"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3], "react"));

  var _AndroidTextInputViewConfig = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "./AndroidTextInputViewConfig"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['focus', 'blur', 'setTextAndSelection']
  });
  exports.Commands = Commands;
  var AndroidTextInputNativeComponent;

  if (global.RN$Bridgeless) {
    _$$_REQUIRE(_dependencyMap[5], "../../Renderer/shims/ReactNativeViewConfigRegistry").register('AndroidTextInput', function () {
      return _AndroidTextInputViewConfig.default;
    });

    AndroidTextInputNativeComponent = 'AndroidTextInput';
  } else {
    AndroidTextInputNativeComponent = (0, _requireNativeComponent.default)('AndroidTextInput');
  }

  var _default = AndroidTextInputNativeComponent;
  exports.default = _default;
},202,[3,56,200,49,203,83],"node_modules/react-native/Libraries/Components/TextInput/AndroidTextInputNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _ReactNativeViewViewConfig = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../Components/View/ReactNativeViewViewConfig"));

  var AndroidTextInputViewConfig = {
    uiViewClassName: 'AndroidTextInput',
    bubblingEventTypes: {
      topTextInput: {
        phasedRegistrationNames: {
          bubbled: 'onTextInput',
          captured: 'onTextInputCapture'
        }
      }
    },
    directEventTypes: {},
    validAttributes: Object.assign({}, _ReactNativeViewViewConfig.default.validAttributes, {
      maxFontSizeMultiplier: true,
      placeholder: true,
      inlineImagePadding: true,
      contextMenuHidden: true,
      textShadowColor: {
        process: _$$_REQUIRE(_dependencyMap[2], "../../StyleSheet/processColor")
      },
      maxLength: true,
      selectTextOnFocus: true,
      textShadowRadius: true,
      underlineColorAndroid: {
        process: _$$_REQUIRE(_dependencyMap[2], "../../StyleSheet/processColor")
      },
      textDecorationLine: true,
      blurOnSubmit: true,
      textAlignVertical: true,
      fontStyle: true,
      textShadowOffset: true,
      selectionColor: {
        process: _$$_REQUIRE(_dependencyMap[2], "../../StyleSheet/processColor")
      },
      selection: true,
      placeholderTextColor: {
        process: _$$_REQUIRE(_dependencyMap[2], "../../StyleSheet/processColor")
      },
      importantForAutofill: true,
      lineHeight: true,
      textTransform: true,
      returnKeyType: true,
      keyboardType: true,
      multiline: true,
      color: true,
      autoCompleteType: true,
      numberOfLines: true,
      letterSpacing: true,
      returnKeyLabel: true,
      fontSize: true,
      onKeyPress: true,
      cursorColor: {
        process: _$$_REQUIRE(_dependencyMap[2], "../../StyleSheet/processColor")
      },
      text: true,
      showSoftInputOnFocus: true,
      textAlign: true,
      autoCapitalize: true,
      autoCorrect: true,
      caretHidden: true,
      secureTextEntry: true,
      textBreakStrategy: true,
      onScroll: true,
      onContentSizeChange: true,
      disableFullscreenUI: true,
      includeFontPadding: true,
      fontWeight: true,
      fontFamily: true,
      allowFontScaling: true,
      onSelectionChange: true,
      mostRecentEventCount: true,
      inlineImageLeft: true,
      editable: true,
      fontVariant: true
    })
  };
  module.exports = AndroidTextInputViewConfig;
},203,[3,174,176],"node_modules/react-native/Libraries/Components/TextInput/AndroidTextInputViewConfig.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var logListeners;

  function unstable_setLogListeners(listeners) {
    logListeners = listeners;
  }

  var deepDiffer = function deepDiffer(one, two) {
    var maxDepthOrOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
    var maybeOptions = arguments.length > 3 ? arguments[3] : undefined;
    var options = typeof maxDepthOrOptions === 'number' ? maybeOptions : maxDepthOrOptions;
    var maxDepth = typeof maxDepthOrOptions === 'number' ? maxDepthOrOptions : -1;

    if (maxDepth === 0) {
      return true;
    }

    if (one === two) {
      return false;
    }

    if (typeof one === 'function' && typeof two === 'function') {
      var unsafelyIgnoreFunctions = options == null ? void 0 : options.unsafelyIgnoreFunctions;

      if (unsafelyIgnoreFunctions == null) {
        if (logListeners && logListeners.onDifferentFunctionsIgnored && (!options || !('unsafelyIgnoreFunctions' in options))) {
          logListeners.onDifferentFunctionsIgnored(one.name, two.name);
        }

        unsafelyIgnoreFunctions = true;
      }

      return !unsafelyIgnoreFunctions;
    }

    if (typeof one !== 'object' || one === null) {
      return one !== two;
    }

    if (typeof two !== 'object' || two === null) {
      return true;
    }

    if (one.constructor !== two.constructor) {
      return true;
    }

    if (Array.isArray(one)) {
      var len = one.length;

      if (two.length !== len) {
        return true;
      }

      for (var ii = 0; ii < len; ii++) {
        if (deepDiffer(one[ii], two[ii], maxDepth - 1, options)) {
          return true;
        }
      }
    } else {
      for (var key in one) {
        if (deepDiffer(one[key], two[key], maxDepth - 1, options)) {
          return true;
        }
      }

      for (var twoKey in two) {
        if (one[twoKey] === undefined && two[twoKey] !== undefined) {
          return true;
        }
      }
    }

    return false;
  };

  module.exports = deepDiffer;
  module.exports.unstable_setLogListeners = unstable_setLogListeners;
},204,[],"node_modules/react-native/Libraries/Utilities/differ/deepDiffer.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function showErrorDialog(capturedError) {
    var componentStack = capturedError.componentStack,
        error = capturedError.error;
    var errorToHandle;

    if (error instanceof Error) {
      errorToHandle = error;
    } else if (typeof error === 'string') {
      errorToHandle = new (_$$_REQUIRE(_dependencyMap[0], "./ExceptionsManager").SyntheticError)(error);
    } else {
      errorToHandle = new (_$$_REQUIRE(_dependencyMap[0], "./ExceptionsManager").SyntheticError)('Unspecified error');
    }

    try {
      errorToHandle.componentStack = componentStack;
      errorToHandle.isComponentError = true;
    } catch (e) {}

    (0, _$$_REQUIRE(_dependencyMap[0], "./ExceptionsManager").handleException)(errorToHandle, false);
    return false;
  }

  module.exports = {
    showErrorDialog: showErrorDialog
  };
},205,[59],"node_modules/react-native/Libraries/Core/ReactFiberErrorDialog.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function getNativeComponentAttributes(uiViewClassName) {
    var viewConfig = _$$_REQUIRE(_dependencyMap[0], "./UIManager").getViewManagerConfig(uiViewClassName);

    _$$_REQUIRE(_dependencyMap[1], "invariant")(viewConfig != null && viewConfig.NativeProps != null, 'requireNativeComponent: "%s" was not found in the UIManager.', uiViewClassName);

    var baseModuleName = viewConfig.baseModuleName,
        bubblingEventTypes = viewConfig.bubblingEventTypes,
        directEventTypes = viewConfig.directEventTypes;
    var nativeProps = viewConfig.NativeProps;

    while (baseModuleName) {
      var baseModule = _$$_REQUIRE(_dependencyMap[0], "./UIManager").getViewManagerConfig(baseModuleName);

      if (!baseModule) {
        _$$_REQUIRE(_dependencyMap[2], "fbjs/lib/warning")(false, 'Base module "%s" does not exist', baseModuleName);

        baseModuleName = null;
      } else {
        bubblingEventTypes = Object.assign({}, baseModule.bubblingEventTypes, bubblingEventTypes);
        directEventTypes = Object.assign({}, baseModule.directEventTypes, directEventTypes);
        nativeProps = Object.assign({}, baseModule.NativeProps, nativeProps);
        baseModuleName = baseModule.baseModuleName;
      }
    }

    var validAttributes = {};

    for (var key in nativeProps) {
      var typeName = nativeProps[key];
      var diff = getDifferForType(typeName);
      var process = getProcessorForType(typeName);
      validAttributes[key] = diff == null && process == null ? true : {
        diff: diff,
        process: process
      };
    }

    validAttributes.style = _$$_REQUIRE(_dependencyMap[3], "../Components/View/ReactNativeStyleAttributes");
    Object.assign(viewConfig, {
      uiViewClassName: uiViewClassName,
      validAttributes: validAttributes,
      bubblingEventTypes: bubblingEventTypes,
      directEventTypes: directEventTypes
    });

    if (!hasAttachedDefaultEventTypes) {
      attachDefaultEventTypes(viewConfig);
      hasAttachedDefaultEventTypes = true;
    }

    return viewConfig;
  }

  var hasAttachedDefaultEventTypes = false;

  function attachDefaultEventTypes(viewConfig) {
    var constants = _$$_REQUIRE(_dependencyMap[0], "./UIManager").getConstants();

    if (constants.ViewManagerNames || constants.LazyViewManagersEnabled) {
      viewConfig = merge(viewConfig, _$$_REQUIRE(_dependencyMap[0], "./UIManager").getDefaultEventTypes());
    } else {
      viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, constants.genericBubblingEventTypes);
      viewConfig.directEventTypes = merge(viewConfig.directEventTypes, constants.genericDirectEventTypes);
    }
  }

  function merge(destination, source) {
    if (!source) {
      return destination;
    }

    if (!destination) {
      return source;
    }

    for (var key in source) {
      if (!source.hasOwnProperty(key)) {
        continue;
      }

      var sourceValue = source[key];

      if (destination.hasOwnProperty(key)) {
        var destinationValue = destination[key];

        if (typeof sourceValue === 'object' && typeof destinationValue === 'object') {
          sourceValue = merge(destinationValue, sourceValue);
        }
      }

      destination[key] = sourceValue;
    }

    return destination;
  }

  function getDifferForType(typeName) {
    switch (typeName) {
      case 'CATransform3D':
        return _$$_REQUIRE(_dependencyMap[4], "../Utilities/differ/matricesDiffer");

      case 'CGPoint':
        return _$$_REQUIRE(_dependencyMap[5], "../Utilities/differ/pointsDiffer");

      case 'CGSize':
        return _$$_REQUIRE(_dependencyMap[6], "../Utilities/differ/sizesDiffer");

      case 'UIEdgeInsets':
        return _$$_REQUIRE(_dependencyMap[7], "../Utilities/differ/insetsDiffer");
    }

    return null;
  }

  function getProcessorForType(typeName) {
    switch (typeName) {
      case 'CGColor':
      case 'UIColor':
        return _$$_REQUIRE(_dependencyMap[8], "../StyleSheet/processColor");

      case 'CGColorArray':
      case 'UIColorArray':
        return _$$_REQUIRE(_dependencyMap[9], "../StyleSheet/processColorArray");

      case 'CGImage':
      case 'UIImage':
      case 'RCTImageSource':
        return _$$_REQUIRE(_dependencyMap[10], "../Image/resolveAssetSource");

      case 'Color':
        return _$$_REQUIRE(_dependencyMap[8], "../StyleSheet/processColor");

      case 'ColorArray':
        return _$$_REQUIRE(_dependencyMap[9], "../StyleSheet/processColorArray");
    }

    return null;
  }

  module.exports = getNativeComponentAttributes;
},206,[43,6,19,207,181,226,180,179,176,227,228],"node_modules/react-native/Libraries/ReactNative/getNativeComponentAttributes.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactNativeStyleAttributes = {};

  for (var attributeName of Object.keys(Object.assign({}, _$$_REQUIRE(_dependencyMap[0], "../../DeprecatedPropTypes/DeprecatedViewStylePropTypes"), _$$_REQUIRE(_dependencyMap[1], "../../DeprecatedPropTypes/DeprecatedTextStylePropTypes"), _$$_REQUIRE(_dependencyMap[2], "../../DeprecatedPropTypes/DeprecatedImageStylePropTypes")))) {
    ReactNativeStyleAttributes[attributeName] = true;
  }

  ReactNativeStyleAttributes.transform = {
    process: _$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/processTransform")
  };
  ReactNativeStyleAttributes.shadowOffset = {
    diff: _$$_REQUIRE(_dependencyMap[4], "../../Utilities/differ/sizesDiffer")
  };
  var colorAttributes = {
    process: _$$_REQUIRE(_dependencyMap[5], "../../StyleSheet/processColor")
  };
  ReactNativeStyleAttributes.backgroundColor = colorAttributes;
  ReactNativeStyleAttributes.borderBottomColor = colorAttributes;
  ReactNativeStyleAttributes.borderColor = colorAttributes;
  ReactNativeStyleAttributes.borderLeftColor = colorAttributes;
  ReactNativeStyleAttributes.borderRightColor = colorAttributes;
  ReactNativeStyleAttributes.borderTopColor = colorAttributes;
  ReactNativeStyleAttributes.borderStartColor = colorAttributes;
  ReactNativeStyleAttributes.borderEndColor = colorAttributes;
  ReactNativeStyleAttributes.color = colorAttributes;
  ReactNativeStyleAttributes.shadowColor = colorAttributes;
  ReactNativeStyleAttributes.textDecorationColor = colorAttributes;
  ReactNativeStyleAttributes.tintColor = colorAttributes;
  ReactNativeStyleAttributes.textShadowColor = colorAttributes;
  ReactNativeStyleAttributes.overlayColor = colorAttributes;
  module.exports = ReactNativeStyleAttributes;
},207,[208,224,225,182,180,176],"node_modules/react-native/Libraries/Components/View/ReactNativeStyleAttributes.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DeprecatedViewStylePropTypes = Object.assign({}, _$$_REQUIRE(_dependencyMap[0], "./DeprecatedLayoutPropTypes"), _$$_REQUIRE(_dependencyMap[1], "./DeprecatedShadowPropTypesIOS"), _$$_REQUIRE(_dependencyMap[2], "./DeprecatedTransformPropTypes"), {
    backfaceVisibility: _$$_REQUIRE(_dependencyMap[3], "prop-types").oneOf(['visible', 'hidden']),
    backgroundColor: _$$_REQUIRE(_dependencyMap[4], "./DeprecatedColorPropType"),
    borderColor: _$$_REQUIRE(_dependencyMap[4], "./DeprecatedColorPropType"),
    borderTopColor: _$$_REQUIRE(_dependencyMap[4], "./DeprecatedColorPropType"),
    borderRightColor: _$$_REQUIRE(_dependencyMap[4], "./DeprecatedColorPropType"),
    borderBottomColor: _$$_REQUIRE(_dependencyMap[4], "./DeprecatedColorPropType"),
    borderLeftColor: _$$_REQUIRE(_dependencyMap[4], "./DeprecatedColorPropType"),
    borderStartColor: _$$_REQUIRE(_dependencyMap[4], "./DeprecatedColorPropType"),
    borderEndColor: _$$_REQUIRE(_dependencyMap[4], "./DeprecatedColorPropType"),
    borderRadius: _$$_REQUIRE(_dependencyMap[3], "prop-types").number,
    borderTopLeftRadius: _$$_REQUIRE(_dependencyMap[3], "prop-types").number,
    borderTopRightRadius: _$$_REQUIRE(_dependencyMap[3], "prop-types").number,
    borderTopStartRadius: _$$_REQUIRE(_dependencyMap[3], "prop-types").number,
    borderTopEndRadius: _$$_REQUIRE(_dependencyMap[3], "prop-types").number,
    borderBottomLeftRadius: _$$_REQUIRE(_dependencyMap[3], "prop-types").number,
    borderBottomRightRadius: _$$_REQUIRE(_dependencyMap[3], "prop-types").number,
    borderBottomStartRadius: _$$_REQUIRE(_dependencyMap[3], "prop-types").number,
    borderBottomEndRadius: _$$_REQUIRE(_dependencyMap[3], "prop-types").number,
    borderStyle: _$$_REQUIRE(_dependencyMap[3], "prop-types").oneOf(['solid', 'dotted', 'dashed']),
    borderWidth: _$$_REQUIRE(_dependencyMap[3], "prop-types").number,
    borderTopWidth: _$$_REQUIRE(_dependencyMap[3], "prop-types").number,
    borderRightWidth: _$$_REQUIRE(_dependencyMap[3], "prop-types").number,
    borderBottomWidth: _$$_REQUIRE(_dependencyMap[3], "prop-types").number,
    borderLeftWidth: _$$_REQUIRE(_dependencyMap[3], "prop-types").number,
    opacity: _$$_REQUIRE(_dependencyMap[3], "prop-types").number,
    elevation: _$$_REQUIRE(_dependencyMap[3], "prop-types").number
  });
  module.exports = DeprecatedViewStylePropTypes;
},208,[209,220,222,210,221],"node_modules/react-native/Libraries/DeprecatedPropTypes/DeprecatedViewStylePropTypes.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var LayoutPropTypes = {
    display: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOf(['none', 'flex']),
    width: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    height: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    start: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    end: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    top: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    left: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    right: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    bottom: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    minWidth: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    maxWidth: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    minHeight: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    maxHeight: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    margin: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    marginVertical: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    marginHorizontal: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    marginTop: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    marginBottom: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    marginLeft: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    marginRight: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    marginStart: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    marginEnd: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    padding: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    paddingVertical: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    paddingHorizontal: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    paddingTop: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    paddingBottom: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    paddingLeft: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    paddingRight: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    paddingStart: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    paddingEnd: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    borderWidth: _$$_REQUIRE(_dependencyMap[0], "prop-types").number,
    borderTopWidth: _$$_REQUIRE(_dependencyMap[0], "prop-types").number,
    borderStartWidth: _$$_REQUIRE(_dependencyMap[0], "prop-types").number,
    borderEndWidth: _$$_REQUIRE(_dependencyMap[0], "prop-types").number,
    borderRightWidth: _$$_REQUIRE(_dependencyMap[0], "prop-types").number,
    borderBottomWidth: _$$_REQUIRE(_dependencyMap[0], "prop-types").number,
    borderLeftWidth: _$$_REQUIRE(_dependencyMap[0], "prop-types").number,
    position: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOf(['absolute', 'relative']),
    flexDirection: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOf(['row', 'row-reverse', 'column', 'column-reverse']),
    flexWrap: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOf(['wrap', 'nowrap', 'wrap-reverse']),
    justifyContent: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOf(['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly']),
    alignItems: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignSelf: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOf(['auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignContent: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'space-between', 'space-around']),
    overflow: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOf(['visible', 'hidden', 'scroll']),
    flex: _$$_REQUIRE(_dependencyMap[0], "prop-types").number,
    flexGrow: _$$_REQUIRE(_dependencyMap[0], "prop-types").number,
    flexShrink: _$$_REQUIRE(_dependencyMap[0], "prop-types").number,
    flexBasis: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").number, _$$_REQUIRE(_dependencyMap[0], "prop-types").string]),
    aspectRatio: _$$_REQUIRE(_dependencyMap[0], "prop-types").number,
    zIndex: _$$_REQUIRE(_dependencyMap[0], "prop-types").number,
    direction: _$$_REQUIRE(_dependencyMap[0], "prop-types").oneOf(['inherit', 'ltr', 'rtl'])
  };
  module.exports = LayoutPropTypes;
},209,[210],"node_modules/react-native/Libraries/DeprecatedPropTypes/DeprecatedLayoutPropTypes.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  if (process.env.NODE_ENV !== 'production') {
    var ReactIs = _$$_REQUIRE(_dependencyMap[0], "react-is");

    var throwOnDirectAccess = true;
    module.exports = _$$_REQUIRE(_dependencyMap[1], "./factoryWithTypeCheckers")(ReactIs.isElement, throwOnDirectAccess);
  } else {
    module.exports = _$$_REQUIRE(_dependencyMap[2], "./factoryWithThrowingShims")();
  }
},210,[211,214,219],"node_modules/prop-types/index.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (process.env.NODE_ENV === 'production') {
    module.exports = _$$_REQUIRE(_dependencyMap[0], "./cjs/react-is.production.min.js");
  } else {
    module.exports = _$$_REQUIRE(_dependencyMap[1], "./cjs/react-is.development.js");
  }
},211,[212,213],"node_modules/react-is/index.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v16.13.1
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  var b = "function" === typeof Symbol && Symbol.for,
      c = b ? Symbol.for("react.element") : 60103,
      d = b ? Symbol.for("react.portal") : 60106,
      e = b ? Symbol.for("react.fragment") : 60107,
      f = b ? Symbol.for("react.strict_mode") : 60108,
      g = b ? Symbol.for("react.profiler") : 60114,
      h = b ? Symbol.for("react.provider") : 60109,
      k = b ? Symbol.for("react.context") : 60110,
      l = b ? Symbol.for("react.async_mode") : 60111,
      m = b ? Symbol.for("react.concurrent_mode") : 60111,
      n = b ? Symbol.for("react.forward_ref") : 60112,
      p = b ? Symbol.for("react.suspense") : 60113,
      q = b ? Symbol.for("react.suspense_list") : 60120,
      r = b ? Symbol.for("react.memo") : 60115,
      t = b ? Symbol.for("react.lazy") : 60116,
      v = b ? Symbol.for("react.block") : 60121,
      w = b ? Symbol.for("react.fundamental") : 60117,
      x = b ? Symbol.for("react.responder") : 60118,
      y = b ? Symbol.for("react.scope") : 60119;

  function z(a) {
    if ("object" === typeof a && null !== a) {
      var u = a.$$typeof;

      switch (u) {
        case c:
          switch (a = a.type, a) {
            case l:
            case m:
            case e:
            case g:
            case f:
            case p:
              return a;

            default:
              switch (a = a && a.$$typeof, a) {
                case k:
                case n:
                case t:
                case r:
                case h:
                  return a;

                default:
                  return u;
              }

          }

        case d:
          return u;
      }
    }
  }

  function A(a) {
    return z(a) === m;
  }

  exports.AsyncMode = l;
  exports.ConcurrentMode = m;
  exports.ContextConsumer = k;
  exports.ContextProvider = h;
  exports.Element = c;
  exports.ForwardRef = n;
  exports.Fragment = e;
  exports.Lazy = t;
  exports.Memo = r;
  exports.Portal = d;
  exports.Profiler = g;
  exports.StrictMode = f;
  exports.Suspense = p;

  exports.isAsyncMode = function (a) {
    return A(a) || z(a) === l;
  };

  exports.isConcurrentMode = A;

  exports.isContextConsumer = function (a) {
    return z(a) === k;
  };

  exports.isContextProvider = function (a) {
    return z(a) === h;
  };

  exports.isElement = function (a) {
    return "object" === typeof a && null !== a && a.$$typeof === c;
  };

  exports.isForwardRef = function (a) {
    return z(a) === n;
  };

  exports.isFragment = function (a) {
    return z(a) === e;
  };

  exports.isLazy = function (a) {
    return z(a) === t;
  };

  exports.isMemo = function (a) {
    return z(a) === r;
  };

  exports.isPortal = function (a) {
    return z(a) === d;
  };

  exports.isProfiler = function (a) {
    return z(a) === g;
  };

  exports.isStrictMode = function (a) {
    return z(a) === f;
  };

  exports.isSuspense = function (a) {
    return z(a) === p;
  };

  exports.isValidElementType = function (a) {
    return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
  };

  exports.typeOf = z;
},212,[],"node_modules/react-is/cjs/react-is.production.min.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  if (process.env.NODE_ENV !== "production") {
    (function () {
      'use strict';

      var hasSymbol = typeof Symbol === 'function' && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

      function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
      }

      function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
          var $$typeof = object.$$typeof;

          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;

              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type;

                default:
                  var $$typeofType = type && type.$$typeof;

                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;

                    default:
                      return $$typeof;
                  }

              }

            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }

        return undefined;
      }

      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;

      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;
            console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
          }
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }

      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }

      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }

      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }

      function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }

      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }

      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }

      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }

      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }

      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }

      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }

      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }

      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }

      exports.AsyncMode = AsyncMode;
      exports.ConcurrentMode = ConcurrentMode;
      exports.ContextConsumer = ContextConsumer;
      exports.ContextProvider = ContextProvider;
      exports.Element = Element;
      exports.ForwardRef = ForwardRef;
      exports.Fragment = Fragment;
      exports.Lazy = Lazy;
      exports.Memo = Memo;
      exports.Portal = Portal;
      exports.Profiler = Profiler;
      exports.StrictMode = StrictMode;
      exports.Suspense = Suspense;
      exports.isAsyncMode = isAsyncMode;
      exports.isConcurrentMode = isConcurrentMode;
      exports.isContextConsumer = isContextConsumer;
      exports.isContextProvider = isContextProvider;
      exports.isElement = isElement;
      exports.isForwardRef = isForwardRef;
      exports.isFragment = isFragment;
      exports.isLazy = isLazy;
      exports.isMemo = isMemo;
      exports.isPortal = isPortal;
      exports.isProfiler = isProfiler;
      exports.isStrictMode = isStrictMode;
      exports.isSuspense = isSuspense;
      exports.isValidElementType = isValidElementType;
      exports.typeOf = typeOf;
    })();
  }
},213,[],"node_modules/react-is/cjs/react-is.development.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var printWarning = function printWarning() {};

  if (process.env.NODE_ENV !== 'production') {
    printWarning = function printWarning(text) {
      var message = 'Warning: ' + text;

      if (typeof console !== 'undefined') {
        console.error(message);
      }

      try {
        throw new Error(message);
      } catch (x) {}
    };
  }

  function emptyFunctionThatReturnsNull() {
    return null;
  }

  module.exports = function (isValidElement, throwOnDirectAccess) {
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);

      if (typeof iteratorFn === 'function') {
        return iteratorFn;
      }
    }

    var ANONYMOUS = '<<anonymous>>';
    var ReactPropTypes = {
      array: createPrimitiveTypeChecker('array'),
      bigint: createPrimitiveTypeChecker('bigint'),
      bool: createPrimitiveTypeChecker('boolean'),
      func: createPrimitiveTypeChecker('function'),
      number: createPrimitiveTypeChecker('number'),
      object: createPrimitiveTypeChecker('object'),
      string: createPrimitiveTypeChecker('string'),
      symbol: createPrimitiveTypeChecker('symbol'),
      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      elementType: createElementTypeTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker
    };

    function is(x, y) {
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }

    function PropTypeError(message, data) {
      this.message = message;
      this.data = data && typeof data === 'object' ? data : {};
      this.stack = '';
    }

    PropTypeError.prototype = Error.prototype;

    function createChainableTypeChecker(validate) {
      if (process.env.NODE_ENV !== 'production') {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }

      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;

        if (secret !== _$$_REQUIRE(_dependencyMap[0], "./lib/ReactPropTypesSecret")) {
          if (throwOnDirectAccess) {
            var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
            err.name = 'Invariant Violation';
            throw err;
          } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
            var cacheKey = componentName + ':' + propName;

            if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
              printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }

        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
            }

            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
          }

          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }

      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);
      return chainedCheckType;
    }

    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== expectedType) {
          var preciseType = getPreciseType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
            expectedType: expectedType
          });
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }

    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
        }

        var propValue = props[propName];

        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
        }

        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', _$$_REQUIRE(_dependencyMap[0], "./lib/ReactPropTypesSecret"));

          if (error instanceof Error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        if (!isValidElement(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createElementTypeTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        if (!_$$_REQUIRE(_dependencyMap[1], "react-is").isValidElementType(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        if (process.env.NODE_ENV !== 'production') {
          if (arguments.length > 1) {
            printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
          } else {
            printWarning('Invalid argument supplied to oneOf, expected an array.');
          }
        }

        return emptyFunctionThatReturnsNull;
      }

      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }

        var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
          var type = getPreciseType(value);

          if (type === 'symbol') {
            return String(value);
          }

          return value;
        });
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
      }

      return createChainableTypeChecker(validate);
    }

    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
        }

        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
        }

        for (var key in propValue) {
          if (_$$_REQUIRE(_dependencyMap[2], "./lib/has")(propValue, key)) {
            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, _$$_REQUIRE(_dependencyMap[0], "./lib/ReactPropTypesSecret"));

            if (error instanceof Error) {
              return error;
            }
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
        return emptyFunctionThatReturnsNull;
      }

      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];

        if (typeof checker !== 'function') {
          printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
          return emptyFunctionThatReturnsNull;
        }
      }

      function validate(props, propName, componentName, location, propFullName) {
        var expectedTypes = [];

        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          var checkerResult = checker(props, propName, componentName, location, propFullName, _$$_REQUIRE(_dependencyMap[0], "./lib/ReactPropTypesSecret"));

          if (checkerResult == null) {
            return null;
          }

          if (checkerResult.data && _$$_REQUIRE(_dependencyMap[2], "./lib/has")(checkerResult.data, 'expectedType')) {
            expectedTypes.push(checkerResult.data.expectedType);
          }
        }

        var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
      }

      return createChainableTypeChecker(validate);
    }

    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function invalidValidatorError(componentName, location, propFullName, key, type) {
      return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
    }

    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }

        for (var key in shapeTypes) {
          var checker = shapeTypes[key];

          if (typeof checker !== 'function') {
            return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
          }

          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, _$$_REQUIRE(_dependencyMap[0], "./lib/ReactPropTypesSecret"));

          if (error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createStrictShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }

        var allKeys = _$$_REQUIRE(_dependencyMap[3], "object-assign")({}, props[propName], shapeTypes);

        for (var key in allKeys) {
          var checker = shapeTypes[key];

          if (_$$_REQUIRE(_dependencyMap[2], "./lib/has")(shapeTypes, key) && typeof checker !== 'function') {
            return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
          }

          if (!checker) {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
          }

          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, _$$_REQUIRE(_dependencyMap[0], "./lib/ReactPropTypesSecret"));

          if (error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function isNode(propValue) {
      switch (typeof propValue) {
        case 'number':
        case 'string':
        case 'undefined':
          return true;

        case 'boolean':
          return !propValue;

        case 'object':
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }

          if (propValue === null || isValidElement(propValue)) {
            return true;
          }

          var iteratorFn = getIteratorFn(propValue);

          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;

            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              while (!(step = iterator.next()).done) {
                var entry = step.value;

                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }

          return true;

        default:
          return false;
      }
    }

    function isSymbol(propType, propValue) {
      if (propType === 'symbol') {
        return true;
      }

      if (!propValue) {
        return false;
      }

      if (propValue['@@toStringTag'] === 'Symbol') {
        return true;
      }

      if (typeof Symbol === 'function' && propValue instanceof Symbol) {
        return true;
      }

      return false;
    }

    function getPropType(propValue) {
      var propType = typeof propValue;

      if (Array.isArray(propValue)) {
        return 'array';
      }

      if (propValue instanceof RegExp) {
        return 'object';
      }

      if (isSymbol(propType, propValue)) {
        return 'symbol';
      }

      return propType;
    }

    function getPreciseType(propValue) {
      if (typeof propValue === 'undefined' || propValue === null) {
        return '' + propValue;
      }

      var propType = getPropType(propValue);

      if (propType === 'object') {
        if (propValue instanceof Date) {
          return 'date';
        } else if (propValue instanceof RegExp) {
          return 'regexp';
        }
      }

      return propType;
    }

    function getPostfixForTypeWarning(value) {
      var type = getPreciseType(value);

      switch (type) {
        case 'array':
        case 'object':
          return 'an ' + type;

        case 'boolean':
        case 'date':
        case 'regexp':
          return 'a ' + type;

        default:
          return type;
      }
    }

    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }

      return propValue.constructor.name;
    }

    ReactPropTypes.checkPropTypes = _$$_REQUIRE(_dependencyMap[4], "./checkPropTypes");
    ReactPropTypes.resetWarningCache = _$$_REQUIRE(_dependencyMap[4], "./checkPropTypes").resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},214,[215,211,216,217,218],"node_modules/prop-types/factoryWithTypeCheckers.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  module.exports = ReactPropTypesSecret;
},215,[],"node_modules/prop-types/lib/ReactPropTypesSecret.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
},216,[],"node_modules/prop-types/lib/has.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  'use strict';

  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;

  function toObject(val) {
    if (val === null || val === undefined) {
      throw new TypeError('Object.assign cannot be called with null or undefined');
    }

    return Object(val);
  }

  function shouldUseNative() {
    try {
      if (!Object.assign) {
        return false;
      }

      var test1 = new String('abc');
      test1[5] = 'de';

      if (Object.getOwnPropertyNames(test1)[0] === '5') {
        return false;
      }

      var test2 = {};

      for (var i = 0; i < 10; i++) {
        test2['_' + String.fromCharCode(i)] = i;
      }

      var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
        return test2[n];
      });

      if (order2.join('') !== '0123456789') {
        return false;
      }

      var test3 = {};
      'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
        test3[letter] = letter;
      });

      if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
        return false;
      }

      return true;
    } catch (err) {
      return false;
    }
  }

  module.exports = shouldUseNative() ? Object.assign : function (target, source) {
    var from;
    var to = toObject(target);
    var symbols;

    for (var s = 1; s < arguments.length; s++) {
      from = Object(arguments[s]);

      for (var key in from) {
        if (hasOwnProperty.call(from, key)) {
          to[key] = from[key];
        }
      }

      if (getOwnPropertySymbols) {
        symbols = getOwnPropertySymbols(from);

        for (var i = 0; i < symbols.length; i++) {
          if (propIsEnumerable.call(from, symbols[i])) {
            to[symbols[i]] = from[symbols[i]];
          }
        }
      }
    }

    return to;
  };
},217,[],"node_modules/object-assign/index.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var printWarning = function printWarning() {};

  if (process.env.NODE_ENV !== 'production') {
    var ReactPropTypesSecret = _$$_REQUIRE(_dependencyMap[0], "./lib/ReactPropTypesSecret");

    var loggedTypeFailures = {};

    var has = _$$_REQUIRE(_dependencyMap[1], "./lib/has");

    printWarning = function printWarning(text) {
      var message = 'Warning: ' + text;

      if (typeof console !== 'undefined') {
        console.error(message);
      }

      try {
        throw new Error(message);
      } catch (x) {}
    };
  }

  function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    if (process.env.NODE_ENV !== 'production') {
      for (var typeSpecName in typeSpecs) {
        if (has(typeSpecs, typeSpecName)) {
          var error;

          try {
            if (typeof typeSpecs[typeSpecName] !== 'function') {
              var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
              err.name = 'Invariant Violation';
              throw err;
            }

            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
          } catch (ex) {
            error = ex;
          }

          if (error && !(error instanceof Error)) {
            printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
          }

          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
          }
        }
      }
    }
  }

  checkPropTypes.resetWarningCache = function () {
    if (process.env.NODE_ENV !== 'production') {
      loggedTypeFailures = {};
    }
  };

  module.exports = checkPropTypes;
},218,[215,216],"node_modules/prop-types/checkPropTypes.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function emptyFunction() {}

  function emptyFunctionWithReset() {}

  emptyFunctionWithReset.resetWarningCache = emptyFunction;

  module.exports = function () {
    function shim(props, propName, componentName, location, propFullName, secret) {
      if (secret === _$$_REQUIRE(_dependencyMap[0], "./lib/ReactPropTypesSecret")) {
        return;
      }

      var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
      err.name = 'Invariant Violation';
      throw err;
    }

    ;
    shim.isRequired = shim;

    function getShim() {
      return shim;
    }

    ;
    var ReactPropTypes = {
      array: shim,
      bigint: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,
      any: shim,
      arrayOf: getShim,
      element: shim,
      elementType: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim,
      checkPropTypes: emptyFunctionWithReset,
      resetWarningCache: emptyFunction
    };
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},219,[215],"node_modules/prop-types/factoryWithThrowingShims.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DeprecatedShadowPropTypesIOS = {
    shadowColor: _$$_REQUIRE(_dependencyMap[0], "./DeprecatedColorPropType"),
    shadowOffset: _$$_REQUIRE(_dependencyMap[1], "prop-types").shape({
      width: _$$_REQUIRE(_dependencyMap[1], "prop-types").number,
      height: _$$_REQUIRE(_dependencyMap[1], "prop-types").number
    }),
    shadowOpacity: _$$_REQUIRE(_dependencyMap[1], "prop-types").number,
    shadowRadius: _$$_REQUIRE(_dependencyMap[1], "prop-types").number
  };
  module.exports = DeprecatedShadowPropTypesIOS;
},220,[221,210],"node_modules/react-native/Libraries/DeprecatedPropTypes/DeprecatedShadowPropTypesIOS.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var colorPropType = function colorPropType(isRequired, props, propName, componentName, location, propFullName) {
    var color = props[propName];

    if (color === undefined || color === null) {
      if (isRequired) {
        return new Error('Required ' + location + ' `' + (propFullName || propName) + '` was not specified in `' + componentName + '`.');
      }

      return;
    }

    if (typeof color === 'number') {
      return;
    }

    if (_$$_REQUIRE(_dependencyMap[0], "../StyleSheet/normalizeColor")(color) === null) {
      return new Error('Invalid ' + location + ' `' + (propFullName || propName) + '` supplied to `' + componentName + '`: ' + color + '\n' + "Valid color formats are\n  - '#f0f' (#rgb)\n  - '#f0fc' (#rgba)\n  - '#ff00ff' (#rrggbb)\n  - '#ff00ff00' (#rrggbbaa)\n  - 'rgb(255, 255, 255)'\n  - 'rgba(255, 255, 255, 1.0)'\n  - 'hsl(360, 100%, 100%)'\n  - 'hsla(360, 100%, 100%, 1.0)'\n  - 'transparent'\n  - 'red'\n  - 0xff00ff00 (0xrrggbbaa)\n");
    }
  };

  var ColorPropType = colorPropType.bind(null, false);
  ColorPropType.isRequired = colorPropType.bind(null, true);
  module.exports = ColorPropType;
},221,[177],"node_modules/react-native/Libraries/DeprecatedPropTypes/DeprecatedColorPropType.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error('The transformMatrix style property is deprecated. ' + 'Use `transform: [{ matrix: ... }]` instead.');
    }
  };

  var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error('The decomposedMatrix style property is deprecated. ' + 'Use `transform: [...]` instead.');
    }
  };

  var DeprecatedTransformPropTypes = {
    transform: _$$_REQUIRE(_dependencyMap[0], "prop-types").arrayOf(_$$_REQUIRE(_dependencyMap[0], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[0], "prop-types").shape({
      perspective: _$$_REQUIRE(_dependencyMap[0], "prop-types").number
    }), _$$_REQUIRE(_dependencyMap[0], "prop-types").shape({
      rotate: _$$_REQUIRE(_dependencyMap[0], "prop-types").string
    }), _$$_REQUIRE(_dependencyMap[0], "prop-types").shape({
      rotateX: _$$_REQUIRE(_dependencyMap[0], "prop-types").string
    }), _$$_REQUIRE(_dependencyMap[0], "prop-types").shape({
      rotateY: _$$_REQUIRE(_dependencyMap[0], "prop-types").string
    }), _$$_REQUIRE(_dependencyMap[0], "prop-types").shape({
      rotateZ: _$$_REQUIRE(_dependencyMap[0], "prop-types").string
    }), _$$_REQUIRE(_dependencyMap[0], "prop-types").shape({
      scale: _$$_REQUIRE(_dependencyMap[0], "prop-types").number
    }), _$$_REQUIRE(_dependencyMap[0], "prop-types").shape({
      scaleX: _$$_REQUIRE(_dependencyMap[0], "prop-types").number
    }), _$$_REQUIRE(_dependencyMap[0], "prop-types").shape({
      scaleY: _$$_REQUIRE(_dependencyMap[0], "prop-types").number
    }), _$$_REQUIRE(_dependencyMap[0], "prop-types").shape({
      translateX: _$$_REQUIRE(_dependencyMap[0], "prop-types").number
    }), _$$_REQUIRE(_dependencyMap[0], "prop-types").shape({
      translateY: _$$_REQUIRE(_dependencyMap[0], "prop-types").number
    }), _$$_REQUIRE(_dependencyMap[0], "prop-types").shape({
      skewX: _$$_REQUIRE(_dependencyMap[0], "prop-types").string
    }), _$$_REQUIRE(_dependencyMap[0], "prop-types").shape({
      skewY: _$$_REQUIRE(_dependencyMap[0], "prop-types").string
    })])),
    transformMatrix: TransformMatrixPropType,
    decomposedMatrix: DecomposedMatrixPropType,
    scaleX: _$$_REQUIRE(_dependencyMap[1], "../Utilities/deprecatedPropType")(_$$_REQUIRE(_dependencyMap[0], "prop-types").number, 'Use the transform prop instead.'),
    scaleY: _$$_REQUIRE(_dependencyMap[1], "../Utilities/deprecatedPropType")(_$$_REQUIRE(_dependencyMap[0], "prop-types").number, 'Use the transform prop instead.'),
    rotation: _$$_REQUIRE(_dependencyMap[1], "../Utilities/deprecatedPropType")(_$$_REQUIRE(_dependencyMap[0], "prop-types").number, 'Use the transform prop instead.'),
    translateX: _$$_REQUIRE(_dependencyMap[1], "../Utilities/deprecatedPropType")(_$$_REQUIRE(_dependencyMap[0], "prop-types").number, 'Use the transform prop instead.'),
    translateY: _$$_REQUIRE(_dependencyMap[1], "../Utilities/deprecatedPropType")(_$$_REQUIRE(_dependencyMap[0], "prop-types").number, 'Use the transform prop instead.')
  };
  module.exports = DeprecatedTransformPropTypes;
},222,[210,223],"node_modules/react-native/Libraries/DeprecatedPropTypes/DeprecatedTransformPropTypes.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function deprecatedPropType(propType, explanation) {
    return function validate(props, propName, componentName) {
      if (!global.RN$Bridgeless && !_$$_REQUIRE(_dependencyMap[0], "../ReactNative/UIManager").getViewManagerConfig(componentName) && props[propName] !== undefined) {
        console.warn("`" + propName + "` supplied to `" + componentName + "` has been deprecated. " + explanation);
      }

      for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        rest[_key - 3] = arguments[_key];
      }

      return propType.apply(void 0, [props, propName, componentName].concat(rest));
    };
  }

  module.exports = deprecatedPropType;
},223,[43],"node_modules/react-native/Libraries/Utilities/deprecatedPropType.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DeprecatedTextStylePropTypes = Object.assign({}, _$$_REQUIRE(_dependencyMap[0], "./DeprecatedViewStylePropTypes"), {
    color: _$$_REQUIRE(_dependencyMap[1], "./DeprecatedColorPropType"),
    fontFamily: _$$_REQUIRE(_dependencyMap[2], "prop-types").string,
    fontSize: _$$_REQUIRE(_dependencyMap[2], "prop-types").number,
    fontStyle: _$$_REQUIRE(_dependencyMap[2], "prop-types").oneOf(['normal', 'italic']),
    fontWeight: _$$_REQUIRE(_dependencyMap[2], "prop-types").oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),
    fontVariant: _$$_REQUIRE(_dependencyMap[2], "prop-types").arrayOf(_$$_REQUIRE(_dependencyMap[2], "prop-types").oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
    textShadowOffset: _$$_REQUIRE(_dependencyMap[2], "prop-types").shape({
      width: _$$_REQUIRE(_dependencyMap[2], "prop-types").number,
      height: _$$_REQUIRE(_dependencyMap[2], "prop-types").number
    }),
    textShadowRadius: _$$_REQUIRE(_dependencyMap[2], "prop-types").number,
    textShadowColor: _$$_REQUIRE(_dependencyMap[1], "./DeprecatedColorPropType"),
    letterSpacing: _$$_REQUIRE(_dependencyMap[2], "prop-types").number,
    lineHeight: _$$_REQUIRE(_dependencyMap[2], "prop-types").number,
    textAlign: _$$_REQUIRE(_dependencyMap[2], "prop-types").oneOf(['auto', 'left', 'right', 'center', 'justify']),
    textAlignVertical: _$$_REQUIRE(_dependencyMap[2], "prop-types").oneOf(['auto', 'top', 'bottom', 'center']),
    includeFontPadding: _$$_REQUIRE(_dependencyMap[2], "prop-types").bool,
    textDecorationLine: _$$_REQUIRE(_dependencyMap[2], "prop-types").oneOf(['none', 'underline', 'line-through', 'underline line-through']),
    textDecorationStyle: _$$_REQUIRE(_dependencyMap[2], "prop-types").oneOf(['solid', 'double', 'dotted', 'dashed']),
    textDecorationColor: _$$_REQUIRE(_dependencyMap[1], "./DeprecatedColorPropType"),
    textTransform: _$$_REQUIRE(_dependencyMap[2], "prop-types").oneOf(['none', 'capitalize', 'uppercase', 'lowercase']),
    writingDirection: _$$_REQUIRE(_dependencyMap[2], "prop-types").oneOf(['auto', 'ltr', 'rtl'])
  });
  module.exports = DeprecatedTextStylePropTypes;
},224,[208,221,210],"node_modules/react-native/Libraries/DeprecatedPropTypes/DeprecatedTextStylePropTypes.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ImageStylePropTypes = Object.assign({}, _$$_REQUIRE(_dependencyMap[0], "./DeprecatedLayoutPropTypes"), _$$_REQUIRE(_dependencyMap[1], "./DeprecatedShadowPropTypesIOS"), _$$_REQUIRE(_dependencyMap[2], "./DeprecatedTransformPropTypes"), {
    resizeMode: _$$_REQUIRE(_dependencyMap[3], "prop-types").oneOf(['center', 'contain', 'cover', 'repeat', 'stretch']),
    backfaceVisibility: _$$_REQUIRE(_dependencyMap[3], "prop-types").oneOf(['visible', 'hidden']),
    backgroundColor: _$$_REQUIRE(_dependencyMap[4], "./DeprecatedColorPropType"),
    borderColor: _$$_REQUIRE(_dependencyMap[4], "./DeprecatedColorPropType"),
    borderWidth: _$$_REQUIRE(_dependencyMap[3], "prop-types").number,
    borderRadius: _$$_REQUIRE(_dependencyMap[3], "prop-types").number,
    overflow: _$$_REQUIRE(_dependencyMap[3], "prop-types").oneOf(['visible', 'hidden']),
    tintColor: _$$_REQUIRE(_dependencyMap[4], "./DeprecatedColorPropType"),
    opacity: _$$_REQUIRE(_dependencyMap[3], "prop-types").number,
    overlayColor: _$$_REQUIRE(_dependencyMap[3], "prop-types").string,
    borderTopLeftRadius: _$$_REQUIRE(_dependencyMap[3], "prop-types").number,
    borderTopRightRadius: _$$_REQUIRE(_dependencyMap[3], "prop-types").number,
    borderBottomLeftRadius: _$$_REQUIRE(_dependencyMap[3], "prop-types").number,
    borderBottomRightRadius: _$$_REQUIRE(_dependencyMap[3], "prop-types").number
  });
  module.exports = ImageStylePropTypes;
},225,[209,220,222,210,221],"node_modules/react-native/Libraries/DeprecatedPropTypes/DeprecatedImageStylePropTypes.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var dummyPoint = {
    x: undefined,
    y: undefined
  };

  var pointsDiffer = function pointsDiffer(one, two) {
    one = one || dummyPoint;
    two = two || dummyPoint;
    return one !== two && (one.x !== two.x || one.y !== two.y);
  };

  module.exports = pointsDiffer;
},226,[],"node_modules/react-native/Libraries/Utilities/differ/pointsDiffer.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function processColorArray(colors) {
    return colors == null ? null : colors.map(_$$_REQUIRE(_dependencyMap[0], "./processColor"));
  }

  module.exports = processColorArray;
},227,[176],"node_modules/react-native/Libraries/StyleSheet/processColorArray.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _customSourceTransformer, _serverURL, _scriptURL;

  var _sourceCodeScriptURL;

  function getSourceCodeScriptURL() {
    if (_sourceCodeScriptURL) {
      return _sourceCodeScriptURL;
    }

    var sourceCode = global.nativeExtensions && global.nativeExtensions.SourceCode;

    if (!sourceCode) {
      sourceCode = _$$_REQUIRE(_dependencyMap[0], "../NativeModules/specs/NativeSourceCode").default;
    }

    _sourceCodeScriptURL = sourceCode.getConstants().scriptURL;
    return _sourceCodeScriptURL;
  }

  function getDevServerURL() {
    if (_serverURL === undefined) {
      var sourceCodeScriptURL = getSourceCodeScriptURL();
      var match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\/\/.*?\//);

      if (match) {
        _serverURL = match[0];
      } else {
        _serverURL = null;
      }
    }

    return _serverURL;
  }

  function _coerceLocalScriptURL(scriptURL) {
    if (scriptURL) {
      if (scriptURL.startsWith('assets://')) {
        return null;
      }

      scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);

      if (!scriptURL.includes('://')) {
        scriptURL = 'file://' + scriptURL;
      }
    }

    return scriptURL;
  }

  function getScriptURL() {
    if (_scriptURL === undefined) {
      _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());
    }

    return _scriptURL;
  }

  function setCustomSourceTransformer(transformer) {
    _customSourceTransformer = transformer;
  }

  function resolveAssetSource(source) {
    if (typeof source === 'object') {
      return source;
    }

    var asset = _$$_REQUIRE(_dependencyMap[1], "./AssetRegistry").getAssetByID(source);

    if (!asset) {
      return null;
    }

    var resolver = new (_$$_REQUIRE(_dependencyMap[2], "./AssetSourceResolver"))(getDevServerURL(), getScriptURL(), asset);

    if (_customSourceTransformer) {
      return _customSourceTransformer(resolver);
    }

    return resolver.defaultAsset();
  }

  module.exports = resolveAssetSource;
  module.exports.pickScale = _$$_REQUIRE(_dependencyMap[2], "./AssetSourceResolver").pickScale;
  module.exports.setCustomSourceTransformer = setCustomSourceTransformer;
},228,[69,229,230],"node_modules/react-native/Libraries/Image/resolveAssetSource.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var assets = [];

  function registerAsset(asset) {
    return assets.push(asset);
  }

  function getAssetByID(assetId) {
    return assets[assetId - 1];
  }

  module.exports = {
    registerAsset: registerAsset,
    getAssetByID: getAssetByID
  };
},229,[],"node_modules/react-native/Libraries/Image/AssetRegistry.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function getScaledAssetPath(asset) {
    var scale = AssetSourceResolver.pickScale(asset.scales, _$$_REQUIRE(_dependencyMap[0], "../Utilities/PixelRatio").get());
    var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';

    var assetDir = _$$_REQUIRE(_dependencyMap[1], "./assetPathUtils").getBasePath(asset);

    return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
  }

  function getAssetPathInDrawableFolder(asset) {
    var scale = AssetSourceResolver.pickScale(asset.scales, _$$_REQUIRE(_dependencyMap[0], "../Utilities/PixelRatio").get());

    var drawbleFolder = _$$_REQUIRE(_dependencyMap[1], "./assetPathUtils").getAndroidResourceFolderName(asset, scale);

    var fileName = _$$_REQUIRE(_dependencyMap[1], "./assetPathUtils").getAndroidResourceIdentifier(asset);

    return drawbleFolder + '/' + fileName + '.' + asset.type;
  }

  var AssetSourceResolver = function () {
    function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
      _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/classCallCheck")(this, AssetSourceResolver);

      this.serverUrl = serverUrl;
      this.jsbundleUrl = jsbundleUrl;
      this.asset = asset;
    }

    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/createClass")(AssetSourceResolver, [{
      key: "isLoadedFromServer",
      value: function isLoadedFromServer() {
        return !!this.serverUrl;
      }
    }, {
      key: "isLoadedFromFileSystem",
      value: function isLoadedFromFileSystem() {
        return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));
      }
    }, {
      key: "defaultAsset",
      value: function defaultAsset() {
        if (this.isLoadedFromServer()) {
          return this.assetServerURL();
        }

        if ("android" === 'android') {
          return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
        } else {
          return this.scaledAssetURLNearBundle();
        }
      }
    }, {
      key: "assetServerURL",
      value: function assetServerURL() {
        _$$_REQUIRE(_dependencyMap[4], "invariant")(!!this.serverUrl, 'need server to load from');

        return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + "android" + '&hash=' + this.asset.hash);
      }
    }, {
      key: "scaledAssetPath",
      value: function scaledAssetPath() {
        return this.fromSource(getScaledAssetPath(this.asset));
      }
    }, {
      key: "scaledAssetURLNearBundle",
      value: function scaledAssetURLNearBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(path + getScaledAssetPath(this.asset).replace(/\.\.\//g, '_'));
      }
    }, {
      key: "resourceIdentifierWithoutScale",
      value: function resourceIdentifierWithoutScale() {
        _$$_REQUIRE(_dependencyMap[4], "invariant")("android" === 'android', 'resource identifiers work on Android');

        return this.fromSource(_$$_REQUIRE(_dependencyMap[1], "./assetPathUtils").getAndroidResourceIdentifier(this.asset));
      }
    }, {
      key: "drawableFolderInBundle",
      value: function drawableFolderInBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
      }
    }, {
      key: "fromSource",
      value: function fromSource(source) {
        return {
          __packager_asset: true,
          width: this.asset.width,
          height: this.asset.height,
          uri: source,
          scale: AssetSourceResolver.pickScale(this.asset.scales, _$$_REQUIRE(_dependencyMap[0], "../Utilities/PixelRatio").get())
        };
      }
    }], [{
      key: "pickScale",
      value: function pickScale(scales, deviceScale) {
        for (var i = 0; i < scales.length; i++) {
          if (scales[i] >= deviceScale) {
            return scales[i];
          }
        }

        return scales[scales.length - 1] || 1;
      }
    }]);

    return AssetSourceResolver;
  }();

  module.exports = AssetSourceResolver;
},230,[231,234,16,17,6],"node_modules/react-native/Libraries/Image/AssetSourceResolver.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PixelRatio = function () {
    function PixelRatio() {
      _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/classCallCheck")(this, PixelRatio);
    }

    _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/createClass")(PixelRatio, null, [{
      key: "get",
      value: function get() {
        return _$$_REQUIRE(_dependencyMap[2], "./Dimensions").get('window').scale;
      }
    }, {
      key: "getFontScale",
      value: function getFontScale() {
        return _$$_REQUIRE(_dependencyMap[2], "./Dimensions").get('window').fontScale || PixelRatio.get();
      }
    }, {
      key: "getPixelSizeForLayoutSize",
      value: function getPixelSizeForLayoutSize(layoutSize) {
        return Math.round(layoutSize * PixelRatio.get());
      }
    }, {
      key: "roundToNearestPixel",
      value: function roundToNearestPixel(layoutSize) {
        var ratio = PixelRatio.get();
        return Math.round(layoutSize * ratio) / ratio;
      }
    }, {
      key: "startDetecting",
      value: function startDetecting() {}
    }]);

    return PixelRatio;
  }();

  module.exports = PixelRatio;
},231,[16,17,232],"node_modules/react-native/Libraries/Utilities/PixelRatio.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var _EventEmitter = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../vendor/emitter/EventEmitter"));

  var _RCTDeviceEventEmitter = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../EventEmitter/RCTDeviceEventEmitter"));

  var _NativeDeviceInfo = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "./NativeDeviceInfo"));

  var _invariant = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "invariant"));

  var eventEmitter = new _EventEmitter.default();
  var dimensionsInitialized = false;
  var dimensions;

  var Dimensions = function () {
    function Dimensions() {
      (0, _classCallCheck2.default)(this, Dimensions);
    }

    (0, _createClass2.default)(Dimensions, null, [{
      key: "get",
      value: function get(dim) {
        (0, _invariant.default)(dimensions[dim], 'No dimension set for key ' + dim);
        return dimensions[dim];
      }
    }, {
      key: "set",
      value: function set(dims) {
        var screen = dims.screen,
            window = dims.window;
        var windowPhysicalPixels = dims.windowPhysicalPixels;

        if (windowPhysicalPixels) {
          window = {
            width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
            height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
            scale: windowPhysicalPixels.scale,
            fontScale: windowPhysicalPixels.fontScale
          };
        }

        var screenPhysicalPixels = dims.screenPhysicalPixels;

        if (screenPhysicalPixels) {
          screen = {
            width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
            height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
            scale: screenPhysicalPixels.scale,
            fontScale: screenPhysicalPixels.fontScale
          };
        } else if (screen == null) {
          screen = window;
        }

        dimensions = {
          window: window,
          screen: screen
        };

        if (dimensionsInitialized) {
          eventEmitter.emit('change', dimensions);
        } else {
          dimensionsInitialized = true;
        }
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        (0, _invariant.default)(type === 'change', 'Trying to subscribe to unknown event: "%s"', type);
        eventEmitter.addListener(type, handler);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        (0, _invariant.default)(type === 'change', 'Trying to remove listener for unknown event: "%s"', type);
        eventEmitter.removeListener(type, handler);
      }
    }]);
    return Dimensions;
  }();

  var initialDims = global.nativeExtensions && global.nativeExtensions.DeviceInfo && global.nativeExtensions.DeviceInfo.Dimensions;

  if (!initialDims) {
    _RCTDeviceEventEmitter.default.addListener('didUpdateDimensions', function (update) {
      Dimensions.set(update);
    });

    initialDims = _NativeDeviceInfo.default.getConstants().Dimensions;
  }

  Dimensions.set(initialDims);
  module.exports = Dimensions;
},232,[3,16,17,40,30,233,6],"node_modules/react-native/Libraries/Utilities/Dimensions.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var NativeModule = TurboModuleRegistry.getEnforcing('DeviceInfo');
  var NativeDeviceInfo = NativeModule;
  var _default = NativeDeviceInfo;
  exports.default = _default;
},233,[5],"node_modules/react-native/Libraries/Utilities/NativeDeviceInfo.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var androidScaleSuffix = {
    '0.75': 'ldpi',
    '1': 'mdpi',
    '1.5': 'hdpi',
    '2': 'xhdpi',
    '3': 'xxhdpi',
    '4': 'xxxhdpi'
  };

  function getAndroidAssetSuffix(scale) {
    if (scale.toString() in androidScaleSuffix) {
      return androidScaleSuffix[scale.toString()];
    }

    throw new Error('no such scale ' + scale.toString());
  }

  var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'svg', 'webp', 'xml']);

  function getAndroidResourceFolderName(asset, scale) {
    if (!drawableFileTypes.has(asset.type)) {
      return 'raw';
    }

    var suffix = getAndroidAssetSuffix(scale);

    if (!suffix) {
      throw new Error("Don't know which android drawable suffix to use for scale: " + scale + '\nAsset: ' + JSON.stringify(asset, null, '\t') + '\nPossible scales are:' + JSON.stringify(androidScaleSuffix, null, '\t'));
    }

    var androidFolder = 'drawable-' + suffix;
    return androidFolder;
  }

  function getAndroidResourceIdentifier(asset) {
    var folderPath = getBasePath(asset);
    return (folderPath + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
  }

  function getBasePath(asset) {
    var basePath = asset.httpServerLocation;

    if (basePath[0] === '/') {
      basePath = basePath.substr(1);
    }

    return basePath;
  }

  module.exports = {
    getAndroidAssetSuffix: getAndroidAssetSuffix,
    getAndroidResourceFolderName: getAndroidResourceFolderName,
    getAndroidResourceIdentifier: getAndroidResourceIdentifier,
    getBasePath: getBasePath
  };
},234,[],"node_modules/react-native/Libraries/Image/assetPathUtils.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _codegenNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../Utilities/codegenNativeComponent"));

  var _default = (0, _codegenNativeComponent.default)('ActivityIndicatorView', {
    paperComponentName: 'RCTActivityIndicatorView'
  });

  exports.default = _default;
},235,[3,55],"node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicatorViewNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/extends"));

  var _ViewNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "./ViewNativeComponent"));

  var _this = this,
      _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/View/View.js";

  var React = _$$_REQUIRE(_dependencyMap[3], "react");

  var View = React.forwardRef(function (props, forwardedRef) {
    return React.createElement(_$$_REQUIRE(_dependencyMap[4], "../../Text/TextAncestor").Provider, {
      value: false,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 33,
        columnNumber: 5
      }
    }, React.createElement(_ViewNativeComponent.default, (0, _extends2.default)({}, props, {
      ref: forwardedRef,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 34,
        columnNumber: 7
      }
    })));
  });
  View.displayName = 'View';
  module.exports = View;
},236,[3,53,237,49,240],"node_modules/react-native/Libraries/Components/View/View.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _codegenNativeCommands = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Utilities/codegenNativeCommands"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var NativeViewComponent;
  var viewConfig;

  if (__DEV__ || global.RN$Bridgeless) {
    if ("android" === 'android') {
      viewConfig = _$$_REQUIRE(_dependencyMap[3], "./ReactNativeViewViewConfigAndroid");

      _$$_REQUIRE(_dependencyMap[4], "../../Utilities/registerGeneratedViewConfig")('RCTView', _$$_REQUIRE(_dependencyMap[3], "./ReactNativeViewViewConfigAndroid"));
    } else {
      viewConfig = {};

      _$$_REQUIRE(_dependencyMap[4], "../../Utilities/registerGeneratedViewConfig")('RCTView', {
        uiViewClassName: 'RCTView'
      });
    }

    NativeViewComponent = 'RCTView';
  } else {
    NativeViewComponent = _$$_REQUIRE(_dependencyMap[5], "../../ReactNative/requireNativeComponent")('RCTView');
  }

  var __INTERNAL_VIEW_CONFIG = viewConfig;
  exports.__INTERNAL_VIEW_CONFIG = __INTERNAL_VIEW_CONFIG;
  var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['hotspotUpdate', 'setPressed']
  });
  exports.Commands = Commands;
  var _default = NativeViewComponent;
  exports.default = _default;
},237,[49,3,200,175,238,56],"node_modules/react-native/Libraries/Components/View/ViewNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _verifyComponentAttributeEquivalence = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./verifyComponentAttributeEquivalence"));

  function registerGeneratedViewConfig(componentName, viewConfig) {
    var mergedViewConfig = {
      uiViewClassName: componentName,
      Commands: {},
      bubblingEventTypes: Object.assign({}, _$$_REQUIRE(_dependencyMap[2], "../Components/View/ReactNativeViewViewConfig").bubblingEventTypes, viewConfig.bubblingEventTypes || {}),
      directEventTypes: Object.assign({}, _$$_REQUIRE(_dependencyMap[2], "../Components/View/ReactNativeViewViewConfig").directEventTypes, viewConfig.directEventTypes || {}),
      validAttributes: Object.assign({}, _$$_REQUIRE(_dependencyMap[2], "../Components/View/ReactNativeViewViewConfig").validAttributes, viewConfig.validAttributes || {})
    };

    _$$_REQUIRE(_dependencyMap[3], "../Renderer/shims/ReactNativeViewConfigRegistry").register(componentName, function () {
      (0, _verifyComponentAttributeEquivalence.default)(componentName, mergedViewConfig);
      return mergedViewConfig;
    });
  }

  module.exports = registerGeneratedViewConfig;
},238,[3,239,174,83],"node_modules/react-native/Libraries/Utilities/registerGeneratedViewConfig.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  exports.getConfigWithoutViewProps = getConfigWithoutViewProps;
  exports.lefthandObjectDiff = lefthandObjectDiff;
  exports.stringifyViewConfig = stringifyViewConfig;

  var _ReactNativeViewViewConfig = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../Components/View/ReactNativeViewViewConfig"));

  var IGNORED_KEYS = ['transform', 'hitSlop'];

  function verifyComponentAttributeEquivalence(componentName, config) {
    if (!global.RN$Bridgeless) {
      var nativeAttributes = _$$_REQUIRE(_dependencyMap[2], "../ReactNative/getNativeComponentAttributes")(componentName);

      ['validAttributes', 'bubblingEventTypes', 'directEventTypes'].forEach(function (prop) {
        var diffKeys = Object.keys(lefthandObjectDiff(nativeAttributes[prop], config[prop]));

        if (diffKeys.length) {
          console.error(componentName + " generated view config for " + prop + " does not match native, missing: " + diffKeys.join(' '));
        }
      });
    }
  }

  function lefthandObjectDiff(leftObj, rightObj) {
    var differentKeys = {};

    function compare(leftItem, rightItem, key) {
      if (typeof leftItem !== typeof rightItem && leftItem != null) {
        differentKeys[key] = rightItem;
        return;
      }

      if (typeof leftItem === 'object') {
        var objDiff = lefthandObjectDiff(leftItem, rightItem);

        if (Object.keys(objDiff).length > 1) {
          differentKeys[key] = objDiff;
        }

        return;
      }

      if (leftItem !== rightItem) {
        differentKeys[key] = rightItem;
        return;
      }
    }

    for (var key in leftObj) {
      if (IGNORED_KEYS.includes(key)) {
        continue;
      }

      if (!rightObj) {
        differentKeys[key] = {};
      } else if (leftObj.hasOwnProperty(key)) {
        compare(leftObj[key], rightObj[key], key);
      }
    }

    return differentKeys;
  }

  function getConfigWithoutViewProps(viewConfig, propName) {
    if (!viewConfig[propName]) {
      return {};
    }

    return Object.keys(viewConfig[propName]).filter(function (prop) {
      return !_ReactNativeViewViewConfig.default[propName][prop];
    }).reduce(function (obj, prop) {
      obj[prop] = viewConfig[propName][prop];
      return obj;
    }, {});
  }

  function stringifyViewConfig(viewConfig) {
    return JSON.stringify(viewConfig, function (key, val) {
      if (typeof val === 'function') {
        return "\u0192 " + val.name;
      }

      return val;
    }, 2);
  }

  var _default = verifyComponentAttributeEquivalence;
  exports.default = _default;
},239,[3,174,206],"node_modules/react-native/Libraries/Utilities/verifyComponentAttributeEquivalence.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _$$_REQUIRE(_dependencyMap[0], "react");

  module.exports = React.createContext(false);
},240,[49],"node_modules/react-native/Libraries/Text/TextAncestor.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var hairlineWidth = _$$_REQUIRE(_dependencyMap[0], "../Utilities/PixelRatio").roundToNearestPixel(0.4);

  if (hairlineWidth === 0) {
    hairlineWidth = 1 / _$$_REQUIRE(_dependencyMap[0], "../Utilities/PixelRatio").get();
  }

  var absoluteFill = {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  };

  if (__DEV__) {
    Object.freeze(absoluteFill);
  }

  module.exports = {
    hairlineWidth: hairlineWidth,
    absoluteFill: absoluteFill,
    absoluteFillObject: absoluteFill,
    compose: function compose(style1, style2) {
      if (style1 != null && style2 != null) {
        return [style1, style2];
      } else {
        return style1 != null ? style1 : style2;
      }
    },
    flatten: _$$_REQUIRE(_dependencyMap[1], "./flattenStyle"),
    setStyleAttributePreprocessor: function setStyleAttributePreprocessor(property, process) {
      var value;

      if (_$$_REQUIRE(_dependencyMap[2], "../Components/View/ReactNativeStyleAttributes")[property] === true) {
        value = {};
      } else if (typeof _$$_REQUIRE(_dependencyMap[2], "../Components/View/ReactNativeStyleAttributes")[property] === 'object') {
        value = _$$_REQUIRE(_dependencyMap[2], "../Components/View/ReactNativeStyleAttributes")[property];
      } else {
        console.error(property + " is not a valid style attribute");
        return;
      }

      if (__DEV__ && typeof value.process === 'function') {
        console.warn("Overwriting " + property + " style attribute preprocessor");
      }

      _$$_REQUIRE(_dependencyMap[2], "../Components/View/ReactNativeStyleAttributes")[property] = Object.assign({}, value, {
        process: process
      });
    },
    create: function create(obj) {
      if (__DEV__) {
        for (var _key in obj) {
          _$$_REQUIRE(_dependencyMap[3], "./StyleSheetValidation").validateStyle(_key, obj);

          if (obj[_key]) {
            Object.freeze(obj[_key]);
          }
        }
      }

      return obj;
    }
  };
},241,[231,184,207,242],"node_modules/react-native/Libraries/StyleSheet/StyleSheet.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

  var StyleSheetValidation = function () {
    function StyleSheetValidation() {
      _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/classCallCheck")(this, StyleSheetValidation);
    }

    _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/createClass")(StyleSheetValidation, null, [{
      key: "validateStyleProp",
      value: function validateStyleProp(prop, style, caller) {
        if (!__DEV__ || global.__RCTProfileIsProfiling) {
          return;
        }

        if (allStylePropTypes[prop] === undefined) {
          var message1 = '"' + prop + '" is not a valid style property.';
          var message2 = '\nValid style props: ' + JSON.stringify(Object.keys(allStylePropTypes).sort(), null, '  ');
          styleError(message1, style, caller, message2);
        }

        var error = allStylePropTypes[prop](style, prop, caller, 'prop', null, ReactPropTypesSecret);

        if (error) {
          styleError(error.message, style, caller);
        }
      }
    }, {
      key: "validateStyle",
      value: function validateStyle(name, styles) {
        if (!__DEV__ || global.__RCTProfileIsProfiling) {
          return;
        }

        if (!styles[name]) {
          return;
        }

        var styleProps = Object.keys(styles[name]);

        for (var prop of styleProps) {
          StyleSheetValidation.validateStyleProp(prop, styles[name], 'StyleSheet ' + name);
        }
      }
    }, {
      key: "addValidStylePropTypes",
      value: function addValidStylePropTypes(stylePropTypes) {
        if (!__DEV__ || global.__RCTProfileIsProfiling) {
          return;
        }

        for (var key in stylePropTypes) {
          allStylePropTypes[key] = stylePropTypes[key];
        }
      }
    }]);

    return StyleSheetValidation;
  }();

  var styleError = function styleError(message1, style, caller, message2) {
    _$$_REQUIRE(_dependencyMap[2], "invariant")(false, message1 + '\n' + (caller || '<<unknown>>') + ': ' + JSON.stringify(style, null, '  ') + (message2 || ''));
  };

  var allStylePropTypes = {};

  if (__DEV__ && !global.__RCTProfileIsProfiling) {
    StyleSheetValidation.addValidStylePropTypes(_$$_REQUIRE(_dependencyMap[3], "../DeprecatedPropTypes/DeprecatedImageStylePropTypes"));
    StyleSheetValidation.addValidStylePropTypes(_$$_REQUIRE(_dependencyMap[4], "../DeprecatedPropTypes/DeprecatedTextStylePropTypes"));
    StyleSheetValidation.addValidStylePropTypes(_$$_REQUIRE(_dependencyMap[5], "../DeprecatedPropTypes/DeprecatedViewStylePropTypes"));
  }

  module.exports = StyleSheetValidation;
},242,[16,17,6,225,224,208],"node_modules/react-native/Libraries/StyleSheet/StyleSheetValidation.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/Button.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var Button = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(Button, _React$Component);

    var _super = _createSuper(Button);

    function Button() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, Button);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(Button, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            accessibilityLabel = _this$props.accessibilityLabel,
            color = _this$props.color,
            onPress = _this$props.onPress,
            touchSoundDisabled = _this$props.touchSoundDisabled,
            title = _this$props.title,
            hasTVPreferredFocus = _this$props.hasTVPreferredFocus,
            nextFocusDown = _this$props.nextFocusDown,
            nextFocusForward = _this$props.nextFocusForward,
            nextFocusLeft = _this$props.nextFocusLeft,
            nextFocusRight = _this$props.nextFocusRight,
            nextFocusUp = _this$props.nextFocusUp,
            disabled = _this$props.disabled,
            testID = _this$props.testID;
        var buttonStyles = [styles.button];
        var textStyles = [styles.text];

        if (color) {
          if ("android" === 'ios') {
            textStyles.push({
              color: color
            });
          } else {
            buttonStyles.push({
              backgroundColor: color
            });
          }
        }

        var accessibilityState = {};

        if (disabled) {
          buttonStyles.push(styles.buttonDisabled);
          textStyles.push(styles.textDisabled);
          accessibilityState.disabled = true;
        }

        _$$_REQUIRE(_dependencyMap[6], "invariant")(typeof title === 'string', 'The title prop of a Button must be a string');

        var formattedTitle = "android" === 'android' ? title.toUpperCase() : title;
        var Touchable = "android" === 'android' ? _$$_REQUIRE(_dependencyMap[7], "./Touchable/TouchableNativeFeedback") : _$$_REQUIRE(_dependencyMap[8], "./Touchable/TouchableOpacity");
        return React.createElement(Touchable, {
          accessibilityLabel: accessibilityLabel,
          accessibilityRole: "button",
          accessibilityState: accessibilityState,
          hasTVPreferredFocus: hasTVPreferredFocus,
          nextFocusDown: nextFocusDown,
          nextFocusForward: nextFocusForward,
          nextFocusLeft: nextFocusLeft,
          nextFocusRight: nextFocusRight,
          nextFocusUp: nextFocusUp,
          testID: testID,
          disabled: disabled,
          onPress: onPress,
          touchSoundDisabled: touchSoundDisabled,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 172,
            columnNumber: 7
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[9], "./View/View"), {
          style: buttonStyles,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 186,
            columnNumber: 9
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[10], "../Text/Text"), {
          style: textStyles,
          disabled: disabled,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 187,
            columnNumber: 11
          }
        }, formattedTitle)));
      }
    }]);

    return Button;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[11], "../StyleSheet/StyleSheet").create({
    button: {
      elevation: 4,
      backgroundColor: '#2196F3',
      borderRadius: 2
    },
    text: Object.assign({
      textAlign: 'center',
      margin: 8
    }, {
      color: 'white',
      fontWeight: '500'
    }),
    buttonDisabled: {
      elevation: 0,
      backgroundColor: '#dfdfdf'
    },
    textDisabled: {
      color: '#a1a1a1'
    }
  });

  module.exports = Button;
},243,[31,32,49,35,16,17,6,244,260,236,338,241],"node_modules/react-native/Libraries/Components/Button.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectWithoutProperties2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/objectWithoutProperties"));

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/createClass"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/getPrototypeOf"));

  var _Pressability = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "../../Pressability/Pressability"));

  var _TVTouchable = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[8], "./TVTouchable"));

  var _ReactNative = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[9], "react-native/Libraries/Renderer/shims/ReactNative"));

  var _Platform = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[10], "../../Utilities/Platform"));

  var _View = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[11], "../../Components/View/View"));

  var _processColor = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[12], "../../StyleSheet/processColor"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[13], "react"));

  var _invariant = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[14], "invariant"));

  var _excluded = ["onBlur", "onFocus"];
  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/Touchable/TouchableNativeFeedback.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var TouchableNativeFeedback = function (_React$Component) {
    (0, _inherits2.default)(TouchableNativeFeedback, _React$Component);

    var _super = _createSuper(TouchableNativeFeedback);

    function TouchableNativeFeedback() {
      var _this;

      (0, _classCallCheck2.default)(this, TouchableNativeFeedback);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        pressability: new _Pressability.default(_this._createPressabilityConfig())
      };
      return _this;
    }

    (0, _createClass2.default)(TouchableNativeFeedback, [{
      key: "_createPressabilityConfig",
      value: function _createPressabilityConfig() {
        var _this2 = this;

        return {
          cancelable: !this.props.rejectResponderTermination,
          disabled: this.props.disabled,
          hitSlop: this.props.hitSlop,
          delayLongPress: this.props.delayLongPress,
          delayPressIn: this.props.delayPressIn,
          delayPressOut: this.props.delayPressOut,
          minPressDuration: 0,
          pressRectOffset: this.props.pressRetentionOffset,
          android_disableSound: this.props.touchSoundDisabled,
          onLongPress: this.props.onLongPress,
          onPress: this.props.onPress,
          onPressIn: function onPressIn(event) {
            if (_Platform.default.OS === 'android') {
              _this2._dispatchPressedStateChange(true);

              _this2._dispatchHotspotUpdate(event);
            }

            if (_this2.props.onPressIn != null) {
              _this2.props.onPressIn(event);
            }
          },
          onPressMove: function onPressMove(event) {
            if (_Platform.default.OS === 'android') {
              _this2._dispatchHotspotUpdate(event);
            }
          },
          onPressOut: function onPressOut(event) {
            if (_Platform.default.OS === 'android') {
              _this2._dispatchPressedStateChange(false);
            }

            if (_this2.props.onPressOut != null) {
              _this2.props.onPressOut(event);
            }
          }
        };
      }
    }, {
      key: "_dispatchPressedStateChange",
      value: function _dispatchPressedStateChange(pressed) {
        if (_Platform.default.OS === 'android') {
          var hostComponentRef = _ReactNative.default.findHostInstance_DEPRECATED(this);

          if (hostComponentRef == null) {
            console.warn('Touchable: Unable to find HostComponent instance. ' + 'Has your Touchable component been unmounted?');
          } else {
            _$$_REQUIRE(_dependencyMap[15], "react-native/Libraries/Components/View/ViewNativeComponent").Commands.setPressed(hostComponentRef, pressed);
          }
        }
      }
    }, {
      key: "_dispatchHotspotUpdate",
      value: function _dispatchHotspotUpdate(event) {
        if (_Platform.default.OS === 'android') {
          var _event$nativeEvent = event.nativeEvent,
              locationX = _event$nativeEvent.locationX,
              locationY = _event$nativeEvent.locationY;

          var hostComponentRef = _ReactNative.default.findHostInstance_DEPRECATED(this);

          if (hostComponentRef == null) {
            console.warn('Touchable: Unable to find HostComponent instance. ' + 'Has your Touchable component been unmounted?');
          } else {
            _$$_REQUIRE(_dependencyMap[15], "react-native/Libraries/Components/View/ViewNativeComponent").Commands.hotspotUpdate(hostComponentRef, locationX != null ? locationX : 0, locationY != null ? locationY : 0);
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        var element = React.Children.only(this.props.children);
        var children = [element.props.children];

        if (__DEV__) {
          if (element.type === _View.default) {
            children.push(React.createElement(_$$_REQUIRE(_dependencyMap[16], "../../Pressability/PressabilityDebug").PressabilityDebugView, {
              color: "brown",
              hitSlop: this.props.hitSlop,
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 250,
                columnNumber: 11
              }
            }));
          }
        }

        var _this$state$pressabil = this.state.pressability.getEventHandlers(),
            onBlur = _this$state$pressabil.onBlur,
            onFocus = _this$state$pressabil.onFocus,
            eventHandlersWithoutBlurAndFocus = (0, _objectWithoutProperties2.default)(_this$state$pressabil, _excluded);

        return React.cloneElement.apply(React, [element, Object.assign({}, eventHandlersWithoutBlurAndFocus, getBackgroundProp(this.props.background === undefined ? TouchableNativeFeedback.SelectableBackground() : this.props.background, this.props.useForeground === true), {
          accessible: this.props.accessible !== false,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityRole: this.props.accessibilityRole,
          accessibilityState: this.props.accessibilityState,
          accessibilityActions: this.props.accessibilityActions,
          onAccessibilityAction: this.props.onAccessibilityAction,
          accessibilityValue: this.props.accessibilityValue,
          importantForAccessibility: this.props.importantForAccessibility,
          accessibilityLiveRegion: this.props.accessibilityLiveRegion,
          accessibilityViewIsModal: this.props.accessibilityViewIsModal,
          accessibilityElementsHidden: this.props.accessibilityElementsHidden,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          hitSlop: this.props.hitSlop,
          focusable: this.props.focusable !== false && this.props.onPress !== undefined && !this.props.disabled,
          nativeID: this.props.nativeID,
          nextFocusDown: this.props.nextFocusDown,
          nextFocusForward: this.props.nextFocusForward,
          nextFocusLeft: this.props.nextFocusLeft,
          nextFocusRight: this.props.nextFocusRight,
          nextFocusUp: this.props.nextFocusUp,
          onLayout: this.props.onLayout,
          testID: this.props.testID
        })].concat(children));
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this3 = this;

        if (_Platform.default.isTV) {
          this._tvTouchable = new _TVTouchable.default(this, {
            getDisabled: function getDisabled() {
              return _this3.props.disabled === true;
            },
            onBlur: function onBlur(event) {
              if (_this3.props.onBlur != null) {
                _this3.props.onBlur(event);
              }
            },
            onFocus: function onFocus(event) {
              if (_this3.props.onFocus != null) {
                _this3.props.onFocus(event);
              }
            },
            onPress: function onPress(event) {
              if (_this3.props.onPress != null) {
                _this3.props.onPress(event);
              }
            }
          });
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        this.state.pressability.configure(this._createPressabilityConfig());
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (_Platform.default.isTV) {
          if (this._tvTouchable != null) {
            this._tvTouchable.destroy();
          }
        }

        this.state.pressability.reset();
      }
    }]);
    return TouchableNativeFeedback;
  }(React.Component);

  TouchableNativeFeedback.SelectableBackground = function (rippleRadius) {
    return {
      type: 'ThemeAttrAndroid',
      attribute: 'selectableItemBackground',
      rippleRadius: rippleRadius
    };
  };

  TouchableNativeFeedback.SelectableBackgroundBorderless = function (rippleRadius) {
    return {
      type: 'ThemeAttrAndroid',
      attribute: 'selectableItemBackgroundBorderless',
      rippleRadius: rippleRadius
    };
  };

  TouchableNativeFeedback.Ripple = function (color, borderless, rippleRadius) {
    var processedColor = (0, _processColor.default)(color);
    (0, _invariant.default)(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');
    return {
      type: 'RippleAndroid',
      color: processedColor,
      borderless: borderless,
      rippleRadius: rippleRadius
    };
  };

  TouchableNativeFeedback.canUseNativeForeground = function () {
    return _Platform.default.OS === 'android' && _Platform.default.Version >= 23;
  };

  var getBackgroundProp = _Platform.default.OS === 'android' ? function (background, useForeground) {
    return useForeground && TouchableNativeFeedback.canUseNativeForeground() ? {
      nativeForegroundAndroid: background
    } : {
      nativeBackgroundAndroid: background
    };
  } : function (background, useForeground) {
    return null;
  };
  module.exports = TouchableNativeFeedback;
},244,[3,128,16,17,35,32,31,245,250,85,80,236,176,49,6,237,253],"node_modules/react-native/Libraries/Components/Touchable/TouchableNativeFeedback.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var _invariant = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "invariant"));

  var _SoundManager = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../Components/Sound/SoundManager"));

  var _Platform = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../Utilities/Platform"));

  var _UIManager = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "../ReactNative/UIManager"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7], "react"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var Transitions = Object.freeze({
    NOT_RESPONDER: {
      DELAY: 'ERROR',
      RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',
      RESPONDER_RELEASE: 'ERROR',
      RESPONDER_TERMINATED: 'ERROR',
      ENTER_PRESS_RECT: 'ERROR',
      LEAVE_PRESS_RECT: 'ERROR',
      LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_INACTIVE_PRESS_IN: {
      DELAY: 'RESPONDER_ACTIVE_PRESS_IN',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',
      LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
      DELAY: 'RESPONDER_ACTIVE_PRESS_OUT',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',
      LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_ACTIVE_PRESS_IN: {
      DELAY: 'ERROR',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',
      LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN'
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
      DELAY: 'ERROR',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',
      LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
      DELAY: 'ERROR',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
      LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN'
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
      DELAY: 'ERROR',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
      LONG_PRESS_DETECTED: 'ERROR'
    },
    ERROR: {
      DELAY: 'NOT_RESPONDER',
      RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'NOT_RESPONDER',
      LEAVE_PRESS_RECT: 'NOT_RESPONDER',
      LONG_PRESS_DETECTED: 'NOT_RESPONDER'
    }
  });

  var isActiveSignal = function isActiveSignal(signal) {
    return signal === 'RESPONDER_ACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';
  };

  var isActivationSignal = function isActivationSignal(signal) {
    return signal === 'RESPONDER_ACTIVE_PRESS_OUT' || signal === 'RESPONDER_ACTIVE_PRESS_IN';
  };

  var isPressInSignal = function isPressInSignal(signal) {
    return signal === 'RESPONDER_INACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';
  };

  var isTerminalSignal = function isTerminalSignal(signal) {
    return signal === 'RESPONDER_TERMINATED' || signal === 'RESPONDER_RELEASE';
  };

  var DEFAULT_LONG_PRESS_DELAY_MS = 500;
  var DEFAULT_PRESS_RECT_OFFSETS = {
    bottom: 30,
    left: 20,
    right: 20,
    top: 20
  };
  var DEFAULT_MIN_PRESS_DURATION = 130;

  var Pressability = function () {
    function Pressability(config) {
      var _this = this;

      (0, _classCallCheck2.default)(this, Pressability);
      this._eventHandlers = null;
      this._hoverInDelayTimeout = null;
      this._hoverOutDelayTimeout = null;
      this._isHovered = false;
      this._longPressDelayTimeout = null;
      this._pressDelayTimeout = null;
      this._pressOutDelayTimeout = null;
      this._responderID = null;
      this._responderRegion = null;
      this._touchState = 'NOT_RESPONDER';

      this._measureCallback = function (left, top, width, height, pageX, pageY) {
        if (!left && !top && !width && !height && !pageX && !pageY) {
          return;
        }

        _this._responderRegion = {
          bottom: pageY + height,
          left: pageX,
          right: pageX + width,
          top: pageY
        };
      };

      this.configure(config);
    }

    (0, _createClass2.default)(Pressability, [{
      key: "configure",
      value: function configure(config) {
        this._config = config;
      }
    }, {
      key: "reset",
      value: function reset() {
        this._cancelHoverInDelayTimeout();

        this._cancelHoverOutDelayTimeout();

        this._cancelLongPressDelayTimeout();

        this._cancelPressDelayTimeout();

        this._cancelPressOutDelayTimeout();
      }
    }, {
      key: "getEventHandlers",
      value: function getEventHandlers() {
        if (this._eventHandlers == null) {
          this._eventHandlers = this._createEventHandlers();
        }

        return this._eventHandlers;
      }
    }, {
      key: "_createEventHandlers",
      value: function _createEventHandlers() {
        var _this2 = this;

        var focusEventHandlers = {
          onBlur: function onBlur(event) {
            var onBlur = _this2._config.onBlur;

            if (onBlur != null) {
              onBlur(event);
            }
          },
          onFocus: function onFocus(event) {
            var onFocus = _this2._config.onFocus;

            if (onFocus != null) {
              onFocus(event);
            }
          }
        };
        var responderEventHandlers = {
          onStartShouldSetResponder: function onStartShouldSetResponder() {
            var disabled = _this2._config.disabled;

            if (disabled == null) {
              var onStartShouldSetResponder_DEPRECATED = _this2._config.onStartShouldSetResponder_DEPRECATED;
              return onStartShouldSetResponder_DEPRECATED == null ? true : onStartShouldSetResponder_DEPRECATED();
            }

            return !disabled;
          },
          onResponderGrant: function onResponderGrant(event) {
            event.persist();

            _this2._cancelPressOutDelayTimeout();

            _this2._responderID = event.currentTarget;
            _this2._touchState = 'NOT_RESPONDER';

            _this2._receiveSignal('RESPONDER_GRANT', event);

            var delayPressIn = normalizeDelay(_this2._config.delayPressIn);

            if (delayPressIn > 0) {
              _this2._pressDelayTimeout = setTimeout(function () {
                _this2._receiveSignal('DELAY', event);
              }, delayPressIn);
            } else {
              _this2._receiveSignal('DELAY', event);
            }

            var delayLongPress = normalizeDelay(_this2._config.delayLongPress, 10, DEFAULT_LONG_PRESS_DELAY_MS - delayPressIn);
            _this2._longPressDelayTimeout = setTimeout(function () {
              _this2._handleLongPress(event);
            }, delayLongPress + delayPressIn);
          },
          onResponderMove: function onResponderMove(event) {
            if (_this2._config.onPressMove != null) {
              _this2._config.onPressMove(event);
            }

            var responderRegion = _this2._responderRegion;

            if (responderRegion == null) {
              return;
            }

            var touch = getTouchFromPressEvent(event);

            if (touch == null) {
              _this2._cancelLongPressDelayTimeout();

              _this2._receiveSignal('LEAVE_PRESS_RECT', event);

              return;
            }

            if (_this2._touchActivatePosition != null) {
              var deltaX = _this2._touchActivatePosition.pageX - touch.pageX;
              var deltaY = _this2._touchActivatePosition.pageY - touch.pageY;

              if (Math.hypot(deltaX, deltaY) > 10) {
                _this2._cancelLongPressDelayTimeout();
              }
            }

            if (_this2._isTouchWithinResponderRegion(touch, responderRegion)) {
              _this2._receiveSignal('ENTER_PRESS_RECT', event);
            } else {
              _this2._cancelLongPressDelayTimeout();

              _this2._receiveSignal('LEAVE_PRESS_RECT', event);
            }
          },
          onResponderRelease: function onResponderRelease(event) {
            _this2._receiveSignal('RESPONDER_RELEASE', event);
          },
          onResponderTerminate: function onResponderTerminate(event) {
            _this2._receiveSignal('RESPONDER_TERMINATED', event);
          },
          onResponderTerminationRequest: function onResponderTerminationRequest() {
            var cancelable = _this2._config.cancelable;

            if (cancelable == null) {
              var onResponderTerminationRequest_DEPRECATED = _this2._config.onResponderTerminationRequest_DEPRECATED;
              return onResponderTerminationRequest_DEPRECATED == null ? true : onResponderTerminationRequest_DEPRECATED();
            }

            return cancelable;
          },
          onClick: function onClick(event) {
            var onPress = _this2._config.onPress;

            if (onPress != null) {
              onPress(event);
            }
          }
        };

        if (process.env.NODE_ENV === 'test') {
          responderEventHandlers.onStartShouldSetResponder.testOnly_pressabilityConfig = function () {
            return _this2._config;
          };
        }

        var mouseEventHandlers = _Platform.default.OS === 'ios' || _Platform.default.OS === 'android' ? null : {
          onMouseEnter: function onMouseEnter(event) {
            if ((0, _$$_REQUIRE(_dependencyMap[8], "./HoverState").isHoverEnabled)()) {
              _this2._isHovered = true;

              _this2._cancelHoverOutDelayTimeout();

              var onHoverIn = _this2._config.onHoverIn;

              if (onHoverIn != null) {
                var delayHoverIn = normalizeDelay(_this2._config.delayHoverIn);

                if (delayHoverIn > 0) {
                  _this2._hoverInDelayTimeout = setTimeout(function () {
                    onHoverIn(event);
                  }, delayHoverIn);
                } else {
                  onHoverIn(event);
                }
              }
            }
          },
          onMouseLeave: function onMouseLeave(event) {
            if (_this2._isHovered) {
              _this2._isHovered = false;

              _this2._cancelHoverInDelayTimeout();

              var onHoverOut = _this2._config.onHoverOut;

              if (onHoverOut != null) {
                var delayHoverOut = normalizeDelay(_this2._config.delayHoverOut);

                if (delayHoverOut > 0) {
                  _this2._hoverInDelayTimeout = setTimeout(function () {
                    onHoverOut(event);
                  }, delayHoverOut);
                } else {
                  onHoverOut(event);
                }
              }
            }
          }
        };
        return Object.assign({}, focusEventHandlers, responderEventHandlers, mouseEventHandlers);
      }
    }, {
      key: "_receiveSignal",
      value: function _receiveSignal(signal, event) {
        var _Transitions$prevStat;

        var prevState = this._touchState;
        var nextState = (_Transitions$prevStat = Transitions[prevState]) == null ? void 0 : _Transitions$prevStat[signal];

        if (this._responderID == null && signal === 'RESPONDER_RELEASE') {
          return;
        }

        (0, _invariant.default)(nextState != null && nextState !== 'ERROR', 'Pressability: Invalid signal `%s` for state `%s` on responder: %s', signal, prevState, typeof this._responderID === 'number' ? this._responderID : '<<host component>>');

        if (prevState !== nextState) {
          this._performTransitionSideEffects(prevState, nextState, signal, event);

          this._touchState = nextState;
        }
      }
    }, {
      key: "_performTransitionSideEffects",
      value: function _performTransitionSideEffects(prevState, nextState, signal, event) {
        if (isTerminalSignal(signal)) {
          this._touchActivatePosition = null;

          this._cancelLongPressDelayTimeout();
        }

        var isInitialTransition = prevState === 'NOT_RESPONDER' && nextState === 'RESPONDER_INACTIVE_PRESS_IN';
        var isActivationTransiton = !isActivationSignal(prevState) && isActivationSignal(nextState);

        if (isInitialTransition || isActivationTransiton) {
          this._measureResponderRegion();
        }

        if (isPressInSignal(prevState) && signal === 'LONG_PRESS_DETECTED') {
          var onLongPress = this._config.onLongPress;

          if (onLongPress != null) {
            onLongPress(event);
          }
        }

        var isPrevActive = isActiveSignal(prevState);
        var isNextActive = isActiveSignal(nextState);

        if (!isPrevActive && isNextActive) {
          this._activate(event);
        } else if (isPrevActive && !isNextActive) {
          this._deactivate(event);
        }

        if (isPressInSignal(prevState) && signal === 'RESPONDER_RELEASE') {
          var _this$_config = this._config,
              _onLongPress = _this$_config.onLongPress,
              onPress = _this$_config.onPress,
              android_disableSound = _this$_config.android_disableSound;

          if (onPress != null) {
            var isPressCanceledByLongPress = _onLongPress != null && prevState === 'RESPONDER_ACTIVE_LONG_PRESS_IN' && this._shouldLongPressCancelPress();

            if (!isPressCanceledByLongPress) {
              if (!isNextActive && !isPrevActive) {
                this._activate(event);

                this._deactivate(event);
              }

              if (_Platform.default.OS === 'android' && android_disableSound !== true) {
                _SoundManager.default.playTouchSound();
              }

              onPress(event);
            }
          }
        }

        this._cancelPressDelayTimeout();
      }
    }, {
      key: "_activate",
      value: function _activate(event) {
        var onPressIn = this._config.onPressIn;
        var touch = getTouchFromPressEvent(event);
        this._touchActivatePosition = {
          pageX: touch.pageX,
          pageY: touch.pageY
        };
        this._touchActivateTime = Date.now();

        if (onPressIn != null) {
          onPressIn(event);
        }
      }
    }, {
      key: "_deactivate",
      value: function _deactivate(event) {
        var onPressOut = this._config.onPressOut;

        if (onPressOut != null) {
          var _this$_touchActivateT;

          var minPressDuration = normalizeDelay(this._config.minPressDuration, 0, DEFAULT_MIN_PRESS_DURATION);
          var pressDuration = Date.now() - ((_this$_touchActivateT = this._touchActivateTime) != null ? _this$_touchActivateT : 0);
          var delayPressOut = Math.max(minPressDuration - pressDuration, normalizeDelay(this._config.delayPressOut));

          if (delayPressOut > 0) {
            this._pressOutDelayTimeout = setTimeout(function () {
              onPressOut(event);
            }, delayPressOut);
          } else {
            onPressOut(event);
          }
        }

        this._touchActivateTime = null;
      }
    }, {
      key: "_measureResponderRegion",
      value: function _measureResponderRegion() {
        if (this._responderID == null) {
          return;
        }

        if (typeof this._responderID === 'number') {
          _UIManager.default.measure(this._responderID, this._measureCallback);
        } else {
          this._responderID.measure(this._measureCallback);
        }
      }
    }, {
      key: "_isTouchWithinResponderRegion",
      value: function _isTouchWithinResponderRegion(touch, responderRegion) {
        var _pressRectOffset$bott, _pressRectOffset$left, _pressRectOffset$righ, _pressRectOffset$top;

        var hitSlop = (0, _$$_REQUIRE(_dependencyMap[9], "../StyleSheet/Rect").normalizeRect)(this._config.hitSlop);
        var pressRectOffset = (0, _$$_REQUIRE(_dependencyMap[9], "../StyleSheet/Rect").normalizeRect)(this._config.pressRectOffset);
        var regionBottom = responderRegion.bottom;
        var regionLeft = responderRegion.left;
        var regionRight = responderRegion.right;
        var regionTop = responderRegion.top;

        if (hitSlop != null) {
          if (hitSlop.bottom != null) {
            regionBottom += hitSlop.bottom;
          }

          if (hitSlop.left != null) {
            regionLeft -= hitSlop.left;
          }

          if (hitSlop.right != null) {
            regionRight += hitSlop.right;
          }

          if (hitSlop.top != null) {
            regionTop -= hitSlop.top;
          }
        }

        regionBottom += (_pressRectOffset$bott = pressRectOffset == null ? void 0 : pressRectOffset.bottom) != null ? _pressRectOffset$bott : DEFAULT_PRESS_RECT_OFFSETS.bottom;
        regionLeft -= (_pressRectOffset$left = pressRectOffset == null ? void 0 : pressRectOffset.left) != null ? _pressRectOffset$left : DEFAULT_PRESS_RECT_OFFSETS.left;
        regionRight += (_pressRectOffset$righ = pressRectOffset == null ? void 0 : pressRectOffset.right) != null ? _pressRectOffset$righ : DEFAULT_PRESS_RECT_OFFSETS.right;
        regionTop -= (_pressRectOffset$top = pressRectOffset == null ? void 0 : pressRectOffset.top) != null ? _pressRectOffset$top : DEFAULT_PRESS_RECT_OFFSETS.top;
        return touch.pageX > regionLeft && touch.pageX < regionRight && touch.pageY > regionTop && touch.pageY < regionBottom;
      }
    }, {
      key: "_handleLongPress",
      value: function _handleLongPress(event) {
        if (this._touchState === 'RESPONDER_ACTIVE_PRESS_IN' || this._touchState === 'RESPONDER_ACTIVE_LONG_PRESS_IN') {
          this._receiveSignal('LONG_PRESS_DETECTED', event);
        }
      }
    }, {
      key: "_shouldLongPressCancelPress",
      value: function _shouldLongPressCancelPress() {
        return this._config.onLongPressShouldCancelPress_DEPRECATED == null || this._config.onLongPressShouldCancelPress_DEPRECATED();
      }
    }, {
      key: "_cancelHoverInDelayTimeout",
      value: function _cancelHoverInDelayTimeout() {
        if (this._hoverInDelayTimeout != null) {
          clearTimeout(this._hoverInDelayTimeout);
          this._hoverInDelayTimeout = null;
        }
      }
    }, {
      key: "_cancelHoverOutDelayTimeout",
      value: function _cancelHoverOutDelayTimeout() {
        if (this._hoverOutDelayTimeout != null) {
          clearTimeout(this._hoverOutDelayTimeout);
          this._hoverOutDelayTimeout = null;
        }
      }
    }, {
      key: "_cancelLongPressDelayTimeout",
      value: function _cancelLongPressDelayTimeout() {
        if (this._longPressDelayTimeout != null) {
          clearTimeout(this._longPressDelayTimeout);
          this._longPressDelayTimeout = null;
        }
      }
    }, {
      key: "_cancelPressDelayTimeout",
      value: function _cancelPressDelayTimeout() {
        if (this._pressDelayTimeout != null) {
          clearTimeout(this._pressDelayTimeout);
          this._pressDelayTimeout = null;
        }
      }
    }, {
      key: "_cancelPressOutDelayTimeout",
      value: function _cancelPressOutDelayTimeout() {
        if (this._pressOutDelayTimeout != null) {
          clearTimeout(this._pressOutDelayTimeout);
          this._pressOutDelayTimeout = null;
        }
      }
    }]);
    return Pressability;
  }();

  exports.default = Pressability;

  function normalizeDelay(delay) {
    var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return Math.max(min, delay != null ? delay : fallback);
  }

  var getTouchFromPressEvent = function getTouchFromPressEvent(event) {
    var _event$nativeEvent = event.nativeEvent,
        changedTouches = _event$nativeEvent.changedTouches,
        touches = _event$nativeEvent.touches;

    if (touches != null && touches.length > 0) {
      return touches[0];
    }

    if (changedTouches != null && changedTouches.length > 0) {
      return changedTouches[0];
    }

    return event.nativeEvent;
  };
},245,[3,16,17,6,246,80,43,49,248,249],"node_modules/react-native/Libraries/Pressability/Pressability.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeSoundManager = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./NativeSoundManager"));

  var SoundManager = {
    playTouchSound: function playTouchSound() {
      if (_NativeSoundManager.default) {
        _NativeSoundManager.default.playTouchSound();
      }
    }
  };
  module.exports = SoundManager;
},246,[3,247],"node_modules/react-native/Libraries/Components/Sound/SoundManager.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('SoundManager');

  exports.default = _default;
},247,[5],"node_modules/react-native/Libraries/Components/Sound/NativeSoundManager.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isHoverEnabled = isHoverEnabled;

  var _Platform = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../Utilities/Platform"));

  var isEnabled = false;

  if (_Platform.default.OS === 'web') {
    var canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);

    if (canUseDOM) {
      var HOVER_THRESHOLD_MS = 1000;
      var lastTouchTimestamp = 0;

      var enableHover = function enableHover() {
        if (isEnabled || Date.now() - lastTouchTimestamp < HOVER_THRESHOLD_MS) {
          return;
        }

        isEnabled = true;
      };

      var disableHover = function disableHover() {
        lastTouchTimestamp = Date.now();

        if (isEnabled) {
          isEnabled = false;
        }
      };

      document.addEventListener('touchstart', disableHover, true);
      document.addEventListener('touchmove', disableHover, true);
      document.addEventListener('mousemove', enableHover, true);
    }
  }

  function isHoverEnabled() {
    return isEnabled;
  }
},248,[3,80],"node_modules/react-native/Libraries/Pressability/HoverState.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createSquare = createSquare;
  exports.normalizeRect = normalizeRect;

  function createSquare(size) {
    return {
      bottom: size,
      left: size,
      right: size,
      top: size
    };
  }

  function normalizeRect(rectOrSize) {
    return typeof rectOrSize === 'number' ? createSquare(rectOrSize) : rectOrSize;
  }
},249,[],"node_modules/react-native/Libraries/StyleSheet/Rect.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var _invariant = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "invariant"));

  var _ReactNative = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../Renderer/shims/ReactNative"));

  var _Platform = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../Utilities/Platform"));

  var _TVEventHandler = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "../../Components/AppleTV/TVEventHandler"));

  var TVTouchable = function () {
    function TVTouchable(component, config) {
      (0, _classCallCheck2.default)(this, TVTouchable);
      (0, _invariant.default)(_Platform.default.isTV, 'TVTouchable: Requires `Platform.isTV`.');
      this._tvEventHandler = new _TVEventHandler.default();

      this._tvEventHandler.enable(component, function (_, tvData) {
        tvData.dispatchConfig = {};

        if (_ReactNative.default.findNodeHandle(component) === tvData.tag) {
          if (tvData.eventType === 'focus') {
            config.onFocus(tvData);
          } else if (tvData.eventType === 'blur') {
            config.onBlur(tvData);
          } else if (tvData.eventType === 'select') {
            if (!config.getDisabled()) {
              config.onPress(tvData);
            }
          }
        }
      });
    }

    (0, _createClass2.default)(TVTouchable, [{
      key: "destroy",
      value: function destroy() {
        this._tvEventHandler.disable();
      }
    }]);
    return TVTouchable;
  }();

  exports.default = TVTouchable;
},250,[3,16,17,6,85,80,251],"node_modules/react-native/Libraries/Components/Touchable/TVTouchable.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var _NativeTVNavigationEventEmitter = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "./NativeTVNavigationEventEmitter"));

  var TVEventHandler = function () {
    function TVEventHandler() {
      (0, _classCallCheck2.default)(this, TVEventHandler);
      this.__nativeTVNavigationEventListener = null;
      this.__nativeTVNavigationEventEmitter = null;
    }

    (0, _createClass2.default)(TVEventHandler, [{
      key: "enable",
      value: function enable(component, callback) {
        if ("android" === 'ios' && !_NativeTVNavigationEventEmitter.default) {
          return;
        }

        this.__nativeTVNavigationEventEmitter = new (_$$_REQUIRE(_dependencyMap[4], "../../EventEmitter/NativeEventEmitter"))(_NativeTVNavigationEventEmitter.default);
        this.__nativeTVNavigationEventListener = this.__nativeTVNavigationEventEmitter.addListener('onHWKeyEvent', function (data) {
          if (callback) {
            callback(component, data);
          }
        });
      }
    }, {
      key: "disable",
      value: function disable() {
        if (this.__nativeTVNavigationEventListener) {
          this.__nativeTVNavigationEventListener.remove();

          delete this.__nativeTVNavigationEventListener;
        }

        if (this.__nativeTVNavigationEventEmitter) {
          delete this.__nativeTVNavigationEventEmitter;
        }
      }
    }]);
    return TVEventHandler;
  }();

  module.exports = TVEventHandler;
},251,[3,16,17,252,126],"node_modules/react-native/Libraries/Components/AppleTV/TVEventHandler.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('TVNavigationEventEmitter');

  exports.default = _default;
},252,[5],"node_modules/react-native/Libraries/Components/AppleTV/NativeTVNavigationEventEmitter.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PressabilityDebugView = PressabilityDebugView;
  exports.isEnabled = isEnabled;

  var _normalizeColor = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../StyleSheet/normalizeColor"));

  var _Touchable = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../Components/Touchable/Touchable"));

  var _View = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../Components/View/View"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4], "react"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Pressability/PressabilityDebug.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function PressabilityDebugView(_ref) {
    var color = _ref.color,
        hitSlop = _ref.hitSlop;

    if (__DEV__) {
      if (isEnabled()) {
        var _hitSlop$bottom, _hitSlop$left, _hitSlop$right, _hitSlop$top;

        var normalizedColor = (0, _normalizeColor.default)(color);

        if (typeof normalizedColor !== 'number') {
          return null;
        }

        var baseColor = '#' + (normalizedColor != null ? normalizedColor : 0).toString(16).padStart(8, '0');
        return React.createElement(_View.default, {
          pointerEvents: "none",
          style: {
            backgroundColor: baseColor.slice(0, -2) + '0F',
            borderColor: baseColor.slice(0, -2) + '55',
            borderStyle: 'dashed',
            borderWidth: 1,
            bottom: -((_hitSlop$bottom = hitSlop == null ? void 0 : hitSlop.bottom) != null ? _hitSlop$bottom : 0),
            left: -((_hitSlop$left = hitSlop == null ? void 0 : hitSlop.left) != null ? _hitSlop$left : 0),
            position: 'absolute',
            right: -((_hitSlop$right = hitSlop == null ? void 0 : hitSlop.right) != null ? _hitSlop$right : 0),
            top: -((_hitSlop$top = hitSlop == null ? void 0 : hitSlop.top) != null ? _hitSlop$top : 0)
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 56,
            columnNumber: 9
          }
        });
      }
    }

    return null;
  }

  function isEnabled() {
    if (__DEV__) {
      return _Touchable.default.TOUCH_TARGET_DEBUG;
    }

    return false;
  }
},253,[3,177,254,236,49],"node_modules/react-native/Libraries/Pressability/PressabilityDebug.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _this2 = this,
      _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/Touchable/Touchable.js";

  var React = _$$_REQUIRE(_dependencyMap[0], "react");

  var extractSingleTouch = function extractSingleTouch(nativeEvent) {
    var touches = nativeEvent.touches;
    var changedTouches = nativeEvent.changedTouches;
    var hasTouches = touches && touches.length > 0;
    var hasChangedTouches = changedTouches && changedTouches.length > 0;
    return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
  };

  var States = _$$_REQUIRE(_dependencyMap[1], "fbjs/lib/keyMirror")({
    NOT_RESPONDER: null,
    RESPONDER_INACTIVE_PRESS_IN: null,
    RESPONDER_INACTIVE_PRESS_OUT: null,
    RESPONDER_ACTIVE_PRESS_IN: null,
    RESPONDER_ACTIVE_PRESS_OUT: null,
    RESPONDER_ACTIVE_LONG_PRESS_IN: null,
    RESPONDER_ACTIVE_LONG_PRESS_OUT: null,
    ERROR: null
  });

  var baseStatesConditions = {
    NOT_RESPONDER: false,
    RESPONDER_INACTIVE_PRESS_IN: false,
    RESPONDER_INACTIVE_PRESS_OUT: false,
    RESPONDER_ACTIVE_PRESS_IN: false,
    RESPONDER_ACTIVE_PRESS_OUT: false,
    RESPONDER_ACTIVE_LONG_PRESS_IN: false,
    RESPONDER_ACTIVE_LONG_PRESS_OUT: false,
    ERROR: false
  };
  var IsActive = Object.assign({}, baseStatesConditions, {
    RESPONDER_ACTIVE_PRESS_OUT: true,
    RESPONDER_ACTIVE_PRESS_IN: true
  });
  var IsPressingIn = Object.assign({}, baseStatesConditions, {
    RESPONDER_INACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  });
  var IsLongPressingIn = Object.assign({}, baseStatesConditions, {
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  });

  var Signals = _$$_REQUIRE(_dependencyMap[1], "fbjs/lib/keyMirror")({
    DELAY: null,
    RESPONDER_GRANT: null,
    RESPONDER_RELEASE: null,
    RESPONDER_TERMINATED: null,
    ENTER_PRESS_RECT: null,
    LEAVE_PRESS_RECT: null,
    LONG_PRESS_DETECTED: null
  });

  var Transitions = {
    NOT_RESPONDER: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.ERROR,
      RESPONDER_TERMINATED: States.ERROR,
      ENTER_PRESS_RECT: States.ERROR,
      LEAVE_PRESS_RECT: States.ERROR,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_IN: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    error: {
      DELAY: States.NOT_RESPONDER,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.NOT_RESPONDER,
      LEAVE_PRESS_RECT: States.NOT_RESPONDER,
      LONG_PRESS_DETECTED: States.NOT_RESPONDER
    }
  };
  var HIGHLIGHT_DELAY_MS = 130;
  var PRESS_EXPAND_PX = 20;
  var LONG_PRESS_THRESHOLD = 500;
  var LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;
  var LONG_PRESS_ALLOWED_MOVEMENT = 10;
  var TouchableMixin = {
    componentDidMount: function componentDidMount() {
      if (!_$$_REQUIRE(_dependencyMap[2], "../../Utilities/Platform").isTV) {
        return;
      }

      this._tvEventHandler = new (_$$_REQUIRE(_dependencyMap[3], "../AppleTV/TVEventHandler"))();

      this._tvEventHandler.enable(this, function (cmp, evt) {
        var myTag = _$$_REQUIRE(_dependencyMap[4], "../../Renderer/shims/ReactNative").findNodeHandle(cmp);

        evt.dispatchConfig = {};

        if (myTag === evt.tag) {
          if (evt.eventType === 'focus') {
            cmp.touchableHandleFocus(evt);
          } else if (evt.eventType === 'blur') {
            cmp.touchableHandleBlur(evt);
          } else if (evt.eventType === 'select' && "android" !== 'android') {
            cmp.touchableHandlePress && !cmp.props.disabled && cmp.touchableHandlePress(evt);
          }
        }
      });
    },
    componentWillUnmount: function componentWillUnmount() {
      if (this._tvEventHandler) {
        this._tvEventHandler.disable();

        delete this._tvEventHandler;
      }

      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
    },
    touchableGetInitialState: function touchableGetInitialState() {
      return {
        touchable: {
          touchState: undefined,
          responderID: null
        }
      };
    },
    touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {
      return !this.props.rejectResponderTermination;
    },
    touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {
      return !this.props.disabled;
    },
    touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {
      return true;
    },
    touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {
      var dispatchID = e.currentTarget;
      e.persist();
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
      this.pressOutDelayTimeout = null;
      this.state.touchable.touchState = States.NOT_RESPONDER;
      this.state.touchable.responderID = dispatchID;

      this._receiveSignal(Signals.RESPONDER_GRANT, e);

      var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
      delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;

      if (delayMS !== 0) {
        this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);
      } else {
        this._handleDelay(e);
      }

      var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
      longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
      this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);
    },
    touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {
      this.pressInLocation = null;

      this._receiveSignal(Signals.RESPONDER_RELEASE, e);
    },
    touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {
      this.pressInLocation = null;

      this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
    },
    touchableHandleResponderMove: function touchableHandleResponderMove(e) {
      if (!this.state.touchable.positionOnActivate) {
        return;
      }

      var positionOnActivate = this.state.touchable.positionOnActivate;
      var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
      var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {
        left: PRESS_EXPAND_PX,
        right: PRESS_EXPAND_PX,
        top: PRESS_EXPAND_PX,
        bottom: PRESS_EXPAND_PX
      };
      var pressExpandLeft = pressRectOffset.left;
      var pressExpandTop = pressRectOffset.top;
      var pressExpandRight = pressRectOffset.right;
      var pressExpandBottom = pressRectOffset.bottom;
      var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;

      if (hitSlop) {
        pressExpandLeft += hitSlop.left || 0;
        pressExpandTop += hitSlop.top || 0;
        pressExpandRight += hitSlop.right || 0;
        pressExpandBottom += hitSlop.bottom || 0;
      }

      var touch = extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;

      if (this.pressInLocation) {
        var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);

        if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
          this._cancelLongPressDelayTimeout();
        }
      }

      var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;

      if (isTouchWithinActive) {
        var prevState = this.state.touchable.touchState;

        this._receiveSignal(Signals.ENTER_PRESS_RECT, e);

        var curState = this.state.touchable.touchState;

        if (curState === States.RESPONDER_INACTIVE_PRESS_IN && prevState !== States.RESPONDER_INACTIVE_PRESS_IN) {
          this._cancelLongPressDelayTimeout();
        }
      } else {
        this._cancelLongPressDelayTimeout();

        this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
      }
    },
    touchableHandleFocus: function touchableHandleFocus(e) {
      this.props.onFocus && this.props.onFocus(e);
    },
    touchableHandleBlur: function touchableHandleBlur(e) {
      this.props.onBlur && this.props.onBlur(e);
    },
    _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {
      var responderID = this.state.touchable.responderID;

      if (responderID == null) {
        return;
      }

      if (typeof responderID === 'number') {
        _$$_REQUIRE(_dependencyMap[5], "../../ReactNative/UIManager").measure(responderID, this._handleQueryLayout);
      } else {
        responderID.measure(this._handleQueryLayout);
      }
    },
    _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {
      if (!l && !t && !w && !h && !globalX && !globalY) {
        return;
      }

      this.state.touchable.positionOnActivate && _$$_REQUIRE(_dependencyMap[6], "./Position").release(this.state.touchable.positionOnActivate);
      this.state.touchable.dimensionsOnActivate && _$$_REQUIRE(_dependencyMap[7], "./BoundingDimensions").release(this.state.touchable.dimensionsOnActivate);
      this.state.touchable.positionOnActivate = _$$_REQUIRE(_dependencyMap[6], "./Position").getPooled(globalX, globalY);
      this.state.touchable.dimensionsOnActivate = _$$_REQUIRE(_dependencyMap[7], "./BoundingDimensions").getPooled(w, h);
    },
    _handleDelay: function _handleDelay(e) {
      this.touchableDelayTimeout = null;

      this._receiveSignal(Signals.DELAY, e);
    },
    _handleLongDelay: function _handleLongDelay(e) {
      this.longPressDelayTimeout = null;
      var curState = this.state.touchable.touchState;

      if (curState === States.RESPONDER_ACTIVE_PRESS_IN || curState === States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
        this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
      }
    },
    _receiveSignal: function _receiveSignal(signal, e) {
      var responderID = this.state.touchable.responderID;
      var curState = this.state.touchable.touchState;
      var nextState = Transitions[curState] && Transitions[curState][signal];

      if (!responderID && signal === Signals.RESPONDER_RELEASE) {
        return;
      }

      if (!nextState) {
        throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + typeof this.state.touchable.responderID === 'number' ? this.state.touchable.responderID : 'host component' + '`');
      }

      if (nextState === States.ERROR) {
        throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + typeof this.state.touchable.responderID === 'number' ? this.state.touchable.responderID : '<<host component>>' + '`');
      }

      if (curState !== nextState) {
        this._performSideEffectsForTransition(curState, nextState, signal, e);

        this.state.touchable.touchState = nextState;
      }
    },
    _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.longPressDelayTimeout = null;
    },
    _isHighlight: function _isHighlight(state) {
      return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
    },
    _savePressInLocation: function _savePressInLocation(e) {
      var touch = extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;
      var locationX = touch && touch.locationX;
      var locationY = touch && touch.locationY;
      this.pressInLocation = {
        pageX: pageX,
        pageY: pageY,
        locationX: locationX,
        locationY: locationY
      };
    },
    _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {
      var deltaX = aX - bX;
      var deltaY = aY - bY;
      return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    },
    _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {
      var curIsHighlight = this._isHighlight(curState);

      var newIsHighlight = this._isHighlight(nextState);

      var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;

      if (isFinalSignal) {
        this._cancelLongPressDelayTimeout();
      }

      var isInitialTransition = curState === States.NOT_RESPONDER && nextState === States.RESPONDER_INACTIVE_PRESS_IN;
      var isActiveTransition = !IsActive[curState] && IsActive[nextState];

      if (isInitialTransition || isActiveTransition) {
        this._remeasureMetricsOnActivation();
      }

      if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
        this.touchableHandleLongPress && this.touchableHandleLongPress(e);
      }

      if (newIsHighlight && !curIsHighlight) {
        this._startHighlight(e);
      } else if (!newIsHighlight && curIsHighlight) {
        this._endHighlight(e);
      }

      if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
        var hasLongPressHandler = !!this.props.onLongPress;
        var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());
        var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;

        if (shouldInvokePress && this.touchableHandlePress) {
          if (!newIsHighlight && !curIsHighlight) {
            this._startHighlight(e);

            this._endHighlight(e);
          }

          if ("android" === 'android' && !this.props.touchSoundDisabled) {
            _$$_REQUIRE(_dependencyMap[8], "../Sound/SoundManager").playTouchSound();
          }

          this.touchableHandlePress(e);
        }
      }

      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.touchableDelayTimeout = null;
    },
    _startHighlight: function _startHighlight(e) {
      this._savePressInLocation(e);

      this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
    },
    _endHighlight: function _endHighlight(e) {
      var _this = this;

      if (this.touchableHandleActivePressOut) {
        if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
          this.pressOutDelayTimeout = setTimeout(function () {
            _this.touchableHandleActivePressOut(e);
          }, this.touchableGetPressOutDelayMS());
        } else {
          this.touchableHandleActivePressOut(e);
        }
      }
    },
    withoutDefaultFocusAndBlur: {}
  };

  var touchableHandleFocus = TouchableMixin.touchableHandleFocus,
      touchableHandleBlur = TouchableMixin.touchableHandleBlur,
      TouchableMixinWithoutDefaultFocusAndBlur = _$$_REQUIRE(_dependencyMap[9], "@babel/runtime/helpers/objectWithoutProperties")(TouchableMixin, ["touchableHandleFocus", "touchableHandleBlur"]);

  TouchableMixin.withoutDefaultFocusAndBlur = TouchableMixinWithoutDefaultFocusAndBlur;
  var Touchable = {
    Mixin: TouchableMixin,
    TOUCH_TARGET_DEBUG: false,
    renderDebugView: function renderDebugView(_ref) {
      var color = _ref.color,
          hitSlop = _ref.hitSlop;

      if (!Touchable.TOUCH_TARGET_DEBUG) {
        return null;
      }

      if (!__DEV__) {
        throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');
      }

      var debugHitSlopStyle = {};
      hitSlop = hitSlop || {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0
      };

      for (var key in hitSlop) {
        debugHitSlopStyle[key] = -hitSlop[key];
      }

      var normalizedColor = _$$_REQUIRE(_dependencyMap[10], "../../StyleSheet/normalizeColor")(color);

      if (typeof normalizedColor !== 'number') {
        return null;
      }

      var hexColor = '#' + ('00000000' + normalizedColor.toString(16)).substr(-8);
      return React.createElement(_$$_REQUIRE(_dependencyMap[11], "../View/View"), {
        pointerEvents: "none",
        style: [styles.debug, Object.assign({
          borderColor: hexColor.slice(0, -2) + '55',
          backgroundColor: hexColor.slice(0, -2) + '0F'
        }, debugHitSlopStyle)],
        __self: _this2,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 958,
          columnNumber: 7
        }
      });
    }
  };

  var styles = _$$_REQUIRE(_dependencyMap[12], "../../StyleSheet/StyleSheet").create({
    debug: {
      position: 'absolute',
      borderWidth: 1,
      borderStyle: 'dashed'
    }
  });

  module.exports = Touchable;
},254,[49,255,80,251,85,43,257,259,246,128,177,236,241],"node_modules/react-native/Libraries/Components/Touchable/Touchable.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var keyMirror = function keyMirror(obj) {
    var ret = {};
    var key;
    !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== "production" ? _$$_REQUIRE(_dependencyMap[0], "./invariant")(false, 'keyMirror(...): Argument must be an object.') : _$$_REQUIRE(_dependencyMap[0], "./invariant")(false) : void 0;

    for (key in obj) {
      if (!obj.hasOwnProperty(key)) {
        continue;
      }

      ret[key] = key;
    }

    return ret;
  };

  module.exports = keyMirror;
},255,[256],"node_modules/fbjs/lib/keyMirror.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var validateFormat = process.env.NODE_ENV !== "production" ? function (format) {} : function (format) {
    if (format === undefined) {
      throw new Error('invariant(...): Second argument must be a string.');
    }
  };

  function invariant(condition, format) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    validateFormat(format);

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
      } else {
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return String(args[argIndex++]);
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }

  module.exports = invariant;
},256,[],"node_modules/fbjs/lib/invariant.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function Position(left, top) {
    this.left = left;
    this.top = top;
  }

  Position.prototype.destructor = function () {
    this.left = null;
    this.top = null;
  };

  _$$_REQUIRE(_dependencyMap[0], "./PooledClass").addPoolingTo(Position, _$$_REQUIRE(_dependencyMap[0], "./PooledClass").twoArgumentPooler);

  module.exports = Position;
},257,[258],"node_modules/react-native/Libraries/Components/Touchable/Position.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var _instance = Klass.instancePool.pop();

      Klass.call(_instance, copyFieldsFrom);
      return _instance;
    } else {
      return new Klass(copyFieldsFrom);
    }
  };

  var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var _instance2 = Klass.instancePool.pop();

      Klass.call(_instance2, a1, a2);
      return _instance2;
    } else {
      return new Klass(a1, a2);
    }
  };

  var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var _instance3 = Klass.instancePool.pop();

      Klass.call(_instance3, a1, a2, a3);
      return _instance3;
    } else {
      return new Klass(a1, a2, a3);
    }
  };

  var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var _instance4 = Klass.instancePool.pop();

      Klass.call(_instance4, a1, a2, a3, a4);
      return _instance4;
    } else {
      return new Klass(a1, a2, a3, a4);
    }
  };

  var standardReleaser = function standardReleaser(instance) {
    var Klass = this;

    _$$_REQUIRE(_dependencyMap[0], "invariant")(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.');

    instance.destructor();

    if (Klass.instancePool.length < Klass.poolSize) {
      Klass.instancePool.push(instance);
    }
  };

  var DEFAULT_POOL_SIZE = 10;
  var DEFAULT_POOLER = oneArgumentPooler;

  var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    NewKlass.instancePool = [];
    NewKlass.getPooled = pooler || DEFAULT_POOLER;

    if (!NewKlass.poolSize) {
      NewKlass.poolSize = DEFAULT_POOL_SIZE;
    }

    NewKlass.release = standardReleaser;
    return NewKlass;
  };

  var PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
  };
  module.exports = PooledClass;
},258,[6],"node_modules/react-native/Libraries/Components/Touchable/PooledClass.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function BoundingDimensions(width, height) {
    this.width = width;
    this.height = height;
  }

  BoundingDimensions.prototype.destructor = function () {
    this.width = null;
    this.height = null;
  };

  BoundingDimensions.getPooledFromElement = function (element) {
    return BoundingDimensions.getPooled(element.offsetWidth, element.offsetHeight);
  };

  _$$_REQUIRE(_dependencyMap[0], "./PooledClass").addPoolingTo(BoundingDimensions, _$$_REQUIRE(_dependencyMap[0], "./PooledClass").twoArgumentPooler);

  module.exports = BoundingDimensions;
},259,[258],"node_modules/react-native/Libraries/Components/Touchable/BoundingDimensions.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/extends"));

  var _objectWithoutProperties2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/objectWithoutProperties"));

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/createClass"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/getPrototypeOf"));

  var _Pressability = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[8], "../../Pressability/Pressability"));

  var _TVTouchable = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[9], "./TVTouchable"));

  var _Animated = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[10], "react-native/Libraries/Animated/src/Animated"));

  var _Easing = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[11], "react-native/Libraries/Animated/src/Easing"));

  var _flattenStyle2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[12], "react-native/Libraries/StyleSheet/flattenStyle"));

  var _Platform = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[13], "../../Utilities/Platform"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[14], "react"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js",
      _this4 = this;

  var _excluded = ["onBlur", "onFocus"];

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var TouchableOpacity = function (_React$Component) {
    (0, _inherits2.default)(TouchableOpacity, _React$Component);

    var _super = _createSuper(TouchableOpacity);

    function TouchableOpacity() {
      var _this;

      (0, _classCallCheck2.default)(this, TouchableOpacity);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        anim: new _Animated.default.Value(_this._getChildStyleOpacityWithDefault()),
        pressability: new _Pressability.default(_this._createPressabilityConfig())
      };
      return _this;
    }

    (0, _createClass2.default)(TouchableOpacity, [{
      key: "_createPressabilityConfig",
      value: function _createPressabilityConfig() {
        var _this2 = this;

        return {
          cancelable: !this.props.rejectResponderTermination,
          disabled: this.props.disabled,
          hitSlop: this.props.hitSlop,
          delayLongPress: this.props.delayLongPress,
          delayPressIn: this.props.delayPressIn,
          delayPressOut: this.props.delayPressOut,
          minPressDuration: 0,
          pressRectOffset: this.props.pressRetentionOffset,
          onBlur: function onBlur(event) {
            if (_Platform.default.isTV) {
              _this2._opacityInactive(250);
            }

            if (_this2.props.onBlur != null) {
              _this2.props.onBlur(event);
            }
          },
          onFocus: function onFocus(event) {
            if (_Platform.default.isTV) {
              _this2._opacityActive(150);
            }

            if (_this2.props.onFocus != null) {
              _this2.props.onFocus(event);
            }
          },
          onLongPress: this.props.onLongPress,
          onPress: this.props.onPress,
          onPressIn: function onPressIn(event) {
            _this2._opacityActive(event.dispatchConfig.registrationName === 'onResponderGrant' ? 0 : 150);

            if (_this2.props.onPressIn != null) {
              _this2.props.onPressIn(event);
            }
          },
          onPressOut: function onPressOut(event) {
            _this2._opacityInactive(250);

            if (_this2.props.onPressOut != null) {
              _this2.props.onPressOut(event);
            }
          }
        };
      }
    }, {
      key: "_setOpacityTo",
      value: function _setOpacityTo(toValue, duration) {
        _Animated.default.timing(this.state.anim, {
          toValue: toValue,
          duration: duration,
          easing: _Easing.default.inOut(_Easing.default.quad),
          useNativeDriver: true
        }).start();
      }
    }, {
      key: "_opacityActive",
      value: function _opacityActive(duration) {
        var _this$props$activeOpa;

        this._setOpacityTo((_this$props$activeOpa = this.props.activeOpacity) != null ? _this$props$activeOpa : 0.2, duration);
      }
    }, {
      key: "_opacityInactive",
      value: function _opacityInactive(duration) {
        this._setOpacityTo(this._getChildStyleOpacityWithDefault(), duration);
      }
    }, {
      key: "_getChildStyleOpacityWithDefault",
      value: function _getChildStyleOpacityWithDefault() {
        var _flattenStyle;

        var opacity = (_flattenStyle = (0, _flattenStyle2.default)(this.props.style)) == null ? void 0 : _flattenStyle.opacity;
        return typeof opacity === 'number' ? opacity : 1;
      }
    }, {
      key: "render",
      value: function render() {
        var _this$state$pressabil = this.state.pressability.getEventHandlers(),
            onBlur = _this$state$pressabil.onBlur,
            onFocus = _this$state$pressabil.onFocus,
            eventHandlersWithoutBlurAndFocus = (0, _objectWithoutProperties2.default)(_this$state$pressabil, _excluded);

        return React.createElement(_Animated.default.View, (0, _extends2.default)({
          accessible: this.props.accessible !== false,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityHint: this.props.accessibilityHint,
          accessibilityRole: this.props.accessibilityRole,
          accessibilityState: this.props.accessibilityState,
          accessibilityActions: this.props.accessibilityActions,
          onAccessibilityAction: this.props.onAccessibilityAction,
          accessibilityValue: this.props.accessibilityValue,
          importantForAccessibility: this.props.importantForAccessibility,
          accessibilityLiveRegion: this.props.accessibilityLiveRegion,
          accessibilityViewIsModal: this.props.accessibilityViewIsModal,
          accessibilityElementsHidden: this.props.accessibilityElementsHidden,
          style: [this.props.style, {
            opacity: this.state.anim
          }],
          nativeID: this.props.nativeID,
          testID: this.props.testID,
          onLayout: this.props.onLayout,
          nextFocusDown: this.props.nextFocusDown,
          nextFocusForward: this.props.nextFocusForward,
          nextFocusLeft: this.props.nextFocusLeft,
          nextFocusRight: this.props.nextFocusRight,
          nextFocusUp: this.props.nextFocusUp,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          hitSlop: this.props.hitSlop,
          focusable: this.props.focusable !== false && this.props.onPress !== undefined,
          ref: this.props.hostRef
        }, eventHandlersWithoutBlurAndFocus, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 224,
            columnNumber: 7
          }
        }), this.props.children, __DEV__ ? React.createElement(_$$_REQUIRE(_dependencyMap[15], "../../Pressability/PressabilityDebug").PressabilityDebugView, {
          color: "cyan",
          hitSlop: this.props.hitSlop,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 255,
            columnNumber: 11
          }
        }) : null);
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this3 = this;

        if (_Platform.default.isTV) {
          this._tvTouchable = new _TVTouchable.default(this, {
            getDisabled: function getDisabled() {
              return _this3.props.disabled === true;
            },
            onBlur: function onBlur(event) {
              if (_this3.props.onBlur != null) {
                _this3.props.onBlur(event);
              }
            },
            onFocus: function onFocus(event) {
              if (_this3.props.onFocus != null) {
                _this3.props.onFocus(event);
              }
            },
            onPress: function onPress(event) {
              if (_this3.props.onPress != null) {
                _this3.props.onPress(event);
              }
            }
          });
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        this.state.pressability.configure(this._createPressabilityConfig());

        if (this.props.disabled !== prevProps.disabled) {
          this._opacityInactive(250);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (_Platform.default.isTV) {
          if (this._tvTouchable != null) {
            this._tvTouchable.destroy();
          }
        }

        this.state.pressability.reset();
      }
    }]);
    return TouchableOpacity;
  }(React.Component);

  module.exports = React.forwardRef(function (props, hostRef) {
    return React.createElement(TouchableOpacity, (0, _extends2.default)({}, props, {
      hostRef: hostRef,
      __self: _this4,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 302,
        columnNumber: 3
      }
    }));
  });
},260,[3,53,128,16,17,35,32,31,245,250,261,284,184,80,49,253],"node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _Platform = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../Utilities/Platform"));

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var Animated = _Platform.default.isTesting || global.RN$Bridgeless ? _$$_REQUIRE(_dependencyMap[3], "./AnimatedMock") : _$$_REQUIRE(_dependencyMap[4], "./AnimatedImplementation");
  module.exports = Object.assign({
    get FlatList() {
      return _$$_REQUIRE(_dependencyMap[5], "./components/AnimatedFlatList");
    },

    get Image() {
      return _$$_REQUIRE(_dependencyMap[6], "./components/AnimatedImage");
    },

    get ScrollView() {
      return _$$_REQUIRE(_dependencyMap[7], "./components/AnimatedScrollView");
    },

    get SectionList() {
      return _$$_REQUIRE(_dependencyMap[8], "./components/AnimatedSectionList");
    },

    get Text() {
      return _$$_REQUIRE(_dependencyMap[9], "./components/AnimatedText");
    },

    get View() {
      return _$$_REQUIRE(_dependencyMap[10], "./components/AnimatedView");
    }

  }, Animated);
},261,[3,80,49,262,272,293,321,333,334,337,342],"node_modules/react-native/Libraries/Animated/src/Animated.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var emptyAnimation = {
    start: function start() {},
    stop: function stop() {},
    reset: function reset() {},
    _startNativeLoop: function _startNativeLoop() {},
    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return false;
    }
  };

  var spring = function spring(value, config) {
    var anyValue = value;
    return Object.assign({}, emptyAnimation, {
      start: function start(callback) {
        anyValue.setValue(config.toValue);
        callback && callback({
          finished: true
        });
      }
    });
  };

  var timing = function timing(value, config) {
    var anyValue = value;
    return Object.assign({}, emptyAnimation, {
      start: function start(callback) {
        anyValue.setValue(config.toValue);
        callback && callback({
          finished: true
        });
      }
    });
  };

  var decay = function decay(value, config) {
    return emptyAnimation;
  };

  var sequence = function sequence(animations) {
    return emptyAnimation;
  };

  var parallel = function parallel(animations, config) {
    return emptyAnimation;
  };

  var delay = function delay(time) {
    return emptyAnimation;
  };

  var stagger = function stagger(time, animations) {
    return emptyAnimation;
  };

  var loop = function loop(animation) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$iterations = _ref.iterations,
        iterations = _ref$iterations === void 0 ? -1 : _ref$iterations;

    return emptyAnimation;
  };

  var event = function event(argMapping, config) {
    return null;
  };

  module.exports = {
    Value: _$$_REQUIRE(_dependencyMap[0], "./nodes/AnimatedValue"),
    ValueXY: _$$_REQUIRE(_dependencyMap[1], "./nodes/AnimatedValueXY"),
    Interpolation: _$$_REQUIRE(_dependencyMap[2], "./nodes/AnimatedInterpolation"),
    Node: _$$_REQUIRE(_dependencyMap[3], "./nodes/AnimatedNode"),
    decay: decay,
    timing: timing,
    spring: spring,
    add: _$$_REQUIRE(_dependencyMap[4], "./AnimatedImplementation").add,
    subtract: _$$_REQUIRE(_dependencyMap[4], "./AnimatedImplementation").subtract,
    divide: _$$_REQUIRE(_dependencyMap[4], "./AnimatedImplementation").divide,
    multiply: _$$_REQUIRE(_dependencyMap[4], "./AnimatedImplementation").multiply,
    modulo: _$$_REQUIRE(_dependencyMap[4], "./AnimatedImplementation").modulo,
    diffClamp: _$$_REQUIRE(_dependencyMap[4], "./AnimatedImplementation").diffClamp,
    delay: delay,
    sequence: sequence,
    parallel: parallel,
    stagger: stagger,
    loop: loop,
    event: event,
    createAnimatedComponent: _$$_REQUIRE(_dependencyMap[5], "./createAnimatedComponent"),
    attachNativeEvent: _$$_REQUIRE(_dependencyMap[6], "./AnimatedEvent").attachNativeEvent,
    forkEvent: _$$_REQUIRE(_dependencyMap[4], "./AnimatedImplementation").forkEvent,
    unforkEvent: _$$_REQUIRE(_dependencyMap[4], "./AnimatedImplementation").unforkEvent,
    Event: _$$_REQUIRE(_dependencyMap[6], "./AnimatedEvent").AnimatedEvent,
    __PropsOnlyForTests: _$$_REQUIRE(_dependencyMap[7], "./nodes/AnimatedProps")
  };
},262,[263,271,266,268,272,288,287,290],"node_modules/react-native/Libraries/Animated/src/AnimatedMock.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _flush(rootNode) {
    var animatedStyles = new Set();

    function findAnimatedStyles(node) {
      if (typeof node.update === 'function') {
        animatedStyles.add(node);
      } else {
        node.__getChildren().forEach(findAnimatedStyles);
      }
    }

    findAnimatedStyles(rootNode);
    animatedStyles.forEach(function (animatedStyle) {
      return animatedStyle.update();
    });
  }

  var AnimatedValue = function (_AnimatedWithChildren) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(AnimatedValue, _AnimatedWithChildren);

    var _super = _createSuper(AnimatedValue);

    function AnimatedValue(value) {
      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, AnimatedValue);

      _this = _super.call(this);

      if (typeof value !== 'number') {
        throw new Error('AnimatedValue: Attempting to set value to undefined');
      }

      _this._startingValue = _this._value = value;
      _this._offset = 0;
      _this._animation = null;
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/createClass")(AnimatedValue, [{
      key: "__detach",
      value: function __detach() {
        this.stopAnimation();

        _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedValue.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._value + this._offset;
      }
    }, {
      key: "setValue",
      value: function setValue(value) {
        if (this._animation) {
          this._animation.stop();

          this._animation = null;
        }

        this._updateValue(value, !this.__isNative);

        if (this.__isNative) {
          _$$_REQUIRE(_dependencyMap[6], "../NativeAnimatedHelper").API.setAnimatedNodeValue(this.__getNativeTag(), value);
        }
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this._offset = offset;

        if (this.__isNative) {
          _$$_REQUIRE(_dependencyMap[6], "../NativeAnimatedHelper").API.setAnimatedNodeOffset(this.__getNativeTag(), offset);
        }
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this._value += this._offset;
        this._offset = 0;

        if (this.__isNative) {
          _$$_REQUIRE(_dependencyMap[6], "../NativeAnimatedHelper").API.flattenAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this._offset += this._value;
        this._value = 0;

        if (this.__isNative) {
          _$$_REQUIRE(_dependencyMap[6], "../NativeAnimatedHelper").API.extractAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.stopTracking();
        this._animation && this._animation.stop();
        this._animation = null;
        callback && callback(this.__getValue());
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.stopAnimation(callback);
        this._value = this._startingValue;
      }
    }, {
      key: "_onAnimatedValueUpdateReceived",
      value: function _onAnimatedValueUpdateReceived(value) {
        this._updateValue(value, false);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new (_$$_REQUIRE(_dependencyMap[7], "./AnimatedInterpolation"))(this, config);
      }
    }, {
      key: "animate",
      value: function animate(animation, callback) {
        var _this2 = this;

        var handle = null;

        if (animation.__isInteraction) {
          handle = _$$_REQUIRE(_dependencyMap[8], "../../../Interaction/InteractionManager").createInteractionHandle();
        }

        var previousAnimation = this._animation;
        this._animation && this._animation.stop();
        this._animation = animation;
        animation.start(this._value, function (value) {
          _this2._updateValue(value, true);
        }, function (result) {
          _this2._animation = null;

          if (handle !== null) {
            _$$_REQUIRE(_dependencyMap[8], "../../../Interaction/InteractionManager").clearInteractionHandle(handle);
          }

          callback && callback(result);
        }, previousAnimation, this);
      }
    }, {
      key: "stopTracking",
      value: function stopTracking() {
        this._tracking && this._tracking.__detach();
        this._tracking = null;
      }
    }, {
      key: "track",
      value: function track(tracking) {
        this.stopTracking();
        this._tracking = tracking;
      }
    }, {
      key: "_updateValue",
      value: function _updateValue(value, flush) {
        if (value === undefined) {
          throw new Error('AnimatedValue: Attempting to set value to undefined');
        }

        this._value = value;

        if (flush) {
          _flush(this);
        }

        _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedValue.prototype), "__callListeners", this).call(this, this.__getValue());
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'value',
          value: this._value,
          offset: this._offset
        };
      }
    }]);

    return AnimatedValue;
  }(_$$_REQUIRE(_dependencyMap[9], "./AnimatedWithChildren"));

  module.exports = AnimatedValue;
},263,[31,32,35,16,17,38,264,266,269,267],"node_modules/react-native/Libraries/Animated/src/nodes/AnimatedValue.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeEventEmitter = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../EventEmitter/NativeEventEmitter"));

  var _NativeAnimatedModule = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "./NativeAnimatedModule"));

  var _invariant = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "invariant"));

  var __nativeAnimatedNodeTagCount = 1;
  var __nativeAnimationIdCount = 1;
  var nativeEventEmitter;
  var queueConnections = false;
  var queue = [];
  var API = {
    enableQueue: function enableQueue() {
      queueConnections = true;
    },
    disableQueue: function disableQueue() {
      (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');
      queueConnections = false;

      for (var q = 0, l = queue.length; q < l; q++) {
        var args = queue[q];

        _NativeAnimatedModule.default.connectAnimatedNodes(args[0], args[1]);
      }

      queue.length = 0;
    },
    createAnimatedNode: function createAnimatedNode(tag, config) {
      (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

      _NativeAnimatedModule.default.createAnimatedNode(tag, config);
    },
    startListeningToAnimatedNodeValue: function startListeningToAnimatedNodeValue(tag) {
      (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

      _NativeAnimatedModule.default.startListeningToAnimatedNodeValue(tag);
    },
    stopListeningToAnimatedNodeValue: function stopListeningToAnimatedNodeValue(tag) {
      (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

      _NativeAnimatedModule.default.stopListeningToAnimatedNodeValue(tag);
    },
    connectAnimatedNodes: function connectAnimatedNodes(parentTag, childTag) {
      (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

      if (queueConnections) {
        queue.push([parentTag, childTag]);
        return;
      }

      _NativeAnimatedModule.default.connectAnimatedNodes(parentTag, childTag);
    },
    disconnectAnimatedNodes: function disconnectAnimatedNodes(parentTag, childTag) {
      (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

      _NativeAnimatedModule.default.disconnectAnimatedNodes(parentTag, childTag);
    },
    startAnimatingNode: function startAnimatingNode(animationId, nodeTag, config, endCallback) {
      (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

      _NativeAnimatedModule.default.startAnimatingNode(animationId, nodeTag, config, endCallback);
    },
    stopAnimation: function stopAnimation(animationId) {
      (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

      _NativeAnimatedModule.default.stopAnimation(animationId);
    },
    setAnimatedNodeValue: function setAnimatedNodeValue(nodeTag, value) {
      (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

      _NativeAnimatedModule.default.setAnimatedNodeValue(nodeTag, value);
    },
    setAnimatedNodeOffset: function setAnimatedNodeOffset(nodeTag, offset) {
      (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

      _NativeAnimatedModule.default.setAnimatedNodeOffset(nodeTag, offset);
    },
    flattenAnimatedNodeOffset: function flattenAnimatedNodeOffset(nodeTag) {
      (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

      _NativeAnimatedModule.default.flattenAnimatedNodeOffset(nodeTag);
    },
    extractAnimatedNodeOffset: function extractAnimatedNodeOffset(nodeTag) {
      (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

      _NativeAnimatedModule.default.extractAnimatedNodeOffset(nodeTag);
    },
    connectAnimatedNodeToView: function connectAnimatedNodeToView(nodeTag, viewTag) {
      (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

      _NativeAnimatedModule.default.connectAnimatedNodeToView(nodeTag, viewTag);
    },
    disconnectAnimatedNodeFromView: function disconnectAnimatedNodeFromView(nodeTag, viewTag) {
      (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

      _NativeAnimatedModule.default.disconnectAnimatedNodeFromView(nodeTag, viewTag);
    },
    restoreDefaultValues: function restoreDefaultValues(nodeTag) {
      (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

      if (_NativeAnimatedModule.default.restoreDefaultValues != null) {
        _NativeAnimatedModule.default.restoreDefaultValues(nodeTag);
      }
    },
    dropAnimatedNode: function dropAnimatedNode(tag) {
      (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

      _NativeAnimatedModule.default.dropAnimatedNode(tag);
    },
    addAnimatedEventToView: function addAnimatedEventToView(viewTag, eventName, eventMapping) {
      (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

      _NativeAnimatedModule.default.addAnimatedEventToView(viewTag, eventName, eventMapping);
    },
    removeAnimatedEventFromView: function removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag) {
      (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

      _NativeAnimatedModule.default.removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag);
    }
  };
  var STYLES_WHITELIST = {
    opacity: true,
    transform: true,
    borderRadius: true,
    borderBottomEndRadius: true,
    borderBottomLeftRadius: true,
    borderBottomRightRadius: true,
    borderBottomStartRadius: true,
    borderTopEndRadius: true,
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderTopStartRadius: true,
    elevation: true,
    zIndex: true,
    shadowOpacity: true,
    shadowRadius: true,
    scaleX: true,
    scaleY: true,
    translateX: true,
    translateY: true
  };
  var TRANSFORM_WHITELIST = {
    translateX: true,
    translateY: true,
    scale: true,
    scaleX: true,
    scaleY: true,
    rotate: true,
    rotateX: true,
    rotateY: true,
    rotateZ: true,
    perspective: true
  };
  var SUPPORTED_INTERPOLATION_PARAMS = {
    inputRange: true,
    outputRange: true,
    extrapolate: true,
    extrapolateRight: true,
    extrapolateLeft: true
  };

  function addWhitelistedStyleProp(prop) {
    STYLES_WHITELIST[prop] = true;
  }

  function addWhitelistedTransformProp(prop) {
    TRANSFORM_WHITELIST[prop] = true;
  }

  function addWhitelistedInterpolationParam(param) {
    SUPPORTED_INTERPOLATION_PARAMS[param] = true;
  }

  function validateTransform(configs) {
    configs.forEach(function (config) {
      if (!TRANSFORM_WHITELIST.hasOwnProperty(config.property)) {
        throw new Error("Property '" + config.property + "' is not supported by native animated module");
      }
    });
  }

  function validateStyles(styles) {
    for (var _key in styles) {
      if (!STYLES_WHITELIST.hasOwnProperty(_key)) {
        throw new Error("Style property '" + _key + "' is not supported by native animated module");
      }
    }
  }

  function validateInterpolation(config) {
    for (var _key2 in config) {
      if (!SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(_key2)) {
        throw new Error("Interpolation property '" + _key2 + "' is not supported by native animated module");
      }
    }
  }

  function generateNewNodeTag() {
    return __nativeAnimatedNodeTagCount++;
  }

  function generateNewAnimationId() {
    return __nativeAnimationIdCount++;
  }

  function assertNativeAnimatedModule() {
    (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');
  }

  var _warnedMissingNativeAnimated = false;

  function shouldUseNativeDriver(config) {
    if (config.useNativeDriver == null) {
      console.warn('Animated: `useNativeDriver` was not specified. This is a required ' + 'option and must be explicitly set to `true` or `false`');
    }

    if (config.useNativeDriver === true && !_NativeAnimatedModule.default) {
      if (!_warnedMissingNativeAnimated) {
        console.warn('Animated: `useNativeDriver` is not supported because the native ' + 'animated module is missing. Falling back to JS-based animation. To ' + 'resolve this, add `RCTAnimation` module to this app, or remove ' + '`useNativeDriver`. ' + 'Make sure to run `pod install` first. Read more about autolinking: https://github.com/react-native-community/cli/blob/master/docs/autolinking.md');
        _warnedMissingNativeAnimated = true;
      }

      return false;
    }

    return config.useNativeDriver || false;
  }

  function transformDataType(value) {
    if (typeof value !== 'string') {
      return value;
    }

    if (/deg$/.test(value)) {
      var degrees = parseFloat(value) || 0;
      var radians = degrees * Math.PI / 180.0;
      return radians;
    } else {
      return value;
    }
  }

  module.exports = {
    API: API,
    addWhitelistedStyleProp: addWhitelistedStyleProp,
    addWhitelistedTransformProp: addWhitelistedTransformProp,
    addWhitelistedInterpolationParam: addWhitelistedInterpolationParam,
    validateStyles: validateStyles,
    validateTransform: validateTransform,
    validateInterpolation: validateInterpolation,
    generateNewNodeTag: generateNewNodeTag,
    generateNewAnimationId: generateNewAnimationId,
    assertNativeAnimatedModule: assertNativeAnimatedModule,
    shouldUseNativeDriver: shouldUseNativeDriver,
    transformDataType: transformDataType,

    get nativeEventEmitter() {
      if (!nativeEventEmitter) {
        nativeEventEmitter = new _NativeEventEmitter.default(_NativeAnimatedModule.default);
      }

      return nativeEventEmitter;
    }

  };
},264,[3,126,265,6],"node_modules/react-native/Libraries/Animated/src/NativeAnimatedHelper.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('NativeAnimatedModule');

  exports.default = _default;
},265,[5],"node_modules/react-native/Libraries/Animated/src/NativeAnimatedModule.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var linear = function linear(t) {
    return t;
  };

  function createInterpolation(config) {
    if (config.outputRange && typeof config.outputRange[0] === 'string') {
      return createInterpolationFromStringOutputRange(config);
    }

    var outputRange = config.outputRange;
    checkInfiniteRange('outputRange', outputRange);
    var inputRange = config.inputRange;
    checkInfiniteRange('inputRange', inputRange);
    checkValidInputRange(inputRange);

    _$$_REQUIRE(_dependencyMap[2], "invariant")(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');

    var easing = config.easing || linear;
    var extrapolateLeft = 'extend';

    if (config.extrapolateLeft !== undefined) {
      extrapolateLeft = config.extrapolateLeft;
    } else if (config.extrapolate !== undefined) {
      extrapolateLeft = config.extrapolate;
    }

    var extrapolateRight = 'extend';

    if (config.extrapolateRight !== undefined) {
      extrapolateRight = config.extrapolateRight;
    } else if (config.extrapolate !== undefined) {
      extrapolateRight = config.extrapolate;
    }

    return function (input) {
      _$$_REQUIRE(_dependencyMap[2], "invariant")(typeof input === 'number', 'Cannot interpolation an input which is not a number');

      var range = findRange(input, inputRange);
      return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
    };
  }

  function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
    var result = input;

    if (result < inputMin) {
      if (extrapolateLeft === 'identity') {
        return result;
      } else if (extrapolateLeft === 'clamp') {
        result = inputMin;
      } else if (extrapolateLeft === 'extend') {}
    }

    if (result > inputMax) {
      if (extrapolateRight === 'identity') {
        return result;
      } else if (extrapolateRight === 'clamp') {
        result = inputMax;
      } else if (extrapolateRight === 'extend') {}
    }

    if (outputMin === outputMax) {
      return outputMin;
    }

    if (inputMin === inputMax) {
      if (input <= inputMin) {
        return outputMin;
      }

      return outputMax;
    }

    if (inputMin === -Infinity) {
      result = -result;
    } else if (inputMax === Infinity) {
      result = result - inputMin;
    } else {
      result = (result - inputMin) / (inputMax - inputMin);
    }

    result = easing(result);

    if (outputMin === -Infinity) {
      result = -result;
    } else if (outputMax === Infinity) {
      result = result + outputMin;
    } else {
      result = result * (outputMax - outputMin) + outputMin;
    }

    return result;
  }

  function colorToRgba(input) {
    var normalizedColor = _$$_REQUIRE(_dependencyMap[3], "../../../StyleSheet/normalizeColor")(input);

    if (normalizedColor === null || typeof normalizedColor !== 'number') {
      return input;
    }

    normalizedColor = normalizedColor || 0;
    var r = (normalizedColor & 0xff000000) >>> 24;
    var g = (normalizedColor & 0x00ff0000) >>> 16;
    var b = (normalizedColor & 0x0000ff00) >>> 8;
    var a = (normalizedColor & 0x000000ff) / 255;
    return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
  }

  var stringShapeRegex = /[+-]?(?:\d+\.?\d*|\.\d+)(?:[eE][+-]?\d+)?/g;

  function createInterpolationFromStringOutputRange(config) {
    var outputRange = config.outputRange;

    _$$_REQUIRE(_dependencyMap[2], "invariant")(outputRange.length >= 2, 'Bad output range');

    outputRange = outputRange.map(colorToRgba);
    checkPattern(outputRange);
    var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {
      return [];
    });
    outputRange.forEach(function (value) {
      value.match(stringShapeRegex).forEach(function (number, i) {
        outputRanges[i].push(+number);
      });
    });
    var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {
      return createInterpolation(Object.assign({}, config, {
        outputRange: outputRanges[i]
      }));
    });
    var shouldRound = isRgbOrRgba(outputRange[0]);
    return function (input) {
      var i = 0;
      return outputRange[0].replace(stringShapeRegex, function () {
        var val = +interpolations[i++](input);

        if (shouldRound) {
          val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;
        }

        return String(val);
      });
    };
  }

  function isRgbOrRgba(range) {
    return typeof range === 'string' && range.startsWith('rgb');
  }

  function checkPattern(arr) {
    var pattern = arr[0].replace(stringShapeRegex, '');

    for (var i = 1; i < arr.length; ++i) {
      _$$_REQUIRE(_dependencyMap[2], "invariant")(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);
    }
  }

  function findRange(input, inputRange) {
    var i;

    for (i = 1; i < inputRange.length - 1; ++i) {
      if (inputRange[i] >= input) {
        break;
      }
    }

    return i - 1;
  }

  function checkValidInputRange(arr) {
    _$$_REQUIRE(_dependencyMap[2], "invariant")(arr.length >= 2, 'inputRange must have at least 2 elements');

    for (var i = 1; i < arr.length; ++i) {
      _$$_REQUIRE(_dependencyMap[2], "invariant")(arr[i] >= arr[i - 1], 'inputRange must be monotonically non-decreasing ' + arr);
    }
  }

  function checkInfiniteRange(name, arr) {
    _$$_REQUIRE(_dependencyMap[2], "invariant")(arr.length >= 2, name + ' must have at least 2 elements');

    _$$_REQUIRE(_dependencyMap[2], "invariant")(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);
  }

  var AnimatedInterpolation = function (_AnimatedWithChildren) {
    _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/inherits")(AnimatedInterpolation, _AnimatedWithChildren);

    var _super = _createSuper(AnimatedInterpolation);

    function AnimatedInterpolation(parent, config) {
      var _this;

      _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/classCallCheck")(this, AnimatedInterpolation);

      _this = _super.call(this);
      _this._parent = parent;
      _this._config = config;
      _this._interpolation = createInterpolation(config);
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/createClass")(AnimatedInterpolation, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._parent.__makeNative();

        _$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedInterpolation.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var parentValue = this._parent.__getValue();

        _$$_REQUIRE(_dependencyMap[2], "invariant")(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');

        return this._interpolation(parentValue);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);

        _$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedInterpolation.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__transformDataType",
      value: function __transformDataType(range) {
        return range.map(_$$_REQUIRE(_dependencyMap[8], "../NativeAnimatedHelper").transformDataType);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        if (__DEV__) {
          _$$_REQUIRE(_dependencyMap[8], "../NativeAnimatedHelper").validateInterpolation(this._config);
        }

        return {
          inputRange: this._config.inputRange,
          outputRange: this.__transformDataType(this._config.outputRange),
          extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',
          extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',
          type: 'interpolation'
        };
      }
    }]);

    return AnimatedInterpolation;
  }(_$$_REQUIRE(_dependencyMap[9], "./AnimatedWithChildren"));

  AnimatedInterpolation.__createInterpolation = createInterpolation;
  module.exports = AnimatedInterpolation;
},266,[31,32,6,177,35,16,17,38,264,267],"node_modules/react-native/Libraries/Animated/src/nodes/AnimatedInterpolation.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var AnimatedWithChildren = function (_AnimatedNode) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(AnimatedWithChildren, _AnimatedNode);

    var _super = _createSuper(AnimatedWithChildren);

    function AnimatedWithChildren() {
      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, AnimatedWithChildren);

      _this = _super.call(this);
      _this._children = [];
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/createClass")(AnimatedWithChildren, [{
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          this.__isNative = true;

          for (var child of this._children) {
            child.__makeNative();

            _$$_REQUIRE(_dependencyMap[5], "../NativeAnimatedHelper").API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
          }
        }

        _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedWithChildren.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {
        if (this._children.length === 0) {
          this.__attach();
        }

        this._children.push(child);

        if (this.__isNative) {
          child.__makeNative();

          _$$_REQUIRE(_dependencyMap[5], "../NativeAnimatedHelper").API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
      }
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {
        var index = this._children.indexOf(child);

        if (index === -1) {
          console.warn("Trying to remove a child that doesn't exist");
          return;
        }

        if (this.__isNative && child.__isNative) {
          _$$_REQUIRE(_dependencyMap[5], "../NativeAnimatedHelper").API.disconnectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }

        this._children.splice(index, 1);

        if (this._children.length === 0) {
          this.__detach();
        }
      }
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return this._children;
      }
    }, {
      key: "__callListeners",
      value: function __callListeners(value) {
        _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedWithChildren.prototype), "__callListeners", this).call(this, value);

        if (!this.__isNative) {
          for (var child of this._children) {
            if (child.__getValue) {
              child.__callListeners(child.__getValue());
            }
          }
        }
      }
    }]);

    return AnimatedWithChildren;
  }(_$$_REQUIRE(_dependencyMap[7], "./AnimatedNode"));

  module.exports = AnimatedWithChildren;
},267,[31,32,35,16,17,264,38,268],"node_modules/react-native/Libraries/Animated/src/nodes/AnimatedWithChildren.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _uniqueId = 1;

  var AnimatedNode = function () {
    function AnimatedNode() {
      _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/classCallCheck")(this, AnimatedNode);

      this._listeners = {};
    }

    _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/createClass")(AnimatedNode, [{
      key: "__attach",
      value: function __attach() {}
    }, {
      key: "__detach",
      value: function __detach() {
        if (this.__isNative && this.__nativeTag != null) {
          _$$_REQUIRE(_dependencyMap[2], "../NativeAnimatedHelper").API.dropAnimatedNode(this.__nativeTag);

          this.__nativeTag = undefined;
        }
      }
    }, {
      key: "__getValue",
      value: function __getValue() {}
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this.__getValue();
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {}
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {}
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return [];
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          throw new Error('This node cannot be made a "native" animated node');
        }

        if (this.hasListeners()) {
          this._startListeningToNativeValueUpdates();
        }
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var id = String(_uniqueId++);
        this._listeners[id] = callback;

        if (this.__isNative) {
          this._startListeningToNativeValueUpdates();
        }

        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        delete this._listeners[id];

        if (this.__isNative && !this.hasListeners()) {
          this._stopListeningForNativeValueUpdates();
        }
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this._listeners = {};

        if (this.__isNative) {
          this._stopListeningForNativeValueUpdates();
        }
      }
    }, {
      key: "hasListeners",
      value: function hasListeners() {
        return !!Object.keys(this._listeners).length;
      }
    }, {
      key: "_startListeningToNativeValueUpdates",
      value: function _startListeningToNativeValueUpdates() {
        var _this = this;

        if (this.__nativeAnimatedValueListener && !this.__shouldUpdateListenersForNewNativeTag) {
          return;
        }

        if (this.__shouldUpdateListenersForNewNativeTag) {
          this.__shouldUpdateListenersForNewNativeTag = false;

          this._stopListeningForNativeValueUpdates();
        }

        _$$_REQUIRE(_dependencyMap[2], "../NativeAnimatedHelper").API.startListeningToAnimatedNodeValue(this.__getNativeTag());

        this.__nativeAnimatedValueListener = _$$_REQUIRE(_dependencyMap[2], "../NativeAnimatedHelper").nativeEventEmitter.addListener('onAnimatedValueUpdate', function (data) {
          if (data.tag !== _this.__getNativeTag()) {
            return;
          }

          _this._onAnimatedValueUpdateReceived(data.value);
        });
      }
    }, {
      key: "_onAnimatedValueUpdateReceived",
      value: function _onAnimatedValueUpdateReceived(value) {
        this.__callListeners(value);
      }
    }, {
      key: "__callListeners",
      value: function __callListeners(value) {
        for (var _key in this._listeners) {
          this._listeners[_key]({
            value: value
          });
        }
      }
    }, {
      key: "_stopListeningForNativeValueUpdates",
      value: function _stopListeningForNativeValueUpdates() {
        if (!this.__nativeAnimatedValueListener) {
          return;
        }

        this.__nativeAnimatedValueListener.remove();

        this.__nativeAnimatedValueListener = null;

        _$$_REQUIRE(_dependencyMap[2], "../NativeAnimatedHelper").API.stopListeningToAnimatedNodeValue(this.__getNativeTag());
      }
    }, {
      key: "__getNativeTag",
      value: function __getNativeTag() {
        var _this$__nativeTag;

        _$$_REQUIRE(_dependencyMap[2], "../NativeAnimatedHelper").assertNativeAnimatedModule();

        _$$_REQUIRE(_dependencyMap[3], "invariant")(this.__isNative, 'Attempt to get native tag from node not marked as "native"');

        var nativeTag = (_this$__nativeTag = this.__nativeTag) != null ? _this$__nativeTag : _$$_REQUIRE(_dependencyMap[2], "../NativeAnimatedHelper").generateNewNodeTag();

        if (this.__nativeTag == null) {
          this.__nativeTag = nativeTag;

          _$$_REQUIRE(_dependencyMap[2], "../NativeAnimatedHelper").API.createAnimatedNode(nativeTag, this.__getNativeConfig());

          this.__shouldUpdateListenersForNewNativeTag = true;
        }

        return nativeTag;
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        throw new Error('This JS animated node type cannot be used as native animated node');
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.__getValue();
      }
    }]);

    return AnimatedNode;
  }();

  module.exports = AnimatedNode;
},268,[16,17,264,6],"node_modules/react-native/Libraries/Animated/src/nodes/AnimatedNode.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _emitter = new (_$$_REQUIRE(_dependencyMap[0], "../vendor/emitter/EventEmitter"))();

  var DEBUG_DELAY = 0;
  var DEBUG = false;
  var InteractionManager = {
    Events: _$$_REQUIRE(_dependencyMap[1], "fbjs/lib/keyMirror")({
      interactionStart: true,
      interactionComplete: true
    }),
    runAfterInteractions: function runAfterInteractions(task) {
      var tasks = [];
      var promise = new Promise(function (resolve) {
        _scheduleUpdate();

        if (task) {
          tasks.push(task);
        }

        tasks.push({
          run: resolve,
          name: 'resolve ' + (task && task.name || '?')
        });

        _taskQueue.enqueueTasks(tasks);
      });
      return {
        then: promise.then.bind(promise),
        done: function done() {
          if (promise.done) {
            return promise.done.apply(promise, arguments);
          } else {
            console.warn('Tried to call done when not supported by current Promise implementation.');
          }
        },
        cancel: function cancel() {
          _taskQueue.cancelTasks(tasks);
        }
      };
    },
    createInteractionHandle: function createInteractionHandle() {
      DEBUG && _$$_REQUIRE(_dependencyMap[2], "../Utilities/infoLog")('InteractionManager: create interaction handle');

      _scheduleUpdate();

      var handle = ++_inc;

      _addInteractionSet.add(handle);

      return handle;
    },
    clearInteractionHandle: function clearInteractionHandle(handle) {
      DEBUG && _$$_REQUIRE(_dependencyMap[2], "../Utilities/infoLog")('InteractionManager: clear interaction handle');

      _$$_REQUIRE(_dependencyMap[3], "invariant")(!!handle, 'InteractionManager: Must provide a handle to clear.');

      _scheduleUpdate();

      _addInteractionSet.delete(handle);

      _deleteInteractionSet.add(handle);
    },
    addListener: _emitter.addListener.bind(_emitter),
    setDeadline: function setDeadline(deadline) {
      _deadline = deadline;
    }
  };

  var _interactionSet = new Set();

  var _addInteractionSet = new Set();

  var _deleteInteractionSet = new Set();

  var _taskQueue = new (_$$_REQUIRE(_dependencyMap[4], "./TaskQueue"))({
    onMoreTasks: _scheduleUpdate
  });

  var _nextUpdateHandle = 0;
  var _inc = 0;

  var _deadline = -1;

  function _scheduleUpdate() {
    if (!_nextUpdateHandle) {
      if (_deadline > 0) {
        _nextUpdateHandle = setTimeout(_processUpdate, 0 + DEBUG_DELAY);
      } else {
        _nextUpdateHandle = setImmediate(_processUpdate);
      }
    }
  }

  function _processUpdate() {
    _nextUpdateHandle = 0;
    var interactionCount = _interactionSet.size;

    _addInteractionSet.forEach(function (handle) {
      return _interactionSet.add(handle);
    });

    _deleteInteractionSet.forEach(function (handle) {
      return _interactionSet.delete(handle);
    });

    var nextInteractionCount = _interactionSet.size;

    if (interactionCount !== 0 && nextInteractionCount === 0) {
      _emitter.emit(InteractionManager.Events.interactionComplete);
    } else if (interactionCount === 0 && nextInteractionCount !== 0) {
      _emitter.emit(InteractionManager.Events.interactionStart);
    }

    if (nextInteractionCount === 0) {
      while (_taskQueue.hasTasksToProcess()) {
        _taskQueue.processNext();

        if (_deadline > 0 && _$$_REQUIRE(_dependencyMap[5], "../BatchedBridge/BatchedBridge").getEventLoopRunningTime() >= _deadline) {
          _scheduleUpdate();

          break;
        }
      }
    }

    _addInteractionSet.clear();

    _deleteInteractionSet.clear();
  }

  module.exports = InteractionManager;
},269,[40,255,120,6,270,14],"node_modules/react-native/Libraries/Interaction/InteractionManager.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DEBUG = false;

  var TaskQueue = function () {
    function TaskQueue(_ref) {
      var onMoreTasks = _ref.onMoreTasks;

      _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/classCallCheck")(this, TaskQueue);

      this._onMoreTasks = onMoreTasks;
      this._queueStack = [{
        tasks: [],
        popable: false
      }];
    }

    _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/createClass")(TaskQueue, [{
      key: "enqueue",
      value: function enqueue(task) {
        this._getCurrentQueue().push(task);
      }
    }, {
      key: "enqueueTasks",
      value: function enqueueTasks(tasks) {
        var _this = this;

        tasks.forEach(function (task) {
          return _this.enqueue(task);
        });
      }
    }, {
      key: "cancelTasks",
      value: function cancelTasks(tasksToCancel) {
        this._queueStack = this._queueStack.map(function (queue) {
          return Object.assign({}, queue, {
            tasks: queue.tasks.filter(function (task) {
              return tasksToCancel.indexOf(task) === -1;
            })
          });
        }).filter(function (queue, idx) {
          return queue.tasks.length > 0 || idx === 0;
        });
      }
    }, {
      key: "hasTasksToProcess",
      value: function hasTasksToProcess() {
        return this._getCurrentQueue().length > 0;
      }
    }, {
      key: "processNext",
      value: function processNext() {
        var queue = this._getCurrentQueue();

        if (queue.length) {
          var task = queue.shift();

          try {
            if (task.gen) {
              DEBUG && _$$_REQUIRE(_dependencyMap[2], "../Utilities/infoLog")('TaskQueue: genPromise for task ' + task.name);

              this._genPromise(task);
            } else if (task.run) {
              DEBUG && _$$_REQUIRE(_dependencyMap[2], "../Utilities/infoLog")('TaskQueue: run task ' + task.name);
              task.run();
            } else {
              _$$_REQUIRE(_dependencyMap[3], "invariant")(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\n' + JSON.stringify(task, null, 2));

              DEBUG && _$$_REQUIRE(_dependencyMap[2], "../Utilities/infoLog")('TaskQueue: run anonymous task');
              task();
            }
          } catch (e) {
            e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;
            throw e;
          }
        }
      }
    }, {
      key: "_getCurrentQueue",
      value: function _getCurrentQueue() {
        var stackIdx = this._queueStack.length - 1;
        var queue = this._queueStack[stackIdx];

        if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {
          this._queueStack.pop();

          DEBUG && _$$_REQUIRE(_dependencyMap[2], "../Utilities/infoLog")('TaskQueue: popped queue: ', {
            stackIdx: stackIdx,
            queueStackSize: this._queueStack.length
          });
          return this._getCurrentQueue();
        } else {
          return queue.tasks;
        }
      }
    }, {
      key: "_genPromise",
      value: function _genPromise(task) {
        var _this2 = this;

        this._queueStack.push({
          tasks: [],
          popable: false
        });

        var stackIdx = this._queueStack.length - 1;
        DEBUG && _$$_REQUIRE(_dependencyMap[2], "../Utilities/infoLog")('TaskQueue: push new queue: ', {
          stackIdx: stackIdx
        });
        DEBUG && _$$_REQUIRE(_dependencyMap[2], "../Utilities/infoLog")('TaskQueue: exec gen task ' + task.name);
        task.gen().then(function () {
          DEBUG && _$$_REQUIRE(_dependencyMap[2], "../Utilities/infoLog")('TaskQueue: onThen for gen task ' + task.name, {
            stackIdx: stackIdx,
            queueStackSize: _this2._queueStack.length
          });
          _this2._queueStack[stackIdx].popable = true;
          _this2.hasTasksToProcess() && _this2._onMoreTasks();
        }).catch(function (ex) {
          ex.message = "TaskQueue: Error resolving Promise in task " + task.name + ": " + ex.message;
          throw ex;
        }).done();
      }
    }]);

    return TaskQueue;
  }();

  module.exports = TaskQueue;
},270,[16,17,120,6],"node_modules/react-native/Libraries/Interaction/TaskQueue.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var _uniqueId = 1;

  var AnimatedValueXY = function (_AnimatedWithChildren) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(AnimatedValueXY, _AnimatedWithChildren);

    var _super = _createSuper(AnimatedValueXY);

    function AnimatedValueXY(valueIn) {
      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, AnimatedValueXY);

      _this = _super.call(this);
      var value = valueIn || {
        x: 0,
        y: 0
      };

      if (typeof value.x === 'number' && typeof value.y === 'number') {
        _this.x = new (_$$_REQUIRE(_dependencyMap[4], "./AnimatedValue"))(value.x);
        _this.y = new (_$$_REQUIRE(_dependencyMap[4], "./AnimatedValue"))(value.y);
      } else {
        _$$_REQUIRE(_dependencyMap[5], "invariant")(value.x instanceof _$$_REQUIRE(_dependencyMap[4], "./AnimatedValue") && value.y instanceof _$$_REQUIRE(_dependencyMap[4], "./AnimatedValue"), 'AnimatedValueXY must be initialized with an object of numbers or ' + 'AnimatedValues.');

        _this.x = value.x;
        _this.y = value.y;
      }

      _this._listeners = {};
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/createClass")(AnimatedValueXY, [{
      key: "setValue",
      value: function setValue(value) {
        this.x.setValue(value.x);
        this.y.setValue(value.y);
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this.x.setOffset(offset.x);
        this.y.setOffset(offset.y);
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this.x.flattenOffset();
        this.y.flattenOffset();
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this.x.extractOffset();
        this.y.extractOffset();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return {
          x: this.x.__getValue(),
          y: this.y.__getValue()
        };
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.x.resetAnimation();
        this.y.resetAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.x.stopAnimation();
        this.y.stopAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var _this2 = this;

        var id = String(_uniqueId++);

        var jointCallback = function jointCallback(_ref) {
          var number = _ref.value;
          callback(_this2.__getValue());
        };

        this._listeners[id] = {
          x: this.x.addListener(jointCallback),
          y: this.y.addListener(jointCallback)
        };
        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        this.x.removeListener(this._listeners[id].x);
        this.y.removeListener(this._listeners[id].y);
        delete this._listeners[id];
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this.x.removeAllListeners();
        this.y.removeAllListeners();
        this._listeners = {};
      }
    }, {
      key: "getLayout",
      value: function getLayout() {
        return {
          left: this.x,
          top: this.y
        };
      }
    }, {
      key: "getTranslateTransform",
      value: function getTranslateTransform() {
        return [{
          translateX: this.x
        }, {
          translateY: this.y
        }];
      }
    }]);

    return AnimatedValueXY;
  }(_$$_REQUIRE(_dependencyMap[7], "./AnimatedWithChildren"));

  module.exports = AnimatedValueXY;
},271,[31,32,35,16,263,6,17,267],"node_modules/react-native/Libraries/Animated/src/nodes/AnimatedValueXY.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var add = function add(a, b) {
    return new (_$$_REQUIRE(_dependencyMap[0], "./nodes/AnimatedAddition"))(a, b);
  };

  var subtract = function subtract(a, b) {
    return new (_$$_REQUIRE(_dependencyMap[1], "./nodes/AnimatedSubtraction"))(a, b);
  };

  var divide = function divide(a, b) {
    return new (_$$_REQUIRE(_dependencyMap[2], "./nodes/AnimatedDivision"))(a, b);
  };

  var multiply = function multiply(a, b) {
    return new (_$$_REQUIRE(_dependencyMap[3], "./nodes/AnimatedMultiplication"))(a, b);
  };

  var modulo = function modulo(a, modulus) {
    return new (_$$_REQUIRE(_dependencyMap[4], "./nodes/AnimatedModulo"))(a, modulus);
  };

  var diffClamp = function diffClamp(a, min, max) {
    return new (_$$_REQUIRE(_dependencyMap[5], "./nodes/AnimatedDiffClamp"))(a, min, max);
  };

  var _combineCallbacks = function _combineCallbacks(callback, config) {
    if (callback && config.onComplete) {
      return function () {
        config.onComplete && config.onComplete.apply(config, arguments);
        callback && callback.apply(void 0, arguments);
      };
    } else {
      return callback || config.onComplete;
    }
  };

  var maybeVectorAnim = function maybeVectorAnim(value, config, anim) {
    if (value instanceof _$$_REQUIRE(_dependencyMap[6], "./nodes/AnimatedValueXY")) {
      var configX = Object.assign({}, config);
      var configY = Object.assign({}, config);

      for (var key in config) {
        var _config$key = config[key],
            x = _config$key.x,
            y = _config$key.y;

        if (x !== undefined && y !== undefined) {
          configX[key] = x;
          configY[key] = y;
        }
      }

      var aX = anim(value.x, configX);
      var aY = anim(value.y, configY);
      return parallel([aX, aY], {
        stopTogether: false
      });
    }

    return null;
  };

  var spring = function spring(value, config) {
    var _start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();

      if (configuration.toValue instanceof _$$_REQUIRE(_dependencyMap[7], "./nodes/AnimatedNode")) {
        singleValue.track(new (_$$_REQUIRE(_dependencyMap[8], "./nodes/AnimatedTracking"))(singleValue, configuration.toValue, _$$_REQUIRE(_dependencyMap[9], "./animations/SpringAnimation"), singleConfig, callback));
      } else {
        singleValue.animate(new (_$$_REQUIRE(_dependencyMap[9], "./animations/SpringAnimation"))(singleConfig), callback);
      }
    };

    return maybeVectorAnim(value, config, spring) || {
      start: function start(callback) {
        _start(value, config, callback);
      },
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = Object.assign({}, config, {
          iterations: iterations
        });

        _start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var timing = function timing(value, config) {
    var _start2 = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();

      if (configuration.toValue instanceof _$$_REQUIRE(_dependencyMap[7], "./nodes/AnimatedNode")) {
        singleValue.track(new (_$$_REQUIRE(_dependencyMap[8], "./nodes/AnimatedTracking"))(singleValue, configuration.toValue, _$$_REQUIRE(_dependencyMap[10], "./animations/TimingAnimation"), singleConfig, callback));
      } else {
        singleValue.animate(new (_$$_REQUIRE(_dependencyMap[10], "./animations/TimingAnimation"))(singleConfig), callback);
      }
    };

    return maybeVectorAnim(value, config, timing) || {
      start: function start(callback) {
        _start2(value, config, callback);
      },
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = Object.assign({}, config, {
          iterations: iterations
        });

        _start2(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var decay = function decay(value, config) {
    var _start3 = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();
      singleValue.animate(new (_$$_REQUIRE(_dependencyMap[11], "./animations/DecayAnimation"))(singleConfig), callback);
    };

    return maybeVectorAnim(value, config, decay) || {
      start: function start(callback) {
        _start3(value, config, callback);
      },
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = Object.assign({}, config, {
          iterations: iterations
        });

        _start3(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var sequence = function sequence(animations) {
    var current = 0;
    return {
      start: function start(callback) {
        var onComplete = function onComplete(result) {
          if (!result.finished) {
            callback && callback(result);
            return;
          }

          current++;

          if (current === animations.length) {
            callback && callback(result);
            return;
          }

          animations[current].start(onComplete);
        };

        if (animations.length === 0) {
          callback && callback({
            finished: true
          });
        } else {
          animations[current].start(onComplete);
        }
      },
      stop: function stop() {
        if (current < animations.length) {
          animations[current].stop();
        }
      },
      reset: function reset() {
        animations.forEach(function (animation, idx) {
          if (idx <= current) {
            animation.reset();
          }
        });
        current = 0;
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.sequence animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return false;
      }
    };
  };

  var parallel = function parallel(animations, config) {
    var doneCount = 0;
    var hasEnded = {};
    var stopTogether = !(config && config.stopTogether === false);
    var result = {
      start: function start(callback) {
        if (doneCount === animations.length) {
          callback && callback({
            finished: true
          });
          return;
        }

        animations.forEach(function (animation, idx) {
          var cb = function cb(endResult) {
            hasEnded[idx] = true;
            doneCount++;

            if (doneCount === animations.length) {
              doneCount = 0;
              callback && callback(endResult);
              return;
            }

            if (!endResult.finished && stopTogether) {
              result.stop();
            }
          };

          if (!animation) {
            cb({
              finished: true
            });
          } else {
            animation.start(cb);
          }
        });
      },
      stop: function stop() {
        animations.forEach(function (animation, idx) {
          !hasEnded[idx] && animation.stop();
          hasEnded[idx] = true;
        });
      },
      reset: function reset() {
        animations.forEach(function (animation, idx) {
          animation.reset();
          hasEnded[idx] = false;
          doneCount = 0;
        });
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.parallel animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return false;
      }
    };
    return result;
  };

  var delay = function delay(time) {
    return timing(new (_$$_REQUIRE(_dependencyMap[12], "./nodes/AnimatedValue"))(0), {
      toValue: 0,
      delay: time,
      duration: 0,
      useNativeDriver: false
    });
  };

  var stagger = function stagger(time, animations) {
    return parallel(animations.map(function (animation, i) {
      return sequence([delay(time * i), animation]);
    }));
  };

  var loop = function loop(animation) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$iterations = _ref.iterations,
        iterations = _ref$iterations === void 0 ? -1 : _ref$iterations,
        _ref$resetBeforeItera = _ref.resetBeforeIteration,
        resetBeforeIteration = _ref$resetBeforeItera === void 0 ? true : _ref$resetBeforeItera;

    var isFinished = false;
    var iterationsSoFar = 0;
    return {
      start: function start(callback) {
        var restart = function restart() {
          var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            finished: true
          };

          if (isFinished || iterationsSoFar === iterations || result.finished === false) {
            callback && callback(result);
          } else {
            iterationsSoFar++;
            resetBeforeIteration && animation.reset();
            animation.start(restart);
          }
        };

        if (!animation || iterations === 0) {
          callback && callback({
            finished: true
          });
        } else {
          if (animation._isUsingNativeDriver()) {
            animation._startNativeLoop(iterations);
          } else {
            restart();
          }
        }
      },
      stop: function stop() {
        isFinished = true;
        animation.stop();
      },
      reset: function reset() {
        iterationsSoFar = 0;
        isFinished = false;
        animation.reset();
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.loop animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return animation._isUsingNativeDriver();
      }
    };
  };

  function forkEvent(event, listener) {
    if (!event) {
      return listener;
    } else if (event instanceof _$$_REQUIRE(_dependencyMap[13], "./AnimatedEvent").AnimatedEvent) {
      event.__addListener(listener);

      return event;
    } else {
      return function () {
        typeof event === 'function' && event.apply(void 0, arguments);
        listener.apply(void 0, arguments);
      };
    }
  }

  function unforkEvent(event, listener) {
    if (event && event instanceof _$$_REQUIRE(_dependencyMap[13], "./AnimatedEvent").AnimatedEvent) {
      event.__removeListener(listener);
    }
  }

  var event = function event(argMapping, config) {
    var animatedEvent = new (_$$_REQUIRE(_dependencyMap[13], "./AnimatedEvent").AnimatedEvent)(argMapping, config);

    if (animatedEvent.__isNative) {
      return animatedEvent;
    } else {
      return animatedEvent.__getHandler();
    }
  };

  module.exports = {
    Value: _$$_REQUIRE(_dependencyMap[12], "./nodes/AnimatedValue"),
    ValueXY: _$$_REQUIRE(_dependencyMap[6], "./nodes/AnimatedValueXY"),
    Interpolation: _$$_REQUIRE(_dependencyMap[14], "./nodes/AnimatedInterpolation"),
    Node: _$$_REQUIRE(_dependencyMap[7], "./nodes/AnimatedNode"),
    decay: decay,
    timing: timing,
    spring: spring,
    add: add,
    subtract: subtract,
    divide: divide,
    multiply: multiply,
    modulo: modulo,
    diffClamp: diffClamp,
    delay: delay,
    sequence: sequence,
    parallel: parallel,
    stagger: stagger,
    loop: loop,
    event: event,
    createAnimatedComponent: _$$_REQUIRE(_dependencyMap[15], "./createAnimatedComponent"),
    attachNativeEvent: _$$_REQUIRE(_dependencyMap[13], "./AnimatedEvent").attachNativeEvent,
    forkEvent: forkEvent,
    unforkEvent: unforkEvent,
    Event: _$$_REQUIRE(_dependencyMap[13], "./AnimatedEvent").AnimatedEvent,
    __PropsOnlyForTests: _$$_REQUIRE(_dependencyMap[16], "./nodes/AnimatedProps")
  };
},272,[273,274,275,276,277,278,271,268,279,280,283,286,263,287,266,288,290],"node_modules/react-native/Libraries/Animated/src/AnimatedImplementation.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var AnimatedAddition = function (_AnimatedWithChildren) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(AnimatedAddition, _AnimatedWithChildren);

    var _super = _createSuper(AnimatedAddition);

    function AnimatedAddition(a, b) {
      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, AnimatedAddition);

      _this = _super.call(this);
      _this._a = typeof a === 'number' ? new (_$$_REQUIRE(_dependencyMap[4], "./AnimatedValue"))(a) : a;
      _this._b = typeof b === 'number' ? new (_$$_REQUIRE(_dependencyMap[4], "./AnimatedValue"))(b) : b;
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(AnimatedAddition, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedAddition.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() + this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new (_$$_REQUIRE(_dependencyMap[7], "./AnimatedInterpolation"))(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedAddition.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'addition',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);

    return AnimatedAddition;
  }(_$$_REQUIRE(_dependencyMap[8], "./AnimatedWithChildren"));

  module.exports = AnimatedAddition;
},273,[31,32,35,16,263,17,38,266,267],"node_modules/react-native/Libraries/Animated/src/nodes/AnimatedAddition.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var AnimatedSubtraction = function (_AnimatedWithChildren) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(AnimatedSubtraction, _AnimatedWithChildren);

    var _super = _createSuper(AnimatedSubtraction);

    function AnimatedSubtraction(a, b) {
      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, AnimatedSubtraction);

      _this = _super.call(this);
      _this._a = typeof a === 'number' ? new (_$$_REQUIRE(_dependencyMap[4], "./AnimatedValue"))(a) : a;
      _this._b = typeof b === 'number' ? new (_$$_REQUIRE(_dependencyMap[4], "./AnimatedValue"))(b) : b;
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(AnimatedSubtraction, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedSubtraction.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() - this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new (_$$_REQUIRE(_dependencyMap[7], "./AnimatedInterpolation"))(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedSubtraction.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'subtraction',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);

    return AnimatedSubtraction;
  }(_$$_REQUIRE(_dependencyMap[8], "./AnimatedWithChildren"));

  module.exports = AnimatedSubtraction;
},274,[31,32,35,16,263,17,38,266,267],"node_modules/react-native/Libraries/Animated/src/nodes/AnimatedSubtraction.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var AnimatedDivision = function (_AnimatedWithChildren) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(AnimatedDivision, _AnimatedWithChildren);

    var _super = _createSuper(AnimatedDivision);

    function AnimatedDivision(a, b) {
      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, AnimatedDivision);

      _this = _super.call(this);
      _this._a = typeof a === 'number' ? new (_$$_REQUIRE(_dependencyMap[4], "./AnimatedValue"))(a) : a;
      _this._b = typeof b === 'number' ? new (_$$_REQUIRE(_dependencyMap[4], "./AnimatedValue"))(b) : b;
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(AnimatedDivision, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedDivision.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var a = this._a.__getValue();

        var b = this._b.__getValue();

        if (b === 0) {
          console.error('Detected division by zero in AnimatedDivision');
        }

        return a / b;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new (_$$_REQUIRE(_dependencyMap[7], "./AnimatedInterpolation"))(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedDivision.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'division',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);

    return AnimatedDivision;
  }(_$$_REQUIRE(_dependencyMap[8], "./AnimatedWithChildren"));

  module.exports = AnimatedDivision;
},275,[31,32,35,16,263,17,38,266,267],"node_modules/react-native/Libraries/Animated/src/nodes/AnimatedDivision.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var AnimatedMultiplication = function (_AnimatedWithChildren) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(AnimatedMultiplication, _AnimatedWithChildren);

    var _super = _createSuper(AnimatedMultiplication);

    function AnimatedMultiplication(a, b) {
      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, AnimatedMultiplication);

      _this = _super.call(this);
      _this._a = typeof a === 'number' ? new (_$$_REQUIRE(_dependencyMap[4], "./AnimatedValue"))(a) : a;
      _this._b = typeof b === 'number' ? new (_$$_REQUIRE(_dependencyMap[4], "./AnimatedValue"))(b) : b;
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(AnimatedMultiplication, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedMultiplication.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() * this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new (_$$_REQUIRE(_dependencyMap[7], "./AnimatedInterpolation"))(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedMultiplication.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'multiplication',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);

    return AnimatedMultiplication;
  }(_$$_REQUIRE(_dependencyMap[8], "./AnimatedWithChildren"));

  module.exports = AnimatedMultiplication;
},276,[31,32,35,16,263,17,38,266,267],"node_modules/react-native/Libraries/Animated/src/nodes/AnimatedMultiplication.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var AnimatedModulo = function (_AnimatedWithChildren) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(AnimatedModulo, _AnimatedWithChildren);

    var _super = _createSuper(AnimatedModulo);

    function AnimatedModulo(a, modulus) {
      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, AnimatedModulo);

      _this = _super.call(this);
      _this._a = a;
      _this._modulus = modulus;
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/createClass")(AnimatedModulo, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedModulo.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new (_$$_REQUIRE(_dependencyMap[6], "./AnimatedInterpolation"))(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedModulo.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'modulus',
          input: this._a.__getNativeTag(),
          modulus: this._modulus
        };
      }
    }]);

    return AnimatedModulo;
  }(_$$_REQUIRE(_dependencyMap[7], "./AnimatedWithChildren"));

  module.exports = AnimatedModulo;
},277,[31,32,35,16,17,38,266,267],"node_modules/react-native/Libraries/Animated/src/nodes/AnimatedModulo.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var AnimatedDiffClamp = function (_AnimatedWithChildren) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(AnimatedDiffClamp, _AnimatedWithChildren);

    var _super = _createSuper(AnimatedDiffClamp);

    function AnimatedDiffClamp(a, min, max) {
      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, AnimatedDiffClamp);

      _this = _super.call(this);
      _this._a = a;
      _this._min = min;
      _this._max = max;
      _this._value = _this._lastValue = _this._a.__getValue();
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/createClass")(AnimatedDiffClamp, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedDiffClamp.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new (_$$_REQUIRE(_dependencyMap[6], "./AnimatedInterpolation"))(this, config);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var value = this._a.__getValue();

        var diff = value - this._lastValue;
        this._lastValue = value;
        this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
        return this._value;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedDiffClamp.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'diffclamp',
          input: this._a.__getNativeTag(),
          min: this._min,
          max: this._max
        };
      }
    }]);

    return AnimatedDiffClamp;
  }(_$$_REQUIRE(_dependencyMap[7], "./AnimatedWithChildren"));

  module.exports = AnimatedDiffClamp;
},278,[31,32,35,16,17,38,266,267],"node_modules/react-native/Libraries/Animated/src/nodes/AnimatedDiffClamp.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var AnimatedTracking = function (_AnimatedNode) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(AnimatedTracking, _AnimatedNode);

    var _super = _createSuper(AnimatedTracking);

    function AnimatedTracking(value, parent, animationClass, animationConfig, callback) {
      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, AnimatedTracking);

      _this = _super.call(this);
      _this._value = value;
      _this._parent = parent;
      _this._animationClass = animationClass;
      _this._animationConfig = animationConfig;
      _this._useNativeDriver = _$$_REQUIRE(_dependencyMap[4], "../NativeAnimatedHelper").shouldUseNativeDriver(animationConfig);
      _this._callback = callback;

      _this.__attach();

      return _this;
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(AnimatedTracking, [{
      key: "__makeNative",
      value: function __makeNative() {
        this.__isNative = true;

        this._parent.__makeNative();

        _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedTracking.prototype), "__makeNative", this).call(this);

        this._value.__makeNative();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._parent.__getValue();
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);

        if (this._useNativeDriver) {
          this.__makeNative();
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);

        _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedTracking.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._value.animate(new this._animationClass(Object.assign({}, this._animationConfig, {
          toValue: this._animationConfig.toValue.__getValue()
        })), this._callback);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var animation = new this._animationClass(Object.assign({}, this._animationConfig, {
          toValue: undefined
        }));

        var animationConfig = animation.__getNativeAnimationConfig();

        return {
          type: 'tracking',
          animationId: _$$_REQUIRE(_dependencyMap[4], "../NativeAnimatedHelper").generateNewAnimationId(),
          animationConfig: animationConfig,
          toValue: this._parent.__getNativeTag(),
          value: this._value.__getNativeTag()
        };
      }
    }]);

    return AnimatedTracking;
  }(_$$_REQUIRE(_dependencyMap[7], "./AnimatedNode"));

  module.exports = AnimatedTracking;
},279,[31,32,35,16,264,17,38,268],"node_modules/react-native/Libraries/Animated/src/nodes/AnimatedTracking.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var SpringAnimation = function (_Animation) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(SpringAnimation, _Animation);

    var _super = _createSuper(SpringAnimation);

    function SpringAnimation(config) {
      var _config$overshootClam, _config$restDisplacem, _config$restSpeedThre, _config$velocity, _config$velocity2, _config$delay, _config$isInteraction, _config$iterations;

      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, SpringAnimation);

      _this = _super.call(this);
      _this._overshootClamping = (_config$overshootClam = config.overshootClamping) != null ? _config$overshootClam : false;
      _this._restDisplacementThreshold = (_config$restDisplacem = config.restDisplacementThreshold) != null ? _config$restDisplacem : 0.001;
      _this._restSpeedThreshold = (_config$restSpeedThre = config.restSpeedThreshold) != null ? _config$restSpeedThre : 0.001;
      _this._initialVelocity = (_config$velocity = config.velocity) != null ? _config$velocity : 0;
      _this._lastVelocity = (_config$velocity2 = config.velocity) != null ? _config$velocity2 : 0;
      _this._toValue = config.toValue;
      _this._delay = (_config$delay = config.delay) != null ? _config$delay : 0;
      _this._useNativeDriver = _$$_REQUIRE(_dependencyMap[4], "../NativeAnimatedHelper").shouldUseNativeDriver(config);
      _this.__isInteraction = (_config$isInteraction = config.isInteraction) != null ? _config$isInteraction : !_this._useNativeDriver;
      _this.__iterations = (_config$iterations = config.iterations) != null ? _config$iterations : 1;

      if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {
        var _config$stiffness, _config$damping, _config$mass;

        _$$_REQUIRE(_dependencyMap[5], "invariant")(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');

        _this._stiffness = (_config$stiffness = config.stiffness) != null ? _config$stiffness : 100;
        _this._damping = (_config$damping = config.damping) != null ? _config$damping : 10;
        _this._mass = (_config$mass = config.mass) != null ? _config$mass : 1;
      } else if (config.bounciness !== undefined || config.speed !== undefined) {
        var _config$bounciness, _config$speed;

        _$$_REQUIRE(_dependencyMap[5], "invariant")(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');

        var springConfig = _$$_REQUIRE(_dependencyMap[6], "../SpringConfig").fromBouncinessAndSpeed((_config$bounciness = config.bounciness) != null ? _config$bounciness : 8, (_config$speed = config.speed) != null ? _config$speed : 12);

        _this._stiffness = springConfig.stiffness;
        _this._damping = springConfig.damping;
        _this._mass = 1;
      } else {
        var _config$tension, _config$friction;

        var _springConfig = _$$_REQUIRE(_dependencyMap[6], "../SpringConfig").fromOrigamiTensionAndFriction((_config$tension = config.tension) != null ? _config$tension : 40, (_config$friction = config.friction) != null ? _config$friction : 7);

        _this._stiffness = _springConfig.stiffness;
        _this._damping = _springConfig.damping;
        _this._mass = 1;
      }

      _$$_REQUIRE(_dependencyMap[5], "invariant")(_this._stiffness > 0, 'Stiffness value must be greater than 0');

      _$$_REQUIRE(_dependencyMap[5], "invariant")(_this._damping > 0, 'Damping value must be greater than 0');

      _$$_REQUIRE(_dependencyMap[5], "invariant")(_this._mass > 0, 'Mass value must be greater than 0');

      return _this;
    }

    _$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/createClass")(SpringAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        var _this$_initialVelocit;

        return {
          type: 'spring',
          overshootClamping: this._overshootClamping,
          restDisplacementThreshold: this._restDisplacementThreshold,
          restSpeedThreshold: this._restSpeedThreshold,
          stiffness: this._stiffness,
          damping: this._damping,
          mass: this._mass,
          initialVelocity: (_this$_initialVelocit = this._initialVelocity) != null ? _this$_initialVelocit : this._lastVelocity,
          toValue: this._toValue,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this2 = this;

        this.__active = true;
        this._startPosition = fromValue;
        this._lastPosition = this._startPosition;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._lastTime = Date.now();
        this._frameTime = 0.0;

        if (previousAnimation instanceof SpringAnimation) {
          var internalState = previousAnimation.getInternalState();
          this._lastPosition = internalState.lastPosition;
          this._lastVelocity = internalState.lastVelocity;
          this._initialVelocity = this._lastVelocity;
          this._lastTime = internalState.lastTime;
        }

        var start = function start() {
          if (_this2._useNativeDriver) {
            _this2.__startNativeAnimation(animatedValue);
          } else {
            _this2.onUpdate();
          }
        };

        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "getInternalState",
      value: function getInternalState() {
        return {
          lastPosition: this._lastPosition,
          lastVelocity: this._lastVelocity,
          lastTime: this._lastTime
        };
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var MAX_STEPS = 64;
        var now = Date.now();

        if (now > this._lastTime + MAX_STEPS) {
          now = this._lastTime + MAX_STEPS;
        }

        var deltaTime = (now - this._lastTime) / 1000;
        this._frameTime += deltaTime;
        var c = this._damping;
        var m = this._mass;
        var k = this._stiffness;
        var v0 = -this._initialVelocity;
        var zeta = c / (2 * Math.sqrt(k * m));
        var omega0 = Math.sqrt(k / m);
        var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta);
        var x0 = this._toValue - this._startPosition;
        var position = 0.0;
        var velocity = 0.0;
        var t = this._frameTime;

        if (zeta < 1) {
          var envelope = Math.exp(-zeta * omega0 * t);
          position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));
          velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));
        } else {
          var _envelope = Math.exp(-omega0 * t);

          position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);
          velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));
        }

        this._lastTime = now;
        this._lastPosition = position;
        this._lastVelocity = velocity;

        this._onUpdate(position);

        if (!this.__active) {
          return;
        }

        var isOvershooting = false;

        if (this._overshootClamping && this._stiffness !== 0) {
          if (this._startPosition < this._toValue) {
            isOvershooting = position > this._toValue;
          } else {
            isOvershooting = position < this._toValue;
          }
        }

        var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;

        var isDisplacement = true;

        if (this._stiffness !== 0) {
          isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;
        }

        if (isOvershooting || isVelocity && isDisplacement) {
          if (this._stiffness !== 0) {
            this._lastPosition = this._toValue;
            this._lastVelocity = 0;

            this._onUpdate(this._toValue);
          }

          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }, {
      key: "stop",
      value: function stop() {
        _$$_REQUIRE(_dependencyMap[8], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(SpringAnimation.prototype), "stop", this).call(this);

        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);

    return SpringAnimation;
  }(_$$_REQUIRE(_dependencyMap[9], "./Animation"));

  module.exports = SpringAnimation;
},280,[31,32,35,16,264,6,281,17,38,282],"node_modules/react-native/Libraries/Animated/src/animations/SpringAnimation.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function stiffnessFromOrigamiValue(oValue) {
    return (oValue - 30) * 3.62 + 194;
  }

  function dampingFromOrigamiValue(oValue) {
    return (oValue - 8) * 3 + 25;
  }

  function fromOrigamiTensionAndFriction(tension, friction) {
    return {
      stiffness: stiffnessFromOrigamiValue(tension),
      damping: dampingFromOrigamiValue(friction)
    };
  }

  function fromBouncinessAndSpeed(bounciness, speed) {
    function normalize(value, startValue, endValue) {
      return (value - startValue) / (endValue - startValue);
    }

    function projectNormal(n, start, end) {
      return start + n * (end - start);
    }

    function linearInterpolation(t, start, end) {
      return t * end + (1 - t) * start;
    }

    function quadraticOutInterpolation(t, start, end) {
      return linearInterpolation(2 * t - t * t, start, end);
    }

    function b3Friction1(x) {
      return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
    }

    function b3Friction2(x) {
      return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
    }

    function b3Friction3(x) {
      return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
    }

    function b3Nobounce(tension) {
      if (tension <= 18) {
        return b3Friction1(tension);
      } else if (tension > 18 && tension <= 44) {
        return b3Friction2(tension);
      } else {
        return b3Friction3(tension);
      }
    }

    var b = normalize(bounciness / 1.7, 0, 20);
    b = projectNormal(b, 0, 0.8);
    var s = normalize(speed / 1.7, 0, 20);
    var bouncyTension = projectNormal(s, 0.5, 200);
    var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
    return {
      stiffness: stiffnessFromOrigamiValue(bouncyTension),
      damping: dampingFromOrigamiValue(bouncyFriction)
    };
  }

  module.exports = {
    fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
    fromBouncinessAndSpeed: fromBouncinessAndSpeed
  };
},281,[],"node_modules/react-native/Libraries/Animated/src/SpringConfig.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Animation = function () {
    function Animation() {
      _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/classCallCheck")(this, Animation);
    }

    _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/createClass")(Animation, [{
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
    }, {
      key: "stop",
      value: function stop() {
        if (this.__nativeId) {
          _$$_REQUIRE(_dependencyMap[2], "../NativeAnimatedHelper").API.stopAnimation(this.__nativeId);
        }
      }
    }, {
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        throw new Error('This animation type cannot be offloaded to native');
      }
    }, {
      key: "__debouncedOnEnd",
      value: function __debouncedOnEnd(result) {
        var onEnd = this.__onEnd;
        this.__onEnd = null;
        onEnd && onEnd(result);
      }
    }, {
      key: "__startNativeAnimation",
      value: function __startNativeAnimation(animatedValue) {
        _$$_REQUIRE(_dependencyMap[2], "../NativeAnimatedHelper").API.enableQueue();

        animatedValue.__makeNative();

        _$$_REQUIRE(_dependencyMap[2], "../NativeAnimatedHelper").API.disableQueue();

        this.__nativeId = _$$_REQUIRE(_dependencyMap[2], "../NativeAnimatedHelper").generateNewAnimationId();

        _$$_REQUIRE(_dependencyMap[2], "../NativeAnimatedHelper").API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
      }
    }]);

    return Animation;
  }();

  module.exports = Animation;
},282,[16,17,264],"node_modules/react-native/Libraries/Animated/src/animations/Animation.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var _easeInOut;

  function easeInOut() {
    if (!_easeInOut) {
      var Easing = _$$_REQUIRE(_dependencyMap[2], "../Easing");

      _easeInOut = Easing.inOut(Easing.ease);
    }

    return _easeInOut;
  }

  var TimingAnimation = function (_Animation) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(TimingAnimation, _Animation);

    var _super = _createSuper(TimingAnimation);

    function TimingAnimation(config) {
      var _config$easing, _config$duration, _config$delay, _config$iterations, _config$isInteraction;

      var _this;

      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, TimingAnimation);

      _this = _super.call(this);
      _this._toValue = config.toValue;
      _this._easing = (_config$easing = config.easing) != null ? _config$easing : easeInOut();
      _this._duration = (_config$duration = config.duration) != null ? _config$duration : 500;
      _this._delay = (_config$delay = config.delay) != null ? _config$delay : 0;
      _this.__iterations = (_config$iterations = config.iterations) != null ? _config$iterations : 1;
      _this._useNativeDriver = _$$_REQUIRE(_dependencyMap[5], "../NativeAnimatedHelper").shouldUseNativeDriver(config);
      _this.__isInteraction = (_config$isInteraction = config.isInteraction) != null ? _config$isInteraction : !_this._useNativeDriver;
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/createClass")(TimingAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        var frameDuration = 1000.0 / 60.0;
        var frames = [];
        var numFrames = Math.round(this._duration / frameDuration);

        for (var frame = 0; frame < numFrames; frame++) {
          frames.push(this._easing(frame / numFrames));
        }

        frames.push(this._easing(1));
        return {
          type: 'frames',
          frames: frames,
          toValue: this._toValue,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this2 = this;

        this.__active = true;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;

        var start = function start() {
          if (_this2._duration === 0 && !_this2._useNativeDriver) {
            _this2._onUpdate(_this2._toValue);

            _this2.__debouncedOnEnd({
              finished: true
            });
          } else {
            _this2._startTime = Date.now();

            if (_this2._useNativeDriver) {
              _this2.__startNativeAnimation(animatedValue);
            } else {
              _this2._animationFrame = requestAnimationFrame(_this2.onUpdate.bind(_this2));
            }
          }
        };

        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();

        if (now >= this._startTime + this._duration) {
          if (this._duration === 0) {
            this._onUpdate(this._toValue);
          } else {
            this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));
          }

          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));

        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        _$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(TimingAnimation.prototype), "stop", this).call(this);

        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);

    return TimingAnimation;
  }(_$$_REQUIRE(_dependencyMap[8], "./Animation"));

  module.exports = TimingAnimation;
},283,[31,32,284,35,16,264,17,38,282],"node_modules/react-native/Libraries/Animated/src/animations/TimingAnimation.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _ease;

  var Easing = function () {
    function Easing() {
      _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/classCallCheck")(this, Easing);
    }

    _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/createClass")(Easing, null, [{
      key: "step0",
      value: function step0(n) {
        return n > 0 ? 1 : 0;
      }
    }, {
      key: "step1",
      value: function step1(n) {
        return n >= 1 ? 1 : 0;
      }
    }, {
      key: "linear",
      value: function linear(t) {
        return t;
      }
    }, {
      key: "ease",
      value: function ease(t) {
        if (!_ease) {
          _ease = Easing.bezier(0.42, 0, 1, 1);
        }

        return _ease(t);
      }
    }, {
      key: "quad",
      value: function quad(t) {
        return t * t;
      }
    }, {
      key: "cubic",
      value: function cubic(t) {
        return t * t * t;
      }
    }, {
      key: "poly",
      value: function poly(n) {
        return function (t) {
          return Math.pow(t, n);
        };
      }
    }, {
      key: "sin",
      value: function sin(t) {
        return 1 - Math.cos(t * Math.PI / 2);
      }
    }, {
      key: "circle",
      value: function circle(t) {
        return 1 - Math.sqrt(1 - t * t);
      }
    }, {
      key: "exp",
      value: function exp(t) {
        return Math.pow(2, 10 * (t - 1));
      }
    }, {
      key: "elastic",
      value: function elastic() {
        var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var p = bounciness * Math.PI;
        return function (t) {
          return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
        };
      }
    }, {
      key: "back",
      value: function back() {
        var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.70158;
        return function (t) {
          return t * t * ((s + 1) * t - s);
        };
      }
    }, {
      key: "bounce",
      value: function bounce(t) {
        if (t < 1 / 2.75) {
          return 7.5625 * t * t;
        }

        if (t < 2 / 2.75) {
          var _t = t - 1.5 / 2.75;

          return 7.5625 * _t * _t + 0.75;
        }

        if (t < 2.5 / 2.75) {
          var _t2 = t - 2.25 / 2.75;

          return 7.5625 * _t2 * _t2 + 0.9375;
        }

        var t2 = t - 2.625 / 2.75;
        return 7.5625 * t2 * t2 + 0.984375;
      }
    }, {
      key: "bezier",
      value: function bezier(x1, y1, x2, y2) {
        var _bezier = _$$_REQUIRE(_dependencyMap[2], "./bezier");

        return _bezier(x1, y1, x2, y2);
      }
    }, {
      key: "in",
      value: function _in(easing) {
        return easing;
      }
    }, {
      key: "out",
      value: function out(easing) {
        return function (t) {
          return 1 - easing(1 - t);
        };
      }
    }, {
      key: "inOut",
      value: function inOut(easing) {
        return function (t) {
          if (t < 0.5) {
            return easing(t * 2) / 2;
          }

          return 1 - easing((1 - t) * 2) / 2;
        };
      }
    }]);

    return Easing;
  }();

  module.exports = Easing;
},284,[16,17,285],"node_modules/react-native/Libraries/Animated/src/Easing.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var NEWTON_ITERATIONS = 4;
  var NEWTON_MIN_SLOPE = 0.001;
  var SUBDIVISION_PRECISION = 0.0000001;
  var SUBDIVISION_MAX_ITERATIONS = 10;
  var kSplineTableSize = 11;
  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
  var float32ArraySupported = typeof Float32Array === 'function';

  function A(aA1, aA2) {
    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
  }

  function B(aA1, aA2) {
    return 3.0 * aA2 - 6.0 * aA1;
  }

  function C(aA1) {
    return 3.0 * aA1;
  }

  function calcBezier(aT, aA1, aA2) {
    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
  }

  function getSlope(aT, aA1, aA2) {
    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
  }

  function binarySubdivide(aX, _aA, _aB, mX1, mX2) {
    var currentX,
        currentT,
        i = 0,
        aA = _aA,
        aB = _aB;

    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;

      if (currentX > 0.0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

    return currentT;
  }

  function newtonRaphsonIterate(aX, _aGuessT, mX1, mX2) {
    var aGuessT = _aGuessT;

    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);

      if (currentSlope === 0.0) {
        return aGuessT;
      }

      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }

    return aGuessT;
  }

  module.exports = function bezier(mX1, mY1, mX2, mY2) {
    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {
      throw new Error('bezier x values must be in [0, 1] range');
    }

    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

    if (mX1 !== mY1 || mX2 !== mY2) {
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }
    }

    function getTForX(aX) {
      var intervalStart = 0.0;
      var currentSample = 1;
      var lastSample = kSplineTableSize - 1;

      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }

      --currentSample;
      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      var guessForT = intervalStart + dist * kSampleStepSize;
      var initialSlope = getSlope(guessForT, mX1, mX2);

      if (initialSlope >= NEWTON_MIN_SLOPE) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0.0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }
    }

    return function BezierEasing(x) {
      if (mX1 === mY1 && mX2 === mY2) {
        return x;
      }

      if (x === 0) {
        return 0;
      }

      if (x === 1) {
        return 1;
      }

      return calcBezier(getTForX(x), mY1, mY2);
    };
  };
},285,[],"node_modules/react-native/Libraries/Animated/src/bezier.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var DecayAnimation = function (_Animation) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(DecayAnimation, _Animation);

    var _super = _createSuper(DecayAnimation);

    function DecayAnimation(config) {
      var _config$deceleration, _config$isInteraction, _config$iterations;

      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, DecayAnimation);

      _this = _super.call(this);
      _this._deceleration = (_config$deceleration = config.deceleration) != null ? _config$deceleration : 0.998;
      _this._velocity = config.velocity;
      _this._useNativeDriver = _$$_REQUIRE(_dependencyMap[4], "../NativeAnimatedHelper").shouldUseNativeDriver(config);
      _this.__isInteraction = (_config$isInteraction = config.isInteraction) != null ? _config$isInteraction : !_this._useNativeDriver;
      _this.__iterations = (_config$iterations = config.iterations) != null ? _config$iterations : 1;
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(DecayAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'decay',
          deceleration: this._deceleration,
          velocity: this._velocity,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        this.__active = true;
        this._lastValue = fromValue;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._startTime = Date.now();

        if (this._useNativeDriver) {
          this.__startNativeAnimation(animatedValue);
        } else {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();
        var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));

        this._onUpdate(value);

        if (Math.abs(this._lastValue - value) < 0.1) {
          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._lastValue = value;

        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(DecayAnimation.prototype), "stop", this).call(this);

        this.__active = false;
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);

    return DecayAnimation;
  }(_$$_REQUIRE(_dependencyMap[7], "./Animation"));

  module.exports = DecayAnimation;
},286,[31,32,35,16,264,17,38,282],"node_modules/react-native/Libraries/Animated/src/animations/DecayAnimation.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function attachNativeEvent(viewRef, eventName, argMapping) {
    var eventMappings = [];

    var traverse = function traverse(value, path) {
      if (value instanceof _$$_REQUIRE(_dependencyMap[0], "./nodes/AnimatedValue")) {
        value.__makeNative();

        eventMappings.push({
          nativeEventPath: path,
          animatedValueTag: value.__getNativeTag()
        });
      } else if (typeof value === 'object') {
        for (var _key in value) {
          traverse(value[_key], path.concat(_key));
        }
      }
    };

    _$$_REQUIRE(_dependencyMap[1], "invariant")(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');

    traverse(argMapping[0].nativeEvent, []);

    var viewTag = _$$_REQUIRE(_dependencyMap[2], "../../Renderer/shims/ReactNative").findNodeHandle(viewRef);

    if (viewTag != null) {
      eventMappings.forEach(function (mapping) {
        _$$_REQUIRE(_dependencyMap[3], "./NativeAnimatedHelper").API.addAnimatedEventToView(viewTag, eventName, mapping);
      });
    }

    return {
      detach: function detach() {
        if (viewTag != null) {
          eventMappings.forEach(function (mapping) {
            _$$_REQUIRE(_dependencyMap[3], "./NativeAnimatedHelper").API.removeAnimatedEventFromView(viewTag, eventName, mapping.animatedValueTag);
          });
        }
      }
    };
  }

  function validateMapping(argMapping, args) {
    var validate = function validate(recMapping, recEvt, key) {
      if (recMapping instanceof _$$_REQUIRE(_dependencyMap[0], "./nodes/AnimatedValue")) {
        _$$_REQUIRE(_dependencyMap[1], "invariant")(typeof recEvt === 'number', 'Bad mapping of event key ' + key + ', should be number but got ' + typeof recEvt);

        return;
      }

      if (typeof recEvt === 'number') {
        _$$_REQUIRE(_dependencyMap[1], "invariant")(recMapping instanceof _$$_REQUIRE(_dependencyMap[0], "./nodes/AnimatedValue"), 'Bad mapping of type ' + typeof recMapping + ' for key ' + key + ', event value must map to AnimatedValue');

        return;
      }

      _$$_REQUIRE(_dependencyMap[1], "invariant")(typeof recMapping === 'object', 'Bad mapping of type ' + typeof recMapping + ' for key ' + key);

      _$$_REQUIRE(_dependencyMap[1], "invariant")(typeof recEvt === 'object', 'Bad event of type ' + typeof recEvt + ' for key ' + key);

      for (var mappingKey in recMapping) {
        validate(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
      }
    };

    _$$_REQUIRE(_dependencyMap[1], "invariant")(args.length >= argMapping.length, 'Event has less arguments than mapping');

    argMapping.forEach(function (mapping, idx) {
      validate(mapping, args[idx], 'arg' + idx);
    });
  }

  var AnimatedEvent = function () {
    function AnimatedEvent(argMapping, config) {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, AnimatedEvent);

      this._listeners = [];
      this._argMapping = argMapping;

      if (config == null) {
        console.warn('Animated.event now requires a second argument for options');
        config = {
          useNativeDriver: false
        };
      }

      if (config.listener) {
        this.__addListener(config.listener);
      }

      this._callListeners = this._callListeners.bind(this);
      this._attachedEvent = null;
      this.__isNative = _$$_REQUIRE(_dependencyMap[3], "./NativeAnimatedHelper").shouldUseNativeDriver(config);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(AnimatedEvent, [{
      key: "__addListener",
      value: function __addListener(callback) {
        this._listeners.push(callback);
      }
    }, {
      key: "__removeListener",
      value: function __removeListener(callback) {
        this._listeners = this._listeners.filter(function (listener) {
          return listener !== callback;
        });
      }
    }, {
      key: "__attach",
      value: function __attach(viewRef, eventName) {
        _$$_REQUIRE(_dependencyMap[1], "invariant")(this.__isNative, 'Only native driven events need to be attached.');

        this._attachedEvent = attachNativeEvent(viewRef, eventName, this._argMapping);
      }
    }, {
      key: "__detach",
      value: function __detach(viewTag, eventName) {
        _$$_REQUIRE(_dependencyMap[1], "invariant")(this.__isNative, 'Only native driven events need to be detached.');

        this._attachedEvent && this._attachedEvent.detach();
      }
    }, {
      key: "__getHandler",
      value: function __getHandler() {
        var _this = this;

        if (this.__isNative) {
          if (__DEV__) {
            var _validatedMapping = false;
            return function () {
              for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
                args[_key2] = arguments[_key2];
              }

              if (!_validatedMapping) {
                validateMapping(_this._argMapping, args);
                _validatedMapping = true;
              }

              _this._callListeners.apply(_this, args);
            };
          } else {
            return this._callListeners;
          }
        }

        var validatedMapping = false;
        return function () {
          for (var _len2 = arguments.length, args = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
            args[_key3] = arguments[_key3];
          }

          if (__DEV__ && !validatedMapping) {
            validateMapping(_this._argMapping, args);
            validatedMapping = true;
          }

          var traverse = function traverse(recMapping, recEvt, key) {
            if (recMapping instanceof _$$_REQUIRE(_dependencyMap[0], "./nodes/AnimatedValue")) {
              if (typeof recEvt === 'number') {
                recMapping.setValue(recEvt);
              }
            } else if (typeof recMapping === 'object') {
              for (var mappingKey in recMapping) {
                traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
              }
            }
          };

          _this._argMapping.forEach(function (mapping, idx) {
            traverse(mapping, args[idx], 'arg' + idx);
          });

          _this._callListeners.apply(_this, args);
        };
      }
    }, {
      key: "_callListeners",
      value: function _callListeners() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {
          args[_key4] = arguments[_key4];
        }

        this._listeners.forEach(function (listener) {
          return listener.apply(void 0, args);
        });
      }
    }]);

    return AnimatedEvent;
  }();

  module.exports = {
    AnimatedEvent: AnimatedEvent,
    attachNativeEvent: attachNativeEvent
  };
},287,[263,6,85,264,16,17],"node_modules/react-native/Libraries/Animated/src/AnimatedEvent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Animated/src/createAnimatedComponent.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  function createAnimatedComponent(Component) {
    _$$_REQUIRE(_dependencyMap[3], "invariant")(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, '`createAnimatedComponent` does not support stateless functional components; ' + 'use a class component instead.');

    var AnimatedComponent = function (_React$Component) {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/inherits")(AnimatedComponent, _React$Component);

      var _super = _createSuper(AnimatedComponent);

      function AnimatedComponent() {
        var _this;

        _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/classCallCheck")(this, AnimatedComponent);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));
        _this._invokeAnimatedPropsCallbackOnMount = false;
        _this._eventDetachers = [];

        _this._animatedPropsCallback = function () {
          var _this$_component$_int, _this$_component$_int2, _this$_component$getN, _this$_component$getN2, _this$_component$getS, _this$_component$getS2;

          if (_this._component == null) {
            _this._invokeAnimatedPropsCallbackOnMount = true;
          } else if (process.env.NODE_ENV === 'test' || typeof _this._component.setNativeProps !== 'function' || ((_this$_component$_int = _this._component['_internalInstanceHandle']) == null ? void 0 : (_this$_component$_int2 = _this$_component$_int.stateNode) == null ? void 0 : _this$_component$_int2.canonical) != null || _this._component.getNativeScrollRef != null && _this._component.getNativeScrollRef() != null && ((_this$_component$getN = _this._component.getNativeScrollRef()['_internalInstanceHandle']) == null ? void 0 : (_this$_component$getN2 = _this$_component$getN.stateNode) == null ? void 0 : _this$_component$getN2.canonical) != null || _this._component.getScrollResponder != null && _this._component.getScrollResponder().getNativeScrollRef != null && _this._component.getScrollResponder().getNativeScrollRef() != null && ((_this$_component$getS = _this._component.getScrollResponder().getNativeScrollRef()['_internalInstanceHandle']) == null ? void 0 : (_this$_component$getS2 = _this$_component$getS.stateNode) == null ? void 0 : _this$_component$getS2.canonical) != null) {
            _this.forceUpdate();
          } else if (!_this._propsAnimated.__isNative) {
            _this._component.setNativeProps(_this._propsAnimated.__getAnimatedValue());
          } else {
            throw new Error('Attempting to run JS driven animation on animated ' + 'node that has been moved to "native" earlier by starting an ' + 'animation with `useNativeDriver: true`');
          }
        };

        _this._setComponentRef = _$$_REQUIRE(_dependencyMap[6], "../../Utilities/setAndForwardRef")({
          getForwardedRef: function getForwardedRef() {
            return _this.props.forwardedRef;
          },
          setLocalRef: function setLocalRef(ref) {
            _this._prevComponent = _this._component;
            _this._component = ref;

            if (ref != null && ref.getNode == null) {
              ref.getNode = function () {
                var _ref$constructor$name;

                console.warn('%s: Calling `getNode()` on the ref of an Animated component ' + 'is no longer necessary. You can now directly use the ref ' + 'instead. This method will be removed in a future release.', (_ref$constructor$name = ref.constructor.name) != null ? _ref$constructor$name : '<<anonymous>>');
                return ref;
              };
            }
          }
        });
        return _this;
      }

      _$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/createClass")(AnimatedComponent, [{
        key: "_attachNativeEvents",
        value: function _attachNativeEvents() {
          var _this$_component,
              _this2 = this;

          var scrollableNode = (_this$_component = this._component) != null && _this$_component.getScrollableNode ? this._component.getScrollableNode() : this._component;

          var _loop = function _loop(key) {
            var prop = _this2.props[key];

            if (prop instanceof _$$_REQUIRE(_dependencyMap[8], "./AnimatedEvent").AnimatedEvent && prop.__isNative) {
              prop.__attach(scrollableNode, key);

              _this2._eventDetachers.push(function () {
                return prop.__detach(scrollableNode, key);
              });
            }
          };

          for (var key in this.props) {
            _loop(key);
          }
        }
      }, {
        key: "_detachNativeEvents",
        value: function _detachNativeEvents() {
          this._eventDetachers.forEach(function (remove) {
            return remove();
          });

          this._eventDetachers = [];
        }
      }, {
        key: "_attachProps",
        value: function _attachProps(nextProps) {
          var oldPropsAnimated = this._propsAnimated;
          this._propsAnimated = new (_$$_REQUIRE(_dependencyMap[9], "./nodes/AnimatedProps"))(nextProps, this._animatedPropsCallback);

          if (oldPropsAnimated) {
            oldPropsAnimated.__restoreDefaultValues();

            oldPropsAnimated.__detach();
          }
        }
      }, {
        key: "render",
        value: function render() {
          var props = this._propsAnimated.__getValue();

          return React.createElement(Component, _$$_REQUIRE(_dependencyMap[10], "@babel/runtime/helpers/extends")({}, props, {
            ref: this._setComponentRef,
            collapsable: this._propsAnimated.__isNative ? false : props.collapsable,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 165,
              columnNumber: 9
            }
          }));
        }
      }, {
        key: "UNSAFE_componentWillMount",
        value: function UNSAFE_componentWillMount() {
          this._attachProps(this.props);
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          if (this._invokeAnimatedPropsCallbackOnMount) {
            this._invokeAnimatedPropsCallbackOnMount = false;

            this._animatedPropsCallback();
          }

          this._propsAnimated.setNativeView(this._component);

          this._attachNativeEvents();
        }
      }, {
        key: "UNSAFE_componentWillReceiveProps",
        value: function UNSAFE_componentWillReceiveProps(newProps) {
          this._attachProps(newProps);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (this._component !== this._prevComponent) {
            this._propsAnimated.setNativeView(this._component);
          }

          if (this._component !== this._prevComponent || prevProps !== this.props) {
            this._detachNativeEvents();

            this._attachNativeEvents();
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._propsAnimated && this._propsAnimated.__detach();

          this._detachNativeEvents();
        }
      }]);

      return AnimatedComponent;
    }(React.Component);

    return React.forwardRef(function AnimatedComponentWrapper(props, ref) {
      return React.createElement(AnimatedComponent, _$$_REQUIRE(_dependencyMap[10], "@babel/runtime/helpers/extends")({}, props, ref == null ? null : {
        forwardedRef: ref
      }, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 215,
          columnNumber: 7
        }
      }));
    });
  }

  module.exports = createAnimatedComponent;
},288,[31,32,49,6,35,16,289,17,287,290,53],"node_modules/react-native/Libraries/Animated/src/createAnimatedComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function setAndForwardRef(_ref) {
    var getForwardedRef = _ref.getForwardedRef,
        setLocalRef = _ref.setLocalRef;
    return function forwardRef(ref) {
      var forwardedRef = getForwardedRef();
      setLocalRef(ref);

      if (typeof forwardedRef === 'function') {
        forwardedRef(ref);
      } else if (typeof forwardedRef === 'object' && forwardedRef != null) {
        forwardedRef.current = ref;
      }
    };
  }

  module.exports = setAndForwardRef;
},289,[],"node_modules/react-native/Libraries/Utilities/setAndForwardRef.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var AnimatedProps = function (_AnimatedNode) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(AnimatedProps, _AnimatedNode);

    var _super = _createSuper(AnimatedProps);

    function AnimatedProps(props, callback) {
      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, AnimatedProps);

      _this = _super.call(this);

      if (props.style) {
        props = Object.assign({}, props, {
          style: new (_$$_REQUIRE(_dependencyMap[4], "./AnimatedStyle"))(props.style)
        });
      }

      _this._props = props;
      _this._callback = callback;

      _this.__attach();

      return _this;
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(AnimatedProps, [{
      key: "__getValue",
      value: function __getValue() {
        var props = {};

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof _$$_REQUIRE(_dependencyMap[6], "./AnimatedNode")) {
            if (!value.__isNative || value instanceof _$$_REQUIRE(_dependencyMap[4], "./AnimatedStyle")) {
              props[key] = value.__getValue();
            }
          } else if (value instanceof _$$_REQUIRE(_dependencyMap[7], "../AnimatedEvent").AnimatedEvent) {
            props[key] = value.__getHandler();
          } else {
            props[key] = value;
          }
        }

        return props;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        var props = {};

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof _$$_REQUIRE(_dependencyMap[6], "./AnimatedNode")) {
            props[key] = value.__getAnimatedValue();
          }
        }

        return props;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof _$$_REQUIRE(_dependencyMap[6], "./AnimatedNode")) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        if (this.__isNative && this._animatedView) {
          this.__disconnectAnimatedView();
        }

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof _$$_REQUIRE(_dependencyMap[6], "./AnimatedNode")) {
            value.__removeChild(this);
          }
        }

        _$$_REQUIRE(_dependencyMap[8], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedProps.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._callback();
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          this.__isNative = true;

          for (var key in this._props) {
            var value = this._props[key];

            if (value instanceof _$$_REQUIRE(_dependencyMap[6], "./AnimatedNode")) {
              value.__makeNative();
            }
          }

          if (this._animatedView) {
            this.__connectAnimatedView();
          }
        }
      }
    }, {
      key: "setNativeView",
      value: function setNativeView(animatedView) {
        if (this._animatedView === animatedView) {
          return;
        }

        this._animatedView = animatedView;

        if (this.__isNative) {
          this.__connectAnimatedView();
        }
      }
    }, {
      key: "__connectAnimatedView",
      value: function __connectAnimatedView() {
        _$$_REQUIRE(_dependencyMap[9], "invariant")(this.__isNative, 'Expected node to be marked as "native"');

        var nativeViewTag = _$$_REQUIRE(_dependencyMap[10], "../../../Renderer/shims/ReactNative").findNodeHandle(this._animatedView);

        _$$_REQUIRE(_dependencyMap[9], "invariant")(nativeViewTag != null, 'Unable to locate attached view in the native tree');

        _$$_REQUIRE(_dependencyMap[11], "../NativeAnimatedHelper").API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__disconnectAnimatedView",
      value: function __disconnectAnimatedView() {
        _$$_REQUIRE(_dependencyMap[9], "invariant")(this.__isNative, 'Expected node to be marked as "native"');

        var nativeViewTag = _$$_REQUIRE(_dependencyMap[10], "../../../Renderer/shims/ReactNative").findNodeHandle(this._animatedView);

        _$$_REQUIRE(_dependencyMap[9], "invariant")(nativeViewTag != null, 'Unable to locate attached view in the native tree');

        _$$_REQUIRE(_dependencyMap[11], "../NativeAnimatedHelper").API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__restoreDefaultValues",
      value: function __restoreDefaultValues() {
        if (this.__isNative) {
          _$$_REQUIRE(_dependencyMap[11], "../NativeAnimatedHelper").API.restoreDefaultValues(this.__getNativeTag());
        }
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var propsConfig = {};

        for (var propKey in this._props) {
          var value = this._props[propKey];

          if (value instanceof _$$_REQUIRE(_dependencyMap[6], "./AnimatedNode")) {
            value.__makeNative();

            propsConfig[propKey] = value.__getNativeTag();
          }
        }

        return {
          type: 'props',
          props: propsConfig
        };
      }
    }]);

    return AnimatedProps;
  }(_$$_REQUIRE(_dependencyMap[6], "./AnimatedNode"));

  module.exports = AnimatedProps;
},290,[31,32,35,16,291,17,268,287,38,6,85,264],"node_modules/react-native/Libraries/Animated/src/nodes/AnimatedProps.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var AnimatedStyle = function (_AnimatedWithChildren) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(AnimatedStyle, _AnimatedWithChildren);

    var _super = _createSuper(AnimatedStyle);

    function AnimatedStyle(style) {
      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, AnimatedStyle);

      _this = _super.call(this);
      style = _$$_REQUIRE(_dependencyMap[4], "../../../StyleSheet/flattenStyle")(style) || {};

      if (style.transform) {
        style = Object.assign({}, style, {
          transform: new (_$$_REQUIRE(_dependencyMap[5], "./AnimatedTransform"))(style.transform)
        });
      }

      _this._style = style;
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/createClass")(AnimatedStyle, [{
      key: "_walkStyleAndGetValues",
      value: function _walkStyleAndGetValues(style) {
        var updatedStyle = {};

        for (var key in style) {
          var value = style[key];

          if (value instanceof _$$_REQUIRE(_dependencyMap[7], "./AnimatedNode")) {
            if (!value.__isNative) {
              updatedStyle[key] = value.__getValue();
            }
          } else if (value && !Array.isArray(value) && typeof value === 'object') {
            updatedStyle[key] = this._walkStyleAndGetValues(value);
          } else {
            updatedStyle[key] = value;
          }
        }

        return updatedStyle;
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._walkStyleAndGetValues(this._style);
      }
    }, {
      key: "_walkStyleAndGetAnimatedValues",
      value: function _walkStyleAndGetAnimatedValues(style) {
        var updatedStyle = {};

        for (var key in style) {
          var value = style[key];

          if (value instanceof _$$_REQUIRE(_dependencyMap[7], "./AnimatedNode")) {
            updatedStyle[key] = value.__getAnimatedValue();
          } else if (value && !Array.isArray(value) && typeof value === 'object') {
            updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);
          }
        }

        return updatedStyle;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this._walkStyleAndGetAnimatedValues(this._style);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof _$$_REQUIRE(_dependencyMap[7], "./AnimatedNode")) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof _$$_REQUIRE(_dependencyMap[7], "./AnimatedNode")) {
            value.__removeChild(this);
          }
        }

        _$$_REQUIRE(_dependencyMap[8], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedStyle.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof _$$_REQUIRE(_dependencyMap[7], "./AnimatedNode")) {
            value.__makeNative();
          }
        }

        _$$_REQUIRE(_dependencyMap[8], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedStyle.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var styleConfig = {};

        for (var styleKey in this._style) {
          if (this._style[styleKey] instanceof _$$_REQUIRE(_dependencyMap[7], "./AnimatedNode")) {
            var style = this._style[styleKey];

            style.__makeNative();

            styleConfig[styleKey] = style.__getNativeTag();
          }
        }

        _$$_REQUIRE(_dependencyMap[9], "../NativeAnimatedHelper").validateStyles(styleConfig);

        return {
          type: 'style',
          style: styleConfig
        };
      }
    }]);

    return AnimatedStyle;
  }(_$$_REQUIRE(_dependencyMap[10], "./AnimatedWithChildren"));

  module.exports = AnimatedStyle;
},291,[31,32,35,16,184,292,17,268,38,264,267],"node_modules/react-native/Libraries/Animated/src/nodes/AnimatedStyle.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var AnimatedTransform = function (_AnimatedWithChildren) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(AnimatedTransform, _AnimatedWithChildren);

    var _super = _createSuper(AnimatedTransform);

    function AnimatedTransform(transforms) {
      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, AnimatedTransform);

      _this = _super.call(this);
      _this._transforms = transforms;
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/createClass")(AnimatedTransform, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof _$$_REQUIRE(_dependencyMap[5], "./AnimatedNode")) {
              value.__makeNative();
            }
          }
        });

        _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedTransform.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._transforms.map(function (transform) {
          var result = {};

          for (var key in transform) {
            var value = transform[key];

            if (value instanceof _$$_REQUIRE(_dependencyMap[5], "./AnimatedNode")) {
              result[key] = value.__getValue();
            } else {
              result[key] = value;
            }
          }

          return result;
        });
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this._transforms.map(function (transform) {
          var result = {};

          for (var key in transform) {
            var value = transform[key];

            if (value instanceof _$$_REQUIRE(_dependencyMap[5], "./AnimatedNode")) {
              result[key] = value.__getAnimatedValue();
            } else {
              result[key] = value;
            }
          }

          return result;
        });
      }
    }, {
      key: "__attach",
      value: function __attach() {
        var _this2 = this;

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof _$$_REQUIRE(_dependencyMap[5], "./AnimatedNode")) {
              value.__addChild(_this2);
            }
          }
        });
      }
    }, {
      key: "__detach",
      value: function __detach() {
        var _this3 = this;

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof _$$_REQUIRE(_dependencyMap[5], "./AnimatedNode")) {
              value.__removeChild(_this3);
            }
          }
        });

        _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/get")(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(AnimatedTransform.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var transConfigs = [];

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof _$$_REQUIRE(_dependencyMap[5], "./AnimatedNode")) {
              transConfigs.push({
                type: 'animated',
                property: key,
                nodeTag: value.__getNativeTag()
              });
            } else {
              transConfigs.push({
                type: 'static',
                property: key,
                value: _$$_REQUIRE(_dependencyMap[7], "../NativeAnimatedHelper").transformDataType(value)
              });
            }
          }
        });

        _$$_REQUIRE(_dependencyMap[7], "../NativeAnimatedHelper").validateTransform(transConfigs);

        return {
          type: 'transform',
          transforms: transConfigs
        };
      }
    }]);

    return AnimatedTransform;
  }(_$$_REQUIRE(_dependencyMap[8], "./AnimatedWithChildren"));

  module.exports = AnimatedTransform;
},292,[31,32,35,16,17,268,38,264,267],"node_modules/react-native/Libraries/Animated/src/nodes/AnimatedTransform.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/extends"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2], "react"));

  var _this = this,
      _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Animated/src/components/AnimatedFlatList.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var FlatListWithEventThrottle = React.forwardRef(function (props, ref) {
    return React.createElement(_$$_REQUIRE(_dependencyMap[3], "../../../Lists/FlatList"), (0, _extends2.default)({
      scrollEventThrottle: 0.0001
    }, props, {
      ref: ref,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 24,
        columnNumber: 3
      }
    }));
  });
  module.exports = _$$_REQUIRE(_dependencyMap[4], "../createAnimatedComponent")(FlatListWithEventThrottle);
},293,[3,53,49,294,288],"node_modules/react-native/Libraries/Animated/src/components/AnimatedFlatList.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectWithoutProperties2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/objectWithoutProperties"));

  var _defineProperty2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/defineProperty"));

  var _extends2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/extends"));

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass"));

  var _assertThisInitialized2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/assertThisInitialized"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[8], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[9], "@babel/runtime/helpers/getPrototypeOf"));

  var _excluded = ["numColumns", "columnWrapperStyle"];
  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Lists/FlatList.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[10], "react");

  var defaultProps = Object.assign({}, _$$_REQUIRE(_dependencyMap[11], "./VirtualizedList").defaultProps, {
    numColumns: 1,
    removeClippedSubviews: "android" === 'android'
  });

  var FlatList = function (_React$PureComponent) {
    (0, _inherits2.default)(FlatList, _React$PureComponent);

    var _super = _createSuper(FlatList);

    function FlatList(_props) {
      var _this;

      (0, _classCallCheck2.default)(this, FlatList);
      _this = _super.call(this, _props);
      _this._virtualizedListPairs = [];

      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };

      _this._getItem = function (data, index) {
        var numColumns = _this.props.numColumns;

        if (numColumns > 1) {
          var ret = [];

          for (var kk = 0; kk < numColumns; kk++) {
            var _item = data[index * numColumns + kk];

            if (_item != null) {
              ret.push(_item);
            }
          }

          return ret;
        } else {
          return data[index];
        }
      };

      _this._getItemCount = function (data) {
        if (data) {
          var numColumns = _this.props.numColumns;
          return numColumns > 1 ? Math.ceil(data.length / numColumns) : data.length;
        } else {
          return 0;
        }
      };

      _this._keyExtractor = function (items, index) {
        var _this$props = _this.props,
            keyExtractor = _this$props.keyExtractor,
            numColumns = _this$props.numColumns;

        if (numColumns > 1) {
          _$$_REQUIRE(_dependencyMap[12], "invariant")(Array.isArray(items), 'FlatList: Encountered internal consistency error, expected each item to consist of an ' + 'array with 1-%s columns; instead, received a single item.', numColumns);

          return items.map(function (it, kk) {
            return keyExtractor(it, index * numColumns + kk);
          }).join(':');
        } else {
          return keyExtractor(items, index);
        }
      };

      _this._renderer = function () {
        var _this$props2 = _this.props,
            ListItemComponent = _this$props2.ListItemComponent,
            renderItem = _this$props2.renderItem,
            numColumns = _this$props2.numColumns,
            columnWrapperStyle = _this$props2.columnWrapperStyle;
        var virtualizedListRenderKey = ListItemComponent ? 'ListItemComponent' : 'renderItem';

        var renderer = function renderer(props) {
          if (ListItemComponent) {
            return React.createElement(ListItemComponent, (0, _extends2.default)({}, props, {
              __self: (0, _assertThisInitialized2.default)(_this),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 576,
                columnNumber: 16
              }
            }));
          } else if (renderItem) {
            return renderItem(props);
          } else {
            return null;
          }
        };

        return (0, _defineProperty2.default)({}, virtualizedListRenderKey, function (info) {
          if (numColumns > 1) {
            var _item2 = info.item,
                _index = info.index;

            _$$_REQUIRE(_dependencyMap[12], "invariant")(Array.isArray(_item2), 'Expected array of items with numColumns > 1');

            return React.createElement(_$$_REQUIRE(_dependencyMap[13], "../Components/View/View"), {
              style: _$$_REQUIRE(_dependencyMap[14], "../StyleSheet/StyleSheet").compose(styles.row, columnWrapperStyle),
              __self: (0, _assertThisInitialized2.default)(_this),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 596,
                columnNumber: 13
              }
            }, _item2.map(function (it, kk) {
              var element = renderer({
                item: it,
                index: _index * numColumns + kk,
                separators: info.separators
              });
              return element != null ? React.createElement(React.Fragment, {
                key: kk,
                __self: (0, _assertThisInitialized2.default)(_this),
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 608,
                  columnNumber: 19
                }
              }, element) : null;
            }));
          } else {
            return renderer(info);
          }
        });
      };

      _this._checkProps(_this.props);

      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._virtualizedListPairs = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
          return {
            viewabilityConfig: pair.viewabilityConfig,
            onViewableItemsChanged: _this._createOnViewableItemsChanged(pair.onViewableItemsChanged)
          };
        });
      } else if (_this.props.onViewableItemsChanged) {
        _this._virtualizedListPairs.push({
          viewabilityConfig: _this.props.viewabilityConfig,
          onViewableItemsChanged: _this._createOnViewableItemsChanged(_this.props.onViewableItemsChanged)
        });
      }

      return _this;
    }

    (0, _createClass2.default)(FlatList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        if (this._listRef) {
          this._listRef.scrollToEnd(params);
        }
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        if (this._listRef) {
          this._listRef.scrollToIndex(params);
        }
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        if (this._listRef) {
          this._listRef.scrollToItem(params);
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        if (this._listRef) {
          this._listRef.scrollToOffset(params);
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        if (this._listRef) {
          this._listRef.recordInteraction();
        }
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        if (this._listRef) {
          this._listRef.flashScrollIndicators();
        }
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._listRef) {
          return this._listRef.getScrollResponder();
        }
      }
    }, {
      key: "getNativeScrollRef",
      value: function getNativeScrollRef() {
        if (this._listRef) {
          return this._listRef.getScrollRef();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._listRef) {
          return this._listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._listRef) {
          this._listRef.setNativeProps(props);
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        _$$_REQUIRE(_dependencyMap[12], "invariant")(prevProps.numColumns === this.props.numColumns, 'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' + 'changing the number of columns to force a fresh render of the component.');

        _$$_REQUIRE(_dependencyMap[12], "invariant")(prevProps.onViewableItemsChanged === this.props.onViewableItemsChanged, 'Changing onViewableItemsChanged on the fly is not supported');

        _$$_REQUIRE(_dependencyMap[12], "invariant")(!_$$_REQUIRE(_dependencyMap[15], "../Utilities/differ/deepDiffer")(prevProps.viewabilityConfig, this.props.viewabilityConfig), 'Changing viewabilityConfig on the fly is not supported');

        _$$_REQUIRE(_dependencyMap[12], "invariant")(prevProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, 'Changing viewabilityConfigCallbackPairs on the fly is not supported');

        this._checkProps(this.props);
      }
    }, {
      key: "_checkProps",
      value: function _checkProps(props) {
        var getItem = props.getItem,
            getItemCount = props.getItemCount,
            horizontal = props.horizontal,
            numColumns = props.numColumns,
            columnWrapperStyle = props.columnWrapperStyle,
            onViewableItemsChanged = props.onViewableItemsChanged,
            viewabilityConfigCallbackPairs = props.viewabilityConfigCallbackPairs;

        _$$_REQUIRE(_dependencyMap[12], "invariant")(!getItem && !getItemCount, 'FlatList does not support custom data formats.');

        if (numColumns > 1) {
          _$$_REQUIRE(_dependencyMap[12], "invariant")(!horizontal, 'numColumns does not support horizontal.');
        } else {
          _$$_REQUIRE(_dependencyMap[12], "invariant")(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');
        }

        _$$_REQUIRE(_dependencyMap[12], "invariant")(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), 'FlatList does not support setting both onViewableItemsChanged and ' + 'viewabilityConfigCallbackPairs.');
      }
    }, {
      key: "_pushMultiColumnViewable",
      value: function _pushMultiColumnViewable(arr, v) {
        var _this$props3 = this.props,
            numColumns = _this$props3.numColumns,
            keyExtractor = _this$props3.keyExtractor;
        v.item.forEach(function (item, ii) {
          _$$_REQUIRE(_dependencyMap[12], "invariant")(v.index != null, 'Missing index!');

          var index = v.index * numColumns + ii;
          arr.push(Object.assign({}, v, {
            item: item,
            key: keyExtractor(item, index),
            index: index
          }));
        });
      }
    }, {
      key: "_createOnViewableItemsChanged",
      value: function _createOnViewableItemsChanged(onViewableItemsChanged) {
        var _this2 = this;

        return function (info) {
          var numColumns = _this2.props.numColumns;

          if (onViewableItemsChanged) {
            if (numColumns > 1) {
              var changed = [];
              var viewableItems = [];
              info.viewableItems.forEach(function (v) {
                return _this2._pushMultiColumnViewable(viewableItems, v);
              });
              info.changed.forEach(function (v) {
                return _this2._pushMultiColumnViewable(changed, v);
              });
              onViewableItemsChanged({
                viewableItems: viewableItems,
                changed: changed
              });
            } else {
              onViewableItemsChanged(info);
            }
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props4 = this.props,
            numColumns = _this$props4.numColumns,
            columnWrapperStyle = _this$props4.columnWrapperStyle,
            restProps = (0, _objectWithoutProperties2.default)(_this$props4, _excluded);
        return React.createElement(_$$_REQUIRE(_dependencyMap[11], "./VirtualizedList"), (0, _extends2.default)({}, restProps, {
          getItem: this._getItem,
          getItemCount: this._getItemCount,
          keyExtractor: this._keyExtractor,
          ref: this._captureRef,
          viewabilityConfigCallbackPairs: this._virtualizedListPairs
        }, this._renderer(), {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 624,
            columnNumber: 7
          }
        }));
      }
    }]);
    return FlatList;
  }(React.PureComponent);

  FlatList.defaultProps = defaultProps;

  var styles = _$$_REQUIRE(_dependencyMap[14], "../StyleSheet/StyleSheet").create({
    row: {
      flexDirection: 'row'
    }
  });

  module.exports = FlatList;
},294,[3,128,295,53,16,17,34,35,32,31,49,296,6,236,241,204],"node_modules/react-native/Libraries/Lists/FlatList.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
},295,[],"node_modules/@babel/runtime/helpers/defineProperty.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Lists/VirtualizedList.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var _usedIndexForKey = false;
  var _keylessItemComponentName = '';

  var VirtualizedList = function (_React$PureComponent) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(VirtualizedList, _React$PureComponent);

    var _super = _createSuper(VirtualizedList);

    function VirtualizedList(_props, context) {
      var _this;

      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, VirtualizedList);

      _this = _super.call(this, _props, context);

      _this._getScrollMetrics = function () {
        return _this._scrollMetrics;
      };

      _this._getOutermostParentListRef = function () {
        if (_this._isNestedWithSameOrientation()) {
          return _this.context.virtualizedList.getOutermostParentListRef();
        } else {
          return _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/assertThisInitialized")(_this);
        }
      };

      _this._getNestedChildState = function (key) {
        var existingChildData = _this._nestedChildLists.get(key);

        return existingChildData && existingChildData.state;
      };

      _this._registerAsNestedChild = function (childList) {
        var childListsInCell = _this._cellKeysToChildListKeys.get(childList.cellKey) || new Set();
        childListsInCell.add(childList.key);

        _this._cellKeysToChildListKeys.set(childList.cellKey, childListsInCell);

        var existingChildData = _this._nestedChildLists.get(childList.key);

        if (existingChildData && existingChildData.ref !== null) {
          console.error('A VirtualizedList contains a cell which itself contains ' + 'more than one VirtualizedList of the same orientation as the parent ' + 'list. You must pass a unique listKey prop to each sibling list.\n\n' + describeNestedLists(Object.assign({}, childList, {
            horizontal: !!childList.ref.props.horizontal
          })));
        }

        _this._nestedChildLists.set(childList.key, {
          ref: childList.ref,
          state: null
        });

        if (_this._hasInteracted) {
          childList.ref.recordInteraction();
        }
      };

      _this._unregisterAsNestedChild = function (childList) {
        _this._nestedChildLists.set(childList.key, {
          ref: null,
          state: childList.state
        });
      };

      _this._onUpdateSeparators = function (keys, newProps) {
        keys.forEach(function (key) {
          var ref = key != null && _this._cellRefs[key];
          ref && ref.updateSeparatorProps(newProps);
        });
      };

      _this._averageCellLength = 0;
      _this._cellKeysToChildListKeys = new Map();
      _this._cellRefs = {};
      _this._frames = {};
      _this._footerLength = 0;
      _this._hasDoneInitialScroll = false;
      _this._hasInteracted = false;
      _this._hasMore = false;
      _this._hasWarned = {};
      _this._headerLength = 0;
      _this._hiPriInProgress = false;
      _this._highestMeasuredFrameIndex = 0;
      _this._indicesToKeys = new Map();
      _this._nestedChildLists = new Map();
      _this._offsetFromParentVirtualizedList = 0;
      _this._prevParentOffset = 0;
      _this._scrollMetrics = {
        contentLength: 0,
        dOffset: 0,
        dt: 10,
        offset: 0,
        timestamp: 0,
        velocity: 0,
        visibleLength: 0
      };
      _this._scrollRef = null;
      _this._sentEndForContentLength = 0;
      _this._totalCellLength = 0;
      _this._totalCellsMeasured = 0;
      _this._viewabilityTuples = [];

      _this._captureScrollRef = function (ref) {
        _this._scrollRef = ref;
      };

      _this._defaultRenderScrollComponent = function (props) {
        var onRefresh = props.onRefresh;

        if (_this._isNestedWithSameOrientation()) {
          return React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Components/View/View"), _$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/extends")({}, props, {
            __self: _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/assertThisInitialized")(_this),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1299,
              columnNumber: 14
            }
          }));
        } else if (onRefresh) {
          _$$_REQUIRE(_dependencyMap[8], "invariant")(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing) + '`');

          return React.createElement(_$$_REQUIRE(_dependencyMap[9], "../Components/ScrollView/ScrollView"), _$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/extends")({}, props, {
            refreshControl: props.refreshControl == null ? React.createElement(_$$_REQUIRE(_dependencyMap[10], "../Components/RefreshControl/RefreshControl"), {
              refreshing: props.refreshing,
              onRefresh: onRefresh,
              progressViewOffset: props.progressViewOffset,
              __self: _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/assertThisInitialized")(_this),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 1316,
                columnNumber: 15
              }
            }) : props.refreshControl,
            __self: _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/assertThisInitialized")(_this),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1312,
              columnNumber: 9
            }
          }));
        } else {
          return React.createElement(_$$_REQUIRE(_dependencyMap[9], "../Components/ScrollView/ScrollView"), _$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/extends")({}, props, {
            __self: _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/assertThisInitialized")(_this),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1329,
              columnNumber: 14
            }
          }));
        }
      };

      _this._onCellUnmount = function (cellKey) {
        var curr = _this._frames[cellKey];

        if (curr) {
          _this._frames[cellKey] = Object.assign({}, curr, {
            inLayout: false
          });
        }
      };

      _this._onLayout = function (e) {
        if (_this._isNestedWithSameOrientation()) {
          _this.measureLayoutRelativeToContainingList();
        } else {
          _this._scrollMetrics.visibleLength = _this._selectLength(e.nativeEvent.layout);
        }

        _this.props.onLayout && _this.props.onLayout(e);

        _this._scheduleCellsToRenderUpdate();

        _this._maybeCallOnEndReached();
      };

      _this._onLayoutEmpty = function (e) {
        _this.props.onLayout && _this.props.onLayout(e);
      };

      _this._onLayoutFooter = function (e) {
        _this._triggerRemeasureForChildListsInCell(_this._getFooterCellKey());

        _this._footerLength = _this._selectLength(e.nativeEvent.layout);
      };

      _this._onLayoutHeader = function (e) {
        _this._headerLength = _this._selectLength(e.nativeEvent.layout);
      };

      _this._onContentSizeChange = function (width, height) {
        if (width > 0 && height > 0 && _this.props.initialScrollIndex != null && _this.props.initialScrollIndex > 0 && !_this._hasDoneInitialScroll) {
          _this.scrollToIndex({
            animated: false,
            index: _this.props.initialScrollIndex
          });

          _this._hasDoneInitialScroll = true;
        }

        if (_this.props.onContentSizeChange) {
          _this.props.onContentSizeChange(width, height);
        }

        _this._scrollMetrics.contentLength = _this._selectLength({
          height: height,
          width: width
        });

        _this._scheduleCellsToRenderUpdate();

        _this._maybeCallOnEndReached();
      };

      _this._convertParentScrollMetrics = function (metrics) {
        var offset = metrics.offset - _this._offsetFromParentVirtualizedList;
        var visibleLength = metrics.visibleLength;
        var dOffset = offset - _this._scrollMetrics.offset;
        var contentLength = _this._scrollMetrics.contentLength;
        return {
          visibleLength: visibleLength,
          contentLength: contentLength,
          offset: offset,
          dOffset: dOffset
        };
      };

      _this._onScroll = function (e) {
        _this._nestedChildLists.forEach(function (childList) {
          childList.ref && childList.ref._onScroll(e);
        });

        if (_this.props.onScroll) {
          _this.props.onScroll(e);
        }

        var timestamp = e.timeStamp;

        var visibleLength = _this._selectLength(e.nativeEvent.layoutMeasurement);

        var contentLength = _this._selectLength(e.nativeEvent.contentSize);

        var offset = _this._selectOffset(e.nativeEvent.contentOffset);

        var dOffset = offset - _this._scrollMetrics.offset;

        if (_this._isNestedWithSameOrientation()) {
          if (_this._scrollMetrics.contentLength === 0) {
            return;
          }

          var _this$_convertParentS = _this._convertParentScrollMetrics({
            visibleLength: visibleLength,
            offset: offset
          });

          visibleLength = _this$_convertParentS.visibleLength;
          contentLength = _this$_convertParentS.contentLength;
          offset = _this$_convertParentS.offset;
          dOffset = _this$_convertParentS.dOffset;
        }

        var dt = _this._scrollMetrics.timestamp ? Math.max(1, timestamp - _this._scrollMetrics.timestamp) : 1;
        var velocity = dOffset / dt;

        if (dt > 500 && _this._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this._hasWarned.perf) {
          _$$_REQUIRE(_dependencyMap[11], "../Utilities/infoLog")('VirtualizedList: You have a large list that is slow to update - make sure your ' + 'renderItem function renders components that follow React performance best practices ' + 'like PureComponent, shouldComponentUpdate, etc.', {
            dt: dt,
            prevDt: _this._scrollMetrics.dt,
            contentLength: contentLength
          });

          _this._hasWarned.perf = true;
        }

        _this._scrollMetrics = {
          contentLength: contentLength,
          dt: dt,
          dOffset: dOffset,
          offset: offset,
          timestamp: timestamp,
          velocity: velocity,
          visibleLength: visibleLength
        };

        _this._updateViewableItems(_this.props.data);

        if (!_this.props) {
          return;
        }

        _this._maybeCallOnEndReached();

        if (velocity !== 0) {
          _this._fillRateHelper.activate();
        }

        _this._computeBlankness();

        _this._scheduleCellsToRenderUpdate();
      };

      _this._onScrollBeginDrag = function (e) {
        _this._nestedChildLists.forEach(function (childList) {
          childList.ref && childList.ref._onScrollBeginDrag(e);
        });

        _this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.recordInteraction();
        });

        _this._hasInteracted = true;
        _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
      };

      _this._onScrollEndDrag = function (e) {
        var velocity = e.nativeEvent.velocity;

        if (velocity) {
          _this._scrollMetrics.velocity = _this._selectOffset(velocity);
        }

        _this._computeBlankness();

        _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
      };

      _this._onMomentumScrollEnd = function (e) {
        _this._scrollMetrics.velocity = 0;

        _this._computeBlankness();

        _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
      };

      _this._updateCellsToRender = function () {
        var _this$props = _this.props,
            data = _this$props.data,
            getItemCount = _this$props.getItemCount,
            onEndReachedThreshold = _this$props.onEndReachedThreshold;

        var isVirtualizationDisabled = _this._isVirtualizationDisabled();

        _this._updateViewableItems(data);

        if (!data) {
          return;
        }

        _this.setState(function (state) {
          var newState;
          var _this$_scrollMetrics = _this._scrollMetrics,
              contentLength = _this$_scrollMetrics.contentLength,
              offset = _this$_scrollMetrics.offset,
              visibleLength = _this$_scrollMetrics.visibleLength;

          if (!isVirtualizationDisabled) {
            if (visibleLength > 0 && contentLength > 0) {
              if (!_this.props.initialScrollIndex || _this._scrollMetrics.offset) {
                newState = _$$_REQUIRE(_dependencyMap[12], "./VirtualizeUtils").computeWindowedRenderLimits(_this.props, state, _this._getFrameMetricsApprox, _this._scrollMetrics);
              }
            }
          } else {
            var distanceFromEnd = contentLength - visibleLength - offset;
            var renderAhead = distanceFromEnd < onEndReachedThreshold * visibleLength ? _this.props.maxToRenderPerBatch : 0;
            newState = {
              first: 0,
              last: Math.min(state.last + renderAhead, getItemCount(data) - 1)
            };
          }

          if (newState && _this._nestedChildLists.size > 0) {
            var newFirst = newState.first;
            var newLast = newState.last;

            for (var ii = newFirst; ii <= newLast; ii++) {
              var cellKeyForIndex = _this._indicesToKeys.get(ii);

              var childListKeys = cellKeyForIndex && _this._cellKeysToChildListKeys.get(cellKeyForIndex);

              if (!childListKeys) {
                continue;
              }

              var someChildHasMore = false;

              for (var childKey of childListKeys) {
                var childList = _this._nestedChildLists.get(childKey);

                if (childList && childList.ref && childList.ref.hasMore()) {
                  someChildHasMore = true;
                  break;
                }
              }

              if (someChildHasMore) {
                newState.last = ii;
                break;
              }
            }
          }

          if (newState != null && newState.first === state.first && newState.last === state.last) {
            newState = null;
          }

          return newState;
        });
      };

      _this._createViewToken = function (index, isViewable) {
        var _this$props2 = _this.props,
            data = _this$props2.data,
            getItem = _this$props2.getItem,
            keyExtractor = _this$props2.keyExtractor;
        var item = getItem(data, index);
        return {
          index: index,
          item: item,
          key: keyExtractor(item, index),
          isViewable: isViewable
        };
      };

      _this._getFrameMetricsApprox = function (index) {
        var frame = _this._getFrameMetrics(index);

        if (frame && frame.index === index) {
          return frame;
        } else {
          var getItemLayout = _this.props.getItemLayout;

          _$$_REQUIRE(_dependencyMap[8], "invariant")(!getItemLayout, 'Should not have to estimate frames when a measurement metrics function is provided');

          return {
            length: _this._averageCellLength,
            offset: _this._averageCellLength * index
          };
        }
      };

      _this._getFrameMetrics = function (index) {
        var _this$props3 = _this.props,
            data = _this$props3.data,
            getItem = _this$props3.getItem,
            getItemCount = _this$props3.getItemCount,
            getItemLayout = _this$props3.getItemLayout,
            keyExtractor = _this$props3.keyExtractor;

        _$$_REQUIRE(_dependencyMap[8], "invariant")(getItemCount(data) > index, 'Tried to get frame for out of range index ' + index);

        var item = getItem(data, index);

        var frame = item && _this._frames[keyExtractor(item, index)];

        if (!frame || frame.index !== index) {
          if (getItemLayout) {
            frame = getItemLayout(data, index);

            if (__DEV__) {
              var frameType = _$$_REQUIRE(_dependencyMap[13], "prop-types").shape({
                length: _$$_REQUIRE(_dependencyMap[13], "prop-types").number.isRequired,
                offset: _$$_REQUIRE(_dependencyMap[13], "prop-types").number.isRequired,
                index: _$$_REQUIRE(_dependencyMap[13], "prop-types").number.isRequired
              }).isRequired;

              _$$_REQUIRE(_dependencyMap[13], "prop-types").checkPropTypes({
                frame: frameType
              }, {
                frame: frame
              }, 'frame', 'VirtualizedList.getItemLayout');
            }
          }
        }

        return frame;
      };

      _$$_REQUIRE(_dependencyMap[8], "invariant")(!_props.onScroll || !_props.onScroll.__isNative, 'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' + 'to support native onScroll events with useNativeDriver');

      _$$_REQUIRE(_dependencyMap[8], "invariant")(_props.windowSize > 0, 'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.');

      _this._fillRateHelper = new (_$$_REQUIRE(_dependencyMap[14], "./FillRateHelper"))(_this._getFrameMetrics);
      _this._updateCellsToRenderBatcher = new (_$$_REQUIRE(_dependencyMap[15], "../Interaction/Batchinator"))(_this._updateCellsToRender, _this.props.updateCellsBatchingPeriod);

      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._viewabilityTuples = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
          return {
            viewabilityHelper: new (_$$_REQUIRE(_dependencyMap[16], "./ViewabilityHelper"))(pair.viewabilityConfig),
            onViewableItemsChanged: pair.onViewableItemsChanged
          };
        });
      } else if (_this.props.onViewableItemsChanged) {
        _this._viewabilityTuples.push({
          viewabilityHelper: new (_$$_REQUIRE(_dependencyMap[16], "./ViewabilityHelper"))(_this.props.viewabilityConfig),
          onViewableItemsChanged: _this.props.onViewableItemsChanged
        });
      }

      var initialState = {
        first: _this.props.initialScrollIndex || 0,
        last: Math.min(_this.props.getItemCount(_this.props.data), (_this.props.initialScrollIndex || 0) + _this.props.initialNumToRender) - 1
      };

      if (_this._isNestedWithSameOrientation()) {
        var storedState = _this.context.virtualizedList.getNestedChildState(_this._getListKey());

        if (storedState) {
          initialState = storedState;
          _this.state = storedState;
          _this._frames = storedState.frames;
        }
      }

      _this.state = initialState;
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[17], "@babel/runtime/helpers/createClass")(VirtualizedList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        var animated = params ? params.animated : true;
        var veryLast = this.props.getItemCount(this.props.data) - 1;

        var frame = this._getFrameMetricsApprox(veryLast);

        var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);

        if (this._scrollRef == null) {
          return;
        }

        this._scrollRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        var _this$props4 = this.props,
            data = _this$props4.data,
            horizontal = _this$props4.horizontal,
            getItemCount = _this$props4.getItemCount,
            getItemLayout = _this$props4.getItemLayout,
            onScrollToIndexFailed = _this$props4.onScrollToIndexFailed;
        var animated = params.animated,
            index = params.index,
            viewOffset = params.viewOffset,
            viewPosition = params.viewPosition;

        _$$_REQUIRE(_dependencyMap[8], "invariant")(index >= 0 && index < getItemCount(data), "scrollToIndex out of range: requested index " + index + " but maximum is " + (getItemCount(data) - 1));

        if (!getItemLayout && index > this._highestMeasuredFrameIndex) {
          _$$_REQUIRE(_dependencyMap[8], "invariant")(!!onScrollToIndexFailed, 'scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, ' + 'otherwise there is no way to know the location of offscreen indices or handle failures.');

          onScrollToIndexFailed({
            averageItemLength: this._averageCellLength,
            highestMeasuredFrameIndex: this._highestMeasuredFrameIndex,
            index: index
          });
          return;
        }

        var frame = this._getFrameMetricsApprox(index);

        var offset = Math.max(0, frame.offset - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);

        if (this._scrollRef == null) {
          return;
        }

        this._scrollRef.scrollTo(horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        var item = params.item;
        var _this$props5 = this.props,
            data = _this$props5.data,
            getItem = _this$props5.getItem,
            getItemCount = _this$props5.getItemCount;
        var itemCount = getItemCount(data);

        for (var _index = 0; _index < itemCount; _index++) {
          if (getItem(data, _index) === item) {
            this.scrollToIndex(Object.assign({}, params, {
              index: _index
            }));
            break;
          }
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        var animated = params.animated,
            offset = params.offset;

        if (this._scrollRef == null) {
          return;
        }

        this._scrollRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._nestedChildLists.forEach(function (childList) {
          childList.ref && childList.ref.recordInteraction();
        });

        this._viewabilityTuples.forEach(function (t) {
          t.viewabilityHelper.recordInteraction();
        });

        this._updateViewableItems(this.props.data);
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        if (this._scrollRef == null) {
          return;
        }

        this._scrollRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._scrollRef && this._scrollRef.getScrollResponder) {
          return this._scrollRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._scrollRef && this._scrollRef.getScrollableNode) {
          return this._scrollRef.getScrollableNode();
        } else {
          return _$$_REQUIRE(_dependencyMap[18], "../Renderer/shims/ReactNative").findNodeHandle(this._scrollRef);
        }
      }
    }, {
      key: "getScrollRef",
      value: function getScrollRef() {
        if (this._scrollRef && this._scrollRef.getScrollRef) {
          return this._scrollRef.getScrollRef();
        } else {
          return this._scrollRef;
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._scrollRef) {
          this._scrollRef.setNativeProps(props);
        }
      }
    }, {
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedList: {
            getScrollMetrics: this._getScrollMetrics,
            horizontal: this.props.horizontal,
            getOutermostParentListRef: this._getOutermostParentListRef,
            getNestedChildState: this._getNestedChildState,
            registerAsNestedChild: this._registerAsNestedChild,
            unregisterAsNestedChild: this._unregisterAsNestedChild,
            debugInfo: this._getDebugInfo()
          }
        };
      }
    }, {
      key: "_getCellKey",
      value: function _getCellKey() {
        return this.context.virtualizedCell && this.context.virtualizedCell.cellKey || 'rootList';
      }
    }, {
      key: "_getListKey",
      value: function _getListKey() {
        return this.props.listKey || this._getCellKey();
      }
    }, {
      key: "_getDebugInfo",
      value: function _getDebugInfo() {
        return {
          listKey: this._getListKey(),
          cellKey: this._getCellKey(),
          horizontal: !!this.props.horizontal,
          parent: this.context.virtualizedList ? this.context.virtualizedList.debugInfo : null
        };
      }
    }, {
      key: "hasMore",
      value: function hasMore() {
        return this._hasMore;
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this._isNestedWithSameOrientation()) {
          this.context.virtualizedList.registerAsNestedChild({
            cellKey: this._getCellKey(),
            key: this._getListKey(),
            ref: this,
            parentDebugInfo: this.context.virtualizedList.debugInfo
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._isNestedWithSameOrientation()) {
          this.context.virtualizedList.unregisterAsNestedChild({
            key: this._getListKey(),
            state: {
              first: this.state.first,
              last: this.state.last,
              frames: this._frames
            }
          });
        }

        this._updateViewableItems(null);

        this._updateCellsToRenderBatcher.dispose({
          abort: true
        });

        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.dispose();
        });

        this._fillRateHelper.deactivateAndFlush();
      }
    }, {
      key: "_pushCells",
      value: function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
        var _this2 = this;

        var _this$props6 = this.props,
            CellRendererComponent = _this$props6.CellRendererComponent,
            ItemSeparatorComponent = _this$props6.ItemSeparatorComponent,
            data = _this$props6.data,
            getItem = _this$props6.getItem,
            getItemCount = _this$props6.getItemCount,
            horizontal = _this$props6.horizontal,
            keyExtractor = _this$props6.keyExtractor;
        var stickyOffset = this.props.ListHeaderComponent ? 1 : 0;
        var end = getItemCount(data) - 1;
        var prevCellKey;
        last = Math.min(end, last);

        var _loop = function _loop(ii) {
          var item = getItem(data, ii);
          var key = keyExtractor(item, ii);

          _this2._indicesToKeys.set(ii, key);

          if (stickyIndicesFromProps.has(ii + stickyOffset)) {
            stickyHeaderIndices.push(cells.length);
          }

          cells.push(React.createElement(CellRenderer, {
            CellRendererComponent: CellRendererComponent,
            ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
            cellKey: key,
            fillRateHelper: _this2._fillRateHelper,
            horizontal: horizontal,
            index: ii,
            inversionStyle: inversionStyle,
            item: item,
            key: key,
            prevCellKey: prevCellKey,
            onUpdateSeparators: _this2._onUpdateSeparators,
            onLayout: function onLayout(e) {
              return _this2._onCellLayout(e, key, ii);
            },
            onUnmount: _this2._onCellUnmount,
            parentProps: _this2.props,
            ref: function ref(_ref) {
              _this2._cellRefs[key] = _ref;
            },
            __self: _this2,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 900,
              columnNumber: 9
            }
          }));
          prevCellKey = key;
        };

        for (var ii = first; ii <= last; ii++) {
          _loop(ii);
        }
      }
    }, {
      key: "_isVirtualizationDisabled",
      value: function _isVirtualizationDisabled() {
        return this.props.disableVirtualization || false;
      }
    }, {
      key: "_isNestedWithSameOrientation",
      value: function _isNestedWithSameOrientation() {
        var nestedContext = this.context.virtualizedList;
        return !!(nestedContext && !!nestedContext.horizontal === !!this.props.horizontal);
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        if (__DEV__) {
          var flatStyles = _$$_REQUIRE(_dependencyMap[19], "../StyleSheet/flattenStyle")(this.props.contentContainerStyle);

          _$$_REQUIRE(_dependencyMap[20], "fbjs/lib/warning")(flatStyles == null || flatStyles.flexWrap !== 'wrap', '`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' + 'Consider using `numColumns` with `FlatList` instead.');
        }

        var _this$props7 = this.props,
            ListEmptyComponent = _this$props7.ListEmptyComponent,
            ListFooterComponent = _this$props7.ListFooterComponent,
            ListHeaderComponent = _this$props7.ListHeaderComponent;
        var _this$props8 = this.props,
            data = _this$props8.data,
            horizontal = _this$props8.horizontal;

        var isVirtualizationDisabled = this._isVirtualizationDisabled();

        var inversionStyle = this.props.inverted ? this.props.horizontal ? styles.horizontallyInverted : styles.verticallyInverted : null;
        var cells = [];
        var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
        var stickyHeaderIndices = [];

        if (ListHeaderComponent) {
          if (stickyIndicesFromProps.has(0)) {
            stickyHeaderIndices.push(0);
          }

          var element = React.isValidElement(ListHeaderComponent) ? ListHeaderComponent : React.createElement(ListHeaderComponent, {
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 974,
              columnNumber: 9
            }
          });
          cells.push(React.createElement(VirtualizedCellWrapper, {
            cellKey: this._getCellKey() + '-header',
            key: "$header",
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 977,
              columnNumber: 9
            }
          }, React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Components/View/View"), {
            onLayout: this._onLayoutHeader,
            style: _$$_REQUIRE(_dependencyMap[21], "../StyleSheet/StyleSheet").compose(inversionStyle, this.props.ListHeaderComponentStyle),
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 980,
              columnNumber: 11
            }
          }, element)));
        }

        var itemCount = this.props.getItemCount(data);

        if (itemCount > 0) {
          _usedIndexForKey = false;
          _keylessItemComponentName = '';
          var spacerKey = !horizontal ? 'height' : 'width';
          var lastInitialIndex = this.props.initialScrollIndex ? -1 : this.props.initialNumToRender - 1;
          var _this$state = this.state,
              first = _this$state.first,
              last = _this$state.last;

          this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, 0, lastInitialIndex, inversionStyle);

          var firstAfterInitial = Math.max(lastInitialIndex + 1, first);

          if (!isVirtualizationDisabled && first > lastInitialIndex + 1) {
            var insertedStickySpacer = false;

            if (stickyIndicesFromProps.size > 0) {
              var stickyOffset = ListHeaderComponent ? 1 : 0;

              for (var ii = firstAfterInitial - 1; ii > lastInitialIndex; ii--) {
                if (stickyIndicesFromProps.has(ii + stickyOffset)) {
                  var initBlock = this._getFrameMetricsApprox(lastInitialIndex);

                  var stickyBlock = this._getFrameMetricsApprox(ii);

                  var leadSpace = stickyBlock.offset - initBlock.offset - (this.props.initialScrollIndex ? 0 : initBlock.length);
                  cells.push(React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Components/View/View"), {
                    key: "$sticky_lead",
                    style: _$$_REQUIRE(_dependencyMap[22], "@babel/runtime/helpers/defineProperty")({}, spacerKey, leadSpace),
                    __self: this,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 1029,
                      columnNumber: 17
                    }
                  }));

                  this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, ii, ii, inversionStyle);

                  var trailSpace = this._getFrameMetricsApprox(first).offset - (stickyBlock.offset + stickyBlock.length);
                  cells.push(React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Components/View/View"), {
                    key: "$sticky_trail",
                    style: _$$_REQUIRE(_dependencyMap[22], "@babel/runtime/helpers/defineProperty")({}, spacerKey, trailSpace),
                    __self: this,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 1046,
                      columnNumber: 17
                    }
                  }));
                  insertedStickySpacer = true;
                  break;
                }
              }
            }

            if (!insertedStickySpacer) {
              var _initBlock = this._getFrameMetricsApprox(lastInitialIndex);

              var firstSpace = this._getFrameMetricsApprox(first).offset - (_initBlock.offset + _initBlock.length);

              cells.push(React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Components/View/View"), {
                key: "$lead_spacer",
                style: _$$_REQUIRE(_dependencyMap[22], "@babel/runtime/helpers/defineProperty")({}, spacerKey, firstSpace),
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 1062,
                  columnNumber: 13
                }
              }));
            }
          }

          this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, firstAfterInitial, last, inversionStyle);

          if (!this._hasWarned.keys && _usedIndexForKey) {
            console.warn('VirtualizedList: missing keys for items, make sure to specify a key or id property on each ' + 'item or provide a custom keyExtractor.', _keylessItemComponentName);
            this._hasWarned.keys = true;
          }

          if (!isVirtualizationDisabled && last < itemCount - 1) {
            var lastFrame = this._getFrameMetricsApprox(last);

            var end = this.props.getItemLayout ? itemCount - 1 : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);

            var endFrame = this._getFrameMetricsApprox(end);

            var tailSpacerLength = endFrame.offset + endFrame.length - (lastFrame.offset + lastFrame.length);
            cells.push(React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Components/View/View"), {
              key: "$tail_spacer",
              style: _$$_REQUIRE(_dependencyMap[22], "@babel/runtime/helpers/defineProperty")({}, spacerKey, tailSpacerLength),
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 1099,
                columnNumber: 11
              }
            }));
          }
        } else if (ListEmptyComponent) {
          var _element = React.isValidElement(ListEmptyComponent) ? ListEmptyComponent : React.createElement(ListEmptyComponent, {
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1109,
              columnNumber: 9
            }
          });

          cells.push(React.cloneElement(_element, {
            key: '$empty',
            onLayout: function onLayout(event) {
              _this3._onLayoutEmpty(event);

              if (_element.props.onLayout) {
                _element.props.onLayout(event);
              }
            },
            style: _$$_REQUIRE(_dependencyMap[21], "../StyleSheet/StyleSheet").compose(inversionStyle, _element.props.style)
          }));
        }

        if (ListFooterComponent) {
          var _element2 = React.isValidElement(ListFooterComponent) ? ListFooterComponent : React.createElement(ListFooterComponent, {
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1132,
              columnNumber: 9
            }
          });

          cells.push(React.createElement(VirtualizedCellWrapper, {
            cellKey: this._getFooterCellKey(),
            key: "$footer",
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1135,
              columnNumber: 9
            }
          }, React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Components/View/View"), {
            onLayout: this._onLayoutFooter,
            style: _$$_REQUIRE(_dependencyMap[21], "../StyleSheet/StyleSheet").compose(inversionStyle, this.props.ListFooterComponentStyle),
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1138,
              columnNumber: 11
            }
          }, _element2)));
        }

        var scrollProps = Object.assign({}, this.props, {
          onContentSizeChange: this._onContentSizeChange,
          onLayout: this._onLayout,
          onScroll: this._onScroll,
          onScrollBeginDrag: this._onScrollBeginDrag,
          onScrollEndDrag: this._onScrollEndDrag,
          onMomentumScrollEnd: this._onMomentumScrollEnd,
          scrollEventThrottle: this.props.scrollEventThrottle,
          invertStickyHeaders: this.props.invertStickyHeaders !== undefined ? this.props.invertStickyHeaders : this.props.inverted,
          stickyHeaderIndices: stickyHeaderIndices,
          style: inversionStyle ? [inversionStyle, this.props.style] : this.props.style
        });
        this._hasMore = this.state.last < this.props.getItemCount(this.props.data) - 1;
        var innerRet = React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
          ref: this._captureScrollRef
        }, cells);
        var ret = innerRet;

        if (__DEV__) {
          ret = React.createElement(_$$_REQUIRE(_dependencyMap[9], "../Components/ScrollView/ScrollView").Context.Consumer, {
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1186,
              columnNumber: 9
            }
          }, function (scrollContext) {
            if (scrollContext != null && !scrollContext.horizontal === !_this3.props.horizontal && !_this3._hasWarned.nesting && _this3.context.virtualizedList == null) {
              console.warn('VirtualizedLists should never be nested inside plain ScrollViews with the same ' + 'orientation - use another VirtualizedList-backed container instead.');
              _this3._hasWarned.nesting = true;
            }

            return innerRet;
          });
        }

        if (this.props.debug) {
          return React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Components/View/View"), {
            style: styles.debug,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1208,
              columnNumber: 9
            }
          }, ret, this._renderDebugOverlay());
        } else {
          return ret;
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this$props9 = this.props,
            data = _this$props9.data,
            extraData = _this$props9.extraData;

        if (data !== prevProps.data || extraData !== prevProps.extraData) {
          this._viewabilityTuples.forEach(function (tuple) {
            tuple.viewabilityHelper.resetViewableIndices();
          });
        }

        var hiPriInProgress = this._hiPriInProgress;

        this._scheduleCellsToRenderUpdate();

        if (hiPriInProgress) {
          this._hiPriInProgress = false;
        }
      }
    }, {
      key: "_computeBlankness",
      value: function _computeBlankness() {
        this._fillRateHelper.computeBlankness(this.props, this.state, this._scrollMetrics);
      }
    }, {
      key: "_onCellLayout",
      value: function _onCellLayout(e, cellKey, index) {
        var layout = e.nativeEvent.layout;
        var next = {
          offset: this._selectOffset(layout),
          length: this._selectLength(layout),
          index: index,
          inLayout: true
        };
        var curr = this._frames[cellKey];

        if (!curr || next.offset !== curr.offset || next.length !== curr.length || index !== curr.index) {
          this._totalCellLength += next.length - (curr ? curr.length : 0);
          this._totalCellsMeasured += curr ? 0 : 1;
          this._averageCellLength = this._totalCellLength / this._totalCellsMeasured;
          this._frames[cellKey] = next;
          this._highestMeasuredFrameIndex = Math.max(this._highestMeasuredFrameIndex, index);

          this._scheduleCellsToRenderUpdate();
        } else {
          this._frames[cellKey].inLayout = true;
        }

        this._triggerRemeasureForChildListsInCell(cellKey);

        this._computeBlankness();

        this._updateViewableItems(this.props.data);
      }
    }, {
      key: "_triggerRemeasureForChildListsInCell",
      value: function _triggerRemeasureForChildListsInCell(cellKey) {
        var childListKeys = this._cellKeysToChildListKeys.get(cellKey);

        if (childListKeys) {
          for (var childKey of childListKeys) {
            var childList = this._nestedChildLists.get(childKey);

            childList && childList.ref && childList.ref.measureLayoutRelativeToContainingList();
          }
        }
      }
    }, {
      key: "measureLayoutRelativeToContainingList",
      value: function measureLayoutRelativeToContainingList() {
        var _this4 = this;

        try {
          if (!this._scrollRef) {
            return;
          }

          this._scrollRef.measureLayout(this.context.virtualizedList.getOutermostParentListRef().getScrollRef(), function (x, y, width, height) {
            _this4._offsetFromParentVirtualizedList = _this4._selectOffset({
              x: x,
              y: y
            });
            _this4._scrollMetrics.contentLength = _this4._selectLength({
              width: width,
              height: height
            });

            var scrollMetrics = _this4._convertParentScrollMetrics(_this4.context.virtualizedList.getScrollMetrics());

            _this4._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
            _this4._scrollMetrics.offset = scrollMetrics.offset;
          }, function (error) {
            console.warn("VirtualizedList: Encountered an error while measuring a list's" + ' offset from its containing VirtualizedList.');
          });
        } catch (error) {
          console.warn('measureLayoutRelativeToContainingList threw an error', error.stack);
        }
      }
    }, {
      key: "_getFooterCellKey",
      value: function _getFooterCellKey() {
        return this._getCellKey() + '-footer';
      }
    }, {
      key: "_renderDebugOverlay",
      value: function _renderDebugOverlay() {
        var _this5 = this;

        var normalize = this._scrollMetrics.visibleLength / (this._scrollMetrics.contentLength || 1);
        var framesInLayout = [];
        var itemCount = this.props.getItemCount(this.props.data);

        for (var ii = 0; ii < itemCount; ii++) {
          var frame = this._getFrameMetricsApprox(ii);

          if (frame.inLayout) {
            framesInLayout.push(frame);
          }
        }

        var windowTop = this._getFrameMetricsApprox(this.state.first).offset;

        var frameLast = this._getFrameMetricsApprox(this.state.last);

        var windowLen = frameLast.offset + frameLast.length - windowTop;
        var visTop = this._scrollMetrics.offset;
        var visLen = this._scrollMetrics.visibleLength;
        return React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Components/View/View"), {
          style: [styles.debugOverlayBase, styles.debugOverlay],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 1479,
            columnNumber: 7
          }
        }, framesInLayout.map(function (f, ii) {
          return React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Components/View/View"), {
            key: 'f' + ii,
            style: [styles.debugOverlayBase, styles.debugOverlayFrame, {
              top: f.offset * normalize,
              height: f.length * normalize
            }],
            __self: _this5,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1481,
              columnNumber: 11
            }
          });
        }), React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Components/View/View"), {
          style: [styles.debugOverlayBase, styles.debugOverlayFrameLast, {
            top: windowTop * normalize,
            height: windowLen * normalize
          }],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 1493,
            columnNumber: 9
          }
        }), React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Components/View/View"), {
          style: [styles.debugOverlayBase, styles.debugOverlayFrameVis, {
            top: visTop * normalize,
            height: visLen * normalize
          }],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 1503,
            columnNumber: 9
          }
        }));
      }
    }, {
      key: "_selectLength",
      value: function _selectLength(metrics) {
        return !this.props.horizontal ? metrics.height : metrics.width;
      }
    }, {
      key: "_selectOffset",
      value: function _selectOffset(metrics) {
        return !this.props.horizontal ? metrics.y : metrics.x;
      }
    }, {
      key: "_maybeCallOnEndReached",
      value: function _maybeCallOnEndReached() {
        var _this$props10 = this.props,
            data = _this$props10.data,
            getItemCount = _this$props10.getItemCount,
            onEndReached = _this$props10.onEndReached,
            onEndReachedThreshold = _this$props10.onEndReachedThreshold;
        var _this$_scrollMetrics2 = this._scrollMetrics,
            contentLength = _this$_scrollMetrics2.contentLength,
            visibleLength = _this$_scrollMetrics2.visibleLength,
            offset = _this$_scrollMetrics2.offset;
        var distanceFromEnd = contentLength - visibleLength - offset;
        var threshold = onEndReachedThreshold ? onEndReachedThreshold * visibleLength : 0;

        if (onEndReached && this.state.last === getItemCount(data) - 1 && distanceFromEnd < threshold && this._scrollMetrics.contentLength !== this._sentEndForContentLength) {
          this._sentEndForContentLength = this._scrollMetrics.contentLength;
          onEndReached({
            distanceFromEnd: distanceFromEnd
          });
        } else if (distanceFromEnd > threshold) {
          this._sentEndForContentLength = 0;
        }
      }
    }, {
      key: "_scheduleCellsToRenderUpdate",
      value: function _scheduleCellsToRenderUpdate() {
        var _this$state2 = this.state,
            first = _this$state2.first,
            last = _this$state2.last;
        var _this$_scrollMetrics3 = this._scrollMetrics,
            offset = _this$_scrollMetrics3.offset,
            visibleLength = _this$_scrollMetrics3.visibleLength,
            velocity = _this$_scrollMetrics3.velocity;
        var itemCount = this.props.getItemCount(this.props.data);
        var hiPri = false;
        var scrollingThreshold = this.props.onEndReachedThreshold * visibleLength / 2;

        if (first > 0) {
          var distTop = offset - this._getFrameMetricsApprox(first).offset;

          hiPri = hiPri || distTop < 0 || velocity < -2 && distTop < scrollingThreshold;
        }

        if (last < itemCount - 1) {
          var distBottom = this._getFrameMetricsApprox(last).offset - (offset + visibleLength);
          hiPri = hiPri || distBottom < 0 || velocity > 2 && distBottom < scrollingThreshold;
        }

        if (hiPri && (this._averageCellLength || this.props.getItemLayout) && !this._hiPriInProgress) {
          this._hiPriInProgress = true;

          this._updateCellsToRenderBatcher.dispose({
            abort: true
          });

          this._updateCellsToRender();

          return;
        } else {
          this._updateCellsToRenderBatcher.schedule();
        }
      }
    }, {
      key: "_updateViewableItems",
      value: function _updateViewableItems(data) {
        var _this6 = this;

        var getItemCount = this.props.getItemCount;

        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.onUpdate(getItemCount(data), _this6._scrollMetrics.offset, _this6._scrollMetrics.visibleLength, _this6._getFrameMetrics, _this6._createViewToken, tuple.onViewableItemsChanged, _this6.state);
        });
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(newProps, prevState) {
        var data = newProps.data,
            getItemCount = newProps.getItemCount,
            maxToRenderPerBatch = newProps.maxToRenderPerBatch;
        return {
          first: Math.max(0, Math.min(prevState.first, getItemCount(data) - 1 - maxToRenderPerBatch)),
          last: Math.max(0, Math.min(prevState.last, getItemCount(data) - 1))
        };
      }
    }]);

    return VirtualizedList;
  }(React.PureComponent);

  VirtualizedList.defaultProps = {
    disableVirtualization: false,
    horizontal: false,
    initialNumToRender: 10,
    keyExtractor: function keyExtractor(item, index) {
      if (item.key != null) {
        return item.key;
      }

      if (item.id != null) {
        return item.id;
      }

      _usedIndexForKey = true;

      if (item.type && item.type.displayName) {
        _keylessItemComponentName = item.type.displayName;
      }

      return String(index);
    },
    maxToRenderPerBatch: 10,
    onEndReachedThreshold: 2,
    scrollEventThrottle: 50,
    updateCellsBatchingPeriod: 50,
    windowSize: 21
  };
  VirtualizedList.contextTypes = {
    virtualizedCell: _$$_REQUIRE(_dependencyMap[13], "prop-types").shape({
      cellKey: _$$_REQUIRE(_dependencyMap[13], "prop-types").string
    }),
    virtualizedList: _$$_REQUIRE(_dependencyMap[13], "prop-types").shape({
      getScrollMetrics: _$$_REQUIRE(_dependencyMap[13], "prop-types").func,
      horizontal: _$$_REQUIRE(_dependencyMap[13], "prop-types").bool,
      getOutermostParentListRef: _$$_REQUIRE(_dependencyMap[13], "prop-types").func,
      getNestedChildState: _$$_REQUIRE(_dependencyMap[13], "prop-types").func,
      registerAsNestedChild: _$$_REQUIRE(_dependencyMap[13], "prop-types").func,
      unregisterAsNestedChild: _$$_REQUIRE(_dependencyMap[13], "prop-types").func,
      debugInfo: _$$_REQUIRE(_dependencyMap[13], "prop-types").shape({
        listKey: _$$_REQUIRE(_dependencyMap[13], "prop-types").string,
        cellKey: _$$_REQUIRE(_dependencyMap[13], "prop-types").string
      })
    })
  };
  VirtualizedList.childContextTypes = {
    virtualizedList: _$$_REQUIRE(_dependencyMap[13], "prop-types").shape({
      getScrollMetrics: _$$_REQUIRE(_dependencyMap[13], "prop-types").func,
      horizontal: _$$_REQUIRE(_dependencyMap[13], "prop-types").bool,
      getOutermostParentListRef: _$$_REQUIRE(_dependencyMap[13], "prop-types").func,
      getNestedChildState: _$$_REQUIRE(_dependencyMap[13], "prop-types").func,
      registerAsNestedChild: _$$_REQUIRE(_dependencyMap[13], "prop-types").func,
      unregisterAsNestedChild: _$$_REQUIRE(_dependencyMap[13], "prop-types").func
    })
  };

  var CellRenderer = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(CellRenderer, _React$Component);

    var _super2 = _createSuper(CellRenderer);

    function CellRenderer() {
      var _this7;

      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, CellRenderer);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this7 = _super2.call.apply(_super2, [this].concat(args));
      _this7.state = {
        separatorProps: {
          highlighted: false,
          leadingItem: _this7.props.item
        }
      };
      _this7._separators = {
        highlight: function highlight() {
          var _this7$props = _this7.props,
              cellKey = _this7$props.cellKey,
              prevCellKey = _this7$props.prevCellKey;

          _this7.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: true
          });
        },
        unhighlight: function unhighlight() {
          var _this7$props2 = _this7.props,
              cellKey = _this7$props2.cellKey,
              prevCellKey = _this7$props2.prevCellKey;

          _this7.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: false
          });
        },
        updateProps: function updateProps(select, newProps) {
          var _this7$props3 = _this7.props,
              cellKey = _this7$props3.cellKey,
              prevCellKey = _this7$props3.prevCellKey;

          _this7.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);
        }
      };
      return _this7;
    }

    _$$_REQUIRE(_dependencyMap[17], "@babel/runtime/helpers/createClass")(CellRenderer, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedCell: {
            cellKey: this.props.cellKey
          }
        };
      }
    }, {
      key: "updateSeparatorProps",
      value: function updateSeparatorProps(newProps) {
        this.setState(function (state) {
          return {
            separatorProps: Object.assign({}, state.separatorProps, newProps)
          };
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.props.onUnmount(this.props.cellKey);
      }
    }, {
      key: "_renderElement",
      value: function _renderElement(renderItem, ListItemComponent, item, index) {
        if (renderItem && ListItemComponent) {
          console.warn('VirtualizedList: Both ListItemComponent and renderItem props are present. ListItemComponent will take' + ' precedence over renderItem.');
        }

        if (ListItemComponent) {
          return React.createElement(ListItemComponent, {
            item: item,
            index: index,
            separators: this._separators
          });
        }

        if (renderItem) {
          return renderItem({
            item: item,
            index: index,
            separators: this._separators
          });
        }

        _$$_REQUIRE(_dependencyMap[8], "invariant")(false, 'VirtualizedList: Either ListItemComponent or renderItem props are required but none were found.');
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props11 = this.props,
            CellRendererComponent = _this$props11.CellRendererComponent,
            ItemSeparatorComponent = _this$props11.ItemSeparatorComponent,
            fillRateHelper = _this$props11.fillRateHelper,
            horizontal = _this$props11.horizontal,
            item = _this$props11.item,
            index = _this$props11.index,
            inversionStyle = _this$props11.inversionStyle,
            parentProps = _this$props11.parentProps;
        var renderItem = parentProps.renderItem,
            getItemLayout = parentProps.getItemLayout,
            ListItemComponent = parentProps.ListItemComponent;

        var element = this._renderElement(renderItem, ListItemComponent, item, index);

        var onLayout = getItemLayout && !parentProps.debug && !fillRateHelper.enabled() ? undefined : this.props.onLayout;
        var itemSeparator = ItemSeparatorComponent && React.createElement(ItemSeparatorComponent, _$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/extends")({}, this.state.separatorProps, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 2106,
            columnNumber: 7
          }
        }));
        var cellStyle = inversionStyle ? horizontal ? [styles.rowReverse, inversionStyle] : [styles.columnReverse, inversionStyle] : horizontal ? [styles.row, inversionStyle] : inversionStyle;

        if (!CellRendererComponent) {
          return React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Components/View/View"), {
            style: cellStyle,
            onLayout: onLayout,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 2120,
              columnNumber: 9
            }
          }, element, itemSeparator);
        }

        return React.createElement(CellRendererComponent, _$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/extends")({}, this.props, {
          style: cellStyle,
          onLayout: onLayout,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 2127,
            columnNumber: 7
          }
        }), element, itemSeparator);
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, prevState) {
        return {
          separatorProps: Object.assign({}, prevState.separatorProps, {
            leadingItem: props.item
          })
        };
      }
    }]);

    return CellRenderer;
  }(React.Component);

  CellRenderer.childContextTypes = {
    virtualizedCell: _$$_REQUIRE(_dependencyMap[13], "prop-types").shape({
      cellKey: _$$_REQUIRE(_dependencyMap[13], "prop-types").string
    })
  };

  var VirtualizedCellWrapper = function (_React$Component2) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(VirtualizedCellWrapper, _React$Component2);

    var _super3 = _createSuper(VirtualizedCellWrapper);

    function VirtualizedCellWrapper() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, VirtualizedCellWrapper);

      return _super3.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[17], "@babel/runtime/helpers/createClass")(VirtualizedCellWrapper, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedCell: {
            cellKey: this.props.cellKey
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.children;
      }
    }]);

    return VirtualizedCellWrapper;
  }(React.Component);

  VirtualizedCellWrapper.childContextTypes = {
    virtualizedCell: _$$_REQUIRE(_dependencyMap[13], "prop-types").shape({
      cellKey: _$$_REQUIRE(_dependencyMap[13], "prop-types").string
    })
  };

  function describeNestedLists(childList) {
    var trace = 'VirtualizedList trace:\n' + ("  Child (" + (childList.horizontal ? 'horizontal' : 'vertical') + "):\n") + ("    listKey: " + childList.key + "\n") + ("    cellKey: " + childList.cellKey);
    var debugInfo = childList.parentDebugInfo;

    while (debugInfo) {
      trace += "\n  Parent (" + (debugInfo.horizontal ? 'horizontal' : 'vertical') + "):\n" + ("    listKey: " + debugInfo.listKey + "\n") + ("    cellKey: " + debugInfo.cellKey);
      debugInfo = debugInfo.parent;
    }

    return trace;
  }

  var styles = _$$_REQUIRE(_dependencyMap[21], "../StyleSheet/StyleSheet").create({
    verticallyInverted: {
      transform: [{
        scaleY: -1
      }]
    },
    horizontallyInverted: {
      transform: [{
        scaleX: -1
      }]
    },
    row: {
      flexDirection: 'row'
    },
    rowReverse: {
      flexDirection: 'row-reverse'
    },
    columnReverse: {
      flexDirection: 'column-reverse'
    },
    debug: {
      flex: 1
    },
    debugOverlayBase: {
      position: 'absolute',
      top: 0,
      right: 0
    },
    debugOverlay: {
      bottom: 0,
      width: 20,
      borderColor: 'blue',
      borderWidth: 1
    },
    debugOverlayFrame: {
      left: 0,
      backgroundColor: 'orange'
    },
    debugOverlayFrameLast: {
      left: 0,
      borderColor: 'green',
      borderWidth: 2
    },
    debugOverlayFrameVis: {
      left: 0,
      borderColor: 'red',
      borderWidth: 2
    }
  });

  module.exports = VirtualizedList;
},296,[31,32,49,35,16,34,236,53,6,297,314,120,317,210,318,319,320,17,85,184,19,241,295],"node_modules/react-native/Libraries/Lists/VirtualizedList.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/extends"));

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/createClass"));

  var _assertThisInitialized2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/assertThisInitialized"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/getPrototypeOf"));

  var _ScrollViewNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[8], "./ScrollViewNativeComponent"));

  var _ScrollContentViewNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[9], "./ScrollContentViewNativeComponent"));

  var _AndroidHorizontalScrollViewNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[10], "./AndroidHorizontalScrollViewNativeComponent"));

  var _AndroidHorizontalScrollContentViewNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[11], "./AndroidHorizontalScrollContentViewNativeComponent"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[12], "react");

  _$$_REQUIRE(_dependencyMap[13], "../../Renderer/shims/ReactNative");

  var AndroidScrollView;
  var AndroidHorizontalScrollContentView;
  var AndroidHorizontalScrollView;
  var RCTScrollView;
  var RCTScrollContentView;

  if ("android" === 'android') {
    AndroidScrollView = _ScrollViewNativeComponent.default;
    AndroidHorizontalScrollView = _AndroidHorizontalScrollViewNativeComponent.default;
    AndroidHorizontalScrollContentView = _AndroidHorizontalScrollContentViewNativeComponent.default;
  } else {
    RCTScrollView = _ScrollViewNativeComponent.default;
    RCTScrollContentView = _ScrollContentViewNativeComponent.default;
  }

  function createScrollResponder(node) {
    var scrollResponder = Object.assign({}, _$$_REQUIRE(_dependencyMap[14], "../ScrollResponder").Mixin);

    for (var key in scrollResponder) {
      if (typeof scrollResponder[key] === 'function') {
        scrollResponder[key] = scrollResponder[key].bind(node);
      }
    }

    return scrollResponder;
  }

  var Context = React.createContext(null);
  var standardHorizontalContext = Object.freeze({
    horizontal: true
  });
  var standardVerticalContext = Object.freeze({
    horizontal: false
  });

  var ScrollView = function (_React$Component) {
    (0, _inherits2.default)(ScrollView, _React$Component);

    var _super = _createSuper(ScrollView);

    function ScrollView(props) {
      var _this;

      (0, _classCallCheck2.default)(this, ScrollView);
      _this = _super.call(this, props);
      _this._scrollResponder = createScrollResponder((0, _assertThisInitialized2.default)(_this));
      _this._scrollAnimatedValue = new (_$$_REQUIRE(_dependencyMap[15], "../../Animated/src/AnimatedImplementation").Value)(0);
      _this._scrollAnimatedValueAttachment = null;
      _this._stickyHeaderRefs = new Map();
      _this._headerLayoutYs = new Map();
      _this.state = Object.assign({
        layoutHeight: null
      }, _$$_REQUIRE(_dependencyMap[14], "../ScrollResponder").Mixin.scrollResponderMixinGetInitialState());
      _this._setNativeRef = _$$_REQUIRE(_dependencyMap[16], "../../Utilities/setAndForwardRef")({
        getForwardedRef: function getForwardedRef() {
          return _this.props.scrollViewRef;
        },
        setLocalRef: function setLocalRef(ref) {
          _this._scrollViewRef = ref;

          if (ref) {
            ref.getScrollResponder = _this.getScrollResponder;
            ref.getScrollableNode = _this.getScrollableNode;
            ref.getInnerViewNode = _this.getInnerViewNode;
            ref.getInnerViewRef = _this.getInnerViewRef;
            ref.getNativeScrollRef = _this.getNativeScrollRef;
            ref.scrollTo = _this.scrollTo;
            ref.scrollToEnd = _this.scrollToEnd;
            ref.flashScrollIndicators = _this.flashScrollIndicators;
            ref.scrollResponderZoomTo = _this.scrollResponderZoomTo;
            ref.scrollResponderScrollNativeHandleToKeyboard = _this.scrollResponderScrollNativeHandleToKeyboard;
          }
        }
      });

      _this.getScrollResponder = function () {
        return (0, _assertThisInitialized2.default)(_this);
      };

      _this.getScrollableNode = function () {
        return _$$_REQUIRE(_dependencyMap[13], "../../Renderer/shims/ReactNative").findNodeHandle(_this._scrollViewRef);
      };

      _this.getNativeScrollRef = function () {
        return _this._scrollViewRef;
      };

      _this.scrollTo = function (options, deprecatedX, deprecatedAnimated) {
        var x, y, animated;

        if (typeof options === 'number') {
          console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' + 'animated: true})` instead.');
          y = options;
          x = deprecatedX;
          animated = deprecatedAnimated;
        } else if (options) {
          y = options.y;
          x = options.x;
          animated = options.animated;
        }

        _this._scrollResponder.scrollResponderScrollTo({
          x: x || 0,
          y: y || 0,
          animated: animated !== false
        });
      };

      _this.scrollToEnd = function (options) {
        var animated = (options && options.animated) !== false;

        _this._scrollResponder.scrollResponderScrollToEnd({
          animated: animated
        });
      };

      _this.flashScrollIndicators = function () {
        _this._scrollResponder.scrollResponderFlashScrollIndicators();
      };

      _this._handleScroll = function (e) {
        if (__DEV__) {
          if (_this.props.onScroll && _this.props.scrollEventThrottle == null && "android" === 'ios') {
            console.log('You specified `onScroll` on a <ScrollView> but not ' + '`scrollEventThrottle`. You will only receive one event. ' + 'Using `16` you get all the events but be aware that it may ' + "cause frame drops, use a bigger number if you don't need as " + 'much precision.');
          }
        }

        if ("android" === 'android') {
          if (_this.props.keyboardDismissMode === 'on-drag' && _this.state.isTouching) {
            _$$_REQUIRE(_dependencyMap[17], "../../Utilities/dismissKeyboard")();
          }
        }

        _this._scrollResponder.scrollResponderHandleScroll(e);
      };

      _this._handleLayout = function (e) {
        if (_this.props.invertStickyHeaders === true) {
          _this.setState({
            layoutHeight: e.nativeEvent.layout.height
          });
        }

        if (_this.props.onLayout) {
          _this.props.onLayout(e);
        }
      };

      _this._handleContentOnLayout = function (e) {
        var _e$nativeEvent$layout = e.nativeEvent.layout,
            width = _e$nativeEvent$layout.width,
            height = _e$nativeEvent$layout.height;
        _this.props.onContentSizeChange && _this.props.onContentSizeChange(width, height);
      };

      _this._scrollViewRef = null;
      _this._innerViewRef = null;
      _this._setInnerViewRef = _$$_REQUIRE(_dependencyMap[16], "../../Utilities/setAndForwardRef")({
        getForwardedRef: function getForwardedRef() {
          return _this.props.innerViewRef;
        },
        setLocalRef: function setLocalRef(ref) {
          _this._innerViewRef = ref;
        }
      });

      for (var key in _$$_REQUIRE(_dependencyMap[14], "../ScrollResponder").Mixin) {
        if (typeof _$$_REQUIRE(_dependencyMap[14], "../ScrollResponder").Mixin[key] === 'function' && key.startsWith('scrollResponder')) {
          (0, _assertThisInitialized2.default)(_this)[key] = _$$_REQUIRE(_dependencyMap[14], "../ScrollResponder").Mixin[key].bind((0, _assertThisInitialized2.default)(_this));
        }
      }

      Object.keys(_$$_REQUIRE(_dependencyMap[14], "../ScrollResponder").Mixin).filter(function (key) {
        return typeof _$$_REQUIRE(_dependencyMap[14], "../ScrollResponder").Mixin[key] !== 'function';
      }).forEach(function (key) {
        (0, _assertThisInitialized2.default)(_this)[key] = _$$_REQUIRE(_dependencyMap[14], "../ScrollResponder").Mixin[key];
      });
      return _this;
    }

    (0, _createClass2.default)(ScrollView, [{
      key: "UNSAFE_componentWillMount",
      value: function UNSAFE_componentWillMount() {
        var _this$props$contentOf, _this$props$contentOf2, _this$props$contentIn, _this$props$contentIn2;

        this._scrollResponder.UNSAFE_componentWillMount();

        this._scrollAnimatedValue = new (_$$_REQUIRE(_dependencyMap[15], "../../Animated/src/AnimatedImplementation").Value)((_this$props$contentOf = (_this$props$contentOf2 = this.props.contentOffset) == null ? void 0 : _this$props$contentOf2.y) != null ? _this$props$contentOf : 0);

        this._scrollAnimatedValue.setOffset((_this$props$contentIn = (_this$props$contentIn2 = this.props.contentInset) == null ? void 0 : _this$props$contentIn2.top) != null ? _this$props$contentIn : 0);

        this._stickyHeaderRefs = new Map();
        this._headerLayoutYs = new Map();
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        var currentContentInsetTop = this.props.contentInset ? this.props.contentInset.top : 0;
        var nextContentInsetTop = nextProps.contentInset ? nextProps.contentInset.top : 0;

        if (currentContentInsetTop !== nextContentInsetTop) {
          this._scrollAnimatedValue.setOffset(nextContentInsetTop || 0);
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._updateAnimatedNodeAttachment();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this._updateAnimatedNodeAttachment();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._scrollResponder.componentWillUnmount();

        if (this._scrollAnimatedValueAttachment) {
          this._scrollAnimatedValueAttachment.detach();
        }
      }
    }, {
      key: "getInnerViewNode",
      value: function getInnerViewNode() {
        return _$$_REQUIRE(_dependencyMap[13], "../../Renderer/shims/ReactNative").findNodeHandle(this._innerViewRef);
      }
    }, {
      key: "getInnerViewRef",
      value: function getInnerViewRef() {
        return this._innerViewRef;
      }
    }, {
      key: "_getKeyForIndex",
      value: function _getKeyForIndex(index, childArray) {
        var child = childArray[index];
        return child && child.key;
      }
    }, {
      key: "_updateAnimatedNodeAttachment",
      value: function _updateAnimatedNodeAttachment() {
        if (this._scrollAnimatedValueAttachment) {
          this._scrollAnimatedValueAttachment.detach();
        }

        if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {
          this._scrollAnimatedValueAttachment = _$$_REQUIRE(_dependencyMap[15], "../../Animated/src/AnimatedImplementation").attachNativeEvent(this._scrollViewRef, 'onScroll', [{
            nativeEvent: {
              contentOffset: {
                y: this._scrollAnimatedValue
              }
            }
          }]);
        }
      }
    }, {
      key: "_setStickyHeaderRef",
      value: function _setStickyHeaderRef(key, ref) {
        if (ref) {
          this._stickyHeaderRefs.set(key, ref);
        } else {
          this._stickyHeaderRefs.delete(key);
        }
      }
    }, {
      key: "_onStickyHeaderLayout",
      value: function _onStickyHeaderLayout(index, event, key) {
        var stickyHeaderIndices = this.props.stickyHeaderIndices;

        if (!stickyHeaderIndices) {
          return;
        }

        var childArray = React.Children.toArray(this.props.children);

        if (key !== this._getKeyForIndex(index, childArray)) {
          return;
        }

        var layoutY = event.nativeEvent.layout.y;

        this._headerLayoutYs.set(key, layoutY);

        var indexOfIndex = stickyHeaderIndices.indexOf(index);
        var previousHeaderIndex = stickyHeaderIndices[indexOfIndex - 1];

        if (previousHeaderIndex != null) {
          var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));

          previousHeader && previousHeader.setNextHeaderY && previousHeader.setNextHeaderY(layoutY);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var ScrollViewClass;
        var ScrollContentContainerViewClass;

        if ("android" === 'android') {
          if (this.props.horizontal === true) {
            ScrollViewClass = AndroidHorizontalScrollView;
            ScrollContentContainerViewClass = AndroidHorizontalScrollContentView;
          } else {
            ScrollViewClass = AndroidScrollView;
            ScrollContentContainerViewClass = _$$_REQUIRE(_dependencyMap[18], "../View/View");
          }
        } else {
          ScrollViewClass = RCTScrollView;
          ScrollContentContainerViewClass = RCTScrollContentView;
        }

        _$$_REQUIRE(_dependencyMap[19], "invariant")(ScrollViewClass !== undefined, 'ScrollViewClass must not be undefined');

        _$$_REQUIRE(_dependencyMap[19], "invariant")(ScrollContentContainerViewClass !== undefined, 'ScrollContentContainerViewClass must not be undefined');

        var contentContainerStyle = [this.props.horizontal === true && styles.contentContainerHorizontal, this.props.contentContainerStyle];

        if (__DEV__ && this.props.style !== undefined) {
          var style = _$$_REQUIRE(_dependencyMap[20], "../../StyleSheet/flattenStyle")(this.props.style);

          var childLayoutProps = ['alignItems', 'justifyContent'].filter(function (prop) {
            return style && style[prop] !== undefined;
          });

          _$$_REQUIRE(_dependencyMap[19], "invariant")(childLayoutProps.length === 0, 'ScrollView child layout (' + JSON.stringify(childLayoutProps) + ') must be applied through the contentContainerStyle prop.');
        }

        var contentSizeChangeProps = {};

        if (this.props.onContentSizeChange) {
          contentSizeChangeProps = {
            onLayout: this._handleContentOnLayout
          };
        }

        var stickyHeaderIndices = this.props.stickyHeaderIndices;
        var children = this.props.children;

        if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {
          var childArray = React.Children.toArray(this.props.children);
          children = childArray.map(function (child, index) {
            var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;

            if (indexOfIndex > -1) {
              var key = child.key;
              var nextIndex = stickyHeaderIndices[indexOfIndex + 1];

              var StickyHeaderComponent = _this2.props.StickyHeaderComponent || _$$_REQUIRE(_dependencyMap[21], "./ScrollViewStickyHeader");

              return React.createElement(StickyHeaderComponent, {
                key: key,
                ref: function ref(_ref) {
                  return _this2._setStickyHeaderRef(key, _ref);
                },
                nextHeaderLayoutY: _this2._headerLayoutYs.get(_this2._getKeyForIndex(nextIndex, childArray)),
                onLayout: function onLayout(event) {
                  return _this2._onStickyHeaderLayout(index, event, key);
                },
                scrollAnimatedValue: _this2._scrollAnimatedValue,
                inverted: _this2.props.invertStickyHeaders,
                scrollViewHeight: _this2.state.layoutHeight,
                __self: _this2,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 1088,
                  columnNumber: 13
                }
              }, child);
            } else {
              return child;
            }
          });
        }

        children = React.createElement(Context.Provider, {
          value: this.props.horizontal === true ? standardHorizontalContext : standardVerticalContext,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 1107,
            columnNumber: 7
          }
        }, children);
        var hasStickyHeaders = Array.isArray(stickyHeaderIndices) && stickyHeaderIndices.length > 0;
        var contentContainer = React.createElement(ScrollContentContainerViewClass, (0, _extends2.default)({}, contentSizeChangeProps, {
          ref: this._setInnerViewRef,
          style: contentContainerStyle,
          removeClippedSubviews: "android" === 'android' && hasStickyHeaders ? false : this.props.removeClippedSubviews,
          collapsable: false,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 1124,
            columnNumber: 7
          }
        }), children);
        var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;
        var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;
        var DEPRECATED_sendUpdatedChildFrames = !!this.props.DEPRECATED_sendUpdatedChildFrames;
        var baseStyle = this.props.horizontal === true ? styles.baseHorizontal : styles.baseVertical;
        var props = Object.assign({}, this.props, {
          alwaysBounceHorizontal: alwaysBounceHorizontal,
          alwaysBounceVertical: alwaysBounceVertical,
          style: [baseStyle, this.props.style],
          onContentSizeChange: null,
          onLayout: this._handleLayout,
          onMomentumScrollBegin: this._scrollResponder.scrollResponderHandleMomentumScrollBegin,
          onMomentumScrollEnd: this._scrollResponder.scrollResponderHandleMomentumScrollEnd,
          onResponderGrant: this._scrollResponder.scrollResponderHandleResponderGrant,
          onResponderReject: this._scrollResponder.scrollResponderHandleResponderReject,
          onResponderRelease: this._scrollResponder.scrollResponderHandleResponderRelease,
          onResponderTerminationRequest: this._scrollResponder.scrollResponderHandleTerminationRequest,
          onScrollBeginDrag: this._scrollResponder.scrollResponderHandleScrollBeginDrag,
          onScrollEndDrag: this._scrollResponder.scrollResponderHandleScrollEndDrag,
          onScrollShouldSetResponder: this._scrollResponder.scrollResponderHandleScrollShouldSetResponder,
          onStartShouldSetResponder: this._scrollResponder.scrollResponderHandleStartShouldSetResponder,
          onStartShouldSetResponderCapture: this._scrollResponder.scrollResponderHandleStartShouldSetResponderCapture,
          onTouchEnd: this._scrollResponder.scrollResponderHandleTouchEnd,
          onTouchMove: this._scrollResponder.scrollResponderHandleTouchMove,
          onTouchStart: this._scrollResponder.scrollResponderHandleTouchStart,
          onTouchCancel: this._scrollResponder.scrollResponderHandleTouchCancel,
          onScroll: this._handleScroll,
          scrollBarThumbImage: _$$_REQUIRE(_dependencyMap[22], "../../Image/resolveAssetSource")(this.props.scrollBarThumbImage),
          scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,
          sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,
          DEPRECATED_sendUpdatedChildFrames: DEPRECATED_sendUpdatedChildFrames,
          snapToStart: this.props.snapToStart !== false,
          snapToEnd: this.props.snapToEnd !== false,
          pagingEnabled: this.props.pagingEnabled === true || this.props.snapToInterval != null || this.props.snapToOffsets != null
        });
        var decelerationRate = this.props.decelerationRate;

        if (decelerationRate != null) {
          props.decelerationRate = _$$_REQUIRE(_dependencyMap[23], "./processDecelerationRate")(decelerationRate);
        }

        var refreshControl = this.props.refreshControl;

        if (refreshControl) {
          if ("android" === 'ios') {
            return React.createElement(ScrollViewClass, (0, _extends2.default)({}, props, {
              ref: this._setNativeRef,
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 1235,
                columnNumber: 11
              }
            }), _$$_REQUIRE(_dependencyMap[24], "../../Utilities/Platform").isTV ? null : refreshControl, contentContainer);
          } else if ("android" === 'android') {
            var _splitLayoutProps = _$$_REQUIRE(_dependencyMap[25], "../../StyleSheet/splitLayoutProps")(_$$_REQUIRE(_dependencyMap[20], "../../StyleSheet/flattenStyle")(props.style)),
                outer = _splitLayoutProps.outer,
                inner = _splitLayoutProps.inner;

            return React.cloneElement(refreshControl, {
              style: [baseStyle, outer]
            }, React.createElement(ScrollViewClass, (0, _extends2.default)({}, props, {
              style: [baseStyle, inner],
              ref: this._setNativeRef,
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 1250,
                columnNumber: 11
              }
            }), contentContainer));
          }
        }

        return React.createElement(ScrollViewClass, (0, _extends2.default)({}, props, {
          ref: this._setNativeRef,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 1260,
            columnNumber: 7
          }
        }), contentContainer);
      }
    }]);
    return ScrollView;
  }(React.Component);

  ScrollView.Context = Context;

  var styles = _$$_REQUIRE(_dependencyMap[26], "../../StyleSheet/StyleSheet").create({
    baseVertical: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'column',
      overflow: 'scroll'
    },
    baseHorizontal: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'row',
      overflow: 'scroll'
    },
    contentContainerHorizontal: {
      flexDirection: 'row'
    }
  });

  function Wrapper(props, ref) {
    return React.createElement(ScrollView, (0, _extends2.default)({}, props, {
      scrollViewRef: ref,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1286,
        columnNumber: 10
      }
    }));
  }

  Wrapper.displayName = 'ScrollView';
  var ForwardedScrollView = React.forwardRef(Wrapper);
  ForwardedScrollView.Context = Context;
  ForwardedScrollView.displayName = 'ScrollView';
  module.exports = ForwardedScrollView;
},297,[3,53,16,17,34,35,32,31,298,300,301,302,49,85,303,272,289,309,236,6,184,311,228,312,80,313,241],"node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _ScrollViewViewConfig = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./ScrollViewViewConfig"));

  var ScrollViewNativeComponent;

  if (global.RN$Bridgeless) {
    _$$_REQUIRE(_dependencyMap[2], "../../Utilities/registerGeneratedViewConfig")('RCTScrollView', _ScrollViewViewConfig.default);

    ScrollViewNativeComponent = 'RCTScrollView';
  } else {
    ScrollViewNativeComponent = _$$_REQUIRE(_dependencyMap[3], "../../ReactNative/requireNativeComponent")('RCTScrollView');
  }

  var _default = ScrollViewNativeComponent;
  exports.default = _default;
},298,[3,299,238,56],"node_modules/react-native/Libraries/Components/ScrollView/ScrollViewNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ScrollViewViewConfig = {
    uiViewClassName: 'RCTScrollView',
    bubblingEventTypes: {},
    directEventTypes: {
      topScrollToTop: {
        registrationName: 'onScrollToTop'
      }
    },
    validAttributes: {
      alwaysBounceHorizontal: true,
      alwaysBounceVertical: true,
      automaticallyAdjustContentInsets: true,
      bounces: true,
      bouncesZoom: true,
      canCancelContentTouches: true,
      centerContent: true,
      contentInset: {
        diff: _$$_REQUIRE(_dependencyMap[0], "../../Utilities/differ/pointsDiffer")
      },
      contentOffset: {
        diff: _$$_REQUIRE(_dependencyMap[0], "../../Utilities/differ/pointsDiffer")
      },
      contentInsetAdjustmentBehavior: true,
      decelerationRate: true,
      directionalLockEnabled: true,
      disableIntervalMomentum: true,
      endFillColor: {
        process: _$$_REQUIRE(_dependencyMap[1], "../../StyleSheet/processColor")
      },
      fadingEdgeLength: true,
      indicatorStyle: true,
      keyboardDismissMode: true,
      maintainVisibleContentPosition: true,
      maximumZoomScale: true,
      minimumZoomScale: true,
      nestedScrollEnabled: true,
      onMomentumScrollBegin: true,
      onMomentumScrollEnd: true,
      onScroll: true,
      onScrollBeginDrag: true,
      onScrollEndDrag: true,
      onScrollToTop: true,
      overScrollMode: true,
      pagingEnabled: true,
      persistentScrollbar: true,
      pinchGestureEnabled: true,
      scrollEnabled: true,
      scrollEventThrottle: true,
      scrollIndicatorInsets: {
        diff: _$$_REQUIRE(_dependencyMap[0], "../../Utilities/differ/pointsDiffer")
      },
      scrollPerfTag: true,
      scrollToOverflowEnabled: true,
      scrollsToTop: true,
      sendMomentumEvents: true,
      showsHorizontalScrollIndicator: true,
      showsVerticalScrollIndicator: true,
      snapToAlignment: true,
      snapToEnd: true,
      snapToInterval: true,
      snapToOffsets: true,
      snapToStart: true,
      zoomScale: true,
      DEPRECATED_sendUpdatedChildFrames: true
    }
  };
  module.exports = ScrollViewViewConfig;
},299,[226,176],"node_modules/react-native/Libraries/Components/ScrollView/ScrollViewViewConfig.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  var ScrollContentViewViewConfig = {
    uiViewClassName: 'RCTScrollContentView',
    bubblingEventTypes: {},
    directEventTypes: {},
    validAttributes: {}
  };
  var ScrollContentViewNativeComponent;

  if (global.RN$Bridgeless) {
    _$$_REQUIRE(_dependencyMap[0], "../../Utilities/registerGeneratedViewConfig")('RCTScrollContentView', ScrollContentViewViewConfig);

    ScrollContentViewNativeComponent = 'RCTScrollContentView';
  } else {
    ScrollContentViewNativeComponent = _$$_REQUIRE(_dependencyMap[1], "../../ReactNative/requireNativeComponent")('RCTScrollContentView');
  }

  var _default = ScrollContentViewNativeComponent;
  exports.default = _default;
},300,[238,56],"node_modules/react-native/Libraries/Components/ScrollView/ScrollContentViewNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  var AndroidHorizontalScrollViewViewConfig = {
    uiViewClassName: 'AndroidHorizontalScrollView',
    bubblingEventTypes: {},
    directEventTypes: {},
    validAttributes: {
      decelerationRate: true,
      disableIntervalMomentum: true,
      endFillColor: {
        process: _$$_REQUIRE(_dependencyMap[0], "../../StyleSheet/processColor")
      },
      fadingEdgeLength: true,
      nestedScrollEnabled: true,
      overScrollMode: true,
      pagingEnabled: true,
      persistentScrollbar: true,
      scrollEnabled: true,
      scrollPerfTag: true,
      sendMomentumEvents: true,
      showsHorizontalScrollIndicator: true,
      snapToEnd: true,
      snapToInterval: true,
      snapToStart: true,
      snapToOffsets: true,
      contentOffset: true
    }
  };
  var AndroidHorizontalScrollViewNativeComponent;

  if (global.RN$Bridgeless) {
    _$$_REQUIRE(_dependencyMap[1], "../../Utilities/registerGeneratedViewConfig")('AndroidHorizontalScrollView', AndroidHorizontalScrollViewViewConfig);

    AndroidHorizontalScrollViewNativeComponent = 'AndroidHorizontalScrollView';
  } else {
    AndroidHorizontalScrollViewNativeComponent = _$$_REQUIRE(_dependencyMap[2], "../../ReactNative/requireNativeComponent")('AndroidHorizontalScrollView');
  }

  var _default = AndroidHorizontalScrollViewNativeComponent;
  exports.default = _default;
},301,[176,238,56],"node_modules/react-native/Libraries/Components/ScrollView/AndroidHorizontalScrollViewNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  var AndroidHorizontalScrollContentViewViewConfig = {
    uiViewClassName: 'AndroidHorizontalScrollContentView',
    bubblingEventTypes: {},
    directEventTypes: {},
    validAttributes: {}
  };
  var AndroidHorizontalScrollContentViewNativeComponent;

  if (global.RN$Bridgeless) {
    _$$_REQUIRE(_dependencyMap[0], "../../Utilities/registerGeneratedViewConfig")('AndroidHorizontalScrollContentView', AndroidHorizontalScrollContentViewViewConfig);

    AndroidHorizontalScrollContentViewNativeComponent = 'AndroidHorizontalScrollContentView';
  } else {
    AndroidHorizontalScrollContentViewNativeComponent = _$$_REQUIRE(_dependencyMap[1], "../../ReactNative/requireNativeComponent")('AndroidHorizontalScrollContentView');
  }

  var _default = AndroidHorizontalScrollContentViewNativeComponent;
  exports.default = _default;
},302,[238,56],"node_modules/react-native/Libraries/Components/ScrollView/AndroidHorizontalScrollContentViewNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _ScrollViewCommands = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./ScrollView/ScrollViewCommands"));

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;
  var ScrollResponderMixin = {
    _subscriptionKeyboardWillShow: null,
    _subscriptionKeyboardWillHide: null,
    _subscriptionKeyboardDidShow: null,
    _subscriptionKeyboardDidHide: null,
    scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {
      return {
        isTouching: false,
        lastMomentumScrollBeginTime: 0,
        lastMomentumScrollEndTime: 0,
        observedScrollSinceBecomingResponder: false,
        becameResponderWhileAnimating: false
      };
    },
    scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {
      if (this.props.disableScrollViewPanResponder === true) {
        return false;
      }

      return this.state.isTouching;
    },
    scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder(e) {
      if (this.props.disableScrollViewPanResponder === true) {
        return false;
      }

      var currentlyFocusedInput = _$$_REQUIRE(_dependencyMap[3], "./TextInput/TextInputState").currentlyFocusedInput();

      if (this.props.keyboardShouldPersistTaps === 'handled' && currentlyFocusedInput != null && e.target !== currentlyFocusedInput) {
        return true;
      }

      return false;
    },
    scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {
      if (this.scrollResponderIsAnimating()) {
        return true;
      }

      if (this.props.disableScrollViewPanResponder === true) {
        return false;
      }

      var currentlyFocusedTextInput = _$$_REQUIRE(_dependencyMap[3], "./TextInput/TextInputState").currentlyFocusedInput();

      var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;
      var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';

      if (typeof e.target === 'number') {
        if (__DEV__) {
          console.error('Did not expect event target to be a number. Should have been a native component');
        }

        return false;
      }

      if (keyboardNeverPersistTaps && currentlyFocusedTextInput != null && e.target != null && !_$$_REQUIRE(_dependencyMap[3], "./TextInput/TextInputState").isTextInput(e.target)) {
        return true;
      }

      return false;
    },
    scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {},
    scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {
      return !this.state.observedScrollSinceBecomingResponder;
    },
    scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {
      var nativeEvent = e.nativeEvent;
      this.state.isTouching = nativeEvent.touches.length !== 0;
      this.props.onTouchEnd && this.props.onTouchEnd(e);
    },
    scrollResponderHandleTouchCancel: function scrollResponderHandleTouchCancel(e) {
      this.state.isTouching = false;
      this.props.onTouchCancel && this.props.onTouchCancel(e);
    },
    scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {
      this.props.onResponderRelease && this.props.onResponderRelease(e);

      if (typeof e.target === 'number') {
        if (__DEV__) {
          console.error('Did not expect event target to be a number. Should have been a native component');
        }

        return;
      }

      var currentlyFocusedTextInput = _$$_REQUIRE(_dependencyMap[3], "./TextInput/TextInputState").currentlyFocusedInput();

      if (this.props.keyboardShouldPersistTaps !== true && this.props.keyboardShouldPersistTaps !== 'always' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {
        this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);

        _$$_REQUIRE(_dependencyMap[3], "./TextInput/TextInputState").blurTextInput(currentlyFocusedTextInput);
      }
    },
    scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {
      this.state.observedScrollSinceBecomingResponder = true;
      this.props.onScroll && this.props.onScroll(e);
    },
    scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {
      this.state.observedScrollSinceBecomingResponder = false;
      this.props.onResponderGrant && this.props.onResponderGrant(e);
      this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();
    },
    scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {
      _$$_REQUIRE(_dependencyMap[4], "../Interaction/FrameRateLogger").beginScroll();

      this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);
    },
    scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {
      var velocity = e.nativeEvent.velocity;

      if (!this.scrollResponderIsAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {
        _$$_REQUIRE(_dependencyMap[4], "../Interaction/FrameRateLogger").endScroll();
      }

      this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);
    },
    scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {
      this.state.lastMomentumScrollBeginTime = _$$_REQUIRE(_dependencyMap[5], "fbjs/lib/performanceNow")();
      this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);
    },
    scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {
      _$$_REQUIRE(_dependencyMap[4], "../Interaction/FrameRateLogger").endScroll();

      this.state.lastMomentumScrollEndTime = _$$_REQUIRE(_dependencyMap[5], "fbjs/lib/performanceNow")();
      this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);
    },
    scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {
      this.state.isTouching = true;
      this.props.onTouchStart && this.props.onTouchStart(e);
    },
    scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {
      this.props.onTouchMove && this.props.onTouchMove(e);
    },
    scrollResponderIsAnimating: function scrollResponderIsAnimating() {
      var now = _$$_REQUIRE(_dependencyMap[5], "fbjs/lib/performanceNow")();

      var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;
      var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;
      return isAnimating;
    },
    scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {
      return this.getScrollableNode ? this.getScrollableNode() : _$$_REQUIRE(_dependencyMap[6], "../Renderer/shims/ReactNative").findNodeHandle(this);
    },
    scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {
      if (typeof x === 'number') {
        console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');
      } else {
        var _ref = x || {};

        x = _ref.x;
        y = _ref.y;
        animated = _ref.animated;
      }

      var that = this;

      _$$_REQUIRE(_dependencyMap[7], "invariant")(that.getNativeScrollRef != null, 'Expected scrollTo to be called on a scrollViewRef. If this exception occurs it is likely a bug in React Native');

      var nativeScrollRef = that.getNativeScrollRef();

      if (nativeScrollRef == null) {
        return;
      }

      _ScrollViewCommands.default.scrollTo(nativeScrollRef, x || 0, y || 0, animated !== false);
    },
    scrollResponderScrollToEnd: function scrollResponderScrollToEnd(options) {
      var animated = (options && options.animated) !== false;
      var that = this;

      _$$_REQUIRE(_dependencyMap[7], "invariant")(that.getNativeScrollRef != null, 'Expected scrollToEnd to be called on a scrollViewRef. If this exception occurs it is likely a bug in React Native');

      var nativeScrollRef = that.getNativeScrollRef();

      if (nativeScrollRef == null) {
        return;
      }

      _ScrollViewCommands.default.scrollToEnd(nativeScrollRef, animated);
    },
    scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) {
      _$$_REQUIRE(_dependencyMap[7], "invariant")("android" === 'ios', 'zoomToRect is not implemented');

      if ('animated' in rect) {
        animated = rect.animated;
        delete rect.animated;
      } else if (typeof animated !== 'undefined') {
        console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
      }

      var that = this;

      _$$_REQUIRE(_dependencyMap[7], "invariant")(that.getNativeScrollRef != null, 'Expected zoomToRect to be called on a scrollViewRef. If this exception occurs it is likely a bug in React Native');

      var nativeScrollRef = that.getNativeScrollRef();

      if (nativeScrollRef == null) {
        return;
      }

      _ScrollViewCommands.default.zoomToRect(nativeScrollRef, rect, animated !== false);
    },
    scrollResponderFlashScrollIndicators: function scrollResponderFlashScrollIndicators() {
      var that = this;

      _$$_REQUIRE(_dependencyMap[7], "invariant")(that.getNativeScrollRef != null, 'Expected flashScrollIndicators to be called on a scrollViewRef. If this exception occurs it is likely a bug in React Native');

      var nativeScrollRef = that.getNativeScrollRef();

      if (nativeScrollRef == null) {
        return;
      }

      _ScrollViewCommands.default.flashScrollIndicators(nativeScrollRef);
    },
    scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {
      this.additionalScrollOffset = additionalOffset || 0;
      this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;

      if (typeof nodeHandle === 'number') {
        _$$_REQUIRE(_dependencyMap[8], "../ReactNative/UIManager").measureLayout(nodeHandle, _$$_REQUIRE(_dependencyMap[6], "../Renderer/shims/ReactNative").findNodeHandle(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);
      } else {
        var innerRef = this.getInnerViewRef();

        if (innerRef == null) {
          return;
        }

        nodeHandle.measureLayout(innerRef, this.scrollResponderInputMeasureAndScrollToKeyboard, this.scrollResponderTextInputFocusError);
      }
    },
    scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {
      var keyboardScreenY = _$$_REQUIRE(_dependencyMap[9], "../Utilities/Dimensions").get('window').height;

      if (this.keyboardWillOpenTo) {
        keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;
      }

      var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;

      if (this.preventNegativeScrollOffset) {
        scrollOffsetY = Math.max(0, scrollOffsetY);
      }

      this.scrollResponderScrollTo({
        x: 0,
        y: scrollOffsetY,
        animated: true
      });
      this.additionalOffset = 0;
      this.preventNegativeScrollOffset = false;
    },
    scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(msg) {
      console.error('Error measuring text field: ', msg);
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      var _ref2 = this.props,
          keyboardShouldPersistTaps = _ref2.keyboardShouldPersistTaps;

      if (typeof keyboardShouldPersistTaps === 'boolean') {
        console.warn("'keyboardShouldPersistTaps={" + (keyboardShouldPersistTaps === true ? 'true' : 'false') + "}' is deprecated. " + ("Use 'keyboardShouldPersistTaps=\"" + (keyboardShouldPersistTaps ? 'always' : 'never') + "\"' instead"));
      }

      this.keyboardWillOpenTo = null;
      this.additionalScrollOffset = 0;
      this._subscriptionKeyboardWillShow = _$$_REQUIRE(_dependencyMap[10], "./Keyboard/Keyboard").addListener('keyboardWillShow', this.scrollResponderKeyboardWillShow);
      this._subscriptionKeyboardWillHide = _$$_REQUIRE(_dependencyMap[10], "./Keyboard/Keyboard").addListener('keyboardWillHide', this.scrollResponderKeyboardWillHide);
      this._subscriptionKeyboardDidShow = _$$_REQUIRE(_dependencyMap[10], "./Keyboard/Keyboard").addListener('keyboardDidShow', this.scrollResponderKeyboardDidShow);
      this._subscriptionKeyboardDidHide = _$$_REQUIRE(_dependencyMap[10], "./Keyboard/Keyboard").addListener('keyboardDidHide', this.scrollResponderKeyboardDidHide);
    },
    componentWillUnmount: function componentWillUnmount() {
      if (this._subscriptionKeyboardWillShow != null) {
        this._subscriptionKeyboardWillShow.remove();
      }

      if (this._subscriptionKeyboardWillHide != null) {
        this._subscriptionKeyboardWillHide.remove();
      }

      if (this._subscriptionKeyboardDidShow != null) {
        this._subscriptionKeyboardDidShow.remove();
      }

      if (this._subscriptionKeyboardDidHide != null) {
        this._subscriptionKeyboardDidHide.remove();
      }
    },
    scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {
      this.keyboardWillOpenTo = e;
      this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);
    },
    scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {
      this.keyboardWillOpenTo = null;
      this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);
    },
    scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {
      if (e) {
        this.keyboardWillOpenTo = e;
      }

      this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);
    },
    scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {
      this.keyboardWillOpenTo = null;
      this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);
    }
  };
  var ScrollResponder = {
    Mixin: ScrollResponderMixin
  };
  module.exports = ScrollResponder;
},303,[3,304,49,84,305,107,85,6,43,232,307],"node_modules/react-native/Libraries/Components/ScrollResponder.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _codegenNativeCommands = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../Utilities/codegenNativeCommands"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2], "react"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = (0, _codegenNativeCommands.default)({
    supportedCommands: ['flashScrollIndicators', 'scrollTo', 'scrollToEnd', 'zoomToRect']
  });

  exports.default = _default;
},304,[3,200,49],"node_modules/react-native/Libraries/Components/ScrollView/ScrollViewCommands.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeFrameRateLogger = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./NativeFrameRateLogger"));

  var FrameRateLogger = {
    setGlobalOptions: function setGlobalOptions(options) {
      if (options.debug !== undefined) {
        _$$_REQUIRE(_dependencyMap[2], "invariant")(_NativeFrameRateLogger.default, 'Trying to debug FrameRateLogger without the native module!');
      }

      if (_NativeFrameRateLogger.default) {
        var optionsClone = {
          debug: !!options.debug,
          reportStackTraces: !!options.reportStackTraces
        };

        _NativeFrameRateLogger.default.setGlobalOptions(optionsClone);
      }
    },
    setContext: function setContext(context) {
      _NativeFrameRateLogger.default && _NativeFrameRateLogger.default.setContext(context);
    },
    beginScroll: function beginScroll() {
      _NativeFrameRateLogger.default && _NativeFrameRateLogger.default.beginScroll();
    },
    endScroll: function endScroll() {
      _NativeFrameRateLogger.default && _NativeFrameRateLogger.default.endScroll();
    }
  };
  module.exports = FrameRateLogger;
},305,[3,306,6],"node_modules/react-native/Libraries/Interaction/FrameRateLogger.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('FrameRateLogger');

  exports.default = _default;
},306,[5],"node_modules/react-native/Libraries/Interaction/NativeFrameRateLogger.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeKeyboardObserver = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./NativeKeyboardObserver"));

  var KeyboardEventEmitter = new (_$$_REQUIRE(_dependencyMap[2], "../../EventEmitter/NativeEventEmitter"))(_NativeKeyboardObserver.default);
  var Keyboard = {
    addListener: function addListener(eventName, callback) {
      _$$_REQUIRE(_dependencyMap[3], "invariant")(false, 'Dummy method used for documentation');
    },
    removeListener: function removeListener(eventName, callback) {
      _$$_REQUIRE(_dependencyMap[3], "invariant")(false, 'Dummy method used for documentation');
    },
    removeAllListeners: function removeAllListeners(eventName) {
      _$$_REQUIRE(_dependencyMap[3], "invariant")(false, 'Dummy method used for documentation');
    },
    dismiss: function dismiss() {
      _$$_REQUIRE(_dependencyMap[3], "invariant")(false, 'Dummy method used for documentation');
    },
    scheduleLayoutAnimation: function scheduleLayoutAnimation(event) {
      _$$_REQUIRE(_dependencyMap[3], "invariant")(false, 'Dummy method used for documentation');
    }
  };
  KeyboardEventEmitter.dismiss = _$$_REQUIRE(_dependencyMap[4], "../../Utilities/dismissKeyboard");

  KeyboardEventEmitter.scheduleLayoutAnimation = function (event) {
    var duration = event.duration,
        easing = event.easing;

    if (duration != null && duration !== 0) {
      _$$_REQUIRE(_dependencyMap[5], "../../LayoutAnimation/LayoutAnimation").configureNext({
        duration: duration,
        update: {
          duration: duration,
          type: easing != null && _$$_REQUIRE(_dependencyMap[5], "../../LayoutAnimation/LayoutAnimation").Types[easing] || 'keyboard'
        }
      });
    }
  };

  module.exports = KeyboardEventEmitter;
},307,[3,308,126,6,309,310],"node_modules/react-native/Libraries/Components/Keyboard/Keyboard.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('KeyboardObserver');

  exports.default = _default;
},308,[5],"node_modules/react-native/Libraries/Components/Keyboard/NativeKeyboardObserver.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function dismissKeyboard() {
    _$$_REQUIRE(_dependencyMap[0], "../Components/TextInput/TextInputState").blurTextInput(_$$_REQUIRE(_dependencyMap[0], "../Components/TextInput/TextInputState").currentlyFocusedInput());
  }

  module.exports = dismissKeyboard;
},309,[84],"node_modules/react-native/Libraries/Utilities/dismissKeyboard.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _Platform = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../Utilities/Platform"));

  function configureNext(config, onAnimationDidEnd) {
    if (!_Platform.default.isTesting) {
      _$$_REQUIRE(_dependencyMap[2], "../ReactNative/UIManager").configureNextLayoutAnimation(config, onAnimationDidEnd != null ? onAnimationDidEnd : function () {}, function () {});
    }
  }

  function create(duration, type, property) {
    return {
      duration: duration,
      create: {
        type: type,
        property: property
      },
      update: {
        type: type
      },
      delete: {
        type: type,
        property: property
      }
    };
  }

  var Presets = {
    easeInEaseOut: create(300, 'easeInEaseOut', 'opacity'),
    linear: create(500, 'linear', 'opacity'),
    spring: {
      duration: 700,
      create: {
        type: 'linear',
        property: 'opacity'
      },
      update: {
        type: 'spring',
        springDamping: 0.4
      },
      delete: {
        type: 'linear',
        property: 'opacity'
      }
    }
  };
  var LayoutAnimation = {
    configureNext: configureNext,
    create: create,
    Types: Object.freeze({
      spring: 'spring',
      linear: 'linear',
      easeInEaseOut: 'easeInEaseOut',
      easeIn: 'easeIn',
      easeOut: 'easeOut',
      keyboard: 'keyboard'
    }),
    Properties: Object.freeze({
      opacity: 'opacity',
      scaleX: 'scaleX',
      scaleY: 'scaleY',
      scaleXY: 'scaleXY'
    }),
    checkConfig: function checkConfig() {
      console.error('LayoutAnimation.checkConfig(...) has been disabled.');
    },
    Presets: Presets,
    easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
    linear: configureNext.bind(null, Presets.linear),
    spring: configureNext.bind(null, Presets.spring)
  };
  module.exports = LayoutAnimation;
},310,[3,80,43],"node_modules/react-native/Libraries/LayoutAnimation/LayoutAnimation.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var AnimatedView = _$$_REQUIRE(_dependencyMap[3], "../../Animated/src/AnimatedImplementation").createAnimatedComponent(_$$_REQUIRE(_dependencyMap[4], "../View/View"));

  var ScrollViewStickyHeader = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/inherits")(ScrollViewStickyHeader, _React$Component);

    var _super = _createSuper(ScrollViewStickyHeader);

    function ScrollViewStickyHeader() {
      var _this;

      _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/classCallCheck")(this, ScrollViewStickyHeader);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        measured: false,
        layoutY: 0,
        layoutHeight: 0,
        nextHeaderLayoutY: _this.props.nextHeaderLayoutY
      };

      _this._onLayout = function (event) {
        _this.setState({
          measured: true,
          layoutY: event.nativeEvent.layout.y,
          layoutHeight: event.nativeEvent.layout.height
        });

        _this.props.onLayout(event);

        var child = React.Children.only(_this.props.children);

        if (child.props.onLayout) {
          child.props.onLayout(event);
        }
      };

      return _this;
    }

    _$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/createClass")(ScrollViewStickyHeader, [{
      key: "setNextHeaderY",
      value: function setNextHeaderY(y) {
        this.setState({
          nextHeaderLayoutY: y
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            inverted = _this$props.inverted,
            scrollViewHeight = _this$props.scrollViewHeight;
        var _this$state = this.state,
            measured = _this$state.measured,
            layoutHeight = _this$state.layoutHeight,
            layoutY = _this$state.layoutY,
            nextHeaderLayoutY = _this$state.nextHeaderLayoutY;
        var inputRange = [-1, 0];
        var outputRange = [0, 0];

        if (measured) {
          if (inverted) {
            if (scrollViewHeight != null) {
              var stickStartPoint = layoutY + layoutHeight - scrollViewHeight;

              if (stickStartPoint > 0) {
                inputRange.push(stickStartPoint);
                outputRange.push(0);
                inputRange.push(stickStartPoint + 1);
                outputRange.push(1);
                var collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;

                if (collisionPoint > stickStartPoint) {
                  inputRange.push(collisionPoint, collisionPoint + 1);
                  outputRange.push(collisionPoint - stickStartPoint, collisionPoint - stickStartPoint);
                }
              }
            }
          } else {
            inputRange.push(layoutY);
            outputRange.push(0);

            var _collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;

            if (_collisionPoint >= layoutY) {
              inputRange.push(_collisionPoint, _collisionPoint + 1);
              outputRange.push(_collisionPoint - layoutY, _collisionPoint - layoutY);
            } else {
              inputRange.push(layoutY + 1);
              outputRange.push(1);
            }
          }
        }

        var translateY = this.props.scrollAnimatedValue.interpolate({
          inputRange: inputRange,
          outputRange: outputRange
        });
        var child = React.Children.only(this.props.children);
        return React.createElement(AnimatedView, {
          collapsable: false,
          onLayout: this._onLayout,
          style: [child.props.style, styles.header, {
            transform: [{
              translateY: translateY
            }]
          }],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 144,
            columnNumber: 7
          }
        }, React.cloneElement(child, {
          style: styles.fill,
          onLayout: undefined
        }));
      }
    }]);

    return ScrollViewStickyHeader;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[8], "../../StyleSheet/StyleSheet").create({
    header: {
      zIndex: 10
    },
    fill: {
      flex: 1
    }
  });

  module.exports = ScrollViewStickyHeader;
},311,[31,32,49,272,236,35,16,17,241],"node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function processDecelerationRate(decelerationRate) {
    if (decelerationRate === 'normal') {
      return 0.985;
    } else if (decelerationRate === 'fast') {
      return 0.9;
    }

    return decelerationRate;
  }

  module.exports = processDecelerationRate;
},312,[],"node_modules/react-native/Libraries/Components/ScrollView/processDecelerationRate.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var OUTER_PROPS = Object.assign(Object.create(null), {
    margin: true,
    marginHorizontal: true,
    marginVertical: true,
    marginBottom: true,
    marginTop: true,
    marginLeft: true,
    marginRight: true,
    flex: true,
    flexGrow: true,
    flexShrink: true,
    flexBasis: true,
    alignSelf: true,
    height: true,
    minHeight: true,
    maxHeight: true,
    width: true,
    minWidth: true,
    maxWidth: true,
    position: true,
    left: true,
    right: true,
    bottom: true,
    top: true,
    transform: true
  });

  function splitLayoutProps(props) {
    var inner = {};
    var outer = {};

    if (props) {
      Object.keys(props).forEach(function (k) {
        var value = props[k];

        if (OUTER_PROPS[k]) {
          outer[k] = value;
        } else {
          inner[k] = value;
        }
      });
    }

    return {
      outer: outer,
      inner: inner
    };
  }

  module.exports = splitLayoutProps;
},313,[],"node_modules/react-native/Libraries/StyleSheet/splitLayoutProps.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/extends"));

  var _objectWithoutProperties2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/objectWithoutProperties"));

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/createClass"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/getPrototypeOf"));

  var _AndroidSwipeRefreshLayoutNativeComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8], "./AndroidSwipeRefreshLayoutNativeComponent"));

  var _PullToRefreshViewNativeComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9], "./PullToRefreshViewNativeComponent"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js";
  var _excluded = ["enabled", "colors", "progressBackgroundColor", "size", "progressViewOffset"],
      _excluded2 = ["tintColor", "titleColor", "title"];

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[10], "react");

  var RefreshLayoutConsts;

  if ("android" === 'android') {
    var AndroidSwipeRefreshLayout = _$$_REQUIRE(_dependencyMap[11], "../../ReactNative/UIManager").getViewManagerConfig('AndroidSwipeRefreshLayout');

    RefreshLayoutConsts = AndroidSwipeRefreshLayout ? AndroidSwipeRefreshLayout.Constants : {
      SIZE: {}
    };
  } else {
    RefreshLayoutConsts = {
      SIZE: {}
    };
  }

  var RefreshControl = function (_React$Component) {
    (0, _inherits2.default)(RefreshControl, _React$Component);

    var _super = _createSuper(RefreshControl);

    function RefreshControl() {
      var _this;

      (0, _classCallCheck2.default)(this, RefreshControl);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this._lastNativeRefreshing = false;

      _this._onRefresh = function () {
        _this._lastNativeRefreshing = true;
        _this.props.onRefresh && _this.props.onRefresh();

        _this.forceUpdate();
      };

      _this._setNativeRef = function (ref) {
        _this._nativeRef = ref;
      };

      return _this;
    }

    (0, _createClass2.default)(RefreshControl, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._lastNativeRefreshing = this.props.refreshing;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.props.refreshing !== prevProps.refreshing) {
          this._lastNativeRefreshing = this.props.refreshing;
        } else if (this.props.refreshing !== this._lastNativeRefreshing && this._nativeRef) {
          if ("android" === 'android') {
            _AndroidSwipeRefreshLayoutNativeComponent.Commands.setNativeRefreshing(this._nativeRef, this.props.refreshing);
          } else {
            _PullToRefreshViewNativeComponent.Commands.setNativeRefreshing(this._nativeRef, this.props.refreshing);
          }

          this._lastNativeRefreshing = this.props.refreshing;
        }
      }
    }, {
      key: "render",
      value: function render() {
        if ("android" === 'ios') {
          var _this$props = this.props,
              enabled = _this$props.enabled,
              colors = _this$props.colors,
              progressBackgroundColor = _this$props.progressBackgroundColor,
              size = _this$props.size,
              progressViewOffset = _this$props.progressViewOffset,
              props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
          return React.createElement(_PullToRefreshViewNativeComponent.default, (0, _extends2.default)({}, props, {
            ref: this._setNativeRef,
            onRefresh: this._onRefresh,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 188,
              columnNumber: 9
            }
          }));
        } else {
          var _this$props2 = this.props,
              tintColor = _this$props2.tintColor,
              titleColor = _this$props2.titleColor,
              title = _this$props2.title,
              _props = (0, _objectWithoutProperties2.default)(_this$props2, _excluded2);

          return React.createElement(_AndroidSwipeRefreshLayoutNativeComponent.default, (0, _extends2.default)({}, _props, {
            ref: this._setNativeRef,
            onRefresh: this._onRefresh,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 197,
              columnNumber: 9
            }
          }));
        }
      }
    }]);
    return RefreshControl;
  }(React.Component);

  RefreshControl.SIZE = RefreshLayoutConsts.SIZE;
  module.exports = RefreshControl;
},314,[3,53,128,16,17,35,32,31,315,316,49,43],"node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Commands = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _codegenNativeCommands = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/Utilities/codegenNativeCommands"));

  var _codegenNativeComponent = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../Utilities/codegenNativeComponent"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['setNativeRefreshing']
  });
  exports.Commands = Commands;

  var _default = (0, _codegenNativeComponent.default)('AndroidSwipeRefreshLayout');

  exports.default = _default;
},315,[49,3,200,55],"node_modules/react-native/Libraries/Components/RefreshControl/AndroidSwipeRefreshLayoutNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Commands = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _codegenNativeComponent = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Utilities/codegenNativeComponent"));

  var _codegenNativeCommands = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "react-native/Libraries/Utilities/codegenNativeCommands"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['setNativeRefreshing']
  });
  exports.Commands = Commands;

  var _default = (0, _codegenNativeComponent.default)('PullToRefreshView', {
    paperComponentName: 'RCTRefreshControl',
    excludedPlatform: 'android'
  });

  exports.default = _default;
},316,[49,3,55,200],"node_modules/react-native/Libraries/Components/RefreshControl/PullToRefreshViewNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function elementsThatOverlapOffsets(offsets, itemCount, getFrameMetrics) {
    var out = [];
    var outLength = 0;

    for (var ii = 0; ii < itemCount; ii++) {
      var frame = getFrameMetrics(ii);
      var trailingOffset = frame.offset + frame.length;

      for (var kk = 0; kk < offsets.length; kk++) {
        if (out[kk] == null && trailingOffset >= offsets[kk]) {
          out[kk] = ii;
          outLength++;

          if (kk === offsets.length - 1) {
            _$$_REQUIRE(_dependencyMap[0], "invariant")(outLength === offsets.length, 'bad offsets input, should be in increasing order: %s', JSON.stringify(offsets));

            return out;
          }
        }
      }
    }

    return out;
  }

  function newRangeCount(prev, next) {
    return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));
  }

  function computeWindowedRenderLimits(props, prev, getFrameMetricsApprox, scrollMetrics) {
    var data = props.data,
        getItemCount = props.getItemCount,
        maxToRenderPerBatch = props.maxToRenderPerBatch,
        windowSize = props.windowSize;
    var itemCount = getItemCount(data);

    if (itemCount === 0) {
      return prev;
    }

    var offset = scrollMetrics.offset,
        velocity = scrollMetrics.velocity,
        visibleLength = scrollMetrics.visibleLength;
    var visibleBegin = Math.max(0, offset);
    var visibleEnd = visibleBegin + visibleLength;
    var overscanLength = (windowSize - 1) * visibleLength;
    var leadFactor = 0.5;
    var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';
    var overscanBegin = Math.max(0, visibleBegin - (1 - leadFactor) * overscanLength);
    var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);
    var lastItemOffset = getFrameMetricsApprox(itemCount - 1).offset;

    if (lastItemOffset < overscanBegin) {
      return {
        first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),
        last: itemCount - 1
      };
    }

    var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props.getItemCount(props.data), getFrameMetricsApprox),
        _elementsThatOverlapO2 = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/slicedToArray")(_elementsThatOverlapO, 4),
        overscanFirst = _elementsThatOverlapO2[0],
        first = _elementsThatOverlapO2[1],
        last = _elementsThatOverlapO2[2],
        overscanLast = _elementsThatOverlapO2[3];

    overscanFirst = overscanFirst == null ? 0 : overscanFirst;
    first = first == null ? Math.max(0, overscanFirst) : first;
    overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;
    last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;
    var visible = {
      first: first,
      last: last
    };
    var newCellCount = newRangeCount(prev, visible);

    while (true) {
      if (first <= overscanFirst && last >= overscanLast) {
        break;
      }

      var maxNewCells = newCellCount >= maxToRenderPerBatch;
      var firstWillAddMore = first <= prev.first || first > prev.last;
      var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);
      var lastWillAddMore = last >= prev.last || last < prev.first;
      var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);

      if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {
        break;
      }

      if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {
        if (firstWillAddMore) {
          newCellCount++;
        }

        first--;
      }

      if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {
        if (lastWillAddMore) {
          newCellCount++;
        }

        last++;
      }
    }

    if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {
      throw new Error('Bad window calculation ' + JSON.stringify({
        first: first,
        last: last,
        itemCount: itemCount,
        overscanFirst: overscanFirst,
        overscanLast: overscanLast,
        visible: visible
      }));
    }

    return {
      first: first,
      last: last
    };
  }

  var VirtualizeUtils = {
    computeWindowedRenderLimits: computeWindowedRenderLimits,
    elementsThatOverlapOffsets: elementsThatOverlapOffsets,
    newRangeCount: newRangeCount
  };
  module.exports = VirtualizeUtils;
},317,[6,8],"node_modules/react-native/Libraries/Lists/VirtualizeUtils.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Info = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/createClass")(function Info() {
    _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck")(this, Info);

    this.any_blank_count = 0;
    this.any_blank_ms = 0;
    this.any_blank_speed_sum = 0;
    this.mostly_blank_count = 0;
    this.mostly_blank_ms = 0;
    this.pixels_blank = 0;
    this.pixels_sampled = 0;
    this.pixels_scrolled = 0;
    this.total_time_spent = 0;
    this.sample_count = 0;
  });

  var DEBUG = false;
  var _listeners = [];
  var _minSampleCount = 10;

  var _sampleRate = DEBUG ? 1 : null;

  var FillRateHelper = function () {
    function FillRateHelper(getFrameMetrics) {
      _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck")(this, FillRateHelper);

      this._anyBlankStartTime = null;
      this._enabled = false;
      this._info = new Info();
      this._mostlyBlankStartTime = null;
      this._samplesStartTime = null;
      this._getFrameMetrics = getFrameMetrics;
      this._enabled = (_sampleRate || 0) > Math.random();

      this._resetData();
    }

    _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/createClass")(FillRateHelper, [{
      key: "activate",
      value: function activate() {
        if (this._enabled && this._samplesStartTime == null) {
          DEBUG && console.debug('FillRateHelper: activate');
          this._samplesStartTime = _$$_REQUIRE(_dependencyMap[2], "fbjs/lib/performanceNow")();
        }
      }
    }, {
      key: "deactivateAndFlush",
      value: function deactivateAndFlush() {
        if (!this._enabled) {
          return;
        }

        var start = this._samplesStartTime;

        if (start == null) {
          DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');
          return;
        }

        if (this._info.sample_count < _minSampleCount) {
          this._resetData();

          return;
        }

        var total_time_spent = _$$_REQUIRE(_dependencyMap[2], "fbjs/lib/performanceNow")() - start;
        var info = Object.assign({}, this._info, {
          total_time_spent: total_time_spent
        });

        if (DEBUG) {
          var derived = {
            avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,
            avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),
            avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,
            any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),
            any_blank_time_frac: this._info.any_blank_ms / total_time_spent,
            mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),
            mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent
          };

          for (var key in derived) {
            derived[key] = Math.round(1000 * derived[key]) / 1000;
          }

          console.debug('FillRateHelper deactivateAndFlush: ', {
            derived: derived,
            info: info
          });
        }

        _listeners.forEach(function (listener) {
          return listener(info);
        });

        this._resetData();
      }
    }, {
      key: "computeBlankness",
      value: function computeBlankness(props, state, scrollMetrics) {
        if (!this._enabled || props.getItemCount(props.data) === 0 || this._samplesStartTime == null) {
          return 0;
        }

        var dOffset = scrollMetrics.dOffset,
            offset = scrollMetrics.offset,
            velocity = scrollMetrics.velocity,
            visibleLength = scrollMetrics.visibleLength;
        this._info.sample_count++;
        this._info.pixels_sampled += Math.round(visibleLength);
        this._info.pixels_scrolled += Math.round(Math.abs(dOffset));
        var scrollSpeed = Math.round(Math.abs(velocity) * 1000);

        var now = _$$_REQUIRE(_dependencyMap[2], "fbjs/lib/performanceNow")();

        if (this._anyBlankStartTime != null) {
          this._info.any_blank_ms += now - this._anyBlankStartTime;
        }

        this._anyBlankStartTime = null;

        if (this._mostlyBlankStartTime != null) {
          this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;
        }

        this._mostlyBlankStartTime = null;
        var blankTop = 0;
        var first = state.first;

        var firstFrame = this._getFrameMetrics(first);

        while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {
          firstFrame = this._getFrameMetrics(first);
          first++;
        }

        if (firstFrame && first > 0) {
          blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));
        }

        var blankBottom = 0;
        var last = state.last;

        var lastFrame = this._getFrameMetrics(last);

        while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {
          lastFrame = this._getFrameMetrics(last);
          last--;
        }

        if (lastFrame && last < props.getItemCount(props.data) - 1) {
          var bottomEdge = lastFrame.offset + lastFrame.length;
          blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));
        }

        var pixels_blank = Math.round(blankTop + blankBottom);
        var blankness = pixels_blank / visibleLength;

        if (blankness > 0) {
          this._anyBlankStartTime = now;
          this._info.any_blank_speed_sum += scrollSpeed;
          this._info.any_blank_count++;
          this._info.pixels_blank += pixels_blank;

          if (blankness > 0.5) {
            this._mostlyBlankStartTime = now;
            this._info.mostly_blank_count++;
          }
        } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {
          this.deactivateAndFlush();
        }

        return blankness;
      }
    }, {
      key: "enabled",
      value: function enabled() {
        return this._enabled;
      }
    }, {
      key: "_resetData",
      value: function _resetData() {
        this._anyBlankStartTime = null;
        this._info = new Info();
        this._mostlyBlankStartTime = null;
        this._samplesStartTime = null;
      }
    }], [{
      key: "addListener",
      value: function addListener(callback) {
        _$$_REQUIRE(_dependencyMap[3], "fbjs/lib/warning")(_sampleRate !== null, 'Call `FillRateHelper.setSampleRate` before `addListener`.');

        _listeners.push(callback);

        return {
          remove: function remove() {
            _listeners = _listeners.filter(function (listener) {
              return callback !== listener;
            });
          }
        };
      }
    }, {
      key: "setSampleRate",
      value: function setSampleRate(sampleRate) {
        _sampleRate = sampleRate;
      }
    }, {
      key: "setMinSampleCount",
      value: function setMinSampleCount(minSampleCount) {
        _minSampleCount = minSampleCount;
      }
    }]);

    return FillRateHelper;
  }();

  module.exports = FillRateHelper;
},318,[17,16,107,19],"node_modules/react-native/Libraries/Lists/FillRateHelper.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Batchinator = function () {
    function Batchinator(callback, delayMS) {
      _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/classCallCheck")(this, Batchinator);

      this._delay = delayMS;
      this._callback = callback;
    }

    _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/createClass")(Batchinator, [{
      key: "dispose",
      value: function dispose() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
          abort: false
        };

        if (this._taskHandle) {
          this._taskHandle.cancel();

          if (!options.abort) {
            this._callback();
          }

          this._taskHandle = null;
        }
      }
    }, {
      key: "schedule",
      value: function schedule() {
        var _this = this;

        if (this._taskHandle) {
          return;
        }

        var timeoutHandle = setTimeout(function () {
          _this._taskHandle = _$$_REQUIRE(_dependencyMap[2], "./InteractionManager").runAfterInteractions(function () {
            _this._taskHandle = null;

            _this._callback();
          });
        }, this._delay);
        this._taskHandle = {
          cancel: function cancel() {
            return clearTimeout(timeoutHandle);
          }
        };
      }
    }]);

    return Batchinator;
  }();

  module.exports = Batchinator;
},319,[16,17,269],"node_modules/react-native/Libraries/Interaction/Batchinator.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ViewabilityHelper = function () {
    function ViewabilityHelper() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        viewAreaCoveragePercentThreshold: 0
      };

      _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/classCallCheck")(this, ViewabilityHelper);

      this._hasInteracted = false;
      this._timers = new Set();
      this._viewableIndices = [];
      this._viewableItems = new Map();
      this._config = config;
    }

    _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/createClass")(ViewabilityHelper, [{
      key: "dispose",
      value: function dispose() {
        this._timers.forEach(clearTimeout);
      }
    }, {
      key: "computeViewableItems",
      value: function computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange) {
        var _this$_config = this._config,
            itemVisiblePercentThreshold = _this$_config.itemVisiblePercentThreshold,
            viewAreaCoveragePercentThreshold = _this$_config.viewAreaCoveragePercentThreshold;
        var viewAreaMode = viewAreaCoveragePercentThreshold != null;
        var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;

        _$$_REQUIRE(_dependencyMap[2], "invariant")(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');

        var viewableIndices = [];

        if (itemCount === 0) {
          return viewableIndices;
        }

        var firstVisible = -1;

        var _ref = renderRange || {
          first: 0,
          last: itemCount - 1
        },
            first = _ref.first,
            last = _ref.last;

        if (last >= itemCount) {
          console.warn('Invalid render range computing viewability ' + JSON.stringify({
            renderRange: renderRange,
            itemCount: itemCount
          }));
          return [];
        }

        for (var idx = first; idx <= last; idx++) {
          var metrics = getFrameMetrics(idx);

          if (!metrics) {
            continue;
          }

          var top = metrics.offset - scrollOffset;
          var bottom = top + metrics.length;

          if (top < viewportHeight && bottom > 0) {
            firstVisible = idx;

            if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {
              viewableIndices.push(idx);
            }
          } else if (firstVisible >= 0) {
            break;
          }
        }

        return viewableIndices;
      }
    }, {
      key: "onUpdate",
      value: function onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange) {
        var _this = this;

        if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !getFrameMetrics(0)) {
          return;
        }

        var viewableIndices = [];

        if (itemCount) {
          viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);
        }

        if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every(function (v, ii) {
          return v === viewableIndices[ii];
        })) {
          return;
        }

        this._viewableIndices = viewableIndices;

        if (this._config.minimumViewTime) {
          var handle = setTimeout(function () {
            _this._timers.delete(handle);

            _this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
          }, this._config.minimumViewTime);

          this._timers.add(handle);
        } else {
          this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
        }
      }
    }, {
      key: "resetViewableIndices",
      value: function resetViewableIndices() {
        this._viewableIndices = [];
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._hasInteracted = true;
      }
    }, {
      key: "_onUpdateSync",
      value: function _onUpdateSync(viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {
        var _this2 = this;

        viewableIndicesToCheck = viewableIndicesToCheck.filter(function (ii) {
          return _this2._viewableIndices.includes(ii);
        });
        var prevItems = this._viewableItems;
        var nextItems = new Map(viewableIndicesToCheck.map(function (ii) {
          var viewable = createViewToken(ii, true);
          return [viewable.key, viewable];
        }));
        var changed = [];

        for (var _ref2 of nextItems) {
          var _ref3 = _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/slicedToArray")(_ref2, 2);

          var key = _ref3[0];
          var viewable = _ref3[1];

          if (!prevItems.has(key)) {
            changed.push(viewable);
          }
        }

        for (var _ref4 of prevItems) {
          var _ref5 = _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/slicedToArray")(_ref4, 2);

          var _key = _ref5[0];
          var _viewable = _ref5[1];

          if (!nextItems.has(_key)) {
            changed.push(Object.assign({}, _viewable, {
              isViewable: false
            }));
          }
        }

        if (changed.length > 0) {
          this._viewableItems = nextItems;
          onViewableItemsChanged({
            viewableItems: Array.from(nextItems.values()),
            changed: changed,
            viewabilityConfig: this._config
          });
        }
      }
    }]);

    return ViewabilityHelper;
  }();

  function _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {
    if (_isEntirelyVisible(top, bottom, viewportHeight)) {
      return true;
    } else {
      var pixels = _getPixelsVisible(top, bottom, viewportHeight);

      var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);
      return percent >= viewablePercentThreshold;
    }
  }

  function _getPixelsVisible(top, bottom, viewportHeight) {
    var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);
    return Math.max(0, visibleHeight);
  }

  function _isEntirelyVisible(top, bottom, viewportHeight) {
    return top >= 0 && bottom <= viewportHeight && bottom > top;
  }

  module.exports = ViewabilityHelper;
},320,[16,17,6,8],"node_modules/react-native/Libraries/Lists/ViewabilityHelper.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  module.exports = _$$_REQUIRE(_dependencyMap[1], "../createAnimatedComponent")(_$$_REQUIRE(_dependencyMap[2], "../../../Image/Image"));
},321,[49,288,322],"node_modules/react-native/Libraries/Animated/src/components/AnimatedImage.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/extends"));

  var _asyncToGenerator2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/asyncToGenerator"));

  var _ImageViewNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "./ImageViewNativeComponent"));

  var _NativeImageLoaderAndroid = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "./NativeImageLoaderAndroid"));

  var _this = this,
      _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Image/Image.android.js";

  var React = _$$_REQUIRE(_dependencyMap[5], "react");

  var _requestId = 1;

  function generateRequestId() {
    return _requestId++;
  }

  var ImageProps = Object.assign({}, _$$_REQUIRE(_dependencyMap[6], "../DeprecatedPropTypes/DeprecatedViewPropTypes"), {
    style: _$$_REQUIRE(_dependencyMap[7], "../DeprecatedPropTypes/DeprecatedStyleSheetPropType")(_$$_REQUIRE(_dependencyMap[8], "../DeprecatedPropTypes/DeprecatedImageStylePropTypes")),
    source: _$$_REQUIRE(_dependencyMap[9], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[9], "prop-types").shape({
      uri: _$$_REQUIRE(_dependencyMap[9], "prop-types").string,
      headers: _$$_REQUIRE(_dependencyMap[9], "prop-types").objectOf(_$$_REQUIRE(_dependencyMap[9], "prop-types").string)
    }), _$$_REQUIRE(_dependencyMap[9], "prop-types").number, _$$_REQUIRE(_dependencyMap[9], "prop-types").arrayOf(_$$_REQUIRE(_dependencyMap[9], "prop-types").shape({
      uri: _$$_REQUIRE(_dependencyMap[9], "prop-types").string,
      width: _$$_REQUIRE(_dependencyMap[9], "prop-types").number,
      height: _$$_REQUIRE(_dependencyMap[9], "prop-types").number,
      headers: _$$_REQUIRE(_dependencyMap[9], "prop-types").objectOf(_$$_REQUIRE(_dependencyMap[9], "prop-types").string)
    }))]),
    blurRadius: _$$_REQUIRE(_dependencyMap[9], "prop-types").number,
    defaultSource: _$$_REQUIRE(_dependencyMap[9], "prop-types").number,
    loadingIndicatorSource: _$$_REQUIRE(_dependencyMap[9], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[9], "prop-types").shape({
      uri: _$$_REQUIRE(_dependencyMap[9], "prop-types").string
    }), _$$_REQUIRE(_dependencyMap[9], "prop-types").number]),
    progressiveRenderingEnabled: _$$_REQUIRE(_dependencyMap[9], "prop-types").bool,
    fadeDuration: _$$_REQUIRE(_dependencyMap[9], "prop-types").number,
    internal_analyticTag: _$$_REQUIRE(_dependencyMap[9], "prop-types").string,
    onLoadStart: _$$_REQUIRE(_dependencyMap[9], "prop-types").func,
    onError: _$$_REQUIRE(_dependencyMap[9], "prop-types").func,
    onLoad: _$$_REQUIRE(_dependencyMap[9], "prop-types").func,
    onLoadEnd: _$$_REQUIRE(_dependencyMap[9], "prop-types").func,
    testID: _$$_REQUIRE(_dependencyMap[9], "prop-types").string,
    resizeMethod: _$$_REQUIRE(_dependencyMap[9], "prop-types").oneOf(['auto', 'resize', 'scale']),
    resizeMode: _$$_REQUIRE(_dependencyMap[9], "prop-types").oneOf(['cover', 'contain', 'stretch', 'repeat', 'center'])
  });

  function getSize(url, success, failure) {
    return _NativeImageLoaderAndroid.default.getSize(url).then(function (sizes) {
      success(sizes.width, sizes.height);
    }).catch(failure || function () {
      console.warn('Failed to get size for image: ' + url);
    });
  }

  function getSizeWithHeaders(url, headers, success, failure) {
    return _NativeImageLoaderAndroid.default.getSizeWithHeaders(url, headers).then(function (sizes) {
      success(sizes.width, sizes.height);
    }).catch(failure || function () {
      console.warn('Failed to get size for image: ' + url);
    });
  }

  function prefetch(url, callback) {
    var requestId = generateRequestId();
    callback && callback(requestId);
    return _NativeImageLoaderAndroid.default.prefetchImage(url, requestId);
  }

  function abortPrefetch(requestId) {
    _NativeImageLoaderAndroid.default.abortRequest(requestId);
  }

  function queryCache(_x) {
    return _queryCache.apply(this, arguments);
  }

  function _queryCache() {
    _queryCache = (0, _asyncToGenerator2.default)(function* (urls) {
      return yield _NativeImageLoaderAndroid.default.queryCache(urls);
    });
    return _queryCache.apply(this, arguments);
  }

  var Image = function Image(props, forwardedRef) {
    var _source, _source3;

    var source = _$$_REQUIRE(_dependencyMap[10], "./resolveAssetSource")(props.source);

    var defaultSource = _$$_REQUIRE(_dependencyMap[10], "./resolveAssetSource")(props.defaultSource);

    var loadingIndicatorSource = _$$_REQUIRE(_dependencyMap[10], "./resolveAssetSource")(props.loadingIndicatorSource);

    if (source && source.uri === '') {
      console.warn('source.uri should not be an empty string');
    }

    if (props.src) {
      console.warn('The <Image> component requires a `source` property rather than `src`.');
    }

    if (props.children) {
      throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
    }

    if (props.defaultSource && props.loadingIndicatorSource) {
      throw new Error('The <Image> component cannot have defaultSource and loadingIndicatorSource at the same time. Please use either defaultSource or loadingIndicatorSource.');
    }

    if (source && !source.uri && !Array.isArray(source)) {
      source = null;
    }

    var style;
    var sources;

    if (((_source = source) == null ? void 0 : _source.uri) != null) {
      var _source2 = source,
          _width = _source2.width,
          _height = _source2.height;
      style = _$$_REQUIRE(_dependencyMap[11], "../StyleSheet/flattenStyle")([{
        width: _width,
        height: _height
      }, styles.base, props.style]);
      sources = [{
        uri: source.uri
      }];
    } else {
      style = _$$_REQUIRE(_dependencyMap[11], "../StyleSheet/flattenStyle")([styles.base, props.style]);
      sources = source;
    }

    var onLoadStart = props.onLoadStart,
        onLoad = props.onLoad,
        onLoadEnd = props.onLoadEnd,
        onError = props.onError;
    var nativeProps = Object.assign({}, props, {
      style: style,
      shouldNotifyLoadEvents: !!(onLoadStart || onLoad || onLoadEnd || onError),
      src: sources,
      headers: (_source3 = source) == null ? void 0 : _source3.headers,
      defaultSrc: defaultSource ? defaultSource.uri : null,
      loadingIndicatorSrc: loadingIndicatorSource ? loadingIndicatorSource.uri : null,
      ref: forwardedRef
    });
    return React.createElement(_$$_REQUIRE(_dependencyMap[12], "./ImageAnalyticsTagContext").default.Consumer, {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 296,
        columnNumber: 5
      }
    }, function (analyticTag) {
      var nativePropsWithAnalytics = analyticTag !== null ? Object.assign({}, nativeProps, {
        internal_analyticTag: analyticTag
      }) : nativeProps;
      return React.createElement(_$$_REQUIRE(_dependencyMap[13], "../Text/TextAncestor").Consumer, {
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 306,
          columnNumber: 11
        }
      }, function (hasTextAncestor) {
        return hasTextAncestor ? React.createElement(_$$_REQUIRE(_dependencyMap[14], "./TextInlineImageNativeComponent"), (0, _extends2.default)({}, nativePropsWithAnalytics, {
          __self: _this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 309,
            columnNumber: 17
          }
        })) : React.createElement(_ImageViewNativeComponent.default, (0, _extends2.default)({}, nativePropsWithAnalytics, {
          __self: _this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 311,
            columnNumber: 17
          }
        }));
      });
    });
  };

  Image = React.forwardRef(Image);
  Image.displayName = 'Image';
  Image.getSize = getSize;
  Image.getSizeWithHeaders = getSizeWithHeaders;
  Image.prefetch = prefetch;
  Image.abortPrefetch = abortPrefetch;
  Image.queryCache = queryCache;
  Image.resolveAssetSource = _$$_REQUIRE(_dependencyMap[10], "./resolveAssetSource");
  Image.propTypes = ImageProps;

  var styles = _$$_REQUIRE(_dependencyMap[15], "../StyleSheet/StyleSheet").create({
    base: {
      overflow: 'hidden'
    }
  });

  module.exports = Image;
},322,[3,53,68,323,325,49,326,327,225,210,228,184,331,240,332,241],"node_modules/react-native/Libraries/Image/Image.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _ImageViewViewConfig = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./ImageViewViewConfig"));

  var ImageViewNativeComponent;

  if (global.RN$Bridgeless) {
    _$$_REQUIRE(_dependencyMap[2], "../Renderer/shims/ReactNativeViewConfigRegistry").register('RCTImageView', function () {
      return _ImageViewViewConfig.default;
    });

    ImageViewNativeComponent = 'RCTImageView';
  } else {
    ImageViewNativeComponent = _$$_REQUIRE(_dependencyMap[3], "../ReactNative/requireNativeComponent")('RCTImageView');
  }

  var _default = ImageViewNativeComponent;
  exports.default = _default;
},323,[3,324,83,56],"node_modules/react-native/Libraries/Image/ImageViewNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _ReactNativeViewViewConfig = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../Components/View/ReactNativeViewViewConfig"));

  var ImageViewViewConfig = {
    uiViewClassName: 'RCTImageView',
    bubblingEventTypes: {},
    directEventTypes: {
      topLoadStart: {
        registrationName: 'onLoadStart'
      },
      topProgress: {
        registrationName: 'onProgress'
      },
      topError: {
        registrationName: 'onError'
      },
      topPartialLoad: {
        registrationName: 'onPartialLoad'
      },
      topLoad: {
        registrationName: 'onLoad'
      },
      topLoadEnd: {
        registrationName: 'onLoadEnd'
      }
    },
    validAttributes: Object.assign({}, _ReactNativeViewViewConfig.default.validAttributes, {
      blurRadius: true,
      capInsets: {
        diff: _$$_REQUIRE(_dependencyMap[2], "../Utilities/differ/insetsDiffer")
      },
      defaultSource: {
        process: _$$_REQUIRE(_dependencyMap[3], "./resolveAssetSource")
      },
      defaultSrc: true,
      fadeDuration: true,
      headers: true,
      loadingIndicatorSrc: true,
      onError: true,
      onLoad: true,
      onLoadEnd: true,
      onLoadStart: true,
      onPartialLoad: true,
      onProgress: true,
      overlayColor: {
        process: _$$_REQUIRE(_dependencyMap[4], "../StyleSheet/processColor")
      },
      progressiveRenderingEnabled: true,
      resizeMethod: true,
      resizeMode: true,
      shouldNotifyLoadEvents: true,
      source: true,
      src: true,
      tintColor: {
        process: _$$_REQUIRE(_dependencyMap[4], "../StyleSheet/processColor")
      }
    })
  };
  module.exports = ImageViewViewConfig;
},324,[3,174,179,228,176],"node_modules/react-native/Libraries/Image/ImageViewViewConfig.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.getEnforcing('ImageLoader');

  exports.default = _default;
},325,[5],"node_modules/react-native/Libraries/Image/NativeImageLoaderAndroid.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var stylePropType = _$$_REQUIRE(_dependencyMap[0], "./DeprecatedStyleSheetPropType")(_$$_REQUIRE(_dependencyMap[1], "./DeprecatedViewStylePropTypes"));

  module.exports = {
    accessible: _$$_REQUIRE(_dependencyMap[2], "prop-types").bool,
    accessibilityLabel: _$$_REQUIRE(_dependencyMap[2], "prop-types").node,
    accessibilityHint: _$$_REQUIRE(_dependencyMap[2], "prop-types").string,
    accessibilityActions: _$$_REQUIRE(_dependencyMap[2], "prop-types").arrayOf(_$$_REQUIRE(_dependencyMap[2], "prop-types").string),
    accessibilityIgnoresInvertColors: _$$_REQUIRE(_dependencyMap[2], "prop-types").bool,
    accessibilityRole: _$$_REQUIRE(_dependencyMap[2], "prop-types").oneOf(_$$_REQUIRE(_dependencyMap[3], "./DeprecatedViewAccessibility").DeprecatedAccessibilityRoles),
    accessibilityState: _$$_REQUIRE(_dependencyMap[2], "prop-types").object,
    accessibilityValue: _$$_REQUIRE(_dependencyMap[2], "prop-types").object,
    accessibilityLiveRegion: _$$_REQUIRE(_dependencyMap[2], "prop-types").oneOf(['none', 'polite', 'assertive']),
    importantForAccessibility: _$$_REQUIRE(_dependencyMap[2], "prop-types").oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),
    accessibilityViewIsModal: _$$_REQUIRE(_dependencyMap[2], "prop-types").bool,
    accessibilityElementsHidden: _$$_REQUIRE(_dependencyMap[2], "prop-types").bool,
    onAccessibilityAction: _$$_REQUIRE(_dependencyMap[2], "prop-types").func,
    onAccessibilityTap: _$$_REQUIRE(_dependencyMap[2], "prop-types").func,
    onMagicTap: _$$_REQUIRE(_dependencyMap[2], "prop-types").func,
    testID: _$$_REQUIRE(_dependencyMap[2], "prop-types").string,
    nativeID: _$$_REQUIRE(_dependencyMap[2], "prop-types").string,
    onResponderGrant: _$$_REQUIRE(_dependencyMap[2], "prop-types").func,
    onResponderMove: _$$_REQUIRE(_dependencyMap[2], "prop-types").func,
    onResponderReject: _$$_REQUIRE(_dependencyMap[2], "prop-types").func,
    onResponderRelease: _$$_REQUIRE(_dependencyMap[2], "prop-types").func,
    onResponderTerminate: _$$_REQUIRE(_dependencyMap[2], "prop-types").func,
    onResponderTerminationRequest: _$$_REQUIRE(_dependencyMap[2], "prop-types").func,
    onStartShouldSetResponder: _$$_REQUIRE(_dependencyMap[2], "prop-types").func,
    onStartShouldSetResponderCapture: _$$_REQUIRE(_dependencyMap[2], "prop-types").func,
    onMoveShouldSetResponder: _$$_REQUIRE(_dependencyMap[2], "prop-types").func,
    onMoveShouldSetResponderCapture: _$$_REQUIRE(_dependencyMap[2], "prop-types").func,
    hitSlop: _$$_REQUIRE(_dependencyMap[4], "./DeprecatedEdgeInsetsPropType"),
    onLayout: _$$_REQUIRE(_dependencyMap[2], "prop-types").func,
    pointerEvents: _$$_REQUIRE(_dependencyMap[2], "prop-types").oneOf(['box-none', 'none', 'box-only', 'auto']),
    style: stylePropType,
    removeClippedSubviews: _$$_REQUIRE(_dependencyMap[2], "prop-types").bool,
    renderToHardwareTextureAndroid: _$$_REQUIRE(_dependencyMap[2], "prop-types").bool,
    shouldRasterizeIOS: _$$_REQUIRE(_dependencyMap[2], "prop-types").bool,
    collapsable: _$$_REQUIRE(_dependencyMap[2], "prop-types").bool,
    needsOffscreenAlphaCompositing: _$$_REQUIRE(_dependencyMap[2], "prop-types").bool
  };
},326,[327,208,210,329,330],"node_modules/react-native/Libraries/DeprecatedPropTypes/DeprecatedViewPropTypes.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function DeprecatedStyleSheetPropType(shape) {
    var shapePropType = _$$_REQUIRE(_dependencyMap[0], "./deprecatedCreateStrictShapeTypeChecker")(shape);

    return function (props, propName, componentName, location) {
      var newProps = props;

      if (props[propName]) {
        newProps = {};
        newProps[propName] = _$$_REQUIRE(_dependencyMap[1], "../StyleSheet/flattenStyle")(props[propName]);
      }

      for (var _len = arguments.length, rest = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
        rest[_key - 4] = arguments[_key];
      }

      return shapePropType.apply(void 0, [newProps, propName, componentName, location].concat(rest));
    };
  }

  module.exports = DeprecatedStyleSheetPropType;
},327,[328,184],"node_modules/react-native/Libraries/DeprecatedPropTypes/DeprecatedStyleSheetPropType.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function deprecatedCreateStrictShapeTypeChecker(shapeTypes) {
    function checkType(isRequired, props, propName, componentName, location) {
      if (!props[propName]) {
        if (isRequired) {
          _$$_REQUIRE(_dependencyMap[0], "invariant")(false, "Required object `" + propName + "` was not specified in " + ("`" + componentName + "`."));
        }

        return;
      }

      var propValue = props[propName];
      var propType = typeof propValue;
      var locationName = location || '(unknown)';

      if (propType !== 'object') {
        _$$_REQUIRE(_dependencyMap[0], "invariant")(false, "Invalid " + locationName + " `" + propName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
      }

      var allKeys = Object.assign({}, props[propName], shapeTypes);

      for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
        rest[_key - 5] = arguments[_key];
      }

      for (var _key2 in allKeys) {
        var checker = shapeTypes[_key2];

        if (!checker) {
          _$$_REQUIRE(_dependencyMap[0], "invariant")(false, "Invalid props." + propName + " key `" + _key2 + "` supplied to `" + componentName + "`." + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }

        var error = checker.apply(void 0, [propValue, _key2, componentName, location].concat(rest));

        if (error) {
          _$$_REQUIRE(_dependencyMap[0], "invariant")(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
        }
      }
    }

    function chainedCheckType(props, propName, componentName, location) {
      for (var _len2 = arguments.length, rest = new Array(_len2 > 4 ? _len2 - 4 : 0), _key3 = 4; _key3 < _len2; _key3++) {
        rest[_key3 - 4] = arguments[_key3];
      }

      return checkType.apply(void 0, [false, props, propName, componentName, location].concat(rest));
    }

    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }

  module.exports = deprecatedCreateStrictShapeTypeChecker;
},328,[6],"node_modules/react-native/Libraries/DeprecatedPropTypes/deprecatedCreateStrictShapeTypeChecker.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    DeprecatedAccessibilityRoles: ['none', 'button', 'link', 'search', 'image', 'keyboardkey', 'text', 'adjustable', 'imagebutton', 'header', 'summary', 'alert', 'checkbox', 'combobox', 'menu', 'menubar', 'menuitem', 'progressbar', 'radio', 'radiogroup', 'scrollbar', 'spinbutton', 'switch', 'tab', 'tablist', 'timer', 'toolbar']
  };
},329,[],"node_modules/react-native/Libraries/DeprecatedPropTypes/DeprecatedViewAccessibility.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DeprecatedEdgeInsetsPropType = _$$_REQUIRE(_dependencyMap[0], "prop-types").shape({
    top: _$$_REQUIRE(_dependencyMap[0], "prop-types").number,
    left: _$$_REQUIRE(_dependencyMap[0], "prop-types").number,
    bottom: _$$_REQUIRE(_dependencyMap[0], "prop-types").number,
    right: _$$_REQUIRE(_dependencyMap[0], "prop-types").number
  });

  module.exports = DeprecatedEdgeInsetsPropType;
},330,[210],"node_modules/react-native/Libraries/DeprecatedPropTypes/DeprecatedEdgeInsetsPropType.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var Context = React.createContext(null);
  var _default = Context;
  exports.default = _default;
},331,[49],"node_modules/react-native/Libraries/Image/ImageAnalyticsTagContext.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var TextInlineImage = _$$_REQUIRE(_dependencyMap[0], "../ReactNative/requireNativeComponent")('RCTTextInlineImage');

  module.exports = TextInlineImage;
},332,[56],"node_modules/react-native/Libraries/Image/TextInlineImageNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/extends"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2], "react"));

  var _this = this,
      _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Animated/src/components/AnimatedScrollView.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var ScrollViewWithEventThrottle = React.forwardRef(function (props, ref) {
    return React.createElement(_$$_REQUIRE(_dependencyMap[3], "../../../Components/ScrollView/ScrollView"), (0, _extends2.default)({
      scrollEventThrottle: 0.0001
    }, props, {
      ref: ref,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 24,
        columnNumber: 3
      }
    }));
  });
  module.exports = _$$_REQUIRE(_dependencyMap[4], "../createAnimatedComponent")(ScrollViewWithEventThrottle);
},333,[3,53,49,297,288],"node_modules/react-native/Libraries/Animated/src/components/AnimatedScrollView.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/extends"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2], "react"));

  var _this = this,
      _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Animated/src/components/AnimatedSectionList.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var SectionListWithEventThrottle = React.forwardRef(function (props, ref) {
    return React.createElement(_$$_REQUIRE(_dependencyMap[3], "../../../Lists/SectionList"), (0, _extends2.default)({
      scrollEventThrottle: 0.0001
    }, props, {
      ref: ref,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 24,
        columnNumber: 3
      }
    }));
  });
  module.exports = _$$_REQUIRE(_dependencyMap[4], "../createAnimatedComponent")(SectionListWithEventThrottle);
},334,[3,53,49,335,288],"node_modules/react-native/Libraries/Animated/src/components/AnimatedSectionList.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Lists/SectionList.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var defaultProps = Object.assign({}, _$$_REQUIRE(_dependencyMap[3], "./VirtualizedSectionList").defaultProps, {
    stickySectionHeadersEnabled: "android" === 'ios'
  });

  var SectionList = function (_React$PureComponent) {
    _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/inherits")(SectionList, _React$PureComponent);

    var _super = _createSuper(SectionList);

    function SectionList() {
      var _this;

      _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/classCallCheck")(this, SectionList);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _this._captureRef = function (ref) {
        _this._wrapperListRef = ref;
      };

      return _this;
    }

    _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/createClass")(SectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        if (this._wrapperListRef != null) {
          this._wrapperListRef.scrollToLocation(params);
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        listRef && listRef.recordInteraction();
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        listRef && listRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          return listRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          return listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          listRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(_$$_REQUIRE(_dependencyMap[3], "./VirtualizedSectionList"), _$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/extends")({}, this.props, {
          ref: this._captureRef,
          getItemCount: function getItemCount(items) {
            return items.length;
          },
          getItem: function getItem(items, index) {
            return items[index];
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 246,
            columnNumber: 7
          }
        }));
      }
    }]);

    return SectionList;
  }(React.PureComponent);

  SectionList.defaultProps = defaultProps;
  module.exports = SectionList;
},335,[31,32,49,336,35,16,17,53],"node_modules/react-native/Libraries/Lists/SectionList.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _excluded = ["SectionSeparatorComponent", "renderItem", "renderSectionFooter", "renderSectionHeader", "sections", "stickySectionHeadersEnabled"];
  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Lists/VirtualizedSectionList.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var VirtualizedSectionList = function (_React$PureComponent) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(VirtualizedSectionList, _React$PureComponent);

    var _super = _createSuper(VirtualizedSectionList);

    function VirtualizedSectionList(_props, context) {
      var _this;

      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, VirtualizedSectionList);

      _this = _super.call(this, _props, context);

      _this._getItem = function (props, sections, index) {
        if (!sections) {
          return null;
        }

        var itemIdx = index - 1;

        for (var i = 0; i < sections.length; i++) {
          var section = sections[i];
          var sectionData = section.data;
          var itemCount = props.getItemCount(sectionData);

          if (itemIdx === -1 || itemIdx === itemCount) {
            return section;
          } else if (itemIdx < itemCount) {
            return props.getItem(sectionData, itemIdx);
          } else {
            itemIdx -= itemCount + 2;
          }
        }

        return null;
      };

      _this._keyExtractor = function (item, index) {
        var info = _this._subExtractor(index);

        return info && info.key || String(index);
      };

      _this._convertViewable = function (viewable) {
        _$$_REQUIRE(_dependencyMap[5], "invariant")(viewable.index != null, 'Received a broken ViewToken');

        var info = _this._subExtractor(viewable.index);

        if (!info) {
          return null;
        }

        var keyExtractor = info.section.keyExtractor || _this.props.keyExtractor;
        return Object.assign({}, viewable, {
          index: info.index,
          key: keyExtractor(viewable.item, info.index),
          section: info.section
        });
      };

      _this._onViewableItemsChanged = function (_ref) {
        var viewableItems = _ref.viewableItems,
            changed = _ref.changed;
        var onViewableItemsChanged = _this.props.onViewableItemsChanged;

        if (onViewableItemsChanged != null) {
          onViewableItemsChanged({
            viewableItems: viewableItems.map(_this._convertViewable, _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/assertThisInitialized")(_this)).filter(Boolean),
            changed: changed.map(_this._convertViewable, _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/assertThisInitialized")(_this)).filter(Boolean)
          });
        }
      };

      _this._renderItem = function (_ref2) {
        var item = _ref2.item,
            index = _ref2.index;

        var info = _this._subExtractor(index);

        if (!info) {
          return null;
        }

        var infoIndex = info.index;

        if (infoIndex == null) {
          var section = info.section;

          if (info.header === true) {
            var renderSectionHeader = _this.props.renderSectionHeader;
            return renderSectionHeader ? renderSectionHeader({
              section: section
            }) : null;
          } else {
            var renderSectionFooter = _this.props.renderSectionFooter;
            return renderSectionFooter ? renderSectionFooter({
              section: section
            }) : null;
          }
        } else {
          var renderItem = info.section.renderItem || _this.props.renderItem;

          var SeparatorComponent = _this._getSeparatorComponent(index, info);

          _$$_REQUIRE(_dependencyMap[5], "invariant")(renderItem, 'no renderItem!');

          return React.createElement(ItemWithSeparator, {
            SeparatorComponent: SeparatorComponent,
            LeadingSeparatorComponent: infoIndex === 0 ? _this.props.SectionSeparatorComponent : undefined,
            cellKey: info.key,
            index: infoIndex,
            item: item,
            leadingItem: info.leadingItem,
            leadingSection: info.leadingSection,
            onUpdateSeparator: _this._onUpdateSeparator,
            prevCellKey: (_this._subExtractor(index - 1) || {}).key,
            ref: function ref(_ref3) {
              _this._cellRefs[info.key] = _ref3;
            },
            renderItem: renderItem,
            section: info.section,
            trailingItem: info.trailingItem,
            trailingSection: info.trailingSection,
            inverted: !!_this.props.inverted,
            __self: _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/assertThisInitialized")(_this),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 367,
              columnNumber: 9
            }
          });
        }
      };

      _this._onUpdateSeparator = function (key, newProps) {
        var ref = _this._cellRefs[key];
        ref && ref.updateSeparatorProps(newProps);
      };

      _this._cellRefs = {};

      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };

      _this.state = _this._computeState(_props);
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/createClass")(VirtualizedSectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        var index = params.itemIndex;

        for (var i = 0; i < params.sectionIndex; i++) {
          index += this.props.getItemCount(this.props.sections[i].data) + 2;
        }

        var viewOffset = params.viewOffset || 0;

        if (params.itemIndex > 0 && this.props.stickySectionHeadersEnabled) {
          var frame = this._listRef._getFrameMetricsApprox(index - params.itemIndex);

          viewOffset += frame.length;
        }

        var toIndexParams = Object.assign({}, params, {
          viewOffset: viewOffset,
          index: index
        });

        this._listRef.scrollToIndex(toIndexParams);
      }
    }, {
      key: "getListRef",
      value: function getListRef() {
        return this._listRef;
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        this.setState(this._computeState(nextProps));
      }
    }, {
      key: "_computeState",
      value: function _computeState(props) {
        var _this2 = this;

        var offset = props.ListHeaderComponent ? 1 : 0;
        var stickyHeaderIndices = [];
        var itemCount = props.sections ? props.sections.reduce(function (v, section) {
          stickyHeaderIndices.push(v + offset);
          return v + props.getItemCount(section.data) + 2;
        }, 0) : 0;

        var SectionSeparatorComponent = props.SectionSeparatorComponent,
            renderItem = props.renderItem,
            renderSectionFooter = props.renderSectionFooter,
            renderSectionHeader = props.renderSectionHeader,
            _sections = props.sections,
            stickySectionHeadersEnabled = props.stickySectionHeadersEnabled,
            restProps = _$$_REQUIRE(_dependencyMap[8], "@babel/runtime/helpers/objectWithoutProperties")(props, _excluded);

        return {
          childProps: Object.assign({}, restProps, {
            renderItem: this._renderItem,
            ItemSeparatorComponent: undefined,
            data: props.sections,
            getItemCount: function getItemCount() {
              return itemCount;
            },
            getItem: function getItem(sections, index) {
              return _this2._getItem(props, sections, index);
            },
            keyExtractor: this._keyExtractor,
            onViewableItemsChanged: props.onViewableItemsChanged ? this._onViewableItemsChanged : undefined,
            stickyHeaderIndices: props.stickySectionHeadersEnabled ? stickyHeaderIndices : undefined
          })
        };
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(_$$_REQUIRE(_dependencyMap[9], "./VirtualizedList"), _$$_REQUIRE(_dependencyMap[10], "@babel/runtime/helpers/extends")({}, this.state.childProps, {
          ref: this._captureRef,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 216,
            columnNumber: 7
          }
        }));
      }
    }, {
      key: "_subExtractor",
      value: function _subExtractor(index) {
        var itemIndex = index;
        var _this$props = this.props,
            getItem = _this$props.getItem,
            getItemCount = _this$props.getItemCount,
            keyExtractor = _this$props.keyExtractor,
            sections = _this$props.sections;

        for (var i = 0; i < sections.length; i++) {
          var section = sections[i];
          var sectionData = section.data;
          var key = section.key || String(i);
          itemIndex -= 1;

          if (itemIndex >= getItemCount(sectionData) + 1) {
            itemIndex -= getItemCount(sectionData) + 1;
          } else if (itemIndex === -1) {
            return {
              section: section,
              key: key + ':header',
              index: null,
              header: true,
              trailingSection: sections[i + 1]
            };
          } else if (itemIndex === getItemCount(sectionData)) {
            return {
              section: section,
              key: key + ':footer',
              index: null,
              header: false,
              trailingSection: sections[i + 1]
            };
          } else {
            var extractor = section.keyExtractor || keyExtractor;
            return {
              section: section,
              key: key + ':' + extractor(getItem(sectionData, itemIndex), itemIndex),
              index: itemIndex,
              leadingItem: getItem(sectionData, itemIndex - 1),
              leadingSection: sections[i - 1],
              trailingItem: getItem(sectionData, itemIndex + 1),
              trailingSection: sections[i + 1]
            };
          }
        }
      }
    }, {
      key: "_getSeparatorComponent",
      value: function _getSeparatorComponent(index, info) {
        info = info || this._subExtractor(index);

        if (!info) {
          return null;
        }

        var ItemSeparatorComponent = info.section.ItemSeparatorComponent || this.props.ItemSeparatorComponent;
        var SectionSeparatorComponent = this.props.SectionSeparatorComponent;
        var isLastItemInList = index === this.state.childProps.getItemCount() - 1;
        var isLastItemInSection = info.index === this.props.getItemCount(info.section.data) - 1;

        if (SectionSeparatorComponent && isLastItemInSection) {
          return SectionSeparatorComponent;
        }

        if (ItemSeparatorComponent && !isLastItemInSection && !isLastItemInList) {
          return ItemSeparatorComponent;
        }

        return null;
      }
    }]);

    return VirtualizedSectionList;
  }(React.PureComponent);

  VirtualizedSectionList.defaultProps = Object.assign({}, _$$_REQUIRE(_dependencyMap[9], "./VirtualizedList").defaultProps, {
    data: []
  });

  var ItemWithSeparator = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(ItemWithSeparator, _React$Component);

    var _super2 = _createSuper(ItemWithSeparator);

    function ItemWithSeparator() {
      var _this3;

      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, ItemWithSeparator);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this3 = _super2.call.apply(_super2, [this].concat(args));
      _this3.state = {
        separatorProps: {
          highlighted: false,
          leadingItem: _this3.props.item,
          leadingSection: _this3.props.leadingSection,
          section: _this3.props.section,
          trailingItem: _this3.props.trailingItem,
          trailingSection: _this3.props.trailingSection
        },
        leadingSeparatorProps: {
          highlighted: false,
          leadingItem: _this3.props.leadingItem,
          leadingSection: _this3.props.leadingSection,
          section: _this3.props.section,
          trailingItem: _this3.props.item,
          trailingSection: _this3.props.trailingSection
        }
      };
      _this3._separators = {
        highlight: function highlight() {
          ['leading', 'trailing'].forEach(function (s) {
            return _this3._separators.updateProps(s, {
              highlighted: true
            });
          });
        },
        unhighlight: function unhighlight() {
          ['leading', 'trailing'].forEach(function (s) {
            return _this3._separators.updateProps(s, {
              highlighted: false
            });
          });
        },
        updateProps: function updateProps(select, newProps) {
          var _this3$props = _this3.props,
              LeadingSeparatorComponent = _this3$props.LeadingSeparatorComponent,
              cellKey = _this3$props.cellKey,
              prevCellKey = _this3$props.prevCellKey;

          if (select === 'leading' && LeadingSeparatorComponent != null) {
            _this3.setState(function (state) {
              return {
                leadingSeparatorProps: Object.assign({}, state.leadingSeparatorProps, newProps)
              };
            });
          } else {
            _this3.props.onUpdateSeparator(select === 'leading' && prevCellKey || cellKey, newProps);
          }
        }
      };
      return _this3;
    }

    _$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/createClass")(ItemWithSeparator, [{
      key: "updateSeparatorProps",
      value: function updateSeparatorProps(newProps) {
        this.setState(function (state) {
          return {
            separatorProps: Object.assign({}, state.separatorProps, newProps)
          };
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            LeadingSeparatorComponent = _this$props2.LeadingSeparatorComponent,
            SeparatorComponent = _this$props2.SeparatorComponent,
            item = _this$props2.item,
            index = _this$props2.index,
            section = _this$props2.section,
            inverted = _this$props2.inverted;
        var element = this.props.renderItem({
          item: item,
          index: index,
          section: section,
          separators: this._separators
        });
        var leadingSeparator = LeadingSeparatorComponent && React.createElement(LeadingSeparatorComponent, _$$_REQUIRE(_dependencyMap[10], "@babel/runtime/helpers/extends")({}, this.state.leadingSeparatorProps, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 558,
            columnNumber: 7
          }
        }));
        var separator = SeparatorComponent && React.createElement(SeparatorComponent, _$$_REQUIRE(_dependencyMap[10], "@babel/runtime/helpers/extends")({}, this.state.separatorProps, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 561,
            columnNumber: 7
          }
        }));
        return leadingSeparator || separator ? React.createElement(_$$_REQUIRE(_dependencyMap[11], "../Components/View/View"), {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 567,
            columnNumber: 7
          }
        }, !inverted ? leadingSeparator : separator, element, !inverted ? separator : leadingSeparator) : element;
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, prevState) {
        return {
          separatorProps: Object.assign({}, prevState.separatorProps, {
            leadingItem: props.item,
            leadingSection: props.leadingSection,
            section: props.section,
            trailingItem: props.trailingItem,
            trailingSection: props.trailingSection
          }),
          leadingSeparatorProps: Object.assign({}, prevState.leadingSeparatorProps, {
            leadingItem: props.leadingItem,
            leadingSection: props.leadingSection,
            section: props.section,
            trailingItem: props.item,
            trailingSection: props.trailingSection
          })
        };
      }
    }]);

    return ItemWithSeparator;
  }(React.Component);

  module.exports = VirtualizedSectionList;
},336,[31,32,49,35,16,6,34,17,128,296,53,236],"node_modules/react-native/Libraries/Lists/VirtualizedSectionList.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  module.exports = _$$_REQUIRE(_dependencyMap[1], "../createAnimatedComponent")(_$$_REQUIRE(_dependencyMap[2], "../../../Text/Text"));
},337,[49,288,338],"node_modules/react-native/Libraries/Animated/src/components/AnimatedText.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Text/Text.js",
      _this5 = this;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var PRESS_RECT_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var viewConfig = {
    validAttributes: Object.assign({}, _$$_REQUIRE(_dependencyMap[3], "../Components/View/ReactNativeViewAttributes").UIView, {
      isHighlighted: true,
      numberOfLines: true,
      ellipsizeMode: true,
      allowFontScaling: true,
      maxFontSizeMultiplier: true,
      disabled: true,
      selectable: true,
      selectionColor: true,
      adjustsFontSizeToFit: true,
      minimumFontScale: true,
      textBreakStrategy: true,
      onTextLayout: true,
      onInlineViewLayout: true,
      dataDetectorType: true
    }),
    directEventTypes: {
      topTextLayout: {
        registrationName: 'onTextLayout'
      },
      topInlineViewLayout: {
        registrationName: 'onInlineViewLayout'
      }
    },
    uiViewClassName: 'RCTText'
  };

  var TouchableText = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/inherits")(TouchableText, _React$Component);

    var _super = _createSuper(TouchableText);

    function TouchableText() {
      var _this;

      _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/classCallCheck")(this, TouchableText);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = Object.assign({}, _$$_REQUIRE(_dependencyMap[6], "../Components/Touchable/Touchable").Mixin.touchableGetInitialState(), {
        isHighlighted: false,
        createResponderHandlers: _this._createResponseHandlers.bind(_$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/assertThisInitialized")(_this)),
        responseHandlers: null
      });
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[8], "@babel/runtime/helpers/createClass")(TouchableText, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var props = this.props;

        if (isTouchable(props)) {
          props = Object.assign({}, props, this.state.responseHandlers, {
            isHighlighted: this.state.isHighlighted
          });
        }

        if (props.selectionColor != null) {
          props = Object.assign({}, props, {
            selectionColor: _$$_REQUIRE(_dependencyMap[9], "../StyleSheet/processColor")(props.selectionColor)
          });
        }

        if (__DEV__) {
          if (_$$_REQUIRE(_dependencyMap[6], "../Components/Touchable/Touchable").TOUCH_TARGET_DEBUG && props.onPress != null) {
            props = Object.assign({}, props, {
              style: [props.style, {
                color: 'magenta'
              }]
            });
          }
        }

        return React.createElement(_$$_REQUIRE(_dependencyMap[10], "./TextAncestor").Consumer, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 153,
            columnNumber: 7
          }
        }, function (hasTextAncestor) {
          return hasTextAncestor ? React.createElement(RCTVirtualText, _$$_REQUIRE(_dependencyMap[11], "@babel/runtime/helpers/extends")({}, props, {
            ref: props.forwardedRef,
            __self: _this2,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 156,
              columnNumber: 13
            }
          })) : React.createElement(_$$_REQUIRE(_dependencyMap[10], "./TextAncestor").Provider, {
            value: true,
            __self: _this2,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 158,
              columnNumber: 13
            }
          }, React.createElement(RCTText, _$$_REQUIRE(_dependencyMap[11], "@babel/runtime/helpers/extends")({}, props, {
            ref: props.forwardedRef,
            __self: _this2,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 159,
              columnNumber: 15
            }
          })));
        });
      }
    }, {
      key: "_createResponseHandlers",
      value: function _createResponseHandlers() {
        var _this3 = this;

        return {
          onStartShouldSetResponder: function onStartShouldSetResponder() {
            var onStartShouldSetResponder = _this3.props.onStartShouldSetResponder;
            var shouldSetResponder = (onStartShouldSetResponder == null ? false : onStartShouldSetResponder()) || isTouchable(_this3.props);

            if (shouldSetResponder) {
              _this3._attachTouchHandlers();
            }

            return shouldSetResponder;
          },
          onResponderGrant: function onResponderGrant(event, dispatchID) {
            _$$_REQUIRE(_dependencyMap[12], "nullthrows")(_this3.touchableHandleResponderGrant)(event, dispatchID);

            if (_this3.props.onResponderGrant != null) {
              _this3.props.onResponderGrant.call(_this3, event, dispatchID);
            }
          },
          onResponderMove: function onResponderMove(event) {
            _$$_REQUIRE(_dependencyMap[12], "nullthrows")(_this3.touchableHandleResponderMove)(event);

            if (_this3.props.onResponderMove != null) {
              _this3.props.onResponderMove.call(_this3, event);
            }
          },
          onResponderRelease: function onResponderRelease(event) {
            _$$_REQUIRE(_dependencyMap[12], "nullthrows")(_this3.touchableHandleResponderRelease)(event);

            if (_this3.props.onResponderRelease != null) {
              _this3.props.onResponderRelease.call(_this3, event);
            }
          },
          onResponderTerminate: function onResponderTerminate(event) {
            _$$_REQUIRE(_dependencyMap[12], "nullthrows")(_this3.touchableHandleResponderTerminate)(event);

            if (_this3.props.onResponderTerminate != null) {
              _this3.props.onResponderTerminate.call(_this3, event);
            }
          },
          onResponderTerminationRequest: function onResponderTerminationRequest() {
            var onResponderTerminationRequest = _this3.props.onResponderTerminationRequest;

            if (!_$$_REQUIRE(_dependencyMap[12], "nullthrows")(_this3.touchableHandleResponderTerminationRequest)()) {
              return false;
            }

            if (onResponderTerminationRequest == null) {
              return true;
            }

            return onResponderTerminationRequest();
          }
        };
      }
    }, {
      key: "_attachTouchHandlers",
      value: function _attachTouchHandlers() {
        var _this4 = this;

        if (this.touchableGetPressRectOffset != null) {
          return;
        }

        for (var key in _$$_REQUIRE(_dependencyMap[6], "../Components/Touchable/Touchable").Mixin) {
          if (typeof _$$_REQUIRE(_dependencyMap[6], "../Components/Touchable/Touchable").Mixin[key] === 'function') {
            this[key] = _$$_REQUIRE(_dependencyMap[6], "../Components/Touchable/Touchable").Mixin[key].bind(this);
          }
        }

        this.touchableHandleActivePressIn = function () {
          if (!_this4.props.suppressHighlighting && isTouchable(_this4.props)) {
            _this4.setState({
              isHighlighted: true
            });
          }
        };

        this.touchableHandleActivePressOut = function () {
          if (!_this4.props.suppressHighlighting && isTouchable(_this4.props)) {
            _this4.setState({
              isHighlighted: false
            });
          }
        };

        this.touchableHandlePress = function (event) {
          if (_this4.props.onPress != null) {
            _this4.props.onPress(event);
          }
        };

        this.touchableHandleLongPress = function (event) {
          if (_this4.props.onLongPress != null) {
            _this4.props.onLongPress(event);
          }
        };

        this.touchableGetPressRectOffset = function () {
          return _this4.props.pressRetentionOffset == null ? PRESS_RECT_OFFSET : _this4.props.pressRetentionOffset;
        };
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        return prevState.responseHandlers == null && isTouchable(nextProps) ? {
          responseHandlers: prevState.createResponderHandlers()
        } : null;
      }
    }]);

    return TouchableText;
  }(React.Component);

  TouchableText.defaultProps = {
    accessible: true,
    allowFontScaling: true,
    ellipsizeMode: 'tail'
  };
  TouchableText.viewConfig = viewConfig;

  var isTouchable = function isTouchable(props) {
    return props.onPress != null || props.onLongPress != null || props.onStartShouldSetResponder != null;
  };

  var RCTText = _$$_REQUIRE(_dependencyMap[13], "../Renderer/shims/createReactNativeComponentClass")(viewConfig.uiViewClassName, function () {
    return viewConfig;
  });

  var RCTVirtualText = _$$_REQUIRE(_dependencyMap[14], "../ReactNative/UIManager").getViewManagerConfig('RCTVirtualText') == null ? RCTText : _$$_REQUIRE(_dependencyMap[13], "../Renderer/shims/createReactNativeComponentClass")('RCTVirtualText', function () {
    return {
      validAttributes: Object.assign({}, _$$_REQUIRE(_dependencyMap[3], "../Components/View/ReactNativeViewAttributes").UIView, {
        isHighlighted: true,
        maxFontSizeMultiplier: true
      }),
      uiViewClassName: 'RCTVirtualText'
    };
  });

  var Text = function Text(props, forwardedRef) {
    return React.createElement(TouchableText, _$$_REQUIRE(_dependencyMap[11], "@babel/runtime/helpers/extends")({}, props, {
      forwardedRef: forwardedRef,
      __self: _this5,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 283,
        columnNumber: 10
      }
    }));
  };

  var TextToExport = React.forwardRef(Text);
  TextToExport.displayName = 'Text';
  TextToExport.propTypes = _$$_REQUIRE(_dependencyMap[15], "../DeprecatedPropTypes/DeprecatedTextPropTypes");
  module.exports = TextToExport;
},338,[31,32,49,339,35,16,254,34,17,176,240,53,340,57,43,341],"node_modules/react-native/Libraries/Text/Text.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var UIView = {
    pointerEvents: true,
    accessible: true,
    accessibilityActions: true,
    accessibilityLabel: true,
    accessibilityLiveRegion: true,
    accessibilityRole: true,
    accessibilityState: true,
    accessibilityValue: true,
    accessibilityHint: true,
    importantForAccessibility: true,
    nativeID: true,
    testID: true,
    renderToHardwareTextureAndroid: true,
    shouldRasterizeIOS: true,
    onLayout: true,
    onAccessibilityAction: true,
    onAccessibilityTap: true,
    onMagicTap: true,
    onAccessibilityEscape: true,
    collapsable: true,
    needsOffscreenAlphaCompositing: true,
    style: _$$_REQUIRE(_dependencyMap[0], "./ReactNativeStyleAttributes")
  };
  var RCTView = Object.assign({}, UIView, {
    removeClippedSubviews: true
  });
  var ReactNativeViewAttributes = {
    UIView: UIView,
    RCTView: RCTView
  };
  module.exports = ReactNativeViewAttributes;
},339,[207],"node_modules/react-native/Libraries/Components/View/ReactNativeViewAttributes.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function nullthrows(x, message) {
    if (x != null) {
      return x;
    }

    var error = new Error(message !== undefined ? message : 'Got unexpected ' + x);
    error.framesToPop = 1;
    throw error;
  }

  module.exports = nullthrows;
  module.exports.default = nullthrows;
  Object.defineProperty(module.exports, '__esModule', {
    value: true
  });
},340,[],"node_modules/nullthrows/nullthrows.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var stylePropType = _$$_REQUIRE(_dependencyMap[0], "./DeprecatedStyleSheetPropType")(_$$_REQUIRE(_dependencyMap[1], "./DeprecatedTextStylePropTypes"));

  var DataDetectorTypes = ['phoneNumber', 'link', 'email', 'none', 'all'];
  module.exports = {
    ellipsizeMode: _$$_REQUIRE(_dependencyMap[2], "prop-types").oneOf(['head', 'middle', 'tail', 'clip']),
    numberOfLines: _$$_REQUIRE(_dependencyMap[2], "prop-types").number,
    textBreakStrategy: _$$_REQUIRE(_dependencyMap[2], "prop-types").oneOf(['simple', 'highQuality', 'balanced']),
    onLayout: _$$_REQUIRE(_dependencyMap[2], "prop-types").func,
    onPress: _$$_REQUIRE(_dependencyMap[2], "prop-types").func,
    onLongPress: _$$_REQUIRE(_dependencyMap[2], "prop-types").func,
    pressRetentionOffset: _$$_REQUIRE(_dependencyMap[3], "./DeprecatedEdgeInsetsPropType"),
    selectable: _$$_REQUIRE(_dependencyMap[2], "prop-types").bool,
    selectionColor: _$$_REQUIRE(_dependencyMap[4], "./DeprecatedColorPropType"),
    suppressHighlighting: _$$_REQUIRE(_dependencyMap[2], "prop-types").bool,
    style: stylePropType,
    testID: _$$_REQUIRE(_dependencyMap[2], "prop-types").string,
    nativeID: _$$_REQUIRE(_dependencyMap[2], "prop-types").string,
    allowFontScaling: _$$_REQUIRE(_dependencyMap[2], "prop-types").bool,
    maxFontSizeMultiplier: _$$_REQUIRE(_dependencyMap[2], "prop-types").number,
    accessible: _$$_REQUIRE(_dependencyMap[2], "prop-types").bool,
    adjustsFontSizeToFit: _$$_REQUIRE(_dependencyMap[2], "prop-types").bool,
    minimumFontScale: _$$_REQUIRE(_dependencyMap[2], "prop-types").number,
    disabled: _$$_REQUIRE(_dependencyMap[2], "prop-types").bool,
    dataDetectorType: _$$_REQUIRE(_dependencyMap[2], "prop-types").oneOf(DataDetectorTypes)
  };
},341,[327,224,210,330,221],"node_modules/react-native/Libraries/DeprecatedPropTypes/DeprecatedTextPropTypes.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  module.exports = _$$_REQUIRE(_dependencyMap[1], "../createAnimatedComponent")(_$$_REQUIRE(_dependencyMap[2], "../../../Components/View/View"));
},342,[49,288,236],"node_modules/react-native/Libraries/Animated/src/components/AnimatedView.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/extends"));

  var _objectWithoutProperties2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/objectWithoutProperties"));

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/createClass"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/getPrototypeOf"));

  var _AndroidCheckBoxNativeComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8], "./AndroidCheckBoxNativeComponent"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/CheckBox/CheckBox.android.js";
  var _excluded = ["disabled", "value", "tintColors", "style", "forwardedRef"];

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[9], "react");

  var CheckBox = function (_React$Component) {
    (0, _inherits2.default)(CheckBox, _React$Component);

    var _super = _createSuper(CheckBox);

    function CheckBox() {
      var _this;

      (0, _classCallCheck2.default)(this, CheckBox);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this._nativeRef = null;
      _this._setNativeRef = _$$_REQUIRE(_dependencyMap[10], "../../Utilities/setAndForwardRef")({
        getForwardedRef: function getForwardedRef() {
          return _this.props.forwardedRef;
        },
        setLocalRef: function setLocalRef(ref) {
          _this._nativeRef = ref;
        }
      });

      _this._onChange = function (event) {
        var _this$props$value;

        var value = (_this$props$value = _this.props.value) != null ? _this$props$value : false;

        _AndroidCheckBoxNativeComponent.Commands.setNativeValue(_$$_REQUIRE(_dependencyMap[11], "nullthrows")(_this._nativeRef), value);

        _this.props.onChange && _this.props.onChange(event);
        _this.props.onValueChange && _this.props.onValueChange(event.nativeEvent.value);
      };

      return _this;
    }

    (0, _createClass2.default)(CheckBox, [{
      key: "_getTintColors",
      value: function _getTintColors(tintColors) {
        if (tintColors) {
          var processedTextColorTrue = _$$_REQUIRE(_dependencyMap[12], "../../StyleSheet/processColor")(tintColors.true);

          _$$_REQUIRE(_dependencyMap[13], "invariant")(processedTextColorTrue == null || typeof processedTextColorTrue === 'number', 'Unexpected color given for tintColors.true');

          var processedTextColorFalse = _$$_REQUIRE(_dependencyMap[12], "../../StyleSheet/processColor")(tintColors.true);

          _$$_REQUIRE(_dependencyMap[13], "invariant")(processedTextColorFalse == null || typeof processedTextColorFalse === 'number', 'Unexpected color given for tintColors.false');

          return {
            true: processedTextColorTrue,
            false: processedTextColorFalse
          };
        } else {
          return undefined;
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props$disabled, _this$props$value2;

        var _this$props = this.props,
            _ = _this$props.disabled,
            __ = _this$props.value,
            tintColors = _this$props.tintColors,
            style = _this$props.style,
            forwardedRef = _this$props.forwardedRef,
            props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var disabled = (_this$props$disabled = this.props.disabled) != null ? _this$props$disabled : false;
        var value = (_this$props$value2 = this.props.value) != null ? _this$props$value2 : false;
        var nativeProps = Object.assign({}, props, {
          onStartShouldSetResponder: function onStartShouldSetResponder() {
            return true;
          },
          onResponderTerminationRequest: function onResponderTerminationRequest() {
            return false;
          },
          enabled: !disabled,
          on: value,
          tintColors: this._getTintColors(tintColors),
          style: [styles.rctCheckBox, style]
        });
        return React.createElement(_AndroidCheckBoxNativeComponent.default, (0, _extends2.default)({}, nativeProps, {
          ref: this._setNativeRef,
          onChange: this._onChange,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 200,
            columnNumber: 7
          }
        }));
      }
    }]);
    return CheckBox;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[14], "../../StyleSheet/StyleSheet").create({
    rctCheckBox: {
      height: 32,
      width: 32
    }
  });

  var CheckBoxWithRef = React.forwardRef(function CheckBoxWithRef(props, ref) {
    return React.createElement(CheckBox, (0, _extends2.default)({}, props, {
      forwardedRef: ref,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 225,
        columnNumber: 10
      }
    }));
  });
  module.exports = CheckBoxWithRef;
},343,[3,53,128,16,17,35,32,31,344,49,289,340,176,6,241],"node_modules/react-native/Libraries/Components/CheckBox/CheckBox.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Commands = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _codegenNativeCommands = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/Utilities/codegenNativeCommands"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['setNativeValue']
  });
  exports.Commands = Commands;

  var _default = _$$_REQUIRE(_dependencyMap[3], "../../ReactNative/requireNativeComponent")('AndroidCheckBox');

  exports.default = _default;
},344,[49,3,200,56],"node_modules/react-native/Libraries/Components/CheckBox/AndroidCheckBoxNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/DatePicker/DatePickerIOS.android.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var DummyDatePickerIOS = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(DummyDatePickerIOS, _React$Component);

    var _super = _createSuper(DummyDatePickerIOS);

    function DummyDatePickerIOS() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, DummyDatePickerIOS);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(DummyDatePickerIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(_$$_REQUIRE(_dependencyMap[6], "../View/View"), {
          style: [styles.dummyDatePickerIOS, this.props.style],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 20,
            columnNumber: 7
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[7], "../../Text/Text"), {
          style: styles.datePickerText,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 21,
            columnNumber: 9
          }
        }, "DatePickerIOS is not supported on this platform!"));
      }
    }]);

    return DummyDatePickerIOS;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[8], "../../StyleSheet/StyleSheet").create({
    dummyDatePickerIOS: {
      height: 100,
      width: 300,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center',
      margin: 10
    },
    datePickerText: {
      color: '#333333',
      margin: 20
    }
  });

  module.exports = DummyDatePickerIOS;
},345,[31,32,49,35,16,17,236,338,241],"node_modules/react-native/Libraries/Components/DatePicker/DatePickerIOS.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/extends"));

  var _objectWithoutProperties2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/objectWithoutProperties"));

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/createClass"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/getPrototypeOf"));

  var _AndroidDrawerLayoutNativeComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8], "./AndroidDrawerLayoutNativeComponent"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.android.js";
  var _excluded = ["onDrawerStateChanged", "renderNavigationView", "onDrawerOpen", "onDrawerClose"];

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[9], "react");

  var DRAWER_STATES = ['Idle', 'Dragging', 'Settling'];

  var DrawerLayoutAndroid = function (_React$Component) {
    (0, _inherits2.default)(DrawerLayoutAndroid, _React$Component);

    var _super = _createSuper(DrawerLayoutAndroid);

    function DrawerLayoutAndroid() {
      var _this;

      (0, _classCallCheck2.default)(this, DrawerLayoutAndroid);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this._nativeRef = React.createRef();
      _this.state = {
        statusBarBackgroundColor: null
      };

      _this._onDrawerSlide = function (event) {
        if (_this.props.onDrawerSlide) {
          _this.props.onDrawerSlide(event);
        }

        if (_this.props.keyboardDismissMode === 'on-drag') {
          _$$_REQUIRE(_dependencyMap[10], "../../Utilities/dismissKeyboard")();
        }
      };

      _this._onDrawerOpen = function () {
        if (_this.props.onDrawerOpen) {
          _this.props.onDrawerOpen();
        }
      };

      _this._onDrawerClose = function () {
        if (_this.props.onDrawerClose) {
          _this.props.onDrawerClose();
        }
      };

      _this._onDrawerStateChanged = function (event) {
        if (_this.props.onDrawerStateChanged) {
          _this.props.onDrawerStateChanged(DRAWER_STATES[event.nativeEvent.drawerState]);
        }
      };

      return _this;
    }

    (0, _createClass2.default)(DrawerLayoutAndroid, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            onDrawerStateChanged = _this$props.onDrawerStateChanged,
            renderNavigationView = _this$props.renderNavigationView,
            onDrawerOpen = _this$props.onDrawerOpen,
            onDrawerClose = _this$props.onDrawerClose,
            props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var drawStatusBar = _$$_REQUIRE(_dependencyMap[11], "../../Utilities/Platform").Version >= 21 && this.props.statusBarBackgroundColor != null;
        var drawerViewWrapper = React.createElement(_$$_REQUIRE(_dependencyMap[12], "../View/View"), {
          style: [styles.drawerSubview, {
            width: this.props.drawerWidth,
            backgroundColor: this.props.drawerBackgroundColor
          }],
          collapsable: false,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 190,
            columnNumber: 7
          }
        }, renderNavigationView(), drawStatusBar && React.createElement(_$$_REQUIRE(_dependencyMap[12], "../View/View"), {
          style: styles.drawerStatusBar,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 200,
            columnNumber: 27
          }
        }));
        var childrenWrapper = React.createElement(_$$_REQUIRE(_dependencyMap[12], "../View/View"), {
          style: styles.mainSubview,
          collapsable: false,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 204,
            columnNumber: 7
          }
        }, drawStatusBar && React.createElement(_$$_REQUIRE(_dependencyMap[13], "../StatusBar/StatusBar"), {
          translucent: true,
          backgroundColor: this.props.statusBarBackgroundColor,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 206,
            columnNumber: 11
          }
        }), drawStatusBar && React.createElement(_$$_REQUIRE(_dependencyMap[12], "../View/View"), {
          style: [styles.statusBar, {
            backgroundColor: this.props.statusBarBackgroundColor
          }],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 212,
            columnNumber: 11
          }
        }), this.props.children);
        return React.createElement(_AndroidDrawerLayoutNativeComponent.default, (0, _extends2.default)({}, props, {
          ref: this._nativeRef,
          drawerWidth: this.props.drawerWidth,
          drawerPosition: this.props.drawerPosition,
          drawerLockMode: this.props.drawerLockMode,
          style: [styles.base, this.props.style],
          onDrawerSlide: this._onDrawerSlide,
          onDrawerOpen: this._onDrawerOpen,
          onDrawerClose: this._onDrawerClose,
          onDrawerStateChanged: this._onDrawerStateChanged,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 223,
            columnNumber: 7
          }
        }), childrenWrapper, drawerViewWrapper);
      }
    }, {
      key: "openDrawer",
      value: function openDrawer() {
        _AndroidDrawerLayoutNativeComponent.Commands.openDrawer(_$$_REQUIRE(_dependencyMap[14], "nullthrows")(this._nativeRef.current));
      }
    }, {
      key: "closeDrawer",
      value: function closeDrawer() {
        _AndroidDrawerLayoutNativeComponent.Commands.closeDrawer(_$$_REQUIRE(_dependencyMap[14], "nullthrows")(this._nativeRef.current));
      }
    }, {
      key: "blur",
      value: function blur() {
        _$$_REQUIRE(_dependencyMap[14], "nullthrows")(this._nativeRef.current).blur();
      }
    }, {
      key: "focus",
      value: function focus() {
        _$$_REQUIRE(_dependencyMap[14], "nullthrows")(this._nativeRef.current).focus();
      }
    }, {
      key: "measure",
      value: function measure(callback) {
        _$$_REQUIRE(_dependencyMap[14], "nullthrows")(this._nativeRef.current).measure(callback);
      }
    }, {
      key: "measureInWindow",
      value: function measureInWindow(callback) {
        _$$_REQUIRE(_dependencyMap[14], "nullthrows")(this._nativeRef.current).measureInWindow(callback);
      }
    }, {
      key: "measureLayout",
      value: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
        _$$_REQUIRE(_dependencyMap[14], "nullthrows")(this._nativeRef.current).measureLayout(relativeToNativeNode, onSuccess, onFail);
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(nativeProps) {
        _$$_REQUIRE(_dependencyMap[14], "nullthrows")(this._nativeRef.current).setNativeProps(nativeProps);
      }
    }], [{
      key: "positions",
      get: function get() {
        console.warn('Setting DrawerLayoutAndroid drawerPosition using `DrawerLayoutAndroid.positions` is deprecated. Instead pass the string value "left" or "right"');
        return {
          Left: 'left',
          Right: 'right'
        };
      }
    }]);
    return DrawerLayoutAndroid;
  }(React.Component);

  DrawerLayoutAndroid.defaultProps = {
    drawerBackgroundColor: 'white'
  };

  var styles = _$$_REQUIRE(_dependencyMap[15], "../../StyleSheet/StyleSheet").create({
    base: {
      flex: 1,
      elevation: 16
    },
    mainSubview: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    drawerSubview: {
      position: 'absolute',
      top: 0,
      bottom: 0
    },
    statusBar: {
      height: _$$_REQUIRE(_dependencyMap[13], "../StatusBar/StatusBar").currentHeight
    },
    drawerStatusBar: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      height: _$$_REQUIRE(_dependencyMap[13], "../StatusBar/StatusBar").currentHeight,
      backgroundColor: 'rgba(0, 0, 0, 0.251)'
    }
  });

  module.exports = DrawerLayoutAndroid;
},346,[3,53,128,16,17,35,32,31,347,49,309,80,236,348,340,241],"node_modules/react-native/Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Commands = void 0;

  var _codegenNativeCommands = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "react-native/Libraries/Utilities/codegenNativeCommands"));

  var _codegenNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/Utilities/codegenNativeComponent"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3], "react"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['openDrawer', 'closeDrawer']
  });
  exports.Commands = Commands;

  var _default = (0, _codegenNativeComponent.default)('AndroidDrawerLayout');

  exports.default = _default;
},347,[3,200,55,49],"node_modules/react-native/Libraries/Components/DrawerAndroid/AndroidDrawerLayoutNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/getPrototypeOf"));

  var _NativeStatusBarManagerAndroid = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "./NativeStatusBarManagerAndroid"));

  var _NativeStatusBarManagerIOS = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "./NativeStatusBarManagerIOS"));

  var _NativeStatusBarManag;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[8], "react");

  function mergePropsStack(propsStack, defaultValues) {
    return propsStack.reduce(function (prev, cur) {
      for (var prop in cur) {
        if (cur[prop] != null) {
          prev[prop] = cur[prop];
        }
      }

      return prev;
    }, Object.assign({}, defaultValues));
  }

  function createStackEntry(props) {
    return {
      backgroundColor: props.backgroundColor != null ? {
        value: props.backgroundColor,
        animated: props.animated
      } : null,
      barStyle: props.barStyle != null ? {
        value: props.barStyle,
        animated: props.animated
      } : null,
      translucent: props.translucent,
      hidden: props.hidden != null ? {
        value: props.hidden,
        animated: props.animated,
        transition: props.showHideTransition
      } : null,
      networkActivityIndicatorVisible: props.networkActivityIndicatorVisible
    };
  }

  var StatusBar = function (_React$Component) {
    (0, _inherits2.default)(StatusBar, _React$Component);

    var _super = _createSuper(StatusBar);

    function StatusBar() {
      var _this;

      (0, _classCallCheck2.default)(this, StatusBar);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this._stackEntry = null;
      return _this;
    }

    (0, _createClass2.default)(StatusBar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._stackEntry = StatusBar.pushStackEntry(this.props);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        StatusBar.popStackEntry(this._stackEntry);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this._stackEntry = StatusBar.replaceStackEntry(this._stackEntry, this.props);
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }], [{
      key: "setHidden",
      value: function setHidden(hidden, animation) {
        animation = animation || 'none';
        StatusBar._defaultProps.hidden.value = hidden;

        if ("android" === 'ios') {
          _NativeStatusBarManagerIOS.default.setHidden(hidden, animation);
        } else if ("android" === 'android') {
          _NativeStatusBarManagerAndroid.default.setHidden(hidden);
        }
      }
    }, {
      key: "setBarStyle",
      value: function setBarStyle(style, animated) {
        animated = animated || false;
        StatusBar._defaultProps.barStyle.value = style;

        if ("android" === 'ios') {
          _NativeStatusBarManagerIOS.default.setStyle(style, animated);
        } else if ("android" === 'android') {
          _NativeStatusBarManagerAndroid.default.setStyle(style);
        }
      }
    }, {
      key: "setNetworkActivityIndicatorVisible",
      value: function setNetworkActivityIndicatorVisible(visible) {
        if ("android" !== 'ios') {
          console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');
          return;
        }

        StatusBar._defaultProps.networkActivityIndicatorVisible = visible;

        _NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(visible);
      }
    }, {
      key: "setBackgroundColor",
      value: function setBackgroundColor(color, animated) {
        if ("android" !== 'android') {
          console.warn('`setBackgroundColor` is only available on Android');
          return;
        }

        animated = animated || false;
        StatusBar._defaultProps.backgroundColor.value = color;

        var processedColor = _$$_REQUIRE(_dependencyMap[9], "../../StyleSheet/processColor")(color);

        if (processedColor == null) {
          console.warn("`StatusBar.setBackgroundColor`: Color " + color + " parsed to null or undefined");
          return;
        }

        _$$_REQUIRE(_dependencyMap[10], "invariant")(typeof processedColor === 'number', 'Unexpected color given for StatusBar.setBackgroundColor');

        _NativeStatusBarManagerAndroid.default.setColor(processedColor, animated);
      }
    }, {
      key: "setTranslucent",
      value: function setTranslucent(translucent) {
        if ("android" !== 'android') {
          console.warn('`setTranslucent` is only available on Android');
          return;
        }

        StatusBar._defaultProps.translucent = translucent;

        _NativeStatusBarManagerAndroid.default.setTranslucent(translucent);
      }
    }, {
      key: "pushStackEntry",
      value: function pushStackEntry(props) {
        var entry = createStackEntry(props);

        StatusBar._propsStack.push(entry);

        StatusBar._updatePropsStack();

        return entry;
      }
    }, {
      key: "popStackEntry",
      value: function popStackEntry(entry) {
        var index = StatusBar._propsStack.indexOf(entry);

        if (index !== -1) {
          StatusBar._propsStack.splice(index, 1);
        }

        StatusBar._updatePropsStack();
      }
    }, {
      key: "replaceStackEntry",
      value: function replaceStackEntry(entry, props) {
        var newEntry = createStackEntry(props);

        var index = StatusBar._propsStack.indexOf(entry);

        if (index !== -1) {
          StatusBar._propsStack[index] = newEntry;
        }

        StatusBar._updatePropsStack();

        return newEntry;
      }
    }]);
    return StatusBar;
  }(React.Component);

  StatusBar._propsStack = [];
  StatusBar._defaultProps = createStackEntry({
    animated: false,
    showHideTransition: 'fade',
    backgroundColor: "android" === 'android' ? (_NativeStatusBarManag = _NativeStatusBarManagerAndroid.default.getConstants().DEFAULT_BACKGROUND_COLOR) != null ? _NativeStatusBarManag : 'black' : 'black',
    barStyle: 'default',
    translucent: false,
    hidden: false,
    networkActivityIndicatorVisible: false
  });
  StatusBar._updateImmediate = null;
  StatusBar._currentValues = null;
  StatusBar.currentHeight = "android" === 'android' ? _NativeStatusBarManagerAndroid.default.getConstants().HEIGHT : null;
  StatusBar.defaultProps = {
    animated: false,
    showHideTransition: 'fade'
  };

  StatusBar._updatePropsStack = function () {
    clearImmediate(StatusBar._updateImmediate);
    StatusBar._updateImmediate = setImmediate(function () {
      var oldProps = StatusBar._currentValues;
      var mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);

      if ("android" === 'ios') {
        if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
          _NativeStatusBarManagerIOS.default.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated || false);
        }

        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
          _NativeStatusBarManagerIOS.default.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');
        }

        if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {
          _NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);
        }
      } else if ("android" === 'android') {
        _NativeStatusBarManagerAndroid.default.setStyle(mergedProps.barStyle.value);

        var processedColor = _$$_REQUIRE(_dependencyMap[9], "../../StyleSheet/processColor")(mergedProps.backgroundColor.value);

        if (processedColor == null) {
          console.warn("`StatusBar._updatePropsStack`: Color " + mergedProps.backgroundColor.value + " parsed to null or undefined");
        } else {
          _$$_REQUIRE(_dependencyMap[10], "invariant")(typeof processedColor === 'number', 'Unexpected color given in StatusBar._updatePropsStack');

          _NativeStatusBarManagerAndroid.default.setColor(processedColor, mergedProps.backgroundColor.animated);
        }

        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
          _NativeStatusBarManagerAndroid.default.setHidden(mergedProps.hidden.value);
        }

        if (!oldProps || oldProps.translucent !== mergedProps.translucent) {
          _NativeStatusBarManagerAndroid.default.setTranslucent(mergedProps.translucent);
        }
      }

      StatusBar._currentValues = mergedProps;
    });
  };

  module.exports = StatusBar;
},348,[3,16,17,35,32,31,349,350,49,176,6],"node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.getEnforcing('StatusBarManager');

  exports.default = _default;
},349,[5],"node_modules/react-native/Libraries/Components/StatusBar/NativeStatusBarManagerAndroid.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.getEnforcing('StatusBarManager');

  exports.default = _default;
},350,[5],"node_modules/react-native/Libraries/Components/StatusBar/NativeStatusBarManagerIOS.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Image/ImageBackground.js";
  var _excluded = ["children", "style", "imageStyle", "imageRef"];

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var ImageBackground = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(ImageBackground, _React$Component);

    var _super = _createSuper(ImageBackground);

    function ImageBackground() {
      var _this;

      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, ImageBackground);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this._viewRef = null;

      _this._captureRef = function (ref) {
        _this._viewRef = ref;
      };

      return _this;
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(ImageBackground, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var viewRef = this._viewRef;

        if (viewRef) {
          viewRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            style = _this$props.style,
            imageStyle = _this$props.imageStyle,
            imageRef = _this$props.imageRef,
            props = _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/objectWithoutProperties")(_this$props, _excluded);

        return React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          accessibilityIgnoresInvertColors: true,
          style: style,
          ref: this._captureRef,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 61,
            columnNumber: 7
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "./Image"), _$$_REQUIRE(_dependencyMap[9], "@babel/runtime/helpers/extends")({}, props, {
          style: [_$$_REQUIRE(_dependencyMap[10], "../StyleSheet/StyleSheet").absoluteFill, {
            width: style.width,
            height: style.height
          }, imageStyle],
          ref: imageRef,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 65,
            columnNumber: 9
          }
        })), children);
      }
    }]);

    return ImageBackground;
  }(React.Component);

  module.exports = ImageBackground;
},351,[31,32,49,35,16,17,128,236,322,53,241],"node_modules/react-native/Libraries/Image/ImageBackground.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/getPrototypeOf"));

  var _RCTInputAccessoryViewNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "./RCTInputAccessoryViewNativeComponent"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/TextInput/InputAccessoryView.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[7], "react");

  var InputAccessoryView = function (_React$Component) {
    (0, _inherits2.default)(InputAccessoryView, _React$Component);

    var _super = _createSuper(InputAccessoryView);

    function InputAccessoryView() {
      (0, _classCallCheck2.default)(this, InputAccessoryView);
      return _super.apply(this, arguments);
    }

    (0, _createClass2.default)(InputAccessoryView, [{
      key: "render",
      value: function render() {
        if ("android" !== 'ios') {
          console.warn('<InputAccessoryView> is only supported on iOS.');
        }

        if (React.Children.count(this.props.children) === 0) {
          return null;
        }

        return React.createElement(_RCTInputAccessoryViewNativeComponent.default, {
          style: [this.props.style, styles.container],
          nativeID: this.props.nativeID,
          backgroundColor: this.props.backgroundColor,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 102,
            columnNumber: 7
          }
        }, this.props.children);
      }
    }]);
    return InputAccessoryView;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[8], "../../StyleSheet/StyleSheet").create({
    container: {
      position: 'absolute'
    }
  });

  module.exports = InputAccessoryView;
},352,[3,16,17,35,32,31,353,49,241],"node_modules/react-native/Libraries/Components/TextInput/InputAccessoryView.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _codegenNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../Utilities/codegenNativeComponent"));

  var _default = (0, _codegenNativeComponent.default)('RCTInputAccessoryView');

  exports.default = _default;
},353,[3,55],"node_modules/react-native/Libraries/Components/TextInput/RCTInputAccessoryViewNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/Keyboard/KeyboardAvoidingView.js";
  var _excluded = ["behavior", "children", "contentContainerStyle", "enabled", "keyboardVerticalOffset", "style"];

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var KeyboardAvoidingView = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(KeyboardAvoidingView, _React$Component);

    var _super = _createSuper(KeyboardAvoidingView);

    function KeyboardAvoidingView(props) {
      var _this;

      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, KeyboardAvoidingView);

      _this = _super.call(this, props);
      _this._frame = null;
      _this._subscriptions = [];
      _this._initialFrameHeight = 0;

      _this._onKeyboardChange = function (event) {
        if (event == null) {
          _this.setState({
            bottom: 0
          });

          return;
        }

        var duration = event.duration,
            easing = event.easing,
            endCoordinates = event.endCoordinates;

        var height = _this._relativeKeyboardHeight(endCoordinates);

        if (_this.state.bottom === height) {
          return;
        }

        if (duration && easing) {
          _$$_REQUIRE(_dependencyMap[5], "../../LayoutAnimation/LayoutAnimation").configureNext({
            duration: duration > 10 ? duration : 10,
            update: {
              duration: duration > 10 ? duration : 10,
              type: _$$_REQUIRE(_dependencyMap[5], "../../LayoutAnimation/LayoutAnimation").Types[easing] || 'keyboard'
            }
          });
        }

        _this.setState({
          bottom: height
        });
      };

      _this._onLayout = function (event) {
        _this._frame = event.nativeEvent.layout;

        if (!_this._initialFrameHeight) {
          _this._initialFrameHeight = _this._frame.height;
        }
      };

      _this.state = {
        bottom: 0
      };
      _this.viewRef = React.createRef();
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/createClass")(KeyboardAvoidingView, [{
      key: "_relativeKeyboardHeight",
      value: function _relativeKeyboardHeight(keyboardFrame) {
        var frame = this._frame;

        if (!frame || !keyboardFrame) {
          return 0;
        }

        var keyboardY = keyboardFrame.screenY - this.props.keyboardVerticalOffset;
        return Math.max(frame.y + frame.height - keyboardY, 0);
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        if ("android" === 'ios') {
          this._subscriptions = [_$$_REQUIRE(_dependencyMap[7], "./Keyboard").addListener('keyboardWillChangeFrame', this._onKeyboardChange)];
        } else {
          this._subscriptions = [_$$_REQUIRE(_dependencyMap[7], "./Keyboard").addListener('keyboardDidHide', this._onKeyboardChange), _$$_REQUIRE(_dependencyMap[7], "./Keyboard").addListener('keyboardDidShow', this._onKeyboardChange)];
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._subscriptions.forEach(function (subscription) {
          subscription.remove();
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            behavior = _this$props.behavior,
            children = _this$props.children,
            contentContainerStyle = _this$props.contentContainerStyle,
            enabled = _this$props.enabled,
            keyboardVerticalOffset = _this$props.keyboardVerticalOffset,
            style = _this$props.style,
            props = _$$_REQUIRE(_dependencyMap[8], "@babel/runtime/helpers/objectWithoutProperties")(_this$props, _excluded);

        var bottomHeight = enabled ? this.state.bottom : 0;

        switch (behavior) {
          case 'height':
            var heightStyle;

            if (this._frame != null && this.state.bottom > 0) {
              heightStyle = {
                height: this._initialFrameHeight - bottomHeight,
                flex: 0
              };
            }

            return React.createElement(_$$_REQUIRE(_dependencyMap[9], "../View/View"), _$$_REQUIRE(_dependencyMap[10], "@babel/runtime/helpers/extends")({
              ref: this.viewRef,
              style: _$$_REQUIRE(_dependencyMap[11], "../../StyleSheet/StyleSheet").compose(style, heightStyle),
              onLayout: this._onLayout
            }, props, {
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 171,
                columnNumber: 11
              }
            }), children);

          case 'position':
            return React.createElement(_$$_REQUIRE(_dependencyMap[9], "../View/View"), _$$_REQUIRE(_dependencyMap[10], "@babel/runtime/helpers/extends")({
              ref: this.viewRef,
              style: style,
              onLayout: this._onLayout
            }, props, {
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 185,
                columnNumber: 11
              }
            }), React.createElement(_$$_REQUIRE(_dependencyMap[9], "../View/View"), {
              style: _$$_REQUIRE(_dependencyMap[11], "../../StyleSheet/StyleSheet").compose(contentContainerStyle, {
                bottom: bottomHeight
              }),
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 190,
                columnNumber: 13
              }
            }, children));

          case 'padding':
            return React.createElement(_$$_REQUIRE(_dependencyMap[9], "../View/View"), _$$_REQUIRE(_dependencyMap[10], "@babel/runtime/helpers/extends")({
              ref: this.viewRef,
              style: _$$_REQUIRE(_dependencyMap[11], "../../StyleSheet/StyleSheet").compose(style, {
                paddingBottom: bottomHeight
              }),
              onLayout: this._onLayout
            }, props, {
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 204,
                columnNumber: 11
              }
            }), children);

          default:
            return React.createElement(_$$_REQUIRE(_dependencyMap[9], "../View/View"), _$$_REQUIRE(_dependencyMap[10], "@babel/runtime/helpers/extends")({
              ref: this.viewRef,
              onLayout: this._onLayout,
              style: style
            }, props, {
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 218,
                columnNumber: 11
              }
            }), children);
        }
      }
    }]);

    return KeyboardAvoidingView;
  }(React.Component);

  KeyboardAvoidingView.defaultProps = {
    enabled: true,
    keyboardVerticalOffset: 0
  };
  module.exports = KeyboardAvoidingView;
},354,[31,32,49,35,16,310,17,307,128,236,53,241],"node_modules/react-native/Libraries/Components/Keyboard/KeyboardAvoidingView.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0], "../UnimplementedViews/UnimplementedView");
},355,[356],"node_modules/react-native/Libraries/Components/MaskedView/MaskedViewIOS.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/UnimplementedViews/UnimplementedView.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var UnimplementedView = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(UnimplementedView, _React$Component);

    var _super = _createSuper(UnimplementedView);

    function UnimplementedView() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, UnimplementedView);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(UnimplementedView, [{
      key: "render",
      value: function render() {
        var View = _$$_REQUIRE(_dependencyMap[6], "../View/View");

        return React.createElement(View, {
          style: [styles.unimplementedView, this.props.style],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 25,
            columnNumber: 7
          }
        }, this.props.children);
      }
    }]);

    return UnimplementedView;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[7], "../../StyleSheet/StyleSheet").create({
    unimplementedView: __DEV__ ? {
      alignSelf: 'flex-start',
      borderColor: 'red',
      borderWidth: 1
    } : {}
  });

  module.exports = UnimplementedView;
},356,[31,32,49,35,16,17,236,241],"node_modules/react-native/Libraries/Components/UnimplementedViews/UnimplementedView.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _defineProperty2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/defineProperty"));

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/createClass"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/getPrototypeOf"));

  var _RCTModalHostViewNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "./RCTModalHostViewNativeComponent"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Modal/Modal.js",
      _container;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[8], "react");

  var uniqueModalIdentifier = 0;

  var Modal = function (_React$Component) {
    (0, _inherits2.default)(Modal, _React$Component);

    var _super = _createSuper(Modal);

    function Modal(props) {
      var _this;

      (0, _classCallCheck2.default)(this, Modal);
      _this = _super.call(this, props);

      Modal._confirmProps(props);

      _this._identifier = uniqueModalIdentifier++;
      return _this;
    }

    (0, _createClass2.default)(Modal, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedList: null
        };
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.props.onDismiss != null) {
          this.props.onDismiss();
        }
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        Modal._confirmProps(nextProps);
      }
    }, {
      key: "render",
      value: function render() {
        if (this.props.visible !== true) {
          return null;
        }

        var containerStyles = {
          backgroundColor: this.props.transparent ? 'transparent' : 'white'
        };
        var animationType = this.props.animationType || 'none';
        var presentationStyle = this.props.presentationStyle;

        if (!presentationStyle) {
          presentationStyle = 'fullScreen';

          if (this.props.transparent) {
            presentationStyle = 'overFullScreen';
          }
        }

        var innerChildren = __DEV__ ? React.createElement(_$$_REQUIRE(_dependencyMap[9], "../ReactNative/AppContainer"), {
          rootTag: this.context.rootTag,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 220,
            columnNumber: 7
          }
        }, this.props.children) : this.props.children;
        return React.createElement(_RCTModalHostViewNativeComponent.default, {
          animationType: animationType,
          presentationStyle: presentationStyle,
          transparent: this.props.transparent,
          hardwareAccelerated: this.props.hardwareAccelerated,
          onRequestClose: this.props.onRequestClose,
          onShow: this.props.onShow,
          statusBarTranslucent: this.props.statusBarTranslucent,
          identifier: this._identifier,
          style: styles.modal,
          onStartShouldSetResponder: this._shouldSetResponder,
          supportedOrientations: this.props.supportedOrientations,
          onOrientationChange: this.props.onOrientationChange,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 228,
            columnNumber: 7
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[10], "../Components/ScrollView/ScrollView").Context.Provider, {
          value: null,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 241,
            columnNumber: 9
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[11], "../Components/View/View"), {
          style: [styles.container, containerStyles],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 242,
            columnNumber: 11
          }
        }, innerChildren)));
      }
    }, {
      key: "_shouldSetResponder",
      value: function _shouldSetResponder() {
        return true;
      }
    }], [{
      key: "_confirmProps",
      value: function _confirmProps(props) {
        if (props.presentationStyle && props.presentationStyle !== 'overFullScreen' && props.transparent) {
          console.warn("Modal with '" + props.presentationStyle + "' presentation style and 'transparent' value is not supported.");
        }
      }
    }]);
    return Modal;
  }(React.Component);

  Modal.defaultProps = {
    visible: true,
    hardwareAccelerated: false
  };
  Modal.contextTypes = {
    rootTag: _$$_REQUIRE(_dependencyMap[12], "prop-types").number
  };
  Modal.childContextTypes = {
    virtualizedList: _$$_REQUIRE(_dependencyMap[12], "prop-types").object
  };
  var side = _$$_REQUIRE(_dependencyMap[13], "../ReactNative/I18nManager").getConstants().isRTL ? 'right' : 'left';

  var styles = _$$_REQUIRE(_dependencyMap[14], "../StyleSheet/StyleSheet").create({
    modal: {
      position: 'absolute'
    },
    container: (_container = {}, (0, _defineProperty2.default)(_container, side, 0), (0, _defineProperty2.default)(_container, "top", 0), (0, _defineProperty2.default)(_container, "flex", 1), _container)
  });

  module.exports = Modal;
},357,[3,295,16,17,35,32,31,358,49,359,297,236,210,364,241],"node_modules/react-native/Libraries/Modal/Modal.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _codegenNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../Utilities/codegenNativeComponent"));

  var _default = (0, _codegenNativeComponent.default)('ModalHostView', {
    interfaceOnly: true,
    paperComponentName: 'RCTModalHostView'
  });

  exports.default = _default;
},358,[3,55],"node_modules/react-native/Libraries/Modal/RCTModalHostViewNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/ReactNative/AppContainer.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var AppContainer = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(AppContainer, _React$Component);

    var _super = _createSuper(AppContainer);

    function AppContainer() {
      var _this;

      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, AppContainer);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        inspector: null,
        mainKey: 1,
        hasError: false
      };
      _this._subscription = null;
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(AppContainer, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          rootTag: this.props.rootTag
        };
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        if (__DEV__) {
          if (!global.__RCTProfileIsProfiling) {
            this._subscription = _$$_REQUIRE(_dependencyMap[6], "../EventEmitter/RCTDeviceEventEmitter").addListener('toggleElementInspector', function () {
              var Inspector = _$$_REQUIRE(_dependencyMap[7], "../Inspector/Inspector");

              var inspector = _this2.state.inspector ? null : React.createElement(Inspector, {
                inspectedView: _this2._mainRef,
                onRequestRerenderApp: function onRequestRerenderApp(updateInspectedView) {
                  _this2.setState(function (s) {
                    return {
                      mainKey: s.mainKey + 1
                    };
                  }, function () {
                    return updateInspectedView(_this2._mainRef);
                  });
                },
                __self: _this2,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 69,
                  columnNumber: 15
                }
              });

              _this2.setState({
                inspector: inspector
              });
            });
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._subscription != null) {
          this._subscription.remove();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var logBox = null;

        if (__DEV__) {
          if (!global.__RCTProfileIsProfiling && !this.props.internal_excludeLogBox) {
            var LogBoxNotificationContainer = _$$_REQUIRE(_dependencyMap[8], "../LogBox/LogBoxNotificationContainer").default;

            logBox = React.createElement(LogBoxNotificationContainer, {
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 101,
                columnNumber: 18
              }
            });
          }
        }

        var innerView = React.createElement(_$$_REQUIRE(_dependencyMap[9], "../Components/View/View"), {
          collapsable: !this.state.inspector,
          key: this.state.mainKey,
          pointerEvents: "box-none",
          style: styles.appContainer,
          ref: function ref(_ref) {
            _this3._mainRef = _ref;
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 106,
            columnNumber: 7
          }
        }, this.props.children);
        var Wrapper = this.props.WrapperComponent;

        if (Wrapper != null) {
          innerView = React.createElement(Wrapper, {
            fabric: this.props.fabric === true,
            showArchitectureIndicator: this.props.showArchitectureIndicator === true,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 121,
              columnNumber: 9
            }
          }, innerView);
        }

        return React.createElement(_$$_REQUIRE(_dependencyMap[10], "./RootTagContext").Provider, {
          value: this.props.rootTag,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 131,
            columnNumber: 7
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[9], "../Components/View/View"), {
          style: styles.appContainer,
          pointerEvents: "box-none",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 132,
            columnNumber: 9
          }
        }, !this.state.hasError && innerView, this.state.inspector, logBox));
      }
    }]);

    return AppContainer;
  }(React.Component);

  AppContainer.getDerivedStateFromError = undefined;
  AppContainer.childContextTypes = {
    rootTag: _$$_REQUIRE(_dependencyMap[11], "prop-types").number
  };

  var styles = _$$_REQUIRE(_dependencyMap[12], "../StyleSheet/StyleSheet").create({
    appContainer: {
      flex: 1
    }
  });

  if (__DEV__) {
    if (!global.__RCTProfileIsProfiling) {
      var LogBox = _$$_REQUIRE(_dependencyMap[13], "../LogBox/LogBox");

      LogBox.install();
    }
  }

  module.exports = AppContainer;
},359,[31,32,49,35,16,17,30,360,379,236,385,210,241,386],"node_modules/react-native/Libraries/ReactNative/AppContainer.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Inspector/Inspector.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
  var renderers = findRenderers();
  hook.resolveRNStyle = _$$_REQUIRE(_dependencyMap[3], "../StyleSheet/flattenStyle");
  hook.nativeStyleEditorValidAttributes = Object.keys(_$$_REQUIRE(_dependencyMap[4], "../Components/View/ReactNativeViewViewConfig").validAttributes.style);

  function findRenderers() {
    var allRenderers = Array.from(hook.renderers.values());

    _$$_REQUIRE(_dependencyMap[5], "invariant")(allRenderers.length >= 1, 'Expected to find at least one React Native renderer on DevTools hook.');

    return allRenderers;
  }

  function getInspectorDataForViewAtPoint(inspectedView, locationX, locationY, callback) {
    for (var i = 0; i < renderers.length; i++) {
      var _renderer$rendererCon;

      var renderer = renderers[i];

      if ((renderer == null ? void 0 : (_renderer$rendererCon = renderer.rendererConfig) == null ? void 0 : _renderer$rendererCon.getInspectorDataForViewAtPoint) != null) {
        renderer.rendererConfig.getInspectorDataForViewAtPoint(inspectedView, locationX, locationY, function (viewData) {
          if (viewData && viewData.hierarchy.length > 0) {
            callback(viewData);
          }
        });
      }
    }
  }

  var Inspector = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/inherits")(Inspector, _React$Component);

    var _super = _createSuper(Inspector);

    function Inspector(props) {
      var _this;

      _$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/classCallCheck")(this, Inspector);

      _this = _super.call(this, props);
      _this._hideTimeoutID = null;

      _this._attachToDevtools = function (agent) {
        agent.addListener('hideNativeHighlight', _this._onAgentHideNativeHighlight);
        agent.addListener('showNativeHighlight', _this._onAgentShowNativeHighlight);
        agent.addListener('shutdown', _this._onAgentShutdown);

        _this.setState({
          devtoolsAgent: agent
        });
      };

      _this._onAgentHideNativeHighlight = function () {
        if (_this.state.inspected === null) {
          return;
        }

        _this._hideTimeoutID = setTimeout(function () {
          _this.setState({
            inspected: null
          });
        }, 100);
      };

      _this._onAgentShowNativeHighlight = function (node) {
        clearTimeout(_this._hideTimeoutID);
        node.measure(function (x, y, width, height, left, top) {
          _this.setState({
            hierarchy: [],
            inspected: {
              frame: {
                left: left,
                top: top,
                width: width,
                height: height
              }
            }
          });
        });
      };

      _this._onAgentShutdown = function () {
        var agent = _this.state.devtoolsAgent;

        if (agent != null) {
          agent.removeListener('hideNativeHighlight', _this._onAgentHideNativeHighlight);
          agent.removeListener('showNativeHighlight', _this._onAgentShowNativeHighlight);
          agent.removeListener('shutdown', _this._onAgentShutdown);

          _this.setState({
            devtoolsAgent: null
          });
        }
      };

      _this.state = {
        devtoolsAgent: null,
        hierarchy: null,
        panelPos: 'bottom',
        inspecting: true,
        perfing: false,
        inspected: null,
        selection: null,
        inspectedView: _this.props.inspectedView,
        networking: false
      };
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[8], "@babel/runtime/helpers/createClass")(Inspector, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        hook.on('react-devtools', this._attachToDevtools);

        if (hook.reactDevtoolsAgent) {
          this._attachToDevtools(hook.reactDevtoolsAgent);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._subs) {
          this._subs.map(function (fn) {
            return fn();
          });
        }

        hook.off('react-devtools', this._attachToDevtools);
        this._setTouchedViewData = null;
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(newProps) {
        this.setState({
          inspectedView: newProps.inspectedView
        });
      }
    }, {
      key: "setSelection",
      value: function setSelection(i) {
        var _this2 = this;

        var hierarchyItem = this.state.hierarchy[i];

        var _hierarchyItem$getIns = hierarchyItem.getInspectorData(_$$_REQUIRE(_dependencyMap[9], "../Renderer/shims/ReactNative").findNodeHandle),
            measure = _hierarchyItem$getIns.measure,
            props = _hierarchyItem$getIns.props,
            source = _hierarchyItem$getIns.source;

        measure(function (x, y, width, height, left, top) {
          _this2.setState({
            inspected: {
              frame: {
                left: left,
                top: top,
                width: width,
                height: height
              },
              style: props.style,
              source: source
            },
            selection: i
          });
        });
      }
    }, {
      key: "onTouchPoint",
      value: function onTouchPoint(locationX, locationY) {
        var _this3 = this;

        this._setTouchedViewData = function (viewData) {
          var hierarchy = viewData.hierarchy,
              props = viewData.props,
              selectedIndex = viewData.selectedIndex,
              source = viewData.source,
              frame = viewData.frame,
              pointerY = viewData.pointerY,
              touchedViewTag = viewData.touchedViewTag;

          if (_this3.state.devtoolsAgent && touchedViewTag) {
            _this3.state.devtoolsAgent.selectNode(_$$_REQUIRE(_dependencyMap[9], "../Renderer/shims/ReactNative").findNodeHandle(touchedViewTag));
          }

          _this3.setState({
            panelPos: pointerY > _$$_REQUIRE(_dependencyMap[10], "../Utilities/Dimensions").get('window').height / 2 ? 'top' : 'bottom',
            selection: selectedIndex,
            hierarchy: hierarchy,
            inspected: {
              style: props.style,
              frame: frame,
              source: source
            }
          });
        };

        getInspectorDataForViewAtPoint(this.state.inspectedView, locationX, locationY, function (viewData) {
          if (_this3._setTouchedViewData != null) {
            _this3._setTouchedViewData(viewData);

            _this3._setTouchedViewData = null;
          }
        });
      }
    }, {
      key: "setPerfing",
      value: function setPerfing(val) {
        this.setState({
          perfing: val,
          inspecting: false,
          inspected: null,
          networking: false
        });
      }
    }, {
      key: "setInspecting",
      value: function setInspecting(val) {
        this.setState({
          inspecting: val,
          inspected: null
        });
      }
    }, {
      key: "setTouchTargeting",
      value: function setTouchTargeting(val) {
        var _this4 = this;

        _$$_REQUIRE(_dependencyMap[11], "../Components/Touchable/Touchable").TOUCH_TARGET_DEBUG = val;
        this.props.onRequestRerenderApp(function (inspectedView) {
          _this4.setState({
            inspectedView: inspectedView
          });
        });
      }
    }, {
      key: "setNetworking",
      value: function setNetworking(val) {
        this.setState({
          networking: val,
          perfing: false,
          inspecting: false,
          inspected: null
        });
      }
    }, {
      key: "render",
      value: function render() {
        var panelContainerStyle = this.state.panelPos === 'bottom' ? {
          bottom: 0
        } : {
          top: "android" === 'ios' ? 20 : 0
        };
        return React.createElement(_$$_REQUIRE(_dependencyMap[12], "../Components/View/View"), {
          style: styles.container,
          pointerEvents: "box-none",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 303,
            columnNumber: 7
          }
        }, this.state.inspecting && React.createElement(_$$_REQUIRE(_dependencyMap[13], "./InspectorOverlay"), {
          inspected: this.state.inspected,
          onTouchPoint: this.onTouchPoint.bind(this),
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 305,
            columnNumber: 11
          }
        }), React.createElement(_$$_REQUIRE(_dependencyMap[12], "../Components/View/View"), {
          style: [styles.panelContainer, panelContainerStyle],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 310,
            columnNumber: 9
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[14], "./InspectorPanel"), {
          devtoolsIsOpen: !!this.state.devtoolsAgent,
          inspecting: this.state.inspecting,
          perfing: this.state.perfing,
          setPerfing: this.setPerfing.bind(this),
          setInspecting: this.setInspecting.bind(this),
          inspected: this.state.inspected,
          hierarchy: this.state.hierarchy,
          selection: this.state.selection,
          setSelection: this.setSelection.bind(this),
          touchTargeting: _$$_REQUIRE(_dependencyMap[11], "../Components/Touchable/Touchable").TOUCH_TARGET_DEBUG,
          setTouchTargeting: this.setTouchTargeting.bind(this),
          networking: this.state.networking,
          setNetworking: this.setNetworking.bind(this),
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 311,
            columnNumber: 11
          }
        })));
      }
    }]);

    return Inspector;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[15], "../StyleSheet/StyleSheet").create({
    container: {
      position: 'absolute',
      backgroundColor: 'transparent',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    panelContainer: {
      position: 'absolute',
      left: 0,
      right: 0
    }
  });

  module.exports = Inspector;
},360,[31,32,49,184,174,6,35,16,17,85,232,254,236,361,367,241],"node_modules/react-native/Libraries/Inspector/Inspector.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Inspector/InspectorOverlay.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var InspectorOverlay = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(InspectorOverlay, _React$Component);

    var _super = _createSuper(InspectorOverlay);

    function InspectorOverlay() {
      var _this;

      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, InspectorOverlay);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _this.findViewForTouchEvent = function (e) {
        var _e$nativeEvent$touche = e.nativeEvent.touches[0],
            locationX = _e$nativeEvent$touche.locationX,
            locationY = _e$nativeEvent$touche.locationY;

        _this.props.onTouchPoint(locationX, locationY);
      };

      _this.shouldSetResponser = function (e) {
        _this.findViewForTouchEvent(e);

        return true;
      };

      return _this;
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(InspectorOverlay, [{
      key: "render",
      value: function render() {
        var content = null;

        if (this.props.inspected) {
          content = React.createElement(_$$_REQUIRE(_dependencyMap[6], "./ElementBox"), {
            frame: this.props.inspected.frame,
            style: this.props.inspected.style,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 48,
              columnNumber: 9
            }
          });
        }

        return React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          onStartShouldSetResponder: this.shouldSetResponser,
          onResponderMove: this.findViewForTouchEvent,
          style: [styles.inspector, {
            height: _$$_REQUIRE(_dependencyMap[8], "../Utilities/Dimensions").get('window').height
          }],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 56,
            columnNumber: 7
          }
        }, content);
      }
    }]);

    return InspectorOverlay;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[9], "../StyleSheet/StyleSheet").create({
    inspector: {
      backgroundColor: 'transparent',
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0
    }
  });

  module.exports = InspectorOverlay;
},361,[31,32,49,35,16,17,362,236,232,241],"node_modules/react-native/Libraries/Inspector/InspectorOverlay.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Inspector/ElementBox.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var ElementBox = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(ElementBox, _React$Component);

    var _super = _createSuper(ElementBox);

    function ElementBox() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, ElementBox);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(ElementBox, [{
      key: "render",
      value: function render() {
        var style = _$$_REQUIRE(_dependencyMap[6], "../StyleSheet/flattenStyle")(this.props.style) || {};

        var margin = _$$_REQUIRE(_dependencyMap[7], "./resolveBoxStyle")('margin', style);

        var padding = _$$_REQUIRE(_dependencyMap[7], "./resolveBoxStyle")('padding', style);

        var frameStyle = Object.assign({}, this.props.frame);
        var contentStyle = {
          width: this.props.frame.width,
          height: this.props.frame.height
        };

        if (margin != null) {
          margin = resolveRelativeSizes(margin);
          frameStyle.top -= margin.top;
          frameStyle.left -= margin.left;
          frameStyle.height += margin.top + margin.bottom;
          frameStyle.width += margin.left + margin.right;

          if (margin.top < 0) {
            contentStyle.height += margin.top;
          }

          if (margin.bottom < 0) {
            contentStyle.height += margin.bottom;
          }

          if (margin.left < 0) {
            contentStyle.width += margin.left;
          }

          if (margin.right < 0) {
            contentStyle.width += margin.right;
          }
        }

        if (padding != null) {
          padding = resolveRelativeSizes(padding);
          contentStyle.width -= padding.left + padding.right;
          contentStyle.height -= padding.top + padding.bottom;
        }

        return React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Components/View/View"), {
          style: [styles.frame, frameStyle],
          pointerEvents: "none",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 64,
            columnNumber: 7
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[9], "./BorderBox"), {
          box: margin,
          style: styles.margin,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 65,
            columnNumber: 9
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[9], "./BorderBox"), {
          box: padding,
          style: styles.padding,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 66,
            columnNumber: 11
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Components/View/View"), {
          style: [styles.content, contentStyle],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 67,
            columnNumber: 13
          }
        }))));
      }
    }]);

    return ElementBox;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[10], "../StyleSheet/StyleSheet").create({
    frame: {
      position: 'absolute'
    },
    content: {
      backgroundColor: 'rgba(200, 230, 255, 0.8)'
    },
    padding: {
      borderColor: 'rgba(77, 255, 0, 0.3)'
    },
    margin: {
      borderColor: 'rgba(255, 132, 0, 0.3)'
    }
  });

  function resolveRelativeSizes(style) {
    var resolvedStyle = Object.assign({}, style);
    resolveSizeInPlace(resolvedStyle, 'top', 'height');
    resolveSizeInPlace(resolvedStyle, 'right', 'width');
    resolveSizeInPlace(resolvedStyle, 'bottom', 'height');
    resolveSizeInPlace(resolvedStyle, 'left', 'width');
    return resolvedStyle;
  }

  function resolveSizeInPlace(style, direction, dimension) {
    if (style[direction] !== null && typeof style[direction] === 'string') {
      if (style[direction].indexOf('%') !== -1) {
        style[direction] = parseFloat(style[direction]) / 100.0 * _$$_REQUIRE(_dependencyMap[11], "../Utilities/Dimensions").get('window')[dimension];
      }

      if (style[direction] === 'auto') {
        style[direction] = 0;
      }
    }
  }

  module.exports = ElementBox;
},362,[31,32,49,35,16,17,184,363,236,366,241,232],"node_modules/react-native/Libraries/Inspector/ElementBox.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function resolveBoxStyle(prefix, style) {
    var hasParts = false;
    var result = {
      bottom: 0,
      left: 0,
      right: 0,
      top: 0
    };
    var styleForAll = style[prefix];

    if (styleForAll != null) {
      for (var key of Object.keys(result)) {
        result[key] = styleForAll;
      }

      hasParts = true;
    }

    var styleForHorizontal = style[prefix + 'Horizontal'];

    if (styleForHorizontal != null) {
      result.left = styleForHorizontal;
      result.right = styleForHorizontal;
      hasParts = true;
    } else {
      var styleForLeft = style[prefix + 'Left'];

      if (styleForLeft != null) {
        result.left = styleForLeft;
        hasParts = true;
      }

      var styleForRight = style[prefix + 'Right'];

      if (styleForRight != null) {
        result.right = styleForRight;
        hasParts = true;
      }

      var styleForEnd = style[prefix + 'End'];

      if (styleForEnd != null) {
        var constants = _$$_REQUIRE(_dependencyMap[0], "../ReactNative/I18nManager").getConstants();

        if (constants.isRTL && constants.doLeftAndRightSwapInRTL) {
          result.left = styleForEnd;
        } else {
          result.right = styleForEnd;
        }

        hasParts = true;
      }

      var styleForStart = style[prefix + 'Start'];

      if (styleForStart != null) {
        var _constants = _$$_REQUIRE(_dependencyMap[0], "../ReactNative/I18nManager").getConstants();

        if (_constants.isRTL && _constants.doLeftAndRightSwapInRTL) {
          result.right = styleForStart;
        } else {
          result.left = styleForStart;
        }

        hasParts = true;
      }
    }

    var styleForVertical = style[prefix + 'Vertical'];

    if (styleForVertical != null) {
      result.bottom = styleForVertical;
      result.top = styleForVertical;
      hasParts = true;
    } else {
      var styleForBottom = style[prefix + 'Bottom'];

      if (styleForBottom != null) {
        result.bottom = styleForBottom;
        hasParts = true;
      }

      var styleForTop = style[prefix + 'Top'];

      if (styleForTop != null) {
        result.top = styleForTop;
        hasParts = true;
      }
    }

    return hasParts ? result : null;
  }

  module.exports = resolveBoxStyle;
},363,[364],"node_modules/react-native/Libraries/Inspector/resolveBoxStyle.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeI18nManager = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./NativeI18nManager"));

  var i18nConstants = _NativeI18nManager.default ? _NativeI18nManager.default.getConstants() : {
    isRTL: false,
    doLeftAndRightSwapInRTL: true
  };
  module.exports = {
    getConstants: function getConstants() {
      return i18nConstants;
    },
    allowRTL: function allowRTL(shouldAllow) {
      if (!_NativeI18nManager.default) {
        return;
      }

      _NativeI18nManager.default.allowRTL(shouldAllow);
    },
    forceRTL: function forceRTL(shouldForce) {
      if (!_NativeI18nManager.default) {
        return;
      }

      _NativeI18nManager.default.forceRTL(shouldForce);
    },
    swapLeftAndRightInRTL: function swapLeftAndRightInRTL(flipStyles) {
      if (!_NativeI18nManager.default) {
        return;
      }

      _NativeI18nManager.default.swapLeftAndRightInRTL(flipStyles);
    },
    isRTL: i18nConstants.isRTL,
    doLeftAndRightSwapInRTL: i18nConstants.doLeftAndRightSwapInRTL
  };
},364,[3,365],"node_modules/react-native/Libraries/ReactNative/I18nManager.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('I18nManager');

  exports.default = _default;
},365,[5],"node_modules/react-native/Libraries/ReactNative/NativeI18nManager.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Inspector/BorderBox.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var BorderBox = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(BorderBox, _React$Component);

    var _super = _createSuper(BorderBox);

    function BorderBox() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, BorderBox);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(BorderBox, [{
      key: "render",
      value: function render() {
        var box = this.props.box;

        if (!box) {
          return this.props.children;
        }

        var style = {
          borderTopWidth: box.top,
          borderBottomWidth: box.bottom,
          borderLeftWidth: box.left,
          borderRightWidth: box.right
        };
        return React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Components/View/View"), {
          style: [style, this.props.style],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 28,
            columnNumber: 12
          }
        }, this.props.children);
      }
    }]);

    return BorderBox;
  }(React.Component);

  module.exports = BorderBox;
},366,[31,32,49,35,16,17,236],"node_modules/react-native/Libraries/Inspector/BorderBox.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Inspector/InspectorPanel.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var InspectorPanel = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(InspectorPanel, _React$Component);

    var _super = _createSuper(InspectorPanel);

    function InspectorPanel() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, InspectorPanel);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(InspectorPanel, [{
      key: "renderWaiting",
      value: function renderWaiting() {
        if (this.props.inspecting) {
          return React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Text/Text"), {
            style: styles.waitingText,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 57,
              columnNumber: 9
            }
          }, "Tap something to inspect it");
        }

        return React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Text/Text"), {
          style: styles.waitingText,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 60,
            columnNumber: 12
          }
        }, "Nothing is inspected");
      }
    }, {
      key: "render",
      value: function render() {
        var contents;

        if (this.props.inspected) {
          contents = React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/ScrollView/ScrollView"), {
            style: styles.properties,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 67,
              columnNumber: 9
            }
          }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "./ElementProperties"), {
            style: this.props.inspected.style,
            frame: this.props.inspected.frame,
            source: this.props.inspected.source,
            hierarchy: this.props.hierarchy,
            selection: this.props.selection,
            setSelection: this.props.setSelection,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 68,
              columnNumber: 11
            }
          }));
        } else if (this.props.perfing) {
          contents = React.createElement(_$$_REQUIRE(_dependencyMap[9], "./PerformanceOverlay"), {
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 80,
              columnNumber: 18
            }
          });
        } else if (this.props.networking) {
          contents = React.createElement(_$$_REQUIRE(_dependencyMap[10], "./NetworkOverlay"), {
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 82,
              columnNumber: 18
            }
          });
        } else {
          contents = React.createElement(_$$_REQUIRE(_dependencyMap[11], "../Components/View/View"), {
            style: styles.waiting,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 84,
              columnNumber: 18
            }
          }, this.renderWaiting());
        }

        return React.createElement(_$$_REQUIRE(_dependencyMap[11], "../Components/View/View"), {
          style: styles.container,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 87,
            columnNumber: 7
          }
        }, !this.props.devtoolsIsOpen && contents, React.createElement(_$$_REQUIRE(_dependencyMap[11], "../Components/View/View"), {
          style: styles.buttonRow,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 89,
            columnNumber: 9
          }
        }, React.createElement(InspectorPanelButton, {
          title: 'Inspect',
          pressed: this.props.inspecting,
          onClick: this.props.setInspecting,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 90,
            columnNumber: 11
          }
        }), React.createElement(InspectorPanelButton, {
          title: 'Perf',
          pressed: this.props.perfing,
          onClick: this.props.setPerfing,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 95,
            columnNumber: 11
          }
        }), React.createElement(InspectorPanelButton, {
          title: 'Network',
          pressed: this.props.networking,
          onClick: this.props.setNetworking,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 100,
            columnNumber: 11
          }
        }), React.createElement(InspectorPanelButton, {
          title: 'Touchables',
          pressed: this.props.touchTargeting,
          onClick: this.props.setTouchTargeting,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 105,
            columnNumber: 11
          }
        })));
      }
    }]);

    return InspectorPanel;
  }(React.Component);

  var InspectorPanelButton = function (_React$Component2) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(InspectorPanelButton, _React$Component2);

    var _super2 = _createSuper(InspectorPanelButton);

    function InspectorPanelButton() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, InspectorPanelButton);

      return _super2.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(InspectorPanelButton, [{
      key: "render",
      value: function render() {
        var _this = this;

        return React.createElement(_$$_REQUIRE(_dependencyMap[12], "../Components/Touchable/TouchableHighlight"), {
          onPress: function onPress() {
            return _this.props.onClick(!_this.props.pressed);
          },
          style: [styles.button, this.props.pressed && styles.buttonPressed],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 125,
            columnNumber: 7
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Text/Text"), {
          style: styles.buttonText,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 128,
            columnNumber: 9
          }
        }, this.props.title));
      }
    }]);

    return InspectorPanelButton;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[13], "../StyleSheet/StyleSheet").create({
    buttonRow: {
      flexDirection: 'row'
    },
    button: {
      backgroundColor: 'rgba(0, 0, 0, 0.3)',
      margin: 2,
      height: 30,
      justifyContent: 'center',
      alignItems: 'center'
    },
    buttonPressed: {
      backgroundColor: 'rgba(255, 255, 255, 0.3)'
    },
    buttonText: {
      textAlign: 'center',
      color: 'white',
      margin: 5
    },
    container: {
      backgroundColor: 'rgba(0, 0, 0, 0.7)'
    },
    properties: {
      height: 200
    },
    waiting: {
      height: 100
    },
    waitingText: {
      fontSize: 20,
      textAlign: 'center',
      marginVertical: 20,
      color: 'white'
    }
  });

  module.exports = InspectorPanel;
},367,[31,32,49,35,16,17,338,297,368,375,376,236,369,241],"node_modules/react-native/Libraries/Inspector/InspectorPanel.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Inspector/ElementProperties.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var ElementProperties = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(ElementProperties, _React$Component);

    var _super = _createSuper(ElementProperties);

    function ElementProperties() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, ElementProperties);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(ElementProperties, [{
      key: "render",
      value: function render() {
        var _this = this;

        var style = _$$_REQUIRE(_dependencyMap[6], "../StyleSheet/flattenStyle")(this.props.style);

        var selection = this.props.selection;
        var openFileButton;
        var source = this.props.source;

        var _ref = source || {},
            fileName = _ref.fileName,
            lineNumber = _ref.lineNumber;

        if (fileName && lineNumber) {
          var parts = fileName.split('/');
          var fileNameShort = parts[parts.length - 1];
          openFileButton = React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/Touchable/TouchableHighlight"), {
            style: styles.openButton,
            onPress: _$$_REQUIRE(_dependencyMap[8], "../Core/Devtools/openFileInEditor").bind(null, fileName, lineNumber),
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 52,
              columnNumber: 9
            }
          }, React.createElement(_$$_REQUIRE(_dependencyMap[9], "../Text/Text"), {
            style: styles.openButtonTitle,
            numberOfLines: 1,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 55,
              columnNumber: 11
            }
          }, fileNameShort, ":", lineNumber));
        }

        return React.createElement(_$$_REQUIRE(_dependencyMap[10], "../Components/Touchable/TouchableWithoutFeedback"), {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 64,
            columnNumber: 7
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[11], "../Components/View/View"), {
          style: styles.info,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 65,
            columnNumber: 9
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[11], "../Components/View/View"), {
          style: styles.breadcrumb,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 66,
            columnNumber: 11
          }
        }, _$$_REQUIRE(_dependencyMap[12], "../Utilities/mapWithSeparator")(this.props.hierarchy, function (hierarchyItem, i) {
          return React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/Touchable/TouchableHighlight"), {
            key: 'item-' + i,
            style: [styles.breadItem, i === selection && styles.selected],
            onPress: function onPress() {
              return _this.props.setSelection(i);
            },
            __self: _this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 70,
              columnNumber: 17
            }
          }, React.createElement(_$$_REQUIRE(_dependencyMap[9], "../Text/Text"), {
            style: styles.breadItemText,
            __self: _this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 75,
              columnNumber: 19
            }
          }, hierarchyItem.name));
        }, function (i) {
          return React.createElement(_$$_REQUIRE(_dependencyMap[9], "../Text/Text"), {
            key: 'sep-' + i,
            style: styles.breadSep,
            __self: _this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 79,
              columnNumber: 17
            }
          }, "\u25B8");
        })), React.createElement(_$$_REQUIRE(_dependencyMap[11], "../Components/View/View"), {
          style: styles.row,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 85,
            columnNumber: 11
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[11], "../Components/View/View"), {
          style: styles.col,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 86,
            columnNumber: 13
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[13], "./StyleInspector"), {
          style: style,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 87,
            columnNumber: 15
          }
        }), openFileButton), React.createElement(_$$_REQUIRE(_dependencyMap[14], "./BoxInspector"), {
          style: style,
          frame: this.props.frame,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 90,
            columnNumber: 14
          }
        }))));
      }
    }]);

    return ElementProperties;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[15], "../StyleSheet/StyleSheet").create({
    breadSep: {
      fontSize: 8,
      color: 'white'
    },
    breadcrumb: {
      flexDirection: 'row',
      flexWrap: 'wrap',
      alignItems: 'flex-start',
      marginBottom: 5
    },
    selected: {
      borderColor: 'white',
      borderRadius: 5
    },
    breadItem: {
      borderWidth: 1,
      borderColor: 'transparent',
      marginHorizontal: 2
    },
    breadItemText: {
      fontSize: 10,
      color: 'white',
      marginHorizontal: 5
    },
    row: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between'
    },
    col: {
      flex: 1
    },
    info: {
      padding: 10
    },
    openButton: {
      padding: 10,
      backgroundColor: '#000',
      marginVertical: 5,
      marginRight: 5,
      borderRadius: 2
    },
    openButtonTitle: {
      color: 'white',
      fontSize: 8
    }
  });

  module.exports = ElementProperties;
},368,[31,32,49,35,16,17,184,369,370,338,371,236,372,373,374,241],"node_modules/react-native/Libraries/Inspector/ElementProperties.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/extends"));

  var _objectWithoutProperties2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/objectWithoutProperties"));

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/createClass"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/getPrototypeOf"));

  var _Pressability = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[8], "../../Pressability/Pressability"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[9], "../../StyleSheet/StyleSheet"));

  var _TVTouchable = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[10], "./TVTouchable"));

  var _Platform = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[11], "../../Utilities/Platform"));

  var _View = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[12], "../../Components/View/View"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[13], "react"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js",
      _this4 = this;

  var _excluded = ["onBlur", "onFocus"];

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var TouchableHighlight = function (_React$Component) {
    (0, _inherits2.default)(TouchableHighlight, _React$Component);

    var _super = _createSuper(TouchableHighlight);

    function TouchableHighlight() {
      var _this;

      (0, _classCallCheck2.default)(this, TouchableHighlight);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this._isMounted = false;
      _this.state = {
        pressability: new _Pressability.default(_this._createPressabilityConfig()),
        extraStyles: _this.props.testOnly_pressed === true ? _this._createExtraStyles() : null
      };
      return _this;
    }

    (0, _createClass2.default)(TouchableHighlight, [{
      key: "_createPressabilityConfig",
      value: function _createPressabilityConfig() {
        var _this2 = this;

        return {
          cancelable: !this.props.rejectResponderTermination,
          disabled: this.props.disabled,
          hitSlop: this.props.hitSlop,
          delayLongPress: this.props.delayLongPress,
          delayPressIn: this.props.delayPressIn,
          delayPressOut: this.props.delayPressOut,
          minPressDuration: 0,
          pressRectOffset: this.props.pressRetentionOffset,
          android_disableSound: this.props.touchSoundDisabled,
          onBlur: function onBlur(event) {
            if (_Platform.default.isTV) {
              _this2._hideUnderlay();
            }

            if (_this2.props.onBlur != null) {
              _this2.props.onBlur(event);
            }
          },
          onFocus: function onFocus(event) {
            if (_Platform.default.isTV) {
              _this2._showUnderlay();
            }

            if (_this2.props.onFocus != null) {
              _this2.props.onFocus(event);
            }
          },
          onLongPress: function onLongPress(event) {
            if (_this2.props.onLongPress != null) {
              _this2.props.onLongPress(event);
            }
          },
          onPress: function onPress(event) {
            if (_this2._hideTimeout != null) {
              clearTimeout(_this2._hideTimeout);
            }

            if (!_Platform.default.isTV) {
              var _this2$props$delayPre;

              _this2._showUnderlay();

              _this2._hideTimeout = setTimeout(function () {
                _this2._hideUnderlay();
              }, (_this2$props$delayPre = _this2.props.delayPressOut) != null ? _this2$props$delayPre : 0);
            }

            if (_this2.props.onPress != null) {
              _this2.props.onPress(event);
            }
          },
          onPressIn: function onPressIn(event) {
            if (_this2._hideTimeout != null) {
              clearTimeout(_this2._hideTimeout);
              _this2._hideTimeout = null;
            }

            _this2._showUnderlay();

            if (_this2.props.onPressIn != null) {
              _this2.props.onPressIn(event);
            }
          },
          onPressOut: function onPressOut(event) {
            if (_this2._hideTimeout == null) {
              _this2._hideUnderlay();
            }

            if (_this2.props.onPressOut != null) {
              _this2.props.onPressOut(event);
            }
          }
        };
      }
    }, {
      key: "_createExtraStyles",
      value: function _createExtraStyles() {
        var _this$props$activeOpa;

        return {
          child: {
            opacity: (_this$props$activeOpa = this.props.activeOpacity) != null ? _this$props$activeOpa : 0.85
          },
          underlay: {
            backgroundColor: this.props.underlayColor === undefined ? 'black' : this.props.underlayColor
          }
        };
      }
    }, {
      key: "_showUnderlay",
      value: function _showUnderlay() {
        if (!this._isMounted || !this._hasPressHandler()) {
          return;
        }

        this.setState({
          extraStyles: this._createExtraStyles()
        });

        if (this.props.onShowUnderlay != null) {
          this.props.onShowUnderlay();
        }
      }
    }, {
      key: "_hideUnderlay",
      value: function _hideUnderlay() {
        if (this._hideTimeout != null) {
          clearTimeout(this._hideTimeout);
          this._hideTimeout = null;
        }

        if (this.props.testOnly_pressed === true) {
          return;
        }

        if (this._hasPressHandler()) {
          this.setState({
            extraStyles: null
          });

          if (this.props.onHideUnderlay != null) {
            this.props.onHideUnderlay();
          }
        }
      }
    }, {
      key: "_hasPressHandler",
      value: function _hasPressHandler() {
        return this.props.onPress != null || this.props.onPressIn != null || this.props.onPressOut != null || this.props.onLongPress != null;
      }
    }, {
      key: "render",
      value: function render() {
        var _this$state$extraStyl, _this$state$extraStyl2;

        var child = React.Children.only(this.props.children);

        var _this$state$pressabil = this.state.pressability.getEventHandlers(),
            onBlur = _this$state$pressabil.onBlur,
            onFocus = _this$state$pressabil.onFocus,
            eventHandlersWithoutBlurAndFocus = (0, _objectWithoutProperties2.default)(_this$state$pressabil, _excluded);

        return React.createElement(_View.default, (0, _extends2.default)({
          accessible: this.props.accessible !== false,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityHint: this.props.accessibilityHint,
          accessibilityRole: this.props.accessibilityRole,
          accessibilityState: this.props.accessibilityState,
          accessibilityValue: this.props.accessibilityValue,
          accessibilityActions: this.props.accessibilityActions,
          onAccessibilityAction: this.props.onAccessibilityAction,
          importantForAccessibility: this.props.importantForAccessibility,
          accessibilityLiveRegion: this.props.accessibilityLiveRegion,
          accessibilityViewIsModal: this.props.accessibilityViewIsModal,
          accessibilityElementsHidden: this.props.accessibilityElementsHidden,
          style: _StyleSheet.default.compose(this.props.style, (_this$state$extraStyl = this.state.extraStyles) == null ? void 0 : _this$state$extraStyl.underlay),
          onLayout: this.props.onLayout,
          hitSlop: this.props.hitSlop,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          nextFocusDown: this.props.nextFocusDown,
          nextFocusForward: this.props.nextFocusForward,
          nextFocusLeft: this.props.nextFocusLeft,
          nextFocusRight: this.props.nextFocusRight,
          nextFocusUp: this.props.nextFocusUp,
          focusable: this.props.focusable !== false && this.props.onPress !== undefined,
          nativeID: this.props.nativeID,
          testID: this.props.testID,
          ref: this.props.hostRef
        }, eventHandlersWithoutBlurAndFocus, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 295,
            columnNumber: 7
          }
        }), React.cloneElement(child, {
          style: _StyleSheet.default.compose(child.props.style, (_this$state$extraStyl2 = this.state.extraStyles) == null ? void 0 : _this$state$extraStyl2.child)
        }), __DEV__ ? React.createElement(_$$_REQUIRE(_dependencyMap[14], "../../Pressability/PressabilityDebug").PressabilityDebugView, {
          color: "green",
          hitSlop: this.props.hitSlop,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 334,
            columnNumber: 11
          }
        }) : null);
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this3 = this;

        this._isMounted = true;

        if (_Platform.default.isTV) {
          this._tvTouchable = new _TVTouchable.default(this, {
            getDisabled: function getDisabled() {
              return _this3.props.disabled === true;
            },
            onBlur: function onBlur(event) {
              if (_this3.props.onBlur != null) {
                _this3.props.onBlur(event);
              }
            },
            onFocus: function onFocus(event) {
              if (_this3.props.onFocus != null) {
                _this3.props.onFocus(event);
              }
            },
            onPress: function onPress(event) {
              if (_this3.props.onPress != null) {
                _this3.props.onPress(event);
              }
            }
          });
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        this.state.pressability.configure(this._createPressabilityConfig());
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._isMounted = false;

        if (this._hideTimeout != null) {
          clearTimeout(this._hideTimeout);
        }

        if (_Platform.default.isTV) {
          if (this._tvTouchable != null) {
            this._tvTouchable.destroy();
          }
        }

        this.state.pressability.reset();
      }
    }]);
    return TouchableHighlight;
  }(React.Component);

  module.exports = React.forwardRef(function (props, hostRef) {
    return React.createElement(TouchableHighlight, (0, _extends2.default)({}, props, {
      hostRef: hostRef,
      __self: _this4,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 383,
        columnNumber: 3
      }
    }));
  });
},369,[3,53,128,16,17,35,32,31,245,241,250,80,236,49,253],"node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function openFileInEditor(file, lineNumber) {
    fetch(_$$_REQUIRE(_dependencyMap[0], "./getDevServer")().url + 'open-stack-frame', {
      method: 'POST',
      body: JSON.stringify({
        file: file,
        lineNumber: lineNumber
      })
    });
  }

  module.exports = openFileInEditor;
},370,[72],"node_modules/react-native/Libraries/Core/Devtools/openFileInEditor.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectWithoutProperties2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/objectWithoutProperties"));

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/createClass"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/getPrototypeOf"));

  var _Pressability = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "../../Pressability/Pressability"));

  var _TVTouchable = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[8], "./TVTouchable"));

  var _Platform = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[9], "../../Utilities/Platform"));

  var _View = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[10], "../../Components/View/View"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11], "react"));

  var _excluded = ["onBlur", "onFocus"];
  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/Touchable/TouchableWithoutFeedback.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var PASSTHROUGH_PROPS = ['accessibilityActions', 'accessibilityElementsHidden', 'accessibilityHint', 'accessibilityIgnoresInvertColors', 'accessibilityLabel', 'accessibilityLiveRegion', 'accessibilityRole', 'accessibilityState', 'accessibilityValue', 'accessibilityViewIsModal', 'hitSlop', 'importantForAccessibility', 'nativeID', 'onAccessibilityAction', 'onBlur', 'onFocus', 'onLayout', 'testID'];

  var TouchableWithoutFeedback = function (_React$Component) {
    (0, _inherits2.default)(TouchableWithoutFeedback, _React$Component);

    var _super = _createSuper(TouchableWithoutFeedback);

    function TouchableWithoutFeedback() {
      var _this;

      (0, _classCallCheck2.default)(this, TouchableWithoutFeedback);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        pressability: new _Pressability.default(createPressabilityConfig(_this.props))
      };
      return _this;
    }

    (0, _createClass2.default)(TouchableWithoutFeedback, [{
      key: "render",
      value: function render() {
        var element = React.Children.only(this.props.children);
        var children = [element.props.children];

        if (__DEV__) {
          if (element.type === _View.default) {
            children.push(React.createElement(_$$_REQUIRE(_dependencyMap[12], "../../Pressability/PressabilityDebug").PressabilityDebugView, {
              color: "red",
              hitSlop: this.props.hitSlop,
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 109,
                columnNumber: 11
              }
            }));
          }
        }

        var _this$state$pressabil = this.state.pressability.getEventHandlers(),
            onBlur = _this$state$pressabil.onBlur,
            onFocus = _this$state$pressabil.onFocus,
            eventHandlersWithoutBlurAndFocus = (0, _objectWithoutProperties2.default)(_this$state$pressabil, _excluded);

        var elementProps = Object.assign({}, eventHandlersWithoutBlurAndFocus, {
          accessible: this.props.accessible !== false,
          focusable: this.props.focusable !== false && this.props.onPress !== undefined
        });

        for (var prop of PASSTHROUGH_PROPS) {
          if (this.props[prop] !== undefined) {
            elementProps[prop] = this.props[prop];
          }
        }

        return React.cloneElement.apply(React, [element, elementProps].concat(children));
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        if (_Platform.default.isTV) {
          this._tvTouchable = new _TVTouchable.default(this, {
            getDisabled: function getDisabled() {
              return _this2.props.disabled === true;
            },
            onBlur: function onBlur(event) {
              if (_this2.props.onBlur != null) {
                _this2.props.onBlur(event);
              }
            },
            onFocus: function onFocus(event) {
              if (_this2.props.onFocus != null) {
                _this2.props.onFocus(event);
              }
            },
            onPress: function onPress(event) {
              if (_this2.props.onPress != null) {
                _this2.props.onPress(event);
              }
            }
          });
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this.state.pressability.configure(createPressabilityConfig(this.props));
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (_Platform.default.isTV) {
          if (this._tvTouchable != null) {
            this._tvTouchable.destroy();
          }
        }

        this.state.pressability.reset();
      }
    }]);
    return TouchableWithoutFeedback;
  }(React.Component);

  function createPressabilityConfig(props) {
    return {
      cancelable: !props.rejectResponderTermination,
      disabled: props.disabled,
      hitSlop: props.hitSlop,
      delayLongPress: props.delayLongPress,
      delayPressIn: props.delayPressIn,
      delayPressOut: props.delayPressOut,
      minPressDuration: 0,
      pressRectOffset: props.pressRetentionOffset,
      android_disableSound: props.touchSoundDisabled,
      onBlur: props.onBlur,
      onFocus: props.onFocus,
      onLongPress: props.onLongPress,
      onPress: props.onPress,
      onPressIn: props.onPressIn,
      onPressOut: props.onPressOut
    };
  }

  module.exports = TouchableWithoutFeedback;
},371,[3,128,16,17,35,32,31,245,250,80,236,49,253],"node_modules/react-native/Libraries/Components/Touchable/TouchableWithoutFeedback.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function mapWithSeparator(items, itemRenderer, spacerRenderer) {
    var mapped = [];

    if (items.length > 0) {
      mapped.push(itemRenderer(items[0], 0, items));

      for (var ii = 1; ii < items.length; ii++) {
        mapped.push(spacerRenderer(ii - 1), itemRenderer(items[ii], ii, items));
      }
    }

    return mapped;
  }

  module.exports = mapWithSeparator;
},372,[],"node_modules/react-native/Libraries/Utilities/mapWithSeparator.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Inspector/StyleInspector.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var StyleInspector = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(StyleInspector, _React$Component);

    var _super = _createSuper(StyleInspector);

    function StyleInspector() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, StyleInspector);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(StyleInspector, [{
      key: "render",
      value: function render() {
        var _this = this;

        if (!this.props.style) {
          return React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Text/Text"), {
            style: styles.noStyle,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 21,
              columnNumber: 14
            }
          }, "No style");
        }

        var names = Object.keys(this.props.style);
        return React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: styles.container,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 25,
            columnNumber: 7
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 26,
            columnNumber: 9
          }
        }, names.map(function (name) {
          return React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Text/Text"), {
            key: name,
            style: styles.attr,
            __self: _this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 28,
              columnNumber: 13
            }
          }, name, ":");
        })), React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 34,
            columnNumber: 9
          }
        }, names.map(function (name) {
          var value = _this.props.style[name];
          return React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Text/Text"), {
            key: name,
            style: styles.value,
            __self: _this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 38,
              columnNumber: 15
            }
          }, typeof value !== 'string' && typeof value !== 'number' ? JSON.stringify(value) : value);
        })));
      }
    }]);

    return StyleInspector;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[8], "../StyleSheet/StyleSheet").create({
    container: {
      flexDirection: 'row'
    },
    attr: {
      fontSize: 10,
      color: '#ccc'
    },
    value: {
      fontSize: 10,
      color: 'white',
      marginLeft: 10
    },
    noStyle: {
      color: 'white',
      fontSize: 10
    }
  });

  module.exports = StyleInspector;
},373,[31,32,49,35,16,17,338,236,241],"node_modules/react-native/Libraries/Inspector/StyleInspector.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Inspector/BoxInspector.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var blank = {
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  };

  var BoxInspector = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(BoxInspector, _React$Component);

    var _super = _createSuper(BoxInspector);

    function BoxInspector() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, BoxInspector);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(BoxInspector, [{
      key: "render",
      value: function render() {
        var frame = this.props.frame;
        var style = this.props.style;
        var margin = style && _$$_REQUIRE(_dependencyMap[6], "./resolveBoxStyle")('margin', style) || blank;
        var padding = style && _$$_REQUIRE(_dependencyMap[6], "./resolveBoxStyle")('padding', style) || blank;
        return React.createElement(BoxContainer, {
          title: "margin",
          titleStyle: styles.marginLabel,
          box: margin,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 34,
            columnNumber: 7
          }
        }, React.createElement(BoxContainer, {
          title: "padding",
          box: padding,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 35,
            columnNumber: 9
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 36,
            columnNumber: 11
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.innerText,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 37,
            columnNumber: 13
          }
        }, "(", (frame.left || 0).toFixed(1), ", ", (frame.top || 0).toFixed(1), ")"), React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.innerText,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 40,
            columnNumber: 13
          }
        }, (frame.width || 0).toFixed(1), " \xD7", ' ', (frame.height || 0).toFixed(1)))));
      }
    }]);

    return BoxInspector;
  }(React.Component);

  var BoxContainer = function (_React$Component2) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(BoxContainer, _React$Component2);

    var _super2 = _createSuper(BoxContainer);

    function BoxContainer() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, BoxContainer);

      return _super2.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(BoxContainer, [{
      key: "render",
      value: function render() {
        var box = this.props.box;
        return React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: styles.box,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 55,
            columnNumber: 7
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: styles.row,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 56,
            columnNumber: 9
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: [this.props.titleStyle, styles.label],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 58,
            columnNumber: 11
          }
        }, this.props.title), React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.boxText,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 61,
            columnNumber: 11
          }
        }, box.top)), React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: styles.row,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 63,
            columnNumber: 9
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.boxText,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 64,
            columnNumber: 11
          }
        }, box.left), this.props.children, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.boxText,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 66,
            columnNumber: 11
          }
        }, box.right)), React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.boxText,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 68,
            columnNumber: 9
          }
        }, box.bottom));
      }
    }]);

    return BoxContainer;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[9], "../StyleSheet/StyleSheet").create({
    row: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-around'
    },
    marginLabel: {
      width: 60
    },
    label: {
      fontSize: 10,
      color: 'rgb(255,100,0)',
      marginLeft: 5,
      flex: 1,
      textAlign: 'left',
      top: -3
    },
    innerText: {
      color: 'yellow',
      fontSize: 12,
      textAlign: 'center',
      width: 70
    },
    box: {
      borderWidth: 1,
      borderColor: 'grey'
    },
    boxText: {
      color: 'white',
      fontSize: 12,
      marginHorizontal: 3,
      marginVertical: 2,
      textAlign: 'center'
    }
  });

  module.exports = BoxInspector;
},374,[31,32,49,35,16,17,363,236,338,241],"node_modules/react-native/Libraries/Inspector/BoxInspector.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Inspector/PerformanceOverlay.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var PerformanceOverlay = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(PerformanceOverlay, _React$Component);

    var _super = _createSuper(PerformanceOverlay);

    function PerformanceOverlay() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, PerformanceOverlay);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(PerformanceOverlay, [{
      key: "render",
      value: function render() {
        var perfLogs = _$$_REQUIRE(_dependencyMap[6], "../Utilities/GlobalPerformanceLogger").getTimespans();

        var items = [];

        for (var key in perfLogs) {
          if (perfLogs[key].totalTime) {
            var unit = key === 'BundleSize' ? 'b' : 'ms';
            items.push(React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
              style: styles.row,
              key: key,
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 28,
                columnNumber: 11
              }
            }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
              style: [styles.text, styles.label],
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 29,
                columnNumber: 13
              }
            }, key), React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
              style: [styles.text, styles.totalTime],
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 30,
                columnNumber: 13
              }
            }, perfLogs[key].totalTime + unit)));
          }
        }

        return React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: styles.container,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 38,
            columnNumber: 12
          }
        }, items);
      }
    }]);

    return PerformanceOverlay;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[9], "../StyleSheet/StyleSheet").create({
    container: {
      height: 100,
      paddingTop: 10
    },
    label: {
      flex: 1
    },
    row: {
      flexDirection: 'row',
      paddingHorizontal: 10
    },
    text: {
      color: 'white',
      fontSize: 12
    },
    totalTime: {
      paddingRight: 100
    }
  });

  module.exports = PerformanceOverlay;
},375,[31,32,49,35,16,17,118,236,338,241],"node_modules/react-native/Libraries/Inspector/PerformanceOverlay.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Inspector/NetworkOverlay.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var LISTVIEW_CELL_HEIGHT = 15;
  var nextXHRId = 0;

  function getStringByValue(value) {
    if (value === undefined) {
      return 'undefined';
    }

    if (typeof value === 'object') {
      return JSON.stringify(value);
    }

    if (typeof value === 'string' && value.length > 500) {
      return String(value).substr(0, 500).concat('\n***TRUNCATED TO 500 CHARACTERS***');
    }

    return value;
  }

  function getTypeShortName(type) {
    if (type === 'XMLHttpRequest') {
      return 'XHR';
    } else if (type === 'WebSocket') {
      return 'WS';
    }

    return '';
  }

  function keyExtractor(request) {
    return String(request.id);
  }

  var NetworkOverlay = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(NetworkOverlay, _React$Component);

    var _super = _createSuper(NetworkOverlay);

    function NetworkOverlay() {
      var _this;

      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, NetworkOverlay);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this._requestsListViewScrollMetrics = {
        offset: 0,
        visibleLength: 0,
        contentLength: 0
      };
      _this._socketIdMap = {};
      _this._xhrIdMap = {};
      _this.state = {
        detailRowId: null,
        requests: []
      };

      _this._renderItem = function (_ref) {
        var item = _ref.item,
            index = _ref.index;
        var tableRowViewStyle = [styles.tableRow, index % 2 === 1 ? styles.tableRowOdd : styles.tableRowEven, index === _this.state.detailRowId && styles.tableRowPressed];
        var urlCellViewStyle = styles.urlCellView;
        var methodCellViewStyle = styles.methodCellView;
        return React.createElement(_$$_REQUIRE(_dependencyMap[5], "../Components/Touchable/TouchableHighlight"), {
          onPress: function onPress() {
            _this._pressRow(index);
          },
          __self: _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/assertThisInitialized")(_this),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 339,
            columnNumber: 7
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          __self: _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/assertThisInitialized")(_this),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 343,
            columnNumber: 9
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: tableRowViewStyle,
          __self: _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/assertThisInitialized")(_this),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 344,
            columnNumber: 11
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: urlCellViewStyle,
          __self: _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/assertThisInitialized")(_this),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 345,
            columnNumber: 13
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.cellText,
          numberOfLines: 1,
          __self: _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/assertThisInitialized")(_this),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 346,
            columnNumber: 15
          }
        }, item.url)), React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: methodCellViewStyle,
          __self: _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/assertThisInitialized")(_this),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 350,
            columnNumber: 13
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.cellText,
          numberOfLines: 1,
          __self: _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/assertThisInitialized")(_this),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 351,
            columnNumber: 15
          }
        }, getTypeShortName(item.type))))));
      };

      _this._indicateAdditionalRequests = function () {
        if (_this._requestsListView) {
          var distanceFromEndThreshold = LISTVIEW_CELL_HEIGHT * 2;
          var _this$_requestsListVi = _this._requestsListViewScrollMetrics,
              offset = _this$_requestsListVi.offset,
              visibleLength = _this$_requestsListVi.visibleLength,
              contentLength = _this$_requestsListVi.contentLength;
          var distanceFromEnd = contentLength - visibleLength - offset;
          var isCloseToEnd = distanceFromEnd <= distanceFromEndThreshold;

          if (isCloseToEnd) {
            _this._requestsListView.scrollToEnd();
          } else {
            _this._requestsListView.flashScrollIndicators();
          }
        }
      };

      _this._captureRequestsListView = function (listRef) {
        _this._requestsListView = listRef;
      };

      _this._requestsListViewOnScroll = function (e) {
        _this._requestsListViewScrollMetrics.offset = e.nativeEvent.contentOffset.y;
        _this._requestsListViewScrollMetrics.visibleLength = e.nativeEvent.layoutMeasurement.height;
        _this._requestsListViewScrollMetrics.contentLength = e.nativeEvent.contentSize.height;
      };

      _this._scrollDetailToTop = function () {
        if (_this._detailScrollView) {
          _this._detailScrollView.scrollTo({
            y: 0,
            animated: false
          });
        }
      };

      _this._closeButtonClicked = function () {
        _this.setState({
          detailRowId: null
        });
      };

      return _this;
    }

    _$$_REQUIRE(_dependencyMap[9], "@babel/runtime/helpers/createClass")(NetworkOverlay, [{
      key: "_enableXHRInterception",
      value: function _enableXHRInterception() {
        var _this2 = this;

        if (_$$_REQUIRE(_dependencyMap[10], "../Network/XHRInterceptor").isInterceptorEnabled()) {
          return;
        }

        _$$_REQUIRE(_dependencyMap[10], "../Network/XHRInterceptor").setOpenCallback(function (method, url, xhr) {
          xhr._index = nextXHRId++;
          var xhrIndex = _this2.state.requests.length;
          _this2._xhrIdMap[xhr._index] = xhrIndex;
          var _xhr = {
            id: xhrIndex,
            type: 'XMLHttpRequest',
            method: method,
            url: url
          };

          _this2.setState({
            requests: _this2.state.requests.concat(_xhr)
          }, _this2._indicateAdditionalRequests);
        });

        _$$_REQUIRE(_dependencyMap[10], "../Network/XHRInterceptor").setRequestHeaderCallback(function (header, value, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          _this2.setState(function (_ref2) {
            var requests = _ref2.requests;
            var networkRequestInfo = requests[xhrIndex];

            if (!networkRequestInfo.requestHeaders) {
              networkRequestInfo.requestHeaders = {};
            }

            networkRequestInfo.requestHeaders[header] = value;
            return {
              requests: requests
            };
          });
        });

        _$$_REQUIRE(_dependencyMap[10], "../Network/XHRInterceptor").setSendCallback(function (data, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          _this2.setState(function (_ref3) {
            var requests = _ref3.requests;
            var networkRequestInfo = requests[xhrIndex];
            networkRequestInfo.dataSent = data;
            return {
              requests: requests
            };
          });
        });

        _$$_REQUIRE(_dependencyMap[10], "../Network/XHRInterceptor").setHeaderReceivedCallback(function (type, size, responseHeaders, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          _this2.setState(function (_ref4) {
            var requests = _ref4.requests;
            var networkRequestInfo = requests[xhrIndex];
            networkRequestInfo.responseContentType = type;
            networkRequestInfo.responseSize = size;
            networkRequestInfo.responseHeaders = responseHeaders;
            return {
              requests: requests
            };
          });
        });

        _$$_REQUIRE(_dependencyMap[10], "../Network/XHRInterceptor").setResponseCallback(function (status, timeout, response, responseURL, responseType, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          _this2.setState(function (_ref5) {
            var requests = _ref5.requests;
            var networkRequestInfo = requests[xhrIndex];
            networkRequestInfo.status = status;
            networkRequestInfo.timeout = timeout;
            networkRequestInfo.response = response;
            networkRequestInfo.responseURL = responseURL;
            networkRequestInfo.responseType = responseType;
            return {
              requests: requests
            };
          });
        });

        _$$_REQUIRE(_dependencyMap[10], "../Network/XHRInterceptor").enableInterception();
      }
    }, {
      key: "_enableWebSocketInterception",
      value: function _enableWebSocketInterception() {
        var _this3 = this;

        if (_$$_REQUIRE(_dependencyMap[11], "../WebSocket/WebSocketInterceptor").isInterceptorEnabled()) {
          return;
        }

        _$$_REQUIRE(_dependencyMap[11], "../WebSocket/WebSocketInterceptor").setConnectCallback(function (url, protocols, options, socketId) {
          var socketIndex = _this3.state.requests.length;
          _this3._socketIdMap[socketId] = socketIndex;
          var _webSocket = {
            id: socketIndex,
            type: 'WebSocket',
            url: url,
            protocols: protocols
          };

          _this3.setState({
            requests: _this3.state.requests.concat(_webSocket)
          }, _this3._indicateAdditionalRequests);
        });

        _$$_REQUIRE(_dependencyMap[11], "../WebSocket/WebSocketInterceptor").setCloseCallback(function (statusCode, closeReason, socketId) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          if (statusCode !== null && closeReason !== null) {
            _this3.setState(function (_ref6) {
              var requests = _ref6.requests;
              var networkRequestInfo = requests[socketIndex];
              networkRequestInfo.status = statusCode;
              networkRequestInfo.closeReason = closeReason;
              return {
                requests: requests
              };
            });
          }
        });

        _$$_REQUIRE(_dependencyMap[11], "../WebSocket/WebSocketInterceptor").setSendCallback(function (data, socketId) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          _this3.setState(function (_ref7) {
            var requests = _ref7.requests;
            var networkRequestInfo = requests[socketIndex];

            if (!networkRequestInfo.messages) {
              networkRequestInfo.messages = '';
            }

            networkRequestInfo.messages += 'Sent: ' + JSON.stringify(data) + '\n';
            return {
              requests: requests
            };
          });
        });

        _$$_REQUIRE(_dependencyMap[11], "../WebSocket/WebSocketInterceptor").setOnMessageCallback(function (socketId, message) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          _this3.setState(function (_ref8) {
            var requests = _ref8.requests;
            var networkRequestInfo = requests[socketIndex];

            if (!networkRequestInfo.messages) {
              networkRequestInfo.messages = '';
            }

            networkRequestInfo.messages += 'Received: ' + JSON.stringify(message) + '\n';
            return {
              requests: requests
            };
          });
        });

        _$$_REQUIRE(_dependencyMap[11], "../WebSocket/WebSocketInterceptor").setOnCloseCallback(function (socketId, message) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          _this3.setState(function (_ref9) {
            var requests = _ref9.requests;
            var networkRequestInfo = requests[socketIndex];
            networkRequestInfo.serverClose = message;
            return {
              requests: requests
            };
          });
        });

        _$$_REQUIRE(_dependencyMap[11], "../WebSocket/WebSocketInterceptor").setOnErrorCallback(function (socketId, message) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          _this3.setState(function (_ref10) {
            var requests = _ref10.requests;
            var networkRequestInfo = requests[socketIndex];
            networkRequestInfo.serverError = message;
            return {
              requests: requests
            };
          });
        });

        _$$_REQUIRE(_dependencyMap[11], "../WebSocket/WebSocketInterceptor").enableInterception();
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._enableXHRInterception();

        this._enableWebSocketInterception();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _$$_REQUIRE(_dependencyMap[10], "../Network/XHRInterceptor").disableInterception();

        _$$_REQUIRE(_dependencyMap[11], "../WebSocket/WebSocketInterceptor").disableInterception();
      }
    }, {
      key: "_renderItemDetail",
      value: function _renderItemDetail(id) {
        var _this4 = this;

        var requestItem = this.state.requests[id];
        var details = Object.keys(requestItem).map(function (key) {
          if (key === 'id') {
            return;
          }

          return React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
            style: styles.detailViewRow,
            key: key,
            __self: _this4,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 368,
              columnNumber: 9
            }
          }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
            style: [styles.detailViewText, styles.detailKeyCellView],
            __self: _this4,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 369,
              columnNumber: 11
            }
          }, key), React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
            style: [styles.detailViewText, styles.detailValueCellView],
            __self: _this4,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 372,
              columnNumber: 11
            }
          }, getStringByValue(requestItem[key])));
        });
        return React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 380,
            columnNumber: 7
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[5], "../Components/Touchable/TouchableHighlight"), {
          style: styles.closeButton,
          onPress: this._closeButtonClicked,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 381,
            columnNumber: 9
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 384,
            columnNumber: 11
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.closeButtonText,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 385,
            columnNumber: 13
          }
        }, "v"))), React.createElement(_$$_REQUIRE(_dependencyMap[12], "../Components/ScrollView/ScrollView"), {
          style: styles.detailScrollView,
          ref: function ref(scrollRef) {
            return _this4._detailScrollView = scrollRef;
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 388,
            columnNumber: 9
          }
        }, details));
      }
    }, {
      key: "_pressRow",
      value: function _pressRow(rowId) {
        this.setState({
          detailRowId: rowId
        }, this._scrollDetailToTop);
      }
    }, {
      key: "_getRequestIndexByXHRID",
      value: function _getRequestIndexByXHRID(index) {
        if (index === undefined) {
          return -1;
        }

        var xhrIndex = this._xhrIdMap[index];

        if (xhrIndex === undefined) {
          return -1;
        } else {
          return xhrIndex;
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$state = this.state,
            requests = _this$state.requests,
            detailRowId = _this$state.detailRowId;
        return React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: styles.container,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 464,
            columnNumber: 7
          }
        }, detailRowId != null && this._renderItemDetail(detailRowId), React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: styles.listViewTitle,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 466,
            columnNumber: 9
          }
        }, requests.length > 0 && React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: styles.tableRow,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 468,
            columnNumber: 13
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: styles.urlTitleCellView,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 469,
            columnNumber: 15
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.cellText,
          numberOfLines: 1,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 470,
            columnNumber: 17
          }
        }, "URL")), React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: styles.methodTitleCellView,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 474,
            columnNumber: 15
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.cellText,
          numberOfLines: 1,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 475,
            columnNumber: 17
          }
        }, "Type")))), React.createElement(_$$_REQUIRE(_dependencyMap[13], "../Lists/FlatList"), {
          ref: this._captureRequestsListView,
          onScroll: this._requestsListViewOnScroll,
          style: styles.listView,
          data: requests,
          renderItem: this._renderItem,
          keyExtractor: keyExtractor,
          extraData: this.state,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 483,
            columnNumber: 9
          }
        }));
      }
    }]);

    return NetworkOverlay;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[14], "../StyleSheet/StyleSheet").create({
    container: {
      paddingTop: 10,
      paddingBottom: 10,
      paddingLeft: 5,
      paddingRight: 5
    },
    listViewTitle: {
      height: 20
    },
    listView: {
      flex: 1,
      height: 60
    },
    tableRow: {
      flexDirection: 'row',
      flex: 1,
      height: LISTVIEW_CELL_HEIGHT
    },
    tableRowEven: {
      backgroundColor: '#555'
    },
    tableRowOdd: {
      backgroundColor: '#000'
    },
    tableRowPressed: {
      backgroundColor: '#3B5998'
    },
    cellText: {
      color: 'white',
      fontSize: 12
    },
    methodTitleCellView: {
      height: 18,
      borderColor: '#DCD7CD',
      borderTopWidth: 1,
      borderBottomWidth: 1,
      borderRightWidth: 1,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#444',
      flex: 1
    },
    urlTitleCellView: {
      height: 18,
      borderColor: '#DCD7CD',
      borderTopWidth: 1,
      borderBottomWidth: 1,
      borderLeftWidth: 1,
      borderRightWidth: 1,
      justifyContent: 'center',
      backgroundColor: '#444',
      flex: 5,
      paddingLeft: 3
    },
    methodCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderRightWidth: 1,
      alignItems: 'center',
      justifyContent: 'center',
      flex: 1
    },
    urlCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderLeftWidth: 1,
      borderRightWidth: 1,
      justifyContent: 'center',
      flex: 5,
      paddingLeft: 3
    },
    detailScrollView: {
      flex: 1,
      height: 180,
      marginTop: 5,
      marginBottom: 5
    },
    detailKeyCellView: {
      flex: 1.3
    },
    detailValueCellView: {
      flex: 2
    },
    detailViewRow: {
      flexDirection: 'row',
      paddingHorizontal: 3
    },
    detailViewText: {
      color: 'white',
      fontSize: 11
    },
    closeButtonText: {
      color: 'white',
      fontSize: 10
    },
    closeButton: {
      marginTop: 5,
      backgroundColor: '#888',
      justifyContent: 'center',
      alignItems: 'center'
    }
  });

  module.exports = NetworkOverlay;
},376,[31,32,49,35,16,369,34,236,338,17,377,378,297,294,241],"node_modules/react-native/Libraries/Inspector/NetworkOverlay.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var originalXHROpen = _$$_REQUIRE(_dependencyMap[0], "./XMLHttpRequest").prototype.open;

  var originalXHRSend = _$$_REQUIRE(_dependencyMap[0], "./XMLHttpRequest").prototype.send;

  var originalXHRSetRequestHeader = _$$_REQUIRE(_dependencyMap[0], "./XMLHttpRequest").prototype.setRequestHeader;

  var openCallback;
  var sendCallback;
  var requestHeaderCallback;
  var headerReceivedCallback;
  var responseCallback;
  var _isInterceptorEnabled = false;
  var XHRInterceptor = {
    setOpenCallback: function setOpenCallback(callback) {
      openCallback = callback;
    },
    setSendCallback: function setSendCallback(callback) {
      sendCallback = callback;
    },
    setHeaderReceivedCallback: function setHeaderReceivedCallback(callback) {
      headerReceivedCallback = callback;
    },
    setResponseCallback: function setResponseCallback(callback) {
      responseCallback = callback;
    },
    setRequestHeaderCallback: function setRequestHeaderCallback(callback) {
      requestHeaderCallback = callback;
    },
    isInterceptorEnabled: function isInterceptorEnabled() {
      return _isInterceptorEnabled;
    },
    enableInterception: function enableInterception() {
      if (_isInterceptorEnabled) {
        return;
      }

      _$$_REQUIRE(_dependencyMap[0], "./XMLHttpRequest").prototype.open = function (method, url) {
        if (openCallback) {
          openCallback(method, url, this);
        }

        originalXHROpen.apply(this, arguments);
      };

      _$$_REQUIRE(_dependencyMap[0], "./XMLHttpRequest").prototype.setRequestHeader = function (header, value) {
        if (requestHeaderCallback) {
          requestHeaderCallback(header, value, this);
        }

        originalXHRSetRequestHeader.apply(this, arguments);
      };

      _$$_REQUIRE(_dependencyMap[0], "./XMLHttpRequest").prototype.send = function (data) {
        var _this = this;

        if (sendCallback) {
          sendCallback(data, this);
        }

        if (this.addEventListener) {
          this.addEventListener('readystatechange', function () {
            if (!_isInterceptorEnabled) {
              return;
            }

            if (_this.readyState === _this.HEADERS_RECEIVED) {
              var contentTypeString = _this.getResponseHeader('Content-Type');

              var contentLengthString = _this.getResponseHeader('Content-Length');

              var responseContentType, responseSize;

              if (contentTypeString) {
                responseContentType = contentTypeString.split(';')[0];
              }

              if (contentLengthString) {
                responseSize = parseInt(contentLengthString, 10);
              }

              if (headerReceivedCallback) {
                headerReceivedCallback(responseContentType, responseSize, _this.getAllResponseHeaders(), _this);
              }
            }

            if (_this.readyState === _this.DONE) {
              if (responseCallback) {
                responseCallback(_this.status, _this.timeout, _this.response, _this.responseURL, _this.responseType, _this);
              }
            }
          }, false);
        }

        originalXHRSend.apply(this, arguments);
      };

      _isInterceptorEnabled = true;
    },
    disableInterception: function disableInterception() {
      if (!_isInterceptorEnabled) {
        return;
      }

      _isInterceptorEnabled = false;
      _$$_REQUIRE(_dependencyMap[0], "./XMLHttpRequest").prototype.send = originalXHRSend;
      _$$_REQUIRE(_dependencyMap[0], "./XMLHttpRequest").prototype.open = originalXHROpen;
      _$$_REQUIRE(_dependencyMap[0], "./XMLHttpRequest").prototype.setRequestHeader = originalXHRSetRequestHeader;
      responseCallback = null;
      openCallback = null;
      sendCallback = null;
      headerReceivedCallback = null;
      requestHeaderCallback = null;
    }
  };
  module.exports = XHRInterceptor;
},377,[111],"node_modules/react-native/Libraries/Network/XHRInterceptor.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeWebSocketModule = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./NativeWebSocketModule"));

  var originalRCTWebSocketConnect = _NativeWebSocketModule.default.connect;
  var originalRCTWebSocketSend = _NativeWebSocketModule.default.send;
  var originalRCTWebSocketSendBinary = _NativeWebSocketModule.default.sendBinary;
  var originalRCTWebSocketClose = _NativeWebSocketModule.default.close;
  var eventEmitter;
  var subscriptions;
  var closeCallback;
  var sendCallback;
  var connectCallback;
  var onOpenCallback;
  var onMessageCallback;
  var onErrorCallback;
  var onCloseCallback;
  var _isInterceptorEnabled = false;
  var WebSocketInterceptor = {
    setCloseCallback: function setCloseCallback(callback) {
      closeCallback = callback;
    },
    setSendCallback: function setSendCallback(callback) {
      sendCallback = callback;
    },
    setConnectCallback: function setConnectCallback(callback) {
      connectCallback = callback;
    },
    setOnOpenCallback: function setOnOpenCallback(callback) {
      onOpenCallback = callback;
    },
    setOnMessageCallback: function setOnMessageCallback(callback) {
      onMessageCallback = callback;
    },
    setOnErrorCallback: function setOnErrorCallback(callback) {
      onErrorCallback = callback;
    },
    setOnCloseCallback: function setOnCloseCallback(callback) {
      onCloseCallback = callback;
    },
    isInterceptorEnabled: function isInterceptorEnabled() {
      return _isInterceptorEnabled;
    },
    _unregisterEvents: function _unregisterEvents() {
      subscriptions.forEach(function (e) {
        return e.remove();
      });
      subscriptions = [];
    },
    _registerEvents: function _registerEvents() {
      subscriptions = [eventEmitter.addListener('websocketMessage', function (ev) {
        if (onMessageCallback) {
          onMessageCallback(ev.id, ev.type === 'binary' ? WebSocketInterceptor._arrayBufferToString(ev.data) : ev.data);
        }
      }), eventEmitter.addListener('websocketOpen', function (ev) {
        if (onOpenCallback) {
          onOpenCallback(ev.id);
        }
      }), eventEmitter.addListener('websocketClosed', function (ev) {
        if (onCloseCallback) {
          onCloseCallback(ev.id, {
            code: ev.code,
            reason: ev.reason
          });
        }
      }), eventEmitter.addListener('websocketFailed', function (ev) {
        if (onErrorCallback) {
          onErrorCallback(ev.id, {
            message: ev.message
          });
        }
      })];
    },
    enableInterception: function enableInterception() {
      if (_isInterceptorEnabled) {
        return;
      }

      eventEmitter = new (_$$_REQUIRE(_dependencyMap[2], "../EventEmitter/NativeEventEmitter"))(_NativeWebSocketModule.default);

      WebSocketInterceptor._registerEvents();

      _NativeWebSocketModule.default.connect = function (url, protocols, options, socketId) {
        if (connectCallback) {
          connectCallback(url, protocols, options, socketId);
        }

        originalRCTWebSocketConnect.apply(this, arguments);
      };

      _NativeWebSocketModule.default.send = function (data, socketId) {
        if (sendCallback) {
          sendCallback(data, socketId);
        }

        originalRCTWebSocketSend.apply(this, arguments);
      };

      _NativeWebSocketModule.default.sendBinary = function (data, socketId) {
        if (sendCallback) {
          sendCallback(WebSocketInterceptor._arrayBufferToString(data), socketId);
        }

        originalRCTWebSocketSendBinary.apply(this, arguments);
      };

      _NativeWebSocketModule.default.close = function () {
        if (closeCallback) {
          if (arguments.length === 3) {
            closeCallback(arguments[0], arguments[1], arguments[2]);
          } else {
            closeCallback(null, null, arguments[0]);
          }
        }

        originalRCTWebSocketClose.apply(this, arguments);
      };

      _isInterceptorEnabled = true;
    },
    _arrayBufferToString: function _arrayBufferToString(data) {
      var value = _$$_REQUIRE(_dependencyMap[3], "base64-js").toByteArray(data).buffer;

      if (value === undefined || value === null) {
        return '(no value)';
      }

      if (typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined' && value instanceof ArrayBuffer) {
        return "ArrayBuffer {" + String(Array.from(new Uint8Array(value))) + "}";
      }

      return value;
    },
    disableInterception: function disableInterception() {
      if (!_isInterceptorEnabled) {
        return;
      }

      _isInterceptorEnabled = false;
      _NativeWebSocketModule.default.send = originalRCTWebSocketSend;
      _NativeWebSocketModule.default.sendBinary = originalRCTWebSocketSendBinary;
      _NativeWebSocketModule.default.close = originalRCTWebSocketClose;
      _NativeWebSocketModule.default.connect = originalRCTWebSocketConnect;
      connectCallback = null;
      closeCallback = null;
      sendCallback = null;
      onOpenCallback = null;
      onMessageCallback = null;
      onCloseCallback = null;
      onErrorCallback = null;

      WebSocketInterceptor._unregisterEvents();
    }
  };
  module.exports = WebSocketInterceptor;
},378,[3,130,126,117],"node_modules/react-native/Libraries/WebSocket/WebSocketInterceptor.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports._LogBoxNotificationContainer = _LogBoxNotificationContainer;
  exports.default = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../StyleSheet/StyleSheet"));

  var _View = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../Components/View/View"));

  var LogBoxData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4], "./Data/LogBoxData"));

  var _LogBoxLog = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "./Data/LogBoxLog"));

  var _LogBoxNotification = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "./UI/LogBoxNotification"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/LogBox/LogBoxNotificationContainer.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _LogBoxNotificationContainer(props) {
    var logs = props.logs;

    var onDismissWarns = function onDismissWarns() {
      LogBoxData.clearWarnings();
    };

    var onDismissErrors = function onDismissErrors() {
      LogBoxData.clearErrors();
    };

    var setSelectedLog = function setSelectedLog(index) {
      LogBoxData.setSelectedLog(index);
    };

    function openLog(log) {
      var index = logs.length - 1;

      while (index > 0 && logs[index] !== log) {
        index -= 1;
      }

      setSelectedLog(index);
    }

    if (logs.length === 0 || props.isDisabled === true) {
      return null;
    }

    var warnings = logs.filter(function (log) {
      return log.level === 'warn';
    });
    var errors = logs.filter(function (log) {
      return log.level === 'error' || log.level === 'fatal';
    });
    return React.createElement(_View.default, {
      style: styles.list,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 59,
        columnNumber: 5
      }
    }, warnings.length > 0 && React.createElement(_View.default, {
      style: styles.toast,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 61,
        columnNumber: 9
      }
    }, React.createElement(_LogBoxNotification.default, {
      log: warnings[warnings.length - 1],
      level: "warn",
      totalLogCount: warnings.length,
      onPressOpen: function onPressOpen() {
        return openLog(warnings[warnings.length - 1]);
      },
      onPressDismiss: onDismissWarns,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 62,
        columnNumber: 11
      }
    })), errors.length > 0 && React.createElement(_View.default, {
      style: styles.toast,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 72,
        columnNumber: 9
      }
    }, React.createElement(_LogBoxNotification.default, {
      log: errors[errors.length - 1],
      level: "error",
      totalLogCount: errors.length,
      onPressOpen: function onPressOpen() {
        return openLog(errors[errors.length - 1]);
      },
      onPressDismiss: onDismissErrors,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 73,
        columnNumber: 11
      }
    })));
  }

  var styles = _StyleSheet.default.create({
    list: {
      bottom: 20,
      left: 10,
      right: 10,
      position: 'absolute'
    },
    toast: {
      borderRadius: 8,
      marginBottom: 5,
      overflow: 'hidden'
    }
  });

  var _default = LogBoxData.withSubscription(_LogBoxNotificationContainer);

  exports.default = _default;
},379,[49,3,241,236,64,65,380],"node_modules/react-native/Libraries/LogBox/LogBoxNotificationContainer.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _Image = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Image/Image"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/StyleSheet"));

  var _Text = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../Text/Text"));

  var _View = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../Components/View/View"));

  var _LogBoxButton = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "./LogBoxButton"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7], "./LogBoxStyle"));

  var _LogBoxLog = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[8], "../Data/LogBoxLog"));

  var _LogBoxMessage = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[9], "./LogBoxMessage"));

  var LogBoxData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10], "../Data/LogBoxData"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/LogBox/UI/LogBoxNotification.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function LogBoxLogNotification(props) {
    var totalLogCount = props.totalLogCount,
        level = props.level,
        log = props.log;
    React.useEffect(function () {
      LogBoxData.symbolicateLogLazy(log);
    }, [log]);
    return React.createElement(_View.default, {
      style: toastStyles.container,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 41,
        columnNumber: 5
      }
    }, React.createElement(_LogBoxButton.default, {
      onPress: props.onPressOpen,
      style: toastStyles.press,
      backgroundColor: {
        default: LogBoxStyle.getBackgroundColor(1),
        pressed: LogBoxStyle.getBackgroundColor(0.9)
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 42,
        columnNumber: 7
      }
    }, React.createElement(_View.default, {
      style: toastStyles.content,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 49,
        columnNumber: 9
      }
    }, React.createElement(CountBadge, {
      count: totalLogCount,
      level: level,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 50,
        columnNumber: 11
      }
    }), React.createElement(Message, {
      message: log.message,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 51,
        columnNumber: 11
      }
    }), React.createElement(DismissButton, {
      onPress: props.onPressDismiss,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 52,
        columnNumber: 11
      }
    }))));
  }

  function CountBadge(props) {
    return React.createElement(_View.default, {
      style: countStyles.outside,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 61,
        columnNumber: 5
      }
    }, React.createElement(_View.default, {
      style: [countStyles.inside, countStyles[props.level]],
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 64,
        columnNumber: 7
      }
    }, React.createElement(_Text.default, {
      style: countStyles.text,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 65,
        columnNumber: 9
      }
    }, props.count <= 1 ? '!' : props.count)));
  }

  function Message(props) {
    return React.createElement(_View.default, {
      style: messageStyles.container,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 75,
        columnNumber: 5
      }
    }, React.createElement(_Text.default, {
      numberOfLines: 1,
      style: messageStyles.text,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 76,
        columnNumber: 7
      }
    }, props.message && React.createElement(_LogBoxMessage.default, {
      plaintext: true,
      message: props.message,
      style: messageStyles.substitutionText,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 78,
        columnNumber: 11
      }
    })));
  }

  function DismissButton(props) {
    return React.createElement(_View.default, {
      style: dismissStyles.container,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 91,
        columnNumber: 5
      }
    }, React.createElement(_LogBoxButton.default, {
      backgroundColor: {
        default: LogBoxStyle.getTextColor(0.3),
        pressed: LogBoxStyle.getTextColor(0.5)
      },
      hitSlop: {
        top: 12,
        right: 10,
        bottom: 12,
        left: 10
      },
      onPress: props.onPress,
      style: dismissStyles.press,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 92,
        columnNumber: 7
      }
    }, React.createElement(_Image.default, {
      source: _$$_REQUIRE(_dependencyMap[11], "./LogBoxImages/close.png"),
      style: dismissStyles.image,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 105,
        columnNumber: 9
      }
    })));
  }

  var countStyles = _StyleSheet.default.create({
    warn: {
      backgroundColor: LogBoxStyle.getWarningColor(1)
    },
    error: {
      backgroundColor: LogBoxStyle.getErrorColor(1)
    },
    log: {
      backgroundColor: LogBoxStyle.getLogColor(1)
    },
    outside: {
      padding: 2,
      borderRadius: 25,
      backgroundColor: '#fff',
      marginRight: 8
    },
    inside: {
      minWidth: 18,
      paddingLeft: 4,
      paddingRight: 4,
      borderRadius: 25,
      fontWeight: '600'
    },
    text: {
      color: LogBoxStyle.getTextColor(1),
      fontSize: 14,
      lineHeight: 18,
      textAlign: 'center',
      fontWeight: '600',
      textShadowColor: LogBoxStyle.getBackgroundColor(0.4),
      textShadowOffset: {
        width: 0,
        height: 0
      },
      textShadowRadius: 3
    }
  });

  var messageStyles = _StyleSheet.default.create({
    container: {
      alignSelf: 'stretch',
      flexGrow: 1,
      flexShrink: 1,
      flexBasis: 'auto',
      borderLeftColor: LogBoxStyle.getTextColor(0.2),
      borderLeftWidth: 1,
      paddingLeft: 8
    },
    text: {
      color: LogBoxStyle.getTextColor(1),
      flex: 1,
      fontSize: 14,
      lineHeight: 22
    },
    substitutionText: {
      color: LogBoxStyle.getTextColor(0.6)
    }
  });

  var dismissStyles = _StyleSheet.default.create({
    container: {
      alignSelf: 'center',
      flexDirection: 'row',
      flexGrow: 0,
      flexShrink: 0,
      flexBasis: 'auto',
      marginLeft: 5
    },
    press: {
      height: 20,
      width: 20,
      borderRadius: 25,
      alignSelf: 'flex-end',
      alignItems: 'center',
      justifyContent: 'center'
    },
    image: {
      height: 8,
      width: 8,
      tintColor: LogBoxStyle.getBackgroundColor(1)
    }
  });

  var toastStyles = _StyleSheet.default.create({
    container: {
      height: 48,
      position: 'relative',
      width: '100%',
      justifyContent: 'center',
      marginTop: 0.5,
      backgroundColor: LogBoxStyle.getTextColor(1)
    },
    press: {
      height: 48,
      position: 'relative',
      width: '100%',
      justifyContent: 'center',
      marginTop: 0.5,
      paddingHorizontal: 12
    },
    content: {
      alignItems: 'flex-start',
      flexDirection: 'row',
      borderRadius: 8,
      flexGrow: 0,
      flexShrink: 0,
      flexBasis: 'auto'
    }
  });

  var _default = LogBoxLogNotification;
  exports.default = _default;
},380,[49,3,322,241,338,236,381,382,65,383,64,384],"node_modules/react-native/Libraries/LogBox/UI/LogBoxNotification.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/slicedToArray"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2], "react"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/StyleSheet"));

  var _TouchableWithoutFeedback = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../Components/Touchable/TouchableWithoutFeedback"));

  var _View = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../Components/View/View"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6], "./LogBoxStyle"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/LogBox/UI/LogBoxButton.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function LogBoxButton(props) {
    var _React$useState = React.useState(false),
        _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
        pressed = _React$useState2[0],
        setPressed = _React$useState2[1];

    var backgroundColor = props.backgroundColor;

    if (!backgroundColor) {
      backgroundColor = {
        default: LogBoxStyle.getBackgroundColor(0.95),
        pressed: LogBoxStyle.getBackgroundColor(0.6)
      };
    }

    var content = React.createElement(_View.default, {
      style: _StyleSheet.default.compose({
        backgroundColor: pressed ? backgroundColor.pressed : backgroundColor.default
      }, props.style),
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 45,
        columnNumber: 5
      }
    }, props.children);
    return props.onPress == null ? content : React.createElement(_TouchableWithoutFeedback.default, {
      hitSlop: props.hitSlop,
      onPress: props.onPress,
      onPressIn: function onPressIn() {
        return setPressed(true);
      },
      onPressOut: function onPressOut() {
        return setPressed(false);
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 61,
        columnNumber: 5
      }
    }, content);
  }

  var _default = LogBoxButton;
  exports.default = _default;
},381,[3,8,49,241,371,236,382],"node_modules/react-native/Libraries/LogBox/UI/LogBoxButton.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getBackgroundColor = getBackgroundColor;
  exports.getBackgroundDarkColor = getBackgroundDarkColor;
  exports.getBackgroundLightColor = getBackgroundLightColor;
  exports.getDividerColor = getDividerColor;
  exports.getErrorColor = getErrorColor;
  exports.getErrorDarkColor = getErrorDarkColor;
  exports.getFatalColor = getFatalColor;
  exports.getFatalDarkColor = getFatalDarkColor;
  exports.getHighlightColor = getHighlightColor;
  exports.getLogColor = getLogColor;
  exports.getTextColor = getTextColor;
  exports.getWarningColor = getWarningColor;
  exports.getWarningDarkColor = getWarningDarkColor;
  exports.getWarningHighlightColor = getWarningHighlightColor;

  function getBackgroundColor(opacity) {
    return "rgba(51, 51, 51, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getBackgroundLightColor(opacity) {
    return "rgba(69, 69, 69, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getBackgroundDarkColor(opacity) {
    return "rgba(34, 34, 34, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getWarningColor(opacity) {
    return "rgba(250, 186, 48, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getWarningDarkColor(opacity) {
    return "rgba(224, 167, 8, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getFatalColor(opacity) {
    return "rgba(243, 83, 105, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getFatalDarkColor(opacity) {
    return "rgba(208, 75, 95, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getErrorColor(opacity) {
    return "rgba(243, 83, 105, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getErrorDarkColor(opacity) {
    return "rgba(208, 75, 95, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getLogColor(opacity) {
    return "rgba(119, 119, 119, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getWarningHighlightColor(opacity) {
    return "rgba(252, 176, 29, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getDividerColor(opacity) {
    return "rgba(255, 255, 255, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getHighlightColor(opacity) {
    return "rgba(252, 176, 29, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getTextColor(opacity) {
    return "rgba(255, 255, 255, " + (opacity == null ? 1 : opacity) + ")";
  }
},382,[],"node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _Text = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Text/Text"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/LogBox/UI/LogBoxMessage.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var cleanContent = function cleanContent(content) {
    return content.replace(/^(TransformError |Warning: (Warning: )?|Error: )/g, '');
  };

  function LogBoxMessage(props) {
    var _this = this;

    var _props$message = props.message,
        content = _props$message.content,
        substitutions = _props$message.substitutions;

    if (props.plaintext === true) {
      return React.createElement(_Text.default, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 34,
          columnNumber: 12
        }
      }, cleanContent(content));
    }

    var maxLength = props.maxLength != null ? props.maxLength : Infinity;
    var substitutionStyle = props.style;
    var elements = [];
    var length = 0;

    var createUnderLength = function createUnderLength(key, message, style) {
      var cleanMessage = cleanContent(message);

      if (props.maxLength != null) {
        cleanMessage = cleanMessage.slice(0, props.maxLength - length);
      }

      if (length < maxLength) {
        elements.push(React.createElement(_Text.default, {
          key: key,
          style: style,
          __self: _this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 50,
            columnNumber: 9
          }
        }, cleanMessage));
      }

      length += cleanMessage.length;
    };

    var lastOffset = substitutions.reduce(function (prevOffset, substitution, index) {
      var key = String(index);

      if (substitution.offset > prevOffset) {
        var prevPart = content.substr(prevOffset, substitution.offset - prevOffset);
        createUnderLength(key, prevPart);
      }

      var substititionPart = content.substr(substitution.offset, substitution.length);
      createUnderLength(key + '.5', substititionPart, substitutionStyle);
      return substitution.offset + substitution.length;
    }, 0);

    if (lastOffset < content.length) {
      var lastPart = content.substr(lastOffset);
      createUnderLength('-1', lastPart);
    }

    return React.createElement(React.Fragment, null, elements);
  }

  var _default = LogBoxMessage;
  exports.default = _default;
},383,[49,3,338],"node_modules/react-native/Libraries/LogBox/UI/LogBoxMessage.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native/Libraries/LogBox/UI/LogBoxImages",
    "width": 28,
    "height": 28,
    "scales": [1],
    "hash": "c00b5b51f0fd354e216f319a78fb252a",
    "name": "close",
    "type": "png"
  });
},384,[229],"node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/close.png");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _$$_REQUIRE(_dependencyMap[0], "react");

  module.exports = React.createContext(0);
},385,[49],"node_modules/react-native/Libraries/ReactNative/RootTagContext.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _Platform = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../Utilities/Platform"));

  var _RCTLog = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../Utilities/RCTLog"));

  var LogBoxData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3], "./Data/LogBoxData"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var LogBox;

  if (__DEV__) {
    var _console = console,
        error = _console.error,
        warn = _console.warn;
    var errorImpl = error.bind(console);
    var warnImpl = warn.bind(console);

    console.error = function () {
      errorImpl.apply(void 0, arguments);
    };

    console.warn = function () {
      warnImpl.apply(void 0, arguments);
    };

    LogBox = {
      ignoreLogs: function ignoreLogs(patterns) {
        LogBoxData.addIgnorePatterns(patterns);
      },
      ignoreAllLogs: function ignoreAllLogs(value) {
        LogBoxData.setDisabled(value == null ? true : value);
      },
      uninstall: function uninstall() {
        errorImpl = error;
        warnImpl = warn;
        delete console.disableLogBox;
      },
      install: function install() {
        _$$_REQUIRE(_dependencyMap[4], "../NativeModules/specs/NativeLogBox");

        errorImpl = function errorImpl() {
          registerError.apply(void 0, arguments);
        };

        warnImpl = function warnImpl() {
          registerWarning.apply(void 0, arguments);
        };

        if (console.disableYellowBox === true) {
          LogBoxData.setDisabled(true);
          console.warn('console.disableYellowBox has been deprecated and will be removed in a future release. Please use LogBox.ignoreAllLogs(value) instead.');
        }

        Object.defineProperty(console, 'disableYellowBox', {
          configurable: true,
          get: function get() {
            return LogBoxData.isDisabled();
          },
          set: function set(value) {
            LogBoxData.setDisabled(value);
            console.warn('console.disableYellowBox has been deprecated and will be removed in a future release. Please use LogBox.ignoreAllLogs(value) instead.');
          }
        });

        if (_Platform.default.isTesting) {
          LogBoxData.setDisabled(true);
        }

        _RCTLog.default.setWarningHandler(function () {
          registerWarning.apply(void 0, arguments);
        });
      }
    };

    var isRCTLogAdviceWarning = function isRCTLogAdviceWarning() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return typeof args[0] === 'string' && args[0].startsWith('(ADVICE)');
    };

    var isWarningModuleWarning = function isWarningModuleWarning() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return typeof args[0] === 'string' && args[0].startsWith('Warning: ');
    };

    var registerWarning = function registerWarning() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      if (LogBoxData.isLogBoxErrorMessage(String(args[0]))) {
        error.call.apply(error, [console].concat(args));
        return;
      }

      try {
        if (!isRCTLogAdviceWarning.apply(void 0, args)) {
          var _parseLogBoxLog = (0, _$$_REQUIRE(_dependencyMap[5], "./Data/parseLogBoxLog").parseLogBoxLog)(args),
              category = _parseLogBoxLog.category,
              message = _parseLogBoxLog.message,
              componentStack = _parseLogBoxLog.componentStack;

          if (!LogBoxData.isMessageIgnored(message.content)) {
            warn.call.apply(warn, [console].concat(args));
            LogBoxData.addLog({
              level: 'warn',
              category: category,
              message: message,
              componentStack: componentStack
            });
          }
        }
      } catch (err) {
        LogBoxData.reportLogBoxError(err);
      }
    };

    var registerError = function registerError() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      if (LogBoxData.isLogBoxErrorMessage(args[0])) {
        error.call.apply(error, [console].concat(args));
        return;
      }

      try {
        if (!isWarningModuleWarning.apply(void 0, args)) {
          error.call.apply(error, [console].concat(args));
          return;
        }

        var format = args[0].replace('Warning: ', '');
        var filterResult = LogBoxData.checkWarningFilter(format);

        if (filterResult.suppressCompletely) {
          return;
        }

        var level = 'error';

        if (filterResult.suppressDialog_LEGACY === true) {
          level = 'warn';
        } else if (filterResult.forceDialogImmediately === true) {
          level = 'fatal';
        }

        args[0] = "Warning: " + filterResult.finalFormat;

        var _parseLogBoxLog2 = (0, _$$_REQUIRE(_dependencyMap[5], "./Data/parseLogBoxLog").parseLogBoxLog)(args),
            category = _parseLogBoxLog2.category,
            message = _parseLogBoxLog2.message,
            componentStack = _parseLogBoxLog2.componentStack;

        if (!LogBoxData.isMessageIgnored(message.content)) {
          var interpolated = (0, _$$_REQUIRE(_dependencyMap[5], "./Data/parseLogBoxLog").parseInterpolation)(args);
          error.call(console, interpolated.message.content);
          LogBoxData.addLog({
            level: level,
            category: category,
            message: message,
            componentStack: componentStack
          });
        }
      } catch (err) {
        LogBoxData.reportLogBoxError(err);
      }
    };
  } else {
    LogBox = {
      ignoreLogs: function ignoreLogs(patterns) {},
      ignoreAllLogs: function ignoreAllLogs(value) {},
      install: function install() {},
      uninstall: function uninstall() {}
    };
  }

  module.exports = LogBox;
},386,[3,80,147,64,76,77],"node_modules/react-native/Libraries/LogBox/LogBox.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/Picker/Picker.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var MODE_DIALOG = 'dialog';
  var MODE_DROPDOWN = 'dropdown';

  var PickerItem = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(PickerItem, _React$Component);

    var _super = _createSuper(PickerItem);

    function PickerItem() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, PickerItem);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(PickerItem, [{
      key: "render",
      value: function render() {
        throw null;
      }
    }]);

    return PickerItem;
  }(React.Component);

  var Picker = function (_React$Component2) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(Picker, _React$Component2);

    var _super2 = _createSuper(Picker);

    function Picker() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, Picker);

      return _super2.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(Picker, [{
      key: "render",
      value: function render() {
        if ("android" === 'ios') {
          return React.createElement(_$$_REQUIRE(_dependencyMap[6], "./PickerIOS"), _$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/extends")({}, this.props, {
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 152,
              columnNumber: 14
            }
          }), this.props.children);
        } else if ("android" === 'android') {
          return React.createElement(_$$_REQUIRE(_dependencyMap[8], "./PickerAndroid"), _$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/extends")({}, this.props, {
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 157,
              columnNumber: 9
            }
          }), this.props.children);
        } else {
          return React.createElement(_$$_REQUIRE(_dependencyMap[9], "../UnimplementedViews/UnimplementedView"), {
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 160,
              columnNumber: 14
            }
          });
        }
      }
    }]);

    return Picker;
  }(React.Component);

  Picker.MODE_DIALOG = MODE_DIALOG;
  Picker.MODE_DROPDOWN = MODE_DROPDOWN;
  Picker.Item = PickerItem;
  Picker.defaultProps = {
    mode: MODE_DIALOG
  };
  module.exports = Picker;
},387,[31,32,49,35,16,17,388,53,389,356],"node_modules/react-native/Libraries/Components/Picker/Picker.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0], "../UnimplementedViews/UnimplementedView");
},388,[356],"node_modules/react-native/Libraries/Components/Picker/PickerIOS.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/extends"));

  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/slicedToArray"));

  var _AndroidDropdownPickerNativeComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3], "./AndroidDropdownPickerNativeComponent"));

  var _AndroidDialogPickerNativeComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4], "./AndroidDialogPickerNativeComponent"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[5], "react"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "../../StyleSheet/StyleSheet"));

  var _invariant = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "invariant"));

  var _processColor = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[8], "../../StyleSheet/processColor"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/Picker/PickerAndroid.android.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function PickerAndroid(props) {
    var pickerRef = React.useRef(null);

    var _React$useMemo = React.useMemo(function () {
      var selected = 0;
      var items = React.Children.map(props.children, function (child, index) {
        if (child === null) {
          return null;
        }

        if (child.props.value === props.selectedValue) {
          selected = index;
        }

        var _child$props = child.props,
            color = _child$props.color,
            label = _child$props.label;
        var processedColor = (0, _processColor.default)(color);
        (0, _invariant.default)(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for PickerAndroid color prop');
        return {
          color: color == null ? null : processedColor,
          label: label
        };
      });
      return [items, selected];
    }, [props.children, props.selectedValue]),
        _React$useMemo2 = (0, _slicedToArray2.default)(_React$useMemo, 2),
        items = _React$useMemo2[0],
        selected = _React$useMemo2[1];

    var onSelect = React.useCallback(function (_ref) {
      var nativeEvent = _ref.nativeEvent;
      var position = nativeEvent.position;
      var onValueChange = props.onValueChange;

      if (onValueChange != null) {
        if (position >= 0) {
          var children = React.Children.toArray(props.children).filter(function (item) {
            return item != null;
          });
          var value = children[position].props.value;

          if (props.selectedValue !== value) {
            onValueChange(value, position);
          }
        } else {
          onValueChange(null, position);
        }
      }

      var current = pickerRef.current;

      if (current != null && position !== selected) {
        var Commands = props.mode === 'dropdown' ? _AndroidDropdownPickerNativeComponent.Commands : _AndroidDialogPickerNativeComponent.Commands;
        Commands.setNativeSelectedPosition(current, selected);
      }
    }, [props.children, props.onValueChange, props.selectedValue, props.mode, selected]);
    var rootProps = {
      accessibilityLabel: props.accessibilityLabel,
      enabled: props.enabled,
      items: items,
      onSelect: onSelect,
      prompt: props.prompt,
      ref: pickerRef,
      selected: selected,
      style: _StyleSheet.default.compose(styles.pickerAndroid, props.style),
      backgroundColor: props.backgroundColor,
      testID: props.testID
    };
    return props.mode === 'dropdown' ? React.createElement(_AndroidDropdownPickerNativeComponent.default, (0, _extends2.default)({}, rootProps, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 132,
        columnNumber: 5
      }
    })) : React.createElement(_AndroidDialogPickerNativeComponent.default, (0, _extends2.default)({}, rootProps, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 134,
        columnNumber: 5
      }
    }));
  }

  var styles = _StyleSheet.default.create({
    pickerAndroid: {
      height: 50
    }
  });

  module.exports = PickerAndroid;
},389,[3,53,8,390,391,49,241,6,176],"node_modules/react-native/Libraries/Components/Picker/PickerAndroid.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Commands = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _codegenNativeCommands = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Utilities/codegenNativeCommands"));

  var _requireNativeComponent = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../ReactNative/requireNativeComponent"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['setNativeSelectedPosition']
  });
  exports.Commands = Commands;

  var _default = (0, _requireNativeComponent.default)('AndroidDropdownPicker');

  exports.default = _default;
},390,[49,3,200,56],"node_modules/react-native/Libraries/Components/Picker/AndroidDropdownPickerNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Commands = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _codegenNativeCommands = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Utilities/codegenNativeCommands"));

  var _requireNativeComponent = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../ReactNative/requireNativeComponent"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['setNativeSelectedPosition']
  });
  exports.Commands = Commands;

  var _default = (0, _requireNativeComponent.default)('AndroidDialogPicker');

  exports.default = _default;
},391,[49,3,200,56],"node_modules/react-native/Libraries/Components/Picker/AndroidDialogPickerNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _extends2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/extends"));

  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/slicedToArray"));

  var _objectWithoutProperties2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/objectWithoutProperties"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4], "react"));

  var _useAndroidRippleForView = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "./useAndroidRippleForView"));

  var _usePressability = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "../../Pressability/usePressability"));

  var _View = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "../View/View"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/Pressable/Pressable.js";
  var _excluded = ["accessible", "android_disableSound", "android_ripple", "children", "delayLongPress", "disabled", "focusable", "onLongPress", "onPress", "onPressIn", "onPressOut", "pressRetentionOffset", "style", "testOnly_pressed"];

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function Pressable(props, forwardedRef) {
    var accessible = props.accessible,
        android_disableSound = props.android_disableSound,
        android_ripple = props.android_ripple,
        children = props.children,
        delayLongPress = props.delayLongPress,
        disabled = props.disabled,
        focusable = props.focusable,
        onLongPress = props.onLongPress,
        onPress = props.onPress,
        _onPressIn = props.onPressIn,
        _onPressOut = props.onPressOut,
        pressRetentionOffset = props.pressRetentionOffset,
        style = props.style,
        testOnly_pressed = props.testOnly_pressed,
        restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
    var viewRef = (0, React.useRef)(null);
    (0, React.useImperativeHandle)(forwardedRef, function () {
      return viewRef.current;
    });
    var android_rippleConfig = (0, _useAndroidRippleForView.default)(android_ripple, viewRef);

    var _usePressState = usePressState(testOnly_pressed === true),
        _usePressState2 = (0, _slicedToArray2.default)(_usePressState, 2),
        pressed = _usePressState2[0],
        setPressed = _usePressState2[1];

    var hitSlop = (0, _$$_REQUIRE(_dependencyMap[8], "../../StyleSheet/Rect").normalizeRect)(props.hitSlop);
    var config = (0, React.useMemo)(function () {
      return {
        disabled: disabled,
        hitSlop: hitSlop,
        pressRectOffset: pressRetentionOffset,
        android_disableSound: android_disableSound,
        delayLongPress: delayLongPress,
        onLongPress: onLongPress,
        onPress: onPress,
        onPressIn: function onPressIn(event) {
          if (android_rippleConfig != null) {
            android_rippleConfig.onPressIn(event);
          }

          setPressed(true);

          if (_onPressIn != null) {
            _onPressIn(event);
          }
        },
        onPressMove: android_rippleConfig == null ? void 0 : android_rippleConfig.onPressMove,
        onPressOut: function onPressOut(event) {
          if (android_rippleConfig != null) {
            android_rippleConfig.onPressOut(event);
          }

          setPressed(false);

          if (_onPressOut != null) {
            _onPressOut(event);
          }
        }
      };
    }, [android_disableSound, android_rippleConfig, delayLongPress, disabled, hitSlop, onLongPress, onPress, _onPressIn, _onPressOut, pressRetentionOffset, setPressed]);
    var eventHandlers = (0, _usePressability.default)(config);
    return React.createElement(_View.default, (0, _extends2.default)({}, restProps, eventHandlers, android_rippleConfig == null ? void 0 : android_rippleConfig.viewProps, {
      accessible: accessible !== false,
      focusable: focusable !== false,
      hitSlop: hitSlop,
      ref: viewRef,
      style: typeof style === 'function' ? style({
        pressed: pressed
      }) : style,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 214,
        columnNumber: 5
      }
    }), typeof children === 'function' ? children({
      pressed: pressed
    }) : children, __DEV__ ? React.createElement(_$$_REQUIRE(_dependencyMap[9], "../../Pressability/PressabilityDebug").PressabilityDebugView, {
      color: "red",
      hitSlop: hitSlop,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 224,
        columnNumber: 18
      }
    }) : null);
  }

  function usePressState(forcePressed) {
    var _useState = (0, React.useState)(false),
        _useState2 = (0, _slicedToArray2.default)(_useState, 2),
        pressed = _useState2[0],
        setPressed = _useState2[1];

    return [pressed || forcePressed, setPressed];
  }

  var MemoedPressable = React.memo(React.forwardRef(Pressable));
  MemoedPressable.displayName = 'Pressable';
  var _default = MemoedPressable;
  exports.default = _default;
},392,[3,53,8,128,49,393,394,236,249,253],"node_modules/react-native/Libraries/Components/Pressable/Pressable.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useAndroidRippleForView;

  var _invariant = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "invariant"));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2], "react-native");

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3], "react"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function useAndroidRippleForView(rippleConfig, viewRef) {
    var _ref = rippleConfig != null ? rippleConfig : {},
        color = _ref.color,
        borderless = _ref.borderless,
        radius = _ref.radius;

    var normalizedBorderless = borderless === true;
    return (0, React.useMemo)(function () {
      if (_reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= 21 && (color != null || normalizedBorderless || radius != null)) {
        var processedColor = (0, _reactNative.processColor)(color);
        (0, _invariant.default)(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');
        return {
          viewProps: {
            nativeBackgroundAndroid: {
              type: 'RippleAndroid',
              color: processedColor,
              borderless: normalizedBorderless,
              rippleRadius: radius
            }
          },
          onPressIn: function onPressIn(event) {
            var view = viewRef.current;

            if (view != null) {
              var _event$nativeEvent$lo, _event$nativeEvent$lo2;

              _$$_REQUIRE(_dependencyMap[4], "../View/ViewNativeComponent").Commands.setPressed(view, true);

              _$$_REQUIRE(_dependencyMap[4], "../View/ViewNativeComponent").Commands.hotspotUpdate(view, (_event$nativeEvent$lo = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo : 0, (_event$nativeEvent$lo2 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo2 : 0);
            }
          },
          onPressMove: function onPressMove(event) {
            var view = viewRef.current;

            if (view != null) {
              var _event$nativeEvent$lo3, _event$nativeEvent$lo4;

              _$$_REQUIRE(_dependencyMap[4], "../View/ViewNativeComponent").Commands.hotspotUpdate(view, (_event$nativeEvent$lo3 = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo3 : 0, (_event$nativeEvent$lo4 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo4 : 0);
            }
          },
          onPressOut: function onPressOut(event) {
            var view = viewRef.current;

            if (view != null) {
              _$$_REQUIRE(_dependencyMap[4], "../View/ViewNativeComponent").Commands.setPressed(view, false);
            }
          }
        };
      }

      return null;
    }, [color, normalizedBorderless, radius, viewRef]);
  }
},393,[3,6,1,49,237],"node_modules/react-native/Libraries/Components/Pressable/useAndroidRippleForView.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = usePressability;

  var _Pressability = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./Pressability"));

  var _react = _$$_REQUIRE(_dependencyMap[2], "react");

  function usePressability(config) {
    var pressabilityRef = (0, _react.useRef)(null);

    if (pressabilityRef.current == null) {
      pressabilityRef.current = new _Pressability.default(config);
    }

    var pressability = pressabilityRef.current;
    (0, _react.useEffect)(function () {
      pressability.configure(config);
    }, [config, pressability]);
    (0, _react.useEffect)(function () {
      return function () {
        pressability.reset();
      };
    }, [pressability]);
    return pressability.getEventHandlers();
  }
},394,[3,245,49],"node_modules/react-native/Libraries/Pressability/usePressability.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/ProgressViewIOS/ProgressViewIOS.android.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var DummyProgressViewIOS = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(DummyProgressViewIOS, _React$Component);

    var _super = _createSuper(DummyProgressViewIOS);

    function DummyProgressViewIOS() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, DummyProgressViewIOS);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(DummyProgressViewIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(_$$_REQUIRE(_dependencyMap[6], "../View/View"), {
          style: [styles.dummy, this.props.style],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 20,
            columnNumber: 7
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[7], "../../Text/Text"), {
          style: styles.text,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 21,
            columnNumber: 9
          }
        }, "ProgressViewIOS is not supported on this platform!"));
      }
    }]);

    return DummyProgressViewIOS;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[8], "../../StyleSheet/StyleSheet").create({
    dummy: {
      width: 120,
      height: 20,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center'
    },
    text: {
      color: '#333333',
      margin: 5,
      fontSize: 10
    }
  });

  module.exports = DummyProgressViewIOS;
},395,[31,32,49,35,16,17,236,338,241],"node_modules/react-native/Libraries/Components/ProgressViewIOS/ProgressViewIOS.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/SafeAreaView/SafeAreaView.js";
  var _excluded = ["emulateUnlessSupported"];

  var React = _$$_REQUIRE(_dependencyMap[0], "react");

  var exported;

  if ("android" === 'android') {
    exported = React.forwardRef(function SafeAreaView(props, forwardedRef) {
      var emulateUnlessSupported = props.emulateUnlessSupported,
          localProps = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/objectWithoutProperties")(props, _excluded);

      return React.createElement(_$$_REQUIRE(_dependencyMap[2], "../View/View"), _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/extends")({}, localProps, {
        ref: forwardedRef,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 41,
          columnNumber: 14
        }
      }));
    });
  } else {
    var RCTSafeAreaViewNativeComponent = _$$_REQUIRE(_dependencyMap[4], "./RCTSafeAreaViewNativeComponent").default;

    exported = React.forwardRef(function SafeAreaView(props, forwardedRef) {
      return React.createElement(RCTSafeAreaViewNativeComponent, _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/extends")({
        emulateUnlessSupported: true
      }, props, {
        ref: forwardedRef,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 51,
          columnNumber: 9
        }
      }));
    });
  }

  module.exports = exported;
},396,[49,128,236,53,397],"node_modules/react-native/Libraries/Components/SafeAreaView/SafeAreaView.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _codegenNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../Utilities/codegenNativeComponent"));

  var _default = (0, _codegenNativeComponent.default)('SafeAreaView', {
    paperComponentName: 'RCTSafeAreaView',
    interfaceOnly: true
  });

  exports.default = _default;
},397,[3,55],"node_modules/react-native/Libraries/Components/SafeAreaView/RCTSafeAreaViewNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.android.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var DummySegmentedControlIOS = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(DummySegmentedControlIOS, _React$Component);

    var _super = _createSuper(DummySegmentedControlIOS);

    function DummySegmentedControlIOS() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, DummySegmentedControlIOS);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(DummySegmentedControlIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(_$$_REQUIRE(_dependencyMap[6], "../View/View"), {
          style: [styles.dummy, this.props.style],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 20,
            columnNumber: 7
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[7], "../../Text/Text"), {
          style: styles.text,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 21,
            columnNumber: 9
          }
        }, "SegmentedControlIOS is not supported on this platform!"));
      }
    }]);

    return DummySegmentedControlIOS;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[8], "../../StyleSheet/StyleSheet").create({
    dummy: {
      width: 120,
      height: 50,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center'
    },
    text: {
      color: '#333333',
      margin: 5,
      fontSize: 10
    }
  });

  module.exports = DummySegmentedControlIOS;
},398,[31,32,49,35,16,17,236,338,241],"node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/extends"));

  var _objectWithoutProperties2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/objectWithoutProperties"));

  var _SliderNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "./SliderNativeComponent"));

  var _excluded = ["disabled", "value", "minimumValue", "maximumValue", "step", "onValueChange", "onSlidingComplete"];

  var _this = this,
      _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/Slider/Slider.js";

  var React = _$$_REQUIRE(_dependencyMap[4], "react");

  var Slider = function Slider(props, forwardedRef) {
    var style = _$$_REQUIRE(_dependencyMap[5], "../../StyleSheet/StyleSheet").compose(styles.slider, props.style);

    var _props$disabled = props.disabled,
        disabled = _props$disabled === void 0 ? false : _props$disabled,
        _props$value = props.value,
        value = _props$value === void 0 ? 0.5 : _props$value,
        _props$minimumValue = props.minimumValue,
        minimumValue = _props$minimumValue === void 0 ? 0 : _props$minimumValue,
        _props$maximumValue = props.maximumValue,
        maximumValue = _props$maximumValue === void 0 ? 1 : _props$maximumValue,
        _props$step = props.step,
        step = _props$step === void 0 ? 0 : _props$step,
        onValueChange = props.onValueChange,
        onSlidingComplete = props.onSlidingComplete,
        localProps = (0, _objectWithoutProperties2.default)(props, _excluded);
    var onValueChangeEvent = onValueChange ? function (event) {
      var userEvent = true;

      if ("android" === 'android') {
        userEvent = event.nativeEvent.fromUser != null && event.nativeEvent.fromUser;
      }

      userEvent && onValueChange(event.nativeEvent.value);
    } : null;
    var onChangeEvent = onValueChangeEvent;
    var onSlidingCompleteEvent = onSlidingComplete ? function (event) {
      onSlidingComplete(event.nativeEvent.value);
    } : null;
    return React.createElement(_SliderNativeComponent.default, (0, _extends2.default)({}, localProps, {
      enabled: !disabled,
      disabled: disabled,
      maximumValue: maximumValue,
      minimumValue: minimumValue,
      onChange: onChangeEvent,
      onResponderTerminationRequest: function onResponderTerminationRequest() {
        return false;
      },
      onSlidingComplete: onSlidingCompleteEvent,
      onStartShouldSetResponder: function onStartShouldSetResponder() {
        return true;
      },
      onValueChange: onValueChangeEvent,
      ref: forwardedRef,
      step: step,
      style: style,
      value: value,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 238,
        columnNumber: 5
      }
    }));
  };

  var SliderWithRef = React.forwardRef(Slider);
  var styles;

  if ("android" === 'ios') {
    styles = _$$_REQUIRE(_dependencyMap[5], "../../StyleSheet/StyleSheet").create({
      slider: {
        height: 40
      }
    });
  } else {
    styles = _$$_REQUIRE(_dependencyMap[5], "../../StyleSheet/StyleSheet").create({
      slider: {}
    });
  }

  module.exports = SliderWithRef;
},399,[3,53,128,400,49,241],"node_modules/react-native/Libraries/Components/Slider/Slider.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _codegenNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../Utilities/codegenNativeComponent"));

  var _default = (0, _codegenNativeComponent.default)('Slider', {
    interfaceOnly: true,
    paperComponentName: 'RCTSlider'
  });

  exports.default = _default;
},400,[3,55],"node_modules/react-native/Libraries/Components/Slider/SliderNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/extends"));

  var _objectWithoutProperties2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/objectWithoutProperties"));

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/createClass"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/getPrototypeOf"));

  var _Platform = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[8], "../../Utilities/Platform"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9], "react"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[10], "../../StyleSheet/StyleSheet"));

  var _AndroidSwitchNativeComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11], "./AndroidSwitchNativeComponent"));

  var _SwitchNativeComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12], "./SwitchNativeComponent"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/Switch/Switch.js";
  var _excluded = ["disabled", "ios_backgroundColor", "onChange", "onValueChange", "style", "thumbColor", "trackColor", "value"];

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var Switch = function (_React$Component) {
    (0, _inherits2.default)(Switch, _React$Component);

    var _super = _createSuper(Switch);

    function Switch() {
      var _this;

      (0, _classCallCheck2.default)(this, Switch);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _this._handleChange = function (event) {
        if (_this.props.onChange != null) {
          _this.props.onChange(event);
        }

        if (_this.props.onValueChange != null) {
          _this.props.onValueChange(event.nativeEvent.value);
        }

        _this._lastNativeValue = event.nativeEvent.value;

        _this.forceUpdate();
      };

      _this._handleSwitchNativeComponentRef = function (ref) {
        _this._nativeSwitchRef = ref;
      };

      return _this;
    }

    (0, _createClass2.default)(Switch, [{
      key: "render",
      value: function render() {
        var _props$accessibilityR2;

        var _this$props = this.props,
            disabled = _this$props.disabled,
            ios_backgroundColor = _this$props.ios_backgroundColor,
            onChange = _this$props.onChange,
            onValueChange = _this$props.onValueChange,
            style = _this$props.style,
            thumbColor = _this$props.thumbColor,
            trackColor = _this$props.trackColor,
            value = _this$props.value,
            props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var trackColorForFalse = trackColor == null ? void 0 : trackColor.false;
        var trackColorForTrue = trackColor == null ? void 0 : trackColor.true;

        if (_Platform.default.OS === 'android') {
          var _props$accessibilityR;

          var _platformProps = {
            enabled: disabled !== true,
            on: value === true,
            style: style,
            thumbTintColor: thumbColor,
            trackColorForFalse: trackColorForFalse,
            trackColorForTrue: trackColorForTrue,
            trackTintColor: value === true ? trackColorForTrue : trackColorForFalse
          };
          return React.createElement(_AndroidSwitchNativeComponent.default, (0, _extends2.default)({}, props, _platformProps, {
            accessibilityRole: (_props$accessibilityR = props.accessibilityRole) != null ? _props$accessibilityR : 'switch',
            onChange: this._handleChange,
            onResponderTerminationRequest: returnsFalse,
            onStartShouldSetResponder: returnsTrue,
            ref: this._handleSwitchNativeComponentRef,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 131,
              columnNumber: 9
            }
          }));
        }

        var platformProps = {
          disabled: disabled,
          onTintColor: trackColorForTrue,
          style: _StyleSheet.default.compose({
            height: 31,
            width: 51
          }, _StyleSheet.default.compose(style, ios_backgroundColor == null ? null : {
            backgroundColor: ios_backgroundColor,
            borderRadius: 16
          })),
          thumbTintColor: thumbColor,
          tintColor: trackColorForFalse,
          value: value === true
        };
        return React.createElement(_SwitchNativeComponent.default, (0, _extends2.default)({}, props, platformProps, {
          accessibilityRole: (_props$accessibilityR2 = props.accessibilityRole) != null ? _props$accessibilityR2 : 'switch',
          onChange: this._handleChange,
          onResponderTerminationRequest: returnsFalse,
          onStartShouldSetResponder: returnsTrue,
          ref: this._handleSwitchNativeComponentRef,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 164,
            columnNumber: 7
          }
        }));
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var nativeProps = {};
        var value = this.props.value === true;

        if (this._lastNativeValue !== value) {
          nativeProps.value = value;
        }

        if (Object.keys(nativeProps).length > 0 && this._nativeSwitchRef && this._nativeSwitchRef.setNativeProps) {
          if (_Platform.default.OS === 'android') {
            _AndroidSwitchNativeComponent.Commands.setNativeValue(this._nativeSwitchRef, nativeProps.value);
          } else {
            _SwitchNativeComponent.Commands.setValue(this._nativeSwitchRef, nativeProps.value);
          }
        }
      }
    }]);
    return Switch;
  }(React.Component);

  var returnsFalse = function returnsFalse() {
    return false;
  };

  var returnsTrue = function returnsTrue() {
    return true;
  };

  module.exports = Switch;
},401,[3,53,128,16,17,35,32,31,80,49,241,402,403],"node_modules/react-native/Libraries/Components/Switch/Switch.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Commands = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _codegenNativeCommands = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/Utilities/codegenNativeCommands"));

  var _codegenNativeComponent = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "react-native/Libraries/Utilities/codegenNativeComponent"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['setNativeValue']
  });
  exports.Commands = Commands;

  var _default = (0, _codegenNativeComponent.default)('AndroidSwitch', {
    interfaceOnly: true
  });

  exports.default = _default;
},402,[49,3,200,55],"node_modules/react-native/Libraries/Components/Switch/AndroidSwitchNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Commands = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _codegenNativeComponent = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Utilities/codegenNativeComponent"));

  var _codegenNativeCommands = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "react-native/Libraries/Utilities/codegenNativeCommands"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['setValue']
  });
  exports.Commands = Commands;

  var _default = (0, _codegenNativeComponent.default)('Switch', {
    paperComponentName: 'RCTSwitch',
    excludedPlatform: 'android'
  });

  exports.default = _default;
},403,[49,3,55,200],"node_modules/react-native/Libraries/Components/Switch/SwitchNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/Components/TextInput/TextInput.js";

  var React = _$$_REQUIRE(_dependencyMap[0], "react");

  var useEffect = React.useEffect,
      useRef = React.useRef,
      useState = React.useState;
  var AndroidTextInput;
  var AndroidTextInputCommands;
  var RCTSinglelineTextInputView;
  var RCTSinglelineTextInputNativeCommands;
  var RCTMultilineTextInputView;
  var RCTMultilineTextInputNativeCommands;

  if ("android" === 'android') {
    AndroidTextInput = _$$_REQUIRE(_dependencyMap[1], "./AndroidTextInputNativeComponent").default;
    AndroidTextInputCommands = _$$_REQUIRE(_dependencyMap[1], "./AndroidTextInputNativeComponent").Commands;
  } else if ("android" === 'ios') {
    RCTSinglelineTextInputView = _$$_REQUIRE(_dependencyMap[2], "./RCTSingelineTextInputNativeComponent").default;
    RCTSinglelineTextInputNativeCommands = _$$_REQUIRE(_dependencyMap[2], "./RCTSingelineTextInputNativeComponent").Commands;
    RCTMultilineTextInputView = _$$_REQUIRE(_dependencyMap[3], "./RCTMultilineTextInputNativeComponent").default;
    RCTMultilineTextInputNativeCommands = _$$_REQUIRE(_dependencyMap[3], "./RCTMultilineTextInputNativeComponent").Commands;
  }

  var emptyFunctionThatReturnsTrue = function emptyFunctionThatReturnsTrue() {
    return true;
  };

  function InternalTextInput(props) {
    var _props$selection$end;

    var inputRef = useRef(null);
    var selection = props.selection == null ? null : {
      start: props.selection.start,
      end: (_props$selection$end = props.selection.end) != null ? _props$selection$end : props.selection.start
    };

    var _useState = useState(0),
        _useState2 = _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/slicedToArray")(_useState, 2),
        mostRecentEventCount = _useState2[0],
        setMostRecentEventCount = _useState2[1];

    var _useState3 = useState(props.value),
        _useState4 = _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/slicedToArray")(_useState3, 2),
        lastNativeText = _useState4[0],
        setLastNativeText = _useState4[1];

    var _useState5 = useState({
      selection: selection,
      mostRecentEventCount: mostRecentEventCount
    }),
        _useState6 = _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/slicedToArray")(_useState5, 2),
        lastNativeSelectionState = _useState6[0],
        setLastNativeSelection = _useState6[1];

    var lastNativeSelection = lastNativeSelectionState.selection;
    var lastNativeSelectionEventCount = lastNativeSelectionState.mostRecentEventCount;

    if (lastNativeSelectionEventCount < mostRecentEventCount) {
      selection = null;
    }

    var viewCommands;

    if (AndroidTextInputCommands) {
      viewCommands = AndroidTextInputCommands;
    } else {
      viewCommands = props.multiline ? RCTMultilineTextInputNativeCommands : RCTSinglelineTextInputNativeCommands;
    }

    var text = typeof props.value === 'string' ? props.value : typeof props.defaultValue === 'string' ? props.defaultValue : '';
    useEffect(function () {
      var nativeUpdate = {};

      if (lastNativeText !== props.value && typeof props.value === 'string') {
        nativeUpdate.text = props.value;
        setLastNativeText(props.value);
      }

      if (selection && lastNativeSelection && (lastNativeSelection.start !== selection.start || lastNativeSelection.end !== selection.end)) {
        nativeUpdate.selection = selection;
        setLastNativeSelection({
          selection: selection,
          mostRecentEventCount: mostRecentEventCount
        });
      }

      if (Object.keys(nativeUpdate).length === 0) {
        return;
      }

      if (inputRef.current != null) {
        var _selection$start, _selection, _selection$end, _selection2;

        viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, text, (_selection$start = (_selection = selection) == null ? void 0 : _selection.start) != null ? _selection$start : -1, (_selection$end = (_selection2 = selection) == null ? void 0 : _selection2.end) != null ? _selection$end : -1);
      }
    }, [mostRecentEventCount, inputRef, props.value, props.defaultValue, lastNativeText, selection, lastNativeSelection, text, viewCommands]);
    useEffect(function () {
      var inputRefValue = inputRef.current;

      if (inputRefValue != null) {
        _$$_REQUIRE(_dependencyMap[5], "./TextInputState").registerInput(inputRefValue);

        return function () {
          _$$_REQUIRE(_dependencyMap[5], "./TextInputState").unregisterInput(inputRefValue);
        };
      }
    }, [inputRef]);
    useEffect(function () {
      return function () {
        if (isFocused()) {
          _$$_REQUIRE(_dependencyMap[6], "nullthrows")(inputRef.current).blur();
        }
      };
    }, [inputRef]);

    function clear() {
      if (inputRef.current != null) {
        viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, '', 0, 0);
      }
    }

    function isFocused() {
      return _$$_REQUIRE(_dependencyMap[5], "./TextInputState").currentlyFocusedInput() === inputRef.current;
    }

    function getNativeRef() {
      return inputRef.current;
    }

    var _setNativeRef = _$$_REQUIRE(_dependencyMap[7], "../../Utilities/setAndForwardRef")({
      getForwardedRef: function getForwardedRef() {
        return props.forwardedRef;
      },
      setLocalRef: function setLocalRef(ref) {
        inputRef.current = ref;

        if (ref) {
          ref.clear = clear;
          ref.isFocused = isFocused;
          ref.getNativeRef = getNativeRef;
        }
      }
    });

    var _onPress = function _onPress(event) {
      if (props.editable || props.editable === undefined) {
        _$$_REQUIRE(_dependencyMap[6], "nullthrows")(inputRef.current).focus();
      }
    };

    var _onChange = function _onChange(event) {
      var text = event.nativeEvent.text;
      props.onChange && props.onChange(event);
      props.onChangeText && props.onChangeText(text);

      if (inputRef.current == null) {
        return;
      }

      setLastNativeText(text);
      setMostRecentEventCount(event.nativeEvent.eventCount);
    };

    var _onSelectionChange = function _onSelectionChange(event) {
      props.onSelectionChange && props.onSelectionChange(event);

      if (inputRef.current == null) {
        return;
      }

      setLastNativeSelection({
        selection: event.nativeEvent.selection,
        mostRecentEventCount: mostRecentEventCount
      });
    };

    var _onFocus = function _onFocus(event) {
      _$$_REQUIRE(_dependencyMap[5], "./TextInputState").focusInput(inputRef.current);

      if (props.onFocus) {
        props.onFocus(event);
      }
    };

    var _onBlur = function _onBlur(event) {
      _$$_REQUIRE(_dependencyMap[5], "./TextInputState").blurInput(inputRef.current);

      if (props.onBlur) {
        props.onBlur(event);
      }
    };

    var _onScroll = function _onScroll(event) {
      props.onScroll && props.onScroll(event);
    };

    var textInput = null;
    var additionalTouchableProps = Object.assign({}, null);

    if ("android" === 'ios') {
      var RCTTextInputView = props.multiline ? RCTMultilineTextInputView : RCTSinglelineTextInputView;
      var style = props.multiline ? [styles.multilineInput, props.style] : props.style;
      additionalTouchableProps.rejectResponderTermination = props.rejectResponderTermination;
      textInput = React.createElement(RCTTextInputView, _$$_REQUIRE(_dependencyMap[8], "@babel/runtime/helpers/extends")({
        ref: _setNativeRef
      }, props, {
        dataDetectorTypes: props.dataDetectorTypes,
        mostRecentEventCount: mostRecentEventCount,
        onBlur: _onBlur,
        onChange: _onChange,
        onContentSizeChange: props.onContentSizeChange,
        onFocus: _onFocus,
        onScroll: _onScroll,
        onSelectionChange: _onSelectionChange,
        onSelectionChangeShouldSetResponder: emptyFunctionThatReturnsTrue,
        selection: selection,
        style: style,
        text: text,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 1077,
          columnNumber: 7
        }
      }));
    } else if ("android" === 'android') {
      var _style = [props.style];
      var autoCapitalize = props.autoCapitalize || 'sentences';
      var children = props.children;
      var childCount = 0;
      React.Children.forEach(children, function () {
        return ++childCount;
      });

      _$$_REQUIRE(_dependencyMap[9], "invariant")(!(props.value && childCount), 'Cannot specify both value and children.');

      if (childCount > 1) {
        children = React.createElement(_$$_REQUIRE(_dependencyMap[10], "../../Text/Text"), {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 1105,
            columnNumber: 18
          }
        }, children);
      }

      textInput = React.createElement(AndroidTextInput, _$$_REQUIRE(_dependencyMap[8], "@babel/runtime/helpers/extends")({
        ref: _setNativeRef
      }, props, {
        autoCapitalize: autoCapitalize,
        children: children,
        disableFullscreenUI: props.disableFullscreenUI,
        mostRecentEventCount: mostRecentEventCount,
        onBlur: _onBlur,
        onChange: _onChange,
        onFocus: _onFocus,
        onScroll: _onScroll,
        onSelectionChange: _onSelectionChange,
        selection: selection,
        style: _style,
        text: text,
        textBreakStrategy: props.textBreakStrategy,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 1111,
          columnNumber: 7
        }
      }));
    }

    return React.createElement(_$$_REQUIRE(_dependencyMap[11], "../../Text/TextAncestor").Provider, {
      value: true,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1133,
        columnNumber: 5
      }
    }, React.createElement(_$$_REQUIRE(_dependencyMap[12], "../Touchable/TouchableWithoutFeedback"), _$$_REQUIRE(_dependencyMap[8], "@babel/runtime/helpers/extends")({
      onLayout: props.onLayout,
      onPress: _onPress,
      accessible: props.accessible,
      accessibilityLabel: props.accessibilityLabel,
      accessibilityRole: props.accessibilityRole,
      accessibilityState: props.accessibilityState,
      nativeID: props.nativeID,
      testID: props.testID
    }, additionalTouchableProps, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1134,
        columnNumber: 7
      }
    }), textInput));
  }

  var ExportedForwardRef = React.forwardRef(function TextInput(props, forwardedRef) {
    return React.createElement(InternalTextInput, _$$_REQUIRE(_dependencyMap[8], "@babel/runtime/helpers/extends")({}, props, {
      forwardedRef: forwardedRef,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1159,
        columnNumber: 10
      }
    }));
  });
  ExportedForwardRef.defaultProps = {
    allowFontScaling: true,
    rejectResponderTermination: true,
    underlineColorAndroid: 'transparent'
  };
  ExportedForwardRef.propTypes = _$$_REQUIRE(_dependencyMap[13], "../../DeprecatedPropTypes/DeprecatedTextInputPropTypes");
  ExportedForwardRef.State = {
    currentlyFocusedInput: _$$_REQUIRE(_dependencyMap[5], "./TextInputState").currentlyFocusedInput,
    currentlyFocusedField: _$$_REQUIRE(_dependencyMap[5], "./TextInputState").currentlyFocusedField,
    focusTextInput: _$$_REQUIRE(_dependencyMap[5], "./TextInputState").focusTextInput,
    blurTextInput: _$$_REQUIRE(_dependencyMap[5], "./TextInputState").blurTextInput
  };

  var styles = _$$_REQUIRE(_dependencyMap[14], "../../StyleSheet/StyleSheet").create({
    multilineInput: {
      paddingTop: 5
    }
  });

  module.exports = ExportedForwardRef;
},404,[49,202,199,405,8,84,340,289,53,6,338,240,371,406,241],"node_modules/react-native/Libraries/Components/TextInput/TextInput.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Commands = void 0;

  var _requireNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../ReactNative/requireNativeComponent"));

  var _codegenNativeCommands = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Utilities/codegenNativeCommands"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3], "react"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['focus', 'blur', 'setTextAndSelection']
  });
  exports.Commands = Commands;
  var SinglelineTextInputNativeComponent = (0, _requireNativeComponent.default)('RCTMultilineTextInputView');
  var _default = SinglelineTextInputNativeComponent;
  exports.default = _default;
},405,[3,56,200,49],"node_modules/react-native/Libraries/Components/TextInput/RCTMultilineTextInputNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'];
  module.exports = Object.assign({}, _$$_REQUIRE(_dependencyMap[0], "./DeprecatedViewPropTypes"), {
    autoCapitalize: _$$_REQUIRE(_dependencyMap[1], "prop-types").oneOf(['none', 'sentences', 'words', 'characters']),
    autoCompleteType: _$$_REQUIRE(_dependencyMap[1], "prop-types").oneOf(['cc-csc', 'cc-exp', 'cc-exp-month', 'cc-exp-year', 'cc-number', 'email', 'name', 'password', 'postal-code', 'street-address', 'tel', 'username', 'off']),
    autoCorrect: _$$_REQUIRE(_dependencyMap[1], "prop-types").bool,
    spellCheck: _$$_REQUIRE(_dependencyMap[1], "prop-types").bool,
    autoFocus: _$$_REQUIRE(_dependencyMap[1], "prop-types").bool,
    allowFontScaling: _$$_REQUIRE(_dependencyMap[1], "prop-types").bool,
    maxFontSizeMultiplier: _$$_REQUIRE(_dependencyMap[1], "prop-types").number,
    editable: _$$_REQUIRE(_dependencyMap[1], "prop-types").bool,
    keyboardType: _$$_REQUIRE(_dependencyMap[1], "prop-types").oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'number-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search', 'ascii-capable-number-pad', 'visible-password']),
    keyboardAppearance: _$$_REQUIRE(_dependencyMap[1], "prop-types").oneOf(['default', 'light', 'dark']),
    returnKeyType: _$$_REQUIRE(_dependencyMap[1], "prop-types").oneOf(['done', 'go', 'next', 'search', 'send', 'none', 'previous', 'default', 'emergency-call', 'google', 'join', 'route', 'yahoo']),
    returnKeyLabel: _$$_REQUIRE(_dependencyMap[1], "prop-types").string,
    maxLength: _$$_REQUIRE(_dependencyMap[1], "prop-types").number,
    numberOfLines: _$$_REQUIRE(_dependencyMap[1], "prop-types").number,
    disableFullscreenUI: _$$_REQUIRE(_dependencyMap[1], "prop-types").bool,
    enablesReturnKeyAutomatically: _$$_REQUIRE(_dependencyMap[1], "prop-types").bool,
    multiline: _$$_REQUIRE(_dependencyMap[1], "prop-types").bool,
    textBreakStrategy: _$$_REQUIRE(_dependencyMap[1], "prop-types").oneOf(['simple', 'highQuality', 'balanced']),
    onBlur: _$$_REQUIRE(_dependencyMap[1], "prop-types").func,
    onFocus: _$$_REQUIRE(_dependencyMap[1], "prop-types").func,
    onChange: _$$_REQUIRE(_dependencyMap[1], "prop-types").func,
    onChangeText: _$$_REQUIRE(_dependencyMap[1], "prop-types").func,
    onContentSizeChange: _$$_REQUIRE(_dependencyMap[1], "prop-types").func,
    onTextInput: _$$_REQUIRE(_dependencyMap[1], "prop-types").func,
    onEndEditing: _$$_REQUIRE(_dependencyMap[1], "prop-types").func,
    onSelectionChange: _$$_REQUIRE(_dependencyMap[1], "prop-types").func,
    onSubmitEditing: _$$_REQUIRE(_dependencyMap[1], "prop-types").func,
    onKeyPress: _$$_REQUIRE(_dependencyMap[1], "prop-types").func,
    onLayout: _$$_REQUIRE(_dependencyMap[1], "prop-types").func,
    onScroll: _$$_REQUIRE(_dependencyMap[1], "prop-types").func,
    placeholder: _$$_REQUIRE(_dependencyMap[1], "prop-types").string,
    placeholderTextColor: _$$_REQUIRE(_dependencyMap[2], "./DeprecatedColorPropType"),
    scrollEnabled: _$$_REQUIRE(_dependencyMap[1], "prop-types").bool,
    secureTextEntry: _$$_REQUIRE(_dependencyMap[1], "prop-types").bool,
    selectionColor: _$$_REQUIRE(_dependencyMap[2], "./DeprecatedColorPropType"),
    selection: _$$_REQUIRE(_dependencyMap[1], "prop-types").shape({
      start: _$$_REQUIRE(_dependencyMap[1], "prop-types").number.isRequired,
      end: _$$_REQUIRE(_dependencyMap[1], "prop-types").number
    }),
    value: _$$_REQUIRE(_dependencyMap[1], "prop-types").string,
    defaultValue: _$$_REQUIRE(_dependencyMap[1], "prop-types").string,
    clearButtonMode: _$$_REQUIRE(_dependencyMap[1], "prop-types").oneOf(['never', 'while-editing', 'unless-editing', 'always']),
    clearTextOnFocus: _$$_REQUIRE(_dependencyMap[1], "prop-types").bool,
    selectTextOnFocus: _$$_REQUIRE(_dependencyMap[1], "prop-types").bool,
    blurOnSubmit: _$$_REQUIRE(_dependencyMap[1], "prop-types").bool,
    style: _$$_REQUIRE(_dependencyMap[3], "../Text/Text").propTypes.style,
    underlineColorAndroid: _$$_REQUIRE(_dependencyMap[2], "./DeprecatedColorPropType"),
    inlineImageLeft: _$$_REQUIRE(_dependencyMap[1], "prop-types").string,
    inlineImagePadding: _$$_REQUIRE(_dependencyMap[1], "prop-types").number,
    rejectResponderTermination: _$$_REQUIRE(_dependencyMap[1], "prop-types").bool,
    dataDetectorTypes: _$$_REQUIRE(_dependencyMap[1], "prop-types").oneOfType([_$$_REQUIRE(_dependencyMap[1], "prop-types").oneOf(DataDetectorTypes), _$$_REQUIRE(_dependencyMap[1], "prop-types").arrayOf(_$$_REQUIRE(_dependencyMap[1], "prop-types").oneOf(DataDetectorTypes))]),
    caretHidden: _$$_REQUIRE(_dependencyMap[1], "prop-types").bool,
    contextMenuHidden: _$$_REQUIRE(_dependencyMap[1], "prop-types").bool,
    inputAccessoryViewID: _$$_REQUIRE(_dependencyMap[1], "prop-types").string,
    textContentType: _$$_REQUIRE(_dependencyMap[1], "prop-types").oneOf(['none', 'URL', 'addressCity', 'addressCityAndState', 'addressState', 'countryName', 'creditCardNumber', 'emailAddress', 'familyName', 'fullStreetAddress', 'givenName', 'jobTitle', 'location', 'middleName', 'name', 'namePrefix', 'nameSuffix', 'nickname', 'organizationName', 'postalCode', 'streetAddressLine1', 'streetAddressLine2', 'sublocality', 'telephoneNumber', 'username', 'password', 'newPassword', 'oneTimeCode']),
    showSoftInputOnFocus: _$$_REQUIRE(_dependencyMap[1], "prop-types").bool
  });
},406,[326,210,221,338],"node_modules/react-native/Libraries/DeprecatedPropTypes/DeprecatedTextInputPropTypes.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectWithoutProperties2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/objectWithoutProperties"));

  var _NativeActionSheetManager = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "./NativeActionSheetManager"));

  var _excluded = ["tintColor", "destructiveButtonIndex"];
  var ActionSheetIOS = {
    showActionSheetWithOptions: function showActionSheetWithOptions(options, callback) {
      _$$_REQUIRE(_dependencyMap[3], "invariant")(typeof options === 'object' && options !== null, 'Options must be a valid object');

      _$$_REQUIRE(_dependencyMap[3], "invariant")(typeof callback === 'function', 'Must provide a valid callback');

      _$$_REQUIRE(_dependencyMap[3], "invariant")(_NativeActionSheetManager.default, "ActionSheetManager does't exist");

      var tintColor = options.tintColor,
          destructiveButtonIndex = options.destructiveButtonIndex,
          remainingOptions = (0, _objectWithoutProperties2.default)(options, _excluded);
      var destructiveButtonIndices = null;

      if (Array.isArray(destructiveButtonIndex)) {
        destructiveButtonIndices = destructiveButtonIndex;
      } else if (typeof destructiveButtonIndex === 'number') {
        destructiveButtonIndices = [destructiveButtonIndex];
      }

      var processedTintColor = _$$_REQUIRE(_dependencyMap[4], "../StyleSheet/processColor")(tintColor);

      _$$_REQUIRE(_dependencyMap[3], "invariant")(processedTintColor == null || typeof processedTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions tintColor');

      _NativeActionSheetManager.default.showActionSheetWithOptions(Object.assign({}, remainingOptions, {
        tintColor: processedTintColor,
        destructiveButtonIndices: destructiveButtonIndices
      }), callback);
    },
    showShareActionSheetWithOptions: function showShareActionSheetWithOptions(options, failureCallback, successCallback) {
      _$$_REQUIRE(_dependencyMap[3], "invariant")(typeof options === 'object' && options !== null, 'Options must be a valid object');

      _$$_REQUIRE(_dependencyMap[3], "invariant")(typeof failureCallback === 'function', 'Must provide a valid failureCallback');

      _$$_REQUIRE(_dependencyMap[3], "invariant")(typeof successCallback === 'function', 'Must provide a valid successCallback');

      _$$_REQUIRE(_dependencyMap[3], "invariant")(_NativeActionSheetManager.default, "ActionSheetManager does't exist");

      _NativeActionSheetManager.default.showShareActionSheetWithOptions(Object.assign({}, options, {
        tintColor: _$$_REQUIRE(_dependencyMap[4], "../StyleSheet/processColor")(options.tintColor)
      }), failureCallback, successCallback);
    }
  };
  module.exports = ActionSheetIOS;
},407,[3,128,408,6,176],"node_modules/react-native/Libraries/ActionSheetIOS/ActionSheetIOS.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('ActionSheetManager');

  exports.default = _default;
},408,[5],"node_modules/react-native/Libraries/ActionSheetIOS/NativeActionSheetManager.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _EventEmitter = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../vendor/emitter/EventEmitter"));

  var _NativeEventEmitter = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../EventEmitter/NativeEventEmitter"));

  var _NativeAppearance = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "./NativeAppearance"));

  var _invariant = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "invariant"));

  var eventEmitter = new _EventEmitter.default();

  if (_NativeAppearance.default) {
    var nativeEventEmitter = new _NativeEventEmitter.default(_NativeAppearance.default);
    nativeEventEmitter.addListener('appearanceChanged', function (newAppearance) {
      var colorScheme = newAppearance.colorScheme;
      (0, _invariant.default)(colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null, "Unrecognized color scheme. Did you mean 'dark' or 'light'?");
      eventEmitter.emit('change', {
        colorScheme: colorScheme
      });
    });
  }

  module.exports = {
    getColorScheme: function getColorScheme() {
      if (__DEV__) {
        if (_$$_REQUIRE(_dependencyMap[5], "./DebugEnvironment").isAsyncDebugging) {
          return 'light';
        }
      }

      var nativeColorScheme = _NativeAppearance.default == null ? null : _NativeAppearance.default.getColorScheme() || null;
      (0, _invariant.default)(nativeColorScheme === 'dark' || nativeColorScheme === 'light' || nativeColorScheme == null, "Unrecognized color scheme. Did you mean 'dark' or 'light'?");
      return nativeColorScheme;
    },
    addChangeListener: function addChangeListener(listener) {
      eventEmitter.addListener('change', listener);
    },
    removeChangeListener: function removeChangeListener(listener) {
      eventEmitter.removeListener('change', listener);
    }
  };
},409,[3,40,126,410,6,411],"node_modules/react-native/Libraries/Utilities/Appearance.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('Appearance');

  exports.default = _default;
},410,[5],"node_modules/react-native/Libraries/Utilities/NativeAppearance.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isAsyncDebugging = void 0;
  var isAsyncDebugging = false;
  exports.isAsyncDebugging = isAsyncDebugging;

  if (__DEV__) {
    exports.isAsyncDebugging = isAsyncDebugging = !global.nativeExtensions && !global.nativeCallSyncHook && !global.RN$Bridgeless;
  }
},411,[],"node_modules/react-native/Libraries/Utilities/DebugEnvironment.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeHeadlessJsTaskSupport = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./NativeHeadlessJsTaskSupport"));

  var _HeadlessJsTaskError = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "./HeadlessJsTaskError"));

  var runnables = {};
  var runCount = 1;
  var sections = {};
  var taskProviders = new Map();
  var taskCancelProviders = new Map();

  var componentProviderInstrumentationHook = function componentProviderInstrumentationHook(component) {
    return component();
  };

  var wrapperComponentProvider;
  var showArchitectureIndicator = false;
  var AppRegistry = {
    setWrapperComponentProvider: function setWrapperComponentProvider(provider) {
      wrapperComponentProvider = provider;
    },
    enableArchitectureIndicator: function enableArchitectureIndicator(enabled) {
      showArchitectureIndicator = enabled;
    },
    registerConfig: function registerConfig(config) {
      config.forEach(function (appConfig) {
        if (appConfig.run) {
          AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
        } else {
          _$$_REQUIRE(_dependencyMap[3], "invariant")(appConfig.component != null, 'AppRegistry.registerConfig(...): Every config is expected to set ' + 'either `run` or `component`, but `%s` has neither.', appConfig.appKey);

          AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);
        }
      });
    },
    registerComponent: function registerComponent(appKey, componentProvider, section) {
      var scopedPerformanceLogger = _$$_REQUIRE(_dependencyMap[4], "../Utilities/createPerformanceLogger")();

      runnables[appKey] = {
        componentProvider: componentProvider,
        run: function run(appParameters) {
          _$$_REQUIRE(_dependencyMap[5], "./renderApplication")(componentProviderInstrumentationHook(componentProvider, scopedPerformanceLogger), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters), appParameters.fabric, showArchitectureIndicator, scopedPerformanceLogger, appKey === 'LogBox');
        }
      };

      if (section) {
        sections[appKey] = runnables[appKey];
      }

      return appKey;
    },
    registerRunnable: function registerRunnable(appKey, run) {
      runnables[appKey] = {
        run: run
      };
      return appKey;
    },
    registerSection: function registerSection(appKey, component) {
      AppRegistry.registerComponent(appKey, component, true);
    },
    getAppKeys: function getAppKeys() {
      return Object.keys(runnables);
    },
    getSectionKeys: function getSectionKeys() {
      return Object.keys(sections);
    },
    getSections: function getSections() {
      return Object.assign({}, sections);
    },
    getRunnable: function getRunnable(appKey) {
      return runnables[appKey];
    },
    getRegistry: function getRegistry() {
      return {
        sections: AppRegistry.getSectionKeys(),
        runnables: Object.assign({}, runnables)
      };
    },
    setComponentProviderInstrumentationHook: function setComponentProviderInstrumentationHook(hook) {
      componentProviderInstrumentationHook = hook;
    },
    runApplication: function runApplication(appKey, appParameters) {
      if (appKey !== 'LogBox') {
        var msg = 'Running "' + appKey + '" with ' + JSON.stringify(appParameters);

        _$$_REQUIRE(_dependencyMap[6], "../Utilities/infoLog")(msg);

        _$$_REQUIRE(_dependencyMap[7], "../BugReporting/BugReporting").addSource('AppRegistry.runApplication' + runCount++, function () {
          return msg;
        });
      }

      _$$_REQUIRE(_dependencyMap[3], "invariant")(runnables[appKey] && runnables[appKey].run, "\"" + appKey + "\" has not been registered. This can happen if:\n" + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\n' + "* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.");

      _$$_REQUIRE(_dependencyMap[8], "../Utilities/SceneTracker").setActiveScene({
        name: appKey
      });

      runnables[appKey].run(appParameters);
    },
    unmountApplicationComponentAtRootTag: function unmountApplicationComponentAtRootTag(rootTag) {
      _$$_REQUIRE(_dependencyMap[9], "../Renderer/shims/ReactNative").unmountComponentAtNodeAndRemoveContainer(rootTag);
    },
    registerHeadlessTask: function registerHeadlessTask(taskKey, taskProvider) {
      this.registerCancellableHeadlessTask(taskKey, taskProvider, function () {
        return function () {};
      });
    },
    registerCancellableHeadlessTask: function registerCancellableHeadlessTask(taskKey, taskProvider, taskCancelProvider) {
      if (taskProviders.has(taskKey)) {
        console.warn("registerHeadlessTask or registerCancellableHeadlessTask called multiple times for same key '" + taskKey + "'");
      }

      taskProviders.set(taskKey, taskProvider);
      taskCancelProviders.set(taskKey, taskCancelProvider);
    },
    startHeadlessTask: function startHeadlessTask(taskId, taskKey, data) {
      var taskProvider = taskProviders.get(taskKey);

      if (!taskProvider) {
        console.warn("No task registered for key " + taskKey);

        if (_NativeHeadlessJsTaskSupport.default) {
          _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
        }

        return;
      }

      taskProvider()(data).then(function () {
        if (_NativeHeadlessJsTaskSupport.default) {
          _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
        }
      }).catch(function (reason) {
        console.error(reason);

        if (_NativeHeadlessJsTaskSupport.default && reason instanceof _HeadlessJsTaskError.default) {
          _NativeHeadlessJsTaskSupport.default.notifyTaskRetry(taskId).then(function (retryPosted) {
            if (!retryPosted) {
              _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
            }
          });
        }
      });
    },
    cancelHeadlessTask: function cancelHeadlessTask(taskId, taskKey) {
      var taskCancelProvider = taskCancelProviders.get(taskKey);

      if (!taskCancelProvider) {
        throw new Error("No task canceller registered for key '" + taskKey + "'");
      }

      taskCancelProvider()();
    }
  };

  _$$_REQUIRE(_dependencyMap[10], "../BatchedBridge/BatchedBridge").registerCallableModule('AppRegistry', AppRegistry);

  if (__DEV__) {
    var LogBoxInspector = _$$_REQUIRE(_dependencyMap[11], "../LogBox/LogBoxInspectorContainer").default;

    AppRegistry.registerComponent('LogBox', function () {
      return LogBoxInspector;
    });
  } else {
    AppRegistry.registerComponent('LogBox', function () {
      return function NoOp() {
        return null;
      };
    });
  }

  module.exports = AppRegistry;
},412,[3,413,414,6,119,415,120,422,425,85,14,426],"node_modules/react-native/Libraries/ReactNative/AppRegistry.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('HeadlessJsTaskSupport');

  exports.default = _default;
},413,[5],"node_modules/react-native/Libraries/ReactNative/NativeHeadlessJsTaskSupport.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/createClass"));

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/classCallCheck"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/getPrototypeOf"));

  var _wrapNativeSuper2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/wrapNativeSuper"));

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var HeadlessJsTaskError = function (_Error) {
    (0, _inherits2.default)(HeadlessJsTaskError, _Error);

    var _super = _createSuper(HeadlessJsTaskError);

    function HeadlessJsTaskError() {
      (0, _classCallCheck2.default)(this, HeadlessJsTaskError);
      return _super.apply(this, arguments);
    }

    return (0, _createClass2.default)(HeadlessJsTaskError);
  }((0, _wrapNativeSuper2.default)(Error));

  exports.default = HeadlessJsTaskError;
},414,[3,17,16,35,32,31,60],"node_modules/react-native/Libraries/ReactNative/HeadlessJsTaskError.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/extends"));

  var _GlobalPerformanceLogger = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../Utilities/GlobalPerformanceLogger"));

  var _PerformanceLoggerContext = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../Utilities/PerformanceLoggerContext"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/ReactNative/renderApplication.js";

  var React = _$$_REQUIRE(_dependencyMap[4], "react");

  _$$_REQUIRE(_dependencyMap[5], "../Utilities/BackHandler");

  function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent, fabric, showArchitectureIndicator, scopedPerformanceLogger, isLogBox) {
    _$$_REQUIRE(_dependencyMap[6], "invariant")(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);

    var renderable = React.createElement(_PerformanceLoggerContext.default.Provider, {
      value: scopedPerformanceLogger != null ? scopedPerformanceLogger : _GlobalPerformanceLogger.default,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 37,
        columnNumber: 5
      }
    }, React.createElement(_$$_REQUIRE(_dependencyMap[7], "./AppContainer"), {
      rootTag: rootTag,
      fabric: fabric,
      showArchitectureIndicator: showArchitectureIndicator,
      WrapperComponent: WrapperComponent,
      internal_excludeLogBox: isLogBox,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 39,
        columnNumber: 7
      }
    }, React.createElement(RootComponent, (0, _extends2.default)({}, initialProps, {
      rootTag: rootTag,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 45,
        columnNumber: 9
      }
    }))));

    _GlobalPerformanceLogger.default.startTimespan('renderApplication_React_render');

    if (fabric) {
      _$$_REQUIRE(_dependencyMap[8], "../Renderer/shims/ReactFabric").render(renderable, rootTag);
    } else {
      _$$_REQUIRE(_dependencyMap[9], "../Renderer/shims/ReactNative").render(renderable, rootTag);
    }

    _GlobalPerformanceLogger.default.stopTimespan('renderApplication_React_render');
  }

  module.exports = renderApplication;
},415,[3,53,118,416,49,417,6,359,419,85],"node_modules/react-native/Libraries/ReactNative/renderApplication.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _GlobalPerformanceLogger = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "./GlobalPerformanceLogger"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var PerformanceLoggerContext = React.createContext(_GlobalPerformanceLogger.default);
  module.exports = PerformanceLoggerContext;
},416,[49,3,118],"node_modules/react-native/Libraries/Utilities/PerformanceLoggerContext.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeDeviceEventManager = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../Libraries/NativeModules/specs/NativeDeviceEventManager"));

  var _RCTDeviceEventEmitter = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../EventEmitter/RCTDeviceEventEmitter"));

  var DEVICE_BACK_EVENT = 'hardwareBackPress';
  var _backPressSubscriptions = [];

  _RCTDeviceEventEmitter.default.addListener(DEVICE_BACK_EVENT, function () {
    for (var i = _backPressSubscriptions.length - 1; i >= 0; i--) {
      if (_backPressSubscriptions[i]()) {
        return;
      }
    }

    BackHandler.exitApp();
  });

  var BackHandler = {
    exitApp: function exitApp() {
      if (!_NativeDeviceEventManager.default) {
        return;
      }

      _NativeDeviceEventManager.default.invokeDefaultBackPressHandler();
    },
    addEventListener: function addEventListener(eventName, handler) {
      if (_backPressSubscriptions.indexOf(handler) === -1) {
        _backPressSubscriptions.push(handler);
      }

      return {
        remove: function remove() {
          return BackHandler.removeEventListener(eventName, handler);
        }
      };
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      if (_backPressSubscriptions.indexOf(handler) !== -1) {
        _backPressSubscriptions.splice(_backPressSubscriptions.indexOf(handler), 1);
      }
    }
  };
  module.exports = BackHandler;
},417,[3,418,30],"node_modules/react-native/Libraries/Utilities/BackHandler.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('DeviceEventManager');

  exports.default = _default;
},418,[5],"node_modules/react-native/Libraries/NativeModules/specs/NativeDeviceEventManager.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactFabric;

  if (__DEV__) {
    ReactFabric = _$$_REQUIRE(_dependencyMap[0], "../implementations/ReactFabric-dev");
  } else {
    ReactFabric = _$$_REQUIRE(_dependencyMap[1], "../implementations/ReactFabric-prod");
  }

  if (global.RN$Bridgeless) {
    global.RN$stopSurface = ReactFabric.stopSurface;
  } else {
    _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").BatchedBridge.registerCallableModule('ReactFabric', ReactFabric);
  }

  module.exports = ReactFabric;
},419,[420,421,58],"node_modules/react-native/Libraries/Renderer/shims/ReactFabric.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (__DEV__) {
    (function () {
      "use strict";

      var React = _$$_REQUIRE(_dependencyMap[0], "react");

      _$$_REQUIRE(_dependencyMap[1], "react-native/Libraries/ReactPrivate/ReactNativePrivateInitializeCore");

      var ReactNativePrivateInterface = _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface");

      var Scheduler = _$$_REQUIRE(_dependencyMap[3], "scheduler");

      var tracing = _$$_REQUIRE(_dependencyMap[4], "scheduler/tracing");

      var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

      if (!ReactSharedInternals.hasOwnProperty("ReactCurrentDispatcher")) {
        ReactSharedInternals.ReactCurrentDispatcher = {
          current: null
        };
      }

      if (!ReactSharedInternals.hasOwnProperty("ReactCurrentBatchConfig")) {
        ReactSharedInternals.ReactCurrentBatchConfig = {
          suspense: null
        };
      }

      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          printWarning("warn", format, args);
        }
      }

      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          printWarning("error", format, args);
        }
      }

      function printWarning(level, format, args) {
        {
          var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === "string" && args[args.length - 1].indexOf("\n    in") === 0;

          if (!hasExistingStack) {
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();

            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
          }

          var argsWithFormat = args.map(function (item) {
            return "" + item;
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);

          try {
            var argIndex = 0;
            var message = "Warning: " + format.replace(/%s/g, function () {
              return args[argIndex++];
            });
            throw new Error(message);
          } catch (x) {}
        }
      }

      var FunctionComponent = 0;
      var ClassComponent = 1;
      var IndeterminateComponent = 2;
      var HostRoot = 3;
      var HostPortal = 4;
      var HostComponent = 5;
      var HostText = 6;
      var Fragment = 7;
      var Mode = 8;
      var ContextConsumer = 9;
      var ContextProvider = 10;
      var ForwardRef = 11;
      var Profiler = 12;
      var SuspenseComponent = 13;
      var MemoComponent = 14;
      var SimpleMemoComponent = 15;
      var LazyComponent = 16;
      var IncompleteClassComponent = 17;
      var DehydratedFragment = 18;
      var SuspenseListComponent = 19;
      var FundamentalComponent = 20;
      var ScopeComponent = 21;
      var Block = 22;

      function getParent(inst) {
        do {
          inst = inst.return;
        } while (inst && inst.tag !== HostComponent);

        if (inst) {
          return inst;
        }

        return null;
      }

      function getLowestCommonAncestor(instA, instB) {
        var depthA = 0;

        for (var tempA = instA; tempA; tempA = getParent(tempA)) {
          depthA++;
        }

        var depthB = 0;

        for (var tempB = instB; tempB; tempB = getParent(tempB)) {
          depthB++;
        }

        while (depthA - depthB > 0) {
          instA = getParent(instA);
          depthA--;
        }

        while (depthB - depthA > 0) {
          instB = getParent(instB);
          depthB--;
        }

        var depth = depthA;

        while (depth--) {
          if (instA === instB || instA === instB.alternate) {
            return instA;
          }

          instA = getParent(instA);
          instB = getParent(instB);
        }

        return null;
      }

      function isAncestor(instA, instB) {
        while (instB) {
          if (instA === instB || instA === instB.alternate) {
            return true;
          }

          instB = getParent(instB);
        }

        return false;
      }

      function getParentInstance(inst) {
        return getParent(inst);
      }

      function traverseTwoPhase(inst, fn, arg) {
        var path = [];

        while (inst) {
          path.push(inst);
          inst = getParent(inst);
        }

        var i;

        for (i = path.length; i-- > 0;) {
          fn(path[i], "captured", arg);
        }

        for (i = 0; i < path.length; i++) {
          fn(path[i], "bubbled", arg);
        }
      }

      var invokeGuardedCallbackImpl = function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);

        try {
          func.apply(context, funcArgs);
        } catch (error) {
          this.onError(error);
        }
      };

      {
        if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
          var fakeNode = document.createElement("react");

          var invokeGuardedCallbackDev = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            if (!(typeof document !== "undefined")) {
              throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            }

            var evt = document.createEvent("Event");
            var didError = true;
            var windowEvent = window.event;
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
            var funcArgs = Array.prototype.slice.call(arguments, 3);

            function callCallback() {
              fakeNode.removeEventListener(evtType, callCallback, false);

              if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                window.event = windowEvent;
              }

              func.apply(context, funcArgs);
              didError = false;
            }

            var error;
            var didSetError = false;
            var isCrossOriginError = false;

            function handleWindowError(event) {
              error = event.error;
              didSetError = true;

              if (error === null && event.colno === 0 && event.lineno === 0) {
                isCrossOriginError = true;
              }

              if (event.defaultPrevented) {
                if (error != null && typeof error === "object") {
                  try {
                    error._suppressLogging = true;
                  } catch (inner) {}
                }
              }
            }

            var evtType = "react-" + (name ? name : "invokeguardedcallback");
            window.addEventListener("error", handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);

            if (windowEventDescriptor) {
              Object.defineProperty(window, "event", windowEventDescriptor);
            }

            if (didError) {
              if (!didSetError) {
                error = new Error("An error was thrown inside one of your components, but React " + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + "your browser. Try triggering the error in production mode, " + "or switching to a modern browser. If you suspect that this is " + "actually an issue with React, please file an issue.");
              } else if (isCrossOriginError) {
                error = new Error("A cross-origin error was thrown. React doesn't have access to " + "the actual error object in development. " + "See https://fb.me/react-crossorigin-error for more information.");
              }

              this.onError(error);
            }

            window.removeEventListener("error", handleWindowError);
          };

          invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
        }
      }
      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
      var hasError = false;
      var caughtError = null;
      var hasRethrowError = false;
      var rethrowError = null;
      var reporter = {
        onError: function onError(error) {
          hasError = true;
          caughtError = error;
        }
      };

      function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
      }

      function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);

        if (hasError) {
          var error = clearCaughtError();

          if (!hasRethrowError) {
            hasRethrowError = true;
            rethrowError = error;
          }
        }
      }

      function rethrowCaughtError() {
        if (hasRethrowError) {
          var error = rethrowError;
          hasRethrowError = false;
          rethrowError = null;
          throw error;
        }
      }

      function hasCaughtError() {
        return hasError;
      }

      function clearCaughtError() {
        if (hasError) {
          var error = caughtError;
          hasError = false;
          caughtError = null;
          return error;
        } else {
          {
            throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }

      var getFiberCurrentPropsFromNode = null;
      var getInstanceFromNode = null;
      var getNodeFromInstance = null;

      function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
        getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
        getInstanceFromNode = getInstanceFromNodeImpl;
        getNodeFromInstance = getNodeFromInstanceImpl;
        {
          if (!getNodeFromInstance || !getInstanceFromNode) {
            error("EventPluginUtils.setComponentTree(...): Injected " + "module is missing getNodeFromInstance or getInstanceFromNode.");
          }
        }
      }

      var validateEventDispatches;
      {
        validateEventDispatches = function validateEventDispatches(event) {
          var dispatchListeners = event._dispatchListeners;
          var dispatchInstances = event._dispatchInstances;
          var listenersIsArr = Array.isArray(dispatchListeners);
          var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
          var instancesIsArr = Array.isArray(dispatchInstances);
          var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

          if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {
            error("EventPluginUtils: Invalid `event`.");
          }
        };
      }

      function executeDispatch(event, listener, inst) {
        var type = event.type || "unknown-event";
        event.currentTarget = getNodeFromInstance(inst);
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
      }

      function executeDispatchesInOrder(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        {
          validateEventDispatches(event);
        }

        if (Array.isArray(dispatchListeners)) {
          for (var i = 0; i < dispatchListeners.length; i++) {
            if (event.isPropagationStopped()) {
              break;
            }

            executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
          }
        } else if (dispatchListeners) {
          executeDispatch(event, dispatchListeners, dispatchInstances);
        }

        event._dispatchListeners = null;
        event._dispatchInstances = null;
      }

      function executeDispatchesInOrderStopAtTrueImpl(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        {
          validateEventDispatches(event);
        }

        if (Array.isArray(dispatchListeners)) {
          for (var i = 0; i < dispatchListeners.length; i++) {
            if (event.isPropagationStopped()) {
              break;
            }

            if (dispatchListeners[i](event, dispatchInstances[i])) {
              return dispatchInstances[i];
            }
          }
        } else if (dispatchListeners) {
          if (dispatchListeners(event, dispatchInstances)) {
            return dispatchInstances;
          }
        }

        return null;
      }

      function executeDispatchesInOrderStopAtTrue(event) {
        var ret = executeDispatchesInOrderStopAtTrueImpl(event);
        event._dispatchInstances = null;
        event._dispatchListeners = null;
        return ret;
      }

      function executeDirectDispatch(event) {
        {
          validateEventDispatches(event);
        }
        var dispatchListener = event._dispatchListeners;
        var dispatchInstance = event._dispatchInstances;

        if (!!Array.isArray(dispatchListener)) {
          throw Error("executeDirectDispatch(...): Invalid `event`.");
        }

        event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
        var res = dispatchListener ? dispatchListener(event) : null;
        event.currentTarget = null;
        event._dispatchListeners = null;
        event._dispatchInstances = null;
        return res;
      }

      function hasDispatches(event) {
        return !!event._dispatchListeners;
      }

      function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
      }

      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            return !!(props.disabled && isInteractive(type));

          default:
            return false;
        }
      }

      function getListener(inst, registrationName) {
        var listener;
        var stateNode = inst.stateNode;

        if (!stateNode) {
          return null;
        }

        var props = getFiberCurrentPropsFromNode(stateNode);

        if (!props) {
          return null;
        }

        listener = props[registrationName];

        if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
          return null;
        }

        if (!(!listener || typeof listener === "function")) {
          throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        }

        return listener;
      }

      function accumulateInto(current, next) {
        if (!(next != null)) {
          throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
        }

        if (current == null) {
          return next;
        }

        if (Array.isArray(current)) {
          if (Array.isArray(next)) {
            current.push.apply(current, next);
            return current;
          }

          current.push(next);
          return current;
        }

        if (Array.isArray(next)) {
          return [current].concat(next);
        }

        return [current, next];
      }

      function forEachAccumulated(arr, cb, scope) {
        if (Array.isArray(arr)) {
          arr.forEach(cb, scope);
        } else if (arr) {
          cb.call(scope, arr);
        }
      }

      function listenerAtPhase(inst, event, propagationPhase) {
        var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
        return getListener(inst, registrationName);
      }

      function accumulateDirectionalDispatches(inst, phase, event) {
        {
          if (!inst) {
            error("Dispatching inst must not be null");
          }
        }
        var listener = listenerAtPhase(inst, event, phase);

        if (listener) {
          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
        }
      }

      function accumulateTwoPhaseDispatchesSingle(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
        }
      }

      function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          var targetInst = event._targetInst;
          var parentInst = targetInst ? getParentInstance(targetInst) : null;
          traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
        }
      }

      function accumulateDispatches(inst, ignoredDirection, event) {
        if (inst && event && event.dispatchConfig.registrationName) {
          var registrationName = event.dispatchConfig.registrationName;
          var listener = getListener(inst, registrationName);

          if (listener) {
            event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
            event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
          }
        }
      }

      function accumulateDirectDispatchesSingle(event) {
        if (event && event.dispatchConfig.registrationName) {
          accumulateDispatches(event._targetInst, null, event);
        }
      }

      function accumulateTwoPhaseDispatches(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
      }

      function accumulateTwoPhaseDispatchesSkipTarget(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
      }

      function accumulateDirectDispatches(events) {
        forEachAccumulated(events, accumulateDirectDispatchesSingle);
      }

      var EVENT_POOL_SIZE = 10;
      var EventInterface = {
        type: null,
        target: null,
        currentTarget: function currentTarget() {
          return null;
        },
        eventPhase: null,
        bubbles: null,
        cancelable: null,
        timeStamp: function timeStamp(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: null,
        isTrusted: null
      };

      function functionThatReturnsTrue() {
        return true;
      }

      function functionThatReturnsFalse() {
        return false;
      }

      function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
        {
          delete this.nativeEvent;
          delete this.preventDefault;
          delete this.stopPropagation;
          delete this.isDefaultPrevented;
          delete this.isPropagationStopped;
        }
        this.dispatchConfig = dispatchConfig;
        this._targetInst = targetInst;
        this.nativeEvent = nativeEvent;
        var Interface = this.constructor.Interface;

        for (var propName in Interface) {
          if (!Interface.hasOwnProperty(propName)) {
            continue;
          }

          {
            delete this[propName];
          }
          var normalize = Interface[propName];

          if (normalize) {
            this[propName] = normalize(nativeEvent);
          } else {
            if (propName === "target") {
              this.target = nativeEventTarget;
            } else {
              this[propName] = nativeEvent[propName];
            }
          }
        }

        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

        if (defaultPrevented) {
          this.isDefaultPrevented = functionThatReturnsTrue;
        } else {
          this.isDefaultPrevented = functionThatReturnsFalse;
        }

        this.isPropagationStopped = functionThatReturnsFalse;
        return this;
      }

      Object.assign(SyntheticEvent.prototype, {
        preventDefault: function preventDefault() {
          this.defaultPrevented = true;
          var event = this.nativeEvent;

          if (!event) {
            return;
          }

          if (event.preventDefault) {
            event.preventDefault();
          } else if (typeof event.returnValue !== "unknown") {
            event.returnValue = false;
          }

          this.isDefaultPrevented = functionThatReturnsTrue;
        },
        stopPropagation: function stopPropagation() {
          var event = this.nativeEvent;

          if (!event) {
            return;
          }

          if (event.stopPropagation) {
            event.stopPropagation();
          } else if (typeof event.cancelBubble !== "unknown") {
            event.cancelBubble = true;
          }

          this.isPropagationStopped = functionThatReturnsTrue;
        },
        persist: function persist() {
          this.isPersistent = functionThatReturnsTrue;
        },
        isPersistent: functionThatReturnsFalse,
        destructor: function destructor() {
          var Interface = this.constructor.Interface;

          for (var propName in Interface) {
            {
              Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
            }
          }

          this.dispatchConfig = null;
          this._targetInst = null;
          this.nativeEvent = null;
          this.isDefaultPrevented = functionThatReturnsFalse;
          this.isPropagationStopped = functionThatReturnsFalse;
          this._dispatchListeners = null;
          this._dispatchInstances = null;
          {
            Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null));
            Object.defineProperty(this, "isDefaultPrevented", getPooledWarningPropertyDefinition("isDefaultPrevented", functionThatReturnsFalse));
            Object.defineProperty(this, "isPropagationStopped", getPooledWarningPropertyDefinition("isPropagationStopped", functionThatReturnsFalse));
            Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", function () {}));
            Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", function () {}));
          }
        }
      });
      SyntheticEvent.Interface = EventInterface;

      SyntheticEvent.extend = function (Interface) {
        var Super = this;

        var E = function E() {};

        E.prototype = Super.prototype;
        var prototype = new E();

        function Class() {
          return Super.apply(this, arguments);
        }

        Object.assign(prototype, Class.prototype);
        Class.prototype = prototype;
        Class.prototype.constructor = Class;
        Class.Interface = Object.assign({}, Super.Interface, Interface);
        Class.extend = Super.extend;
        addEventPoolingTo(Class);
        return Class;
      };

      addEventPoolingTo(SyntheticEvent);

      function getPooledWarningPropertyDefinition(propName, getVal) {
        var isFunction = typeof getVal === "function";
        return {
          configurable: true,
          set: set,
          get: get
        };

        function set(val) {
          var action = isFunction ? "setting the method" : "setting the property";
          warn(action, "This is effectively a no-op");
          return val;
        }

        function get() {
          var action = isFunction ? "accessing the method" : "accessing the property";
          var result = isFunction ? "This is a no-op function" : "This is set to null";
          warn(action, result);
          return getVal;
        }

        function warn(action, result) {
          {
            error("This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + "If you must keep the original synthetic event around, use event.persist(). " + "See https://fb.me/react-event-pooling for more information.", action, propName, result);
          }
        }
      }

      function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
        var EventConstructor = this;

        if (EventConstructor.eventPool.length) {
          var instance = EventConstructor.eventPool.pop();
          EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
          return instance;
        }

        return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
      }

      function releasePooledEvent(event) {
        var EventConstructor = this;

        if (!(event instanceof EventConstructor)) {
          throw Error("Trying to release an event instance into a pool of a different type.");
        }

        event.destructor();

        if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
          EventConstructor.eventPool.push(event);
        }
      }

      function addEventPoolingTo(EventConstructor) {
        EventConstructor.eventPool = [];
        EventConstructor.getPooled = getPooledEvent;
        EventConstructor.release = releasePooledEvent;
      }

      var ResponderSyntheticEvent = SyntheticEvent.extend({
        touchHistory: function touchHistory(nativeEvent) {
          return null;
        }
      });
      var TOP_TOUCH_START = "topTouchStart";
      var TOP_TOUCH_MOVE = "topTouchMove";
      var TOP_TOUCH_END = "topTouchEnd";
      var TOP_TOUCH_CANCEL = "topTouchCancel";
      var TOP_SCROLL = "topScroll";
      var TOP_SELECTION_CHANGE = "topSelectionChange";

      function isStartish(topLevelType) {
        return topLevelType === TOP_TOUCH_START;
      }

      function isMoveish(topLevelType) {
        return topLevelType === TOP_TOUCH_MOVE;
      }

      function isEndish(topLevelType) {
        return topLevelType === TOP_TOUCH_END || topLevelType === TOP_TOUCH_CANCEL;
      }

      var startDependencies = [TOP_TOUCH_START];
      var moveDependencies = [TOP_TOUCH_MOVE];
      var endDependencies = [TOP_TOUCH_CANCEL, TOP_TOUCH_END];
      var MAX_TOUCH_BANK = 20;
      var touchBank = [];
      var touchHistory = {
        touchBank: touchBank,
        numberActiveTouches: 0,
        indexOfSingleActiveTouch: -1,
        mostRecentTimeStamp: 0
      };

      function timestampForTouch(touch) {
        return touch.timeStamp || touch.timestamp;
      }

      function createTouchRecord(touch) {
        return {
          touchActive: true,
          startPageX: touch.pageX,
          startPageY: touch.pageY,
          startTimeStamp: timestampForTouch(touch),
          currentPageX: touch.pageX,
          currentPageY: touch.pageY,
          currentTimeStamp: timestampForTouch(touch),
          previousPageX: touch.pageX,
          previousPageY: touch.pageY,
          previousTimeStamp: timestampForTouch(touch)
        };
      }

      function resetTouchRecord(touchRecord, touch) {
        touchRecord.touchActive = true;
        touchRecord.startPageX = touch.pageX;
        touchRecord.startPageY = touch.pageY;
        touchRecord.startTimeStamp = timestampForTouch(touch);
        touchRecord.currentPageX = touch.pageX;
        touchRecord.currentPageY = touch.pageY;
        touchRecord.currentTimeStamp = timestampForTouch(touch);
        touchRecord.previousPageX = touch.pageX;
        touchRecord.previousPageY = touch.pageY;
        touchRecord.previousTimeStamp = timestampForTouch(touch);
      }

      function getTouchIdentifier(_ref) {
        var identifier = _ref.identifier;

        if (!(identifier != null)) {
          throw Error("Touch object is missing identifier.");
        }

        {
          if (identifier > MAX_TOUCH_BANK) {
            error("Touch identifier %s is greater than maximum supported %s which causes " + "performance issues backfilling array locations for all of the indices.", identifier, MAX_TOUCH_BANK);
          }
        }
        return identifier;
      }

      function recordTouchStart(touch) {
        var identifier = getTouchIdentifier(touch);
        var touchRecord = touchBank[identifier];

        if (touchRecord) {
          resetTouchRecord(touchRecord, touch);
        } else {
          touchBank[identifier] = createTouchRecord(touch);
        }

        touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
      }

      function recordTouchMove(touch) {
        var touchRecord = touchBank[getTouchIdentifier(touch)];

        if (touchRecord) {
          touchRecord.touchActive = true;
          touchRecord.previousPageX = touchRecord.currentPageX;
          touchRecord.previousPageY = touchRecord.currentPageY;
          touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
          touchRecord.currentPageX = touch.pageX;
          touchRecord.currentPageY = touch.pageY;
          touchRecord.currentTimeStamp = timestampForTouch(touch);
          touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
        } else {
          {
            warn("Cannot record touch move without a touch start.\n" + "Touch Move: %s\n" + "Touch Bank: %s", printTouch(touch), printTouchBank());
          }
        }
      }

      function recordTouchEnd(touch) {
        var touchRecord = touchBank[getTouchIdentifier(touch)];

        if (touchRecord) {
          touchRecord.touchActive = false;
          touchRecord.previousPageX = touchRecord.currentPageX;
          touchRecord.previousPageY = touchRecord.currentPageY;
          touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
          touchRecord.currentPageX = touch.pageX;
          touchRecord.currentPageY = touch.pageY;
          touchRecord.currentTimeStamp = timestampForTouch(touch);
          touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
        } else {
          {
            warn("Cannot record touch end without a touch start.\n" + "Touch End: %s\n" + "Touch Bank: %s", printTouch(touch), printTouchBank());
          }
        }
      }

      function printTouch(touch) {
        return JSON.stringify({
          identifier: touch.identifier,
          pageX: touch.pageX,
          pageY: touch.pageY,
          timestamp: timestampForTouch(touch)
        });
      }

      function printTouchBank() {
        var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));

        if (touchBank.length > MAX_TOUCH_BANK) {
          printed += " (original size: " + touchBank.length + ")";
        }

        return printed;
      }

      var ResponderTouchHistoryStore = {
        recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
          if (isMoveish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchMove);
          } else if (isStartish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchStart);
            touchHistory.numberActiveTouches = nativeEvent.touches.length;

            if (touchHistory.numberActiveTouches === 1) {
              touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;
            }
          } else if (isEndish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchEnd);
            touchHistory.numberActiveTouches = nativeEvent.touches.length;

            if (touchHistory.numberActiveTouches === 1) {
              for (var i = 0; i < touchBank.length; i++) {
                var touchTrackToCheck = touchBank[i];

                if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {
                  touchHistory.indexOfSingleActiveTouch = i;
                  break;
                }
              }

              {
                var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];

                if (activeRecord == null || !activeRecord.touchActive) {
                  error("Cannot find single active touch.");
                }
              }
            }
          }
        },
        touchHistory: touchHistory
      };

      function accumulate(current, next) {
        if (!(next != null)) {
          throw Error("accumulate(...): Accumulated items must not be null or undefined.");
        }

        if (current == null) {
          return next;
        }

        if (Array.isArray(current)) {
          return current.concat(next);
        }

        if (Array.isArray(next)) {
          return [current].concat(next);
        }

        return [current, next];
      }

      var responderInst = null;
      var trackedTouchCount = 0;

      var changeResponder = function changeResponder(nextResponderInst, blockHostResponder) {
        var oldResponderInst = responderInst;
        responderInst = nextResponderInst;

        if (ResponderEventPlugin.GlobalResponderHandler !== null) {
          ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
        }
      };

      var eventTypes = {
        startShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onStartShouldSetResponder",
            captured: "onStartShouldSetResponderCapture"
          },
          dependencies: startDependencies
        },
        scrollShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onScrollShouldSetResponder",
            captured: "onScrollShouldSetResponderCapture"
          },
          dependencies: [TOP_SCROLL]
        },
        selectionChangeShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onSelectionChangeShouldSetResponder",
            captured: "onSelectionChangeShouldSetResponderCapture"
          },
          dependencies: [TOP_SELECTION_CHANGE]
        },
        moveShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onMoveShouldSetResponder",
            captured: "onMoveShouldSetResponderCapture"
          },
          dependencies: moveDependencies
        },
        responderStart: {
          registrationName: "onResponderStart",
          dependencies: startDependencies
        },
        responderMove: {
          registrationName: "onResponderMove",
          dependencies: moveDependencies
        },
        responderEnd: {
          registrationName: "onResponderEnd",
          dependencies: endDependencies
        },
        responderRelease: {
          registrationName: "onResponderRelease",
          dependencies: endDependencies
        },
        responderTerminationRequest: {
          registrationName: "onResponderTerminationRequest",
          dependencies: []
        },
        responderGrant: {
          registrationName: "onResponderGrant",
          dependencies: []
        },
        responderReject: {
          registrationName: "onResponderReject",
          dependencies: []
        },
        responderTerminate: {
          registrationName: "onResponderTerminate",
          dependencies: []
        }
      };

      function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : topLevelType === TOP_SELECTION_CHANGE ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        var bubbleShouldSetFrom = !responderInst ? targetInst : getLowestCommonAncestor(responderInst, targetInst);
        var skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst;
        var shouldSetEvent = ResponderSyntheticEvent.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);
        shouldSetEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;

        if (skipOverBubbleShouldSetFrom) {
          accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent);
        } else {
          accumulateTwoPhaseDispatches(shouldSetEvent);
        }

        var wantsResponderInst = executeDispatchesInOrderStopAtTrue(shouldSetEvent);

        if (!shouldSetEvent.isPersistent()) {
          shouldSetEvent.constructor.release(shouldSetEvent);
        }

        if (!wantsResponderInst || wantsResponderInst === responderInst) {
          return null;
        }

        var extracted;
        var grantEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);
        grantEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
        accumulateDirectDispatches(grantEvent);
        var blockHostResponder = executeDirectDispatch(grantEvent) === true;

        if (responderInst) {
          var terminationRequestEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);
          terminationRequestEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
          accumulateDirectDispatches(terminationRequestEvent);
          var shouldSwitch = !hasDispatches(terminationRequestEvent) || executeDirectDispatch(terminationRequestEvent);

          if (!terminationRequestEvent.isPersistent()) {
            terminationRequestEvent.constructor.release(terminationRequestEvent);
          }

          if (shouldSwitch) {
            var terminateEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
            terminateEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(terminateEvent);
            extracted = accumulate(extracted, [grantEvent, terminateEvent]);
            changeResponder(wantsResponderInst, blockHostResponder);
          } else {
            var rejectEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);
            rejectEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(rejectEvent);
            extracted = accumulate(extracted, rejectEvent);
          }
        } else {
          extracted = accumulate(extracted, grantEvent);
          changeResponder(wantsResponderInst, blockHostResponder);
        }

        return extracted;
      }

      function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
        return topLevelInst && (topLevelType === TOP_SCROLL && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && topLevelType === TOP_SELECTION_CHANGE || isStartish(topLevelType) || isMoveish(topLevelType));
      }

      function noResponderTouches(nativeEvent) {
        var touches = nativeEvent.touches;

        if (!touches || touches.length === 0) {
          return true;
        }

        for (var i = 0; i < touches.length; i++) {
          var activeTouch = touches[i];
          var target = activeTouch.target;

          if (target !== null && target !== undefined && target !== 0) {
            var targetInst = getInstanceFromNode(target);

            if (isAncestor(responderInst, targetInst)) {
              return false;
            }
          }
        }

        return true;
      }

      var ResponderEventPlugin = {
        _getResponder: function _getResponder() {
          return responderInst;
        },
        eventTypes: eventTypes,
        extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
          if (isStartish(topLevelType)) {
            trackedTouchCount += 1;
          } else if (isEndish(topLevelType)) {
            if (trackedTouchCount >= 0) {
              trackedTouchCount -= 1;
            } else {
              {
                warn("Ended a touch event which was not counted in `trackedTouchCount`.");
              }
              return null;
            }
          }

          ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);
          var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null;
          var isResponderTouchStart = responderInst && isStartish(topLevelType);
          var isResponderTouchMove = responderInst && isMoveish(topLevelType);
          var isResponderTouchEnd = responderInst && isEndish(topLevelType);
          var incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;

          if (incrementalTouch) {
            var gesture = ResponderSyntheticEvent.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);
            gesture.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(gesture);
            extracted = accumulate(extracted, gesture);
          }

          var isResponderTerminate = responderInst && topLevelType === TOP_TOUCH_CANCEL;
          var isResponderRelease = responderInst && !isResponderTerminate && isEndish(topLevelType) && noResponderTouches(nativeEvent);
          var finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;

          if (finalTouch) {
            var finalEvent = ResponderSyntheticEvent.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);
            finalEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(finalEvent);
            extracted = accumulate(extracted, finalEvent);
            changeResponder(null);
          }

          return extracted;
        },
        GlobalResponderHandler: null,
        injection: {
          injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
            ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
          }
        }
      };
      var eventPluginOrder = null;
      var namesToPlugins = {};

      function recomputePluginOrdering() {
        if (!eventPluginOrder) {
          return;
        }

        for (var pluginName in namesToPlugins) {
          var pluginModule = namesToPlugins[pluginName];
          var pluginIndex = eventPluginOrder.indexOf(pluginName);

          if (!(pluginIndex > -1)) {
            throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`.");
          }

          if (plugins[pluginIndex]) {
            continue;
          }

          if (!pluginModule.extractEvents) {
            throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not.");
          }

          plugins[pluginIndex] = pluginModule;
          var publishedEvents = pluginModule.eventTypes;

          for (var eventName in publishedEvents) {
            if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
              throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
            }
          }
        }
      }

      function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
        if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
          throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName + "`.");
        }

        eventNameDispatchConfigs[eventName] = dispatchConfig;
        var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

        if (phasedRegistrationNames) {
          for (var phaseName in phasedRegistrationNames) {
            if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
              var phasedRegistrationName = phasedRegistrationNames[phaseName];
              publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
            }
          }

          return true;
        } else if (dispatchConfig.registrationName) {
          publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
          return true;
        }

        return false;
      }

      function publishRegistrationName(registrationName, pluginModule, eventName) {
        if (!!registrationNameModules[registrationName]) {
          throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`.");
        }

        registrationNameModules[registrationName] = pluginModule;
        registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
        }
      }

      var plugins = [];
      var eventNameDispatchConfigs = {};
      var registrationNameModules = {};
      var registrationNameDependencies = {};

      function injectEventPluginOrder(injectedEventPluginOrder) {
        if (!!eventPluginOrder) {
          throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
        }

        eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
        recomputePluginOrdering();
      }

      function injectEventPluginsByName(injectedNamesToPlugins) {
        var isOrderingDirty = false;

        for (var pluginName in injectedNamesToPlugins) {
          if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
            continue;
          }

          var pluginModule = injectedNamesToPlugins[pluginName];

          if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
            if (!!namesToPlugins[pluginName]) {
              throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`.");
            }

            namesToPlugins[pluginName] = pluginModule;
            isOrderingDirty = true;
          }
        }

        if (isOrderingDirty) {
          recomputePluginOrdering();
        }
      }

      var customBubblingEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customBubblingEventTypes,
          customDirectEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customDirectEventTypes;
      var ReactNativeBridgeEventPlugin = {
        eventTypes: {},
        extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
          if (targetInst == null) {
            return null;
          }

          var bubbleDispatchConfig = customBubblingEventTypes[topLevelType];
          var directDispatchConfig = customDirectEventTypes[topLevelType];

          if (!(bubbleDispatchConfig || directDispatchConfig)) {
            throw Error('Unsupported top level event type "' + topLevelType + '" dispatched');
          }

          var event = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);

          if (bubbleDispatchConfig) {
            accumulateTwoPhaseDispatches(event);
          } else if (directDispatchConfig) {
            accumulateDirectDispatches(event);
          } else {
            return null;
          }

          return event;
        }
      };
      var ReactNativeEventPluginOrder = ["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"];
      injectEventPluginOrder(ReactNativeEventPluginOrder);
      injectEventPluginsByName({
        ResponderEventPlugin: ResponderEventPlugin,
        ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin
      });

      function getInstanceFromInstance(instanceHandle) {
        return instanceHandle;
      }

      function getTagFromInstance(inst) {
        var nativeInstance = inst.stateNode.canonical;

        if (!nativeInstance._nativeTag) {
          throw Error("All native instances should have a tag.");
        }

        return nativeInstance;
      }

      function getFiberCurrentPropsFromNode$1(inst) {
        return inst.canonical.currentProps;
      }

      var ReactFabricGlobalResponderHandler = {
        onChange: function onChange(from, to, blockNativeResponder) {
          if (to !== null) {
            var tag = to.stateNode.canonical._nativeTag;
            ReactNativePrivateInterface.UIManager.setJSResponder(tag, blockNativeResponder);
          } else {
            ReactNativePrivateInterface.UIManager.clearJSResponder();
          }
        }
      };
      setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromInstance, getTagFromInstance);
      ResponderEventPlugin.injection.injectGlobalResponderHandler(ReactFabricGlobalResponderHandler);

      function get(key) {
        return key._reactInternalFiber;
      }

      function set(key, value) {
        key._reactInternalFiber = value;
      }

      var hasSymbol = typeof Symbol === "function" && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 0xeac7;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 0xeacc;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 0xead2;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 0xeace;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 0xeacf;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 0xead0;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 0xead1;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 0xead8;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 0xead3;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 0xead4;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 0xead9;
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";

      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }

        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }

        return null;
      }

      var Uninitialized = -1;
      var Pending = 0;
      var Resolved = 1;
      var Rejected = 2;

      function refineResolvedLazyComponent(lazyComponent) {
        return lazyComponent._status === Resolved ? lazyComponent._result : null;
      }

      function initializeLazyComponentType(lazyComponent) {
        if (lazyComponent._status === Uninitialized) {
          var ctor = lazyComponent._result;

          if (!ctor) {
            ctor = lazyComponent._ctor;
          }

          var thenable = ctor();
          var pending = lazyComponent;
          pending._status = Pending;
          pending._result = thenable;
          thenable.then(function (moduleObject) {
            if (lazyComponent._status === Pending) {
              var defaultExport = moduleObject.default;
              {
                if (defaultExport === undefined) {
                  error("lazy: Expected the result of a dynamic import() call. " + "Instead received: %s\n\nYour code should look like: \n  " + "const MyComponent = lazy(() => imp" + "ort('./MyComponent'))", moduleObject);
                }
              }
              var resolved = lazyComponent;
              resolved._status = Resolved;
              resolved._result = defaultExport;
            }
          }, function (error) {
            if (lazyComponent._status === Pending) {
              var rejected = lazyComponent;
              rejected._status = Rejected;
              rejected._result = error;
            }
          });
        }
      }

      function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }

      function getContextName(type) {
        return type.displayName || "Context";
      }

      function getComponentName(type) {
        if (type == null) {
          return null;
        }

        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentName(). " + "This is likely a bug in React. Please file an issue.");
          }
        }

        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }

        if (typeof type === "string") {
          return type;
        }

        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";

          case REACT_PORTAL_TYPE:
            return "Portal";

          case REACT_PROFILER_TYPE:
            return "Profiler";

          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";

          case REACT_SUSPENSE_TYPE:
            return "Suspense";

          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }

        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";

            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";

            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");

            case REACT_MEMO_TYPE:
              return getComponentName(type.type);

            case REACT_BLOCK_TYPE:
              return getComponentName(type.render);

            case REACT_LAZY_TYPE:
              {
                var thenable = type;
                var resolvedThenable = refineResolvedLazyComponent(thenable);

                if (resolvedThenable) {
                  return getComponentName(resolvedThenable);
                }

                break;
              }
          }
        }

        return null;
      }

      var NoEffect = 0;
      var PerformedWork = 1;
      var Placement = 2;
      var Update = 4;
      var PlacementAndUpdate = 6;
      var Deletion = 8;
      var ContentReset = 16;
      var Callback = 32;
      var DidCapture = 64;
      var Ref = 128;
      var Snapshot = 256;
      var Passive = 512;
      var Hydrating = 1024;
      var HydratingAndUpdate = 1028;
      var LifecycleEffectMask = 932;
      var HostEffectMask = 2047;
      var Incomplete = 2048;
      var ShouldCapture = 4096;
      var enableProfilerTimer = true;
      var warnAboutStringRefs = false;
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;

      function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;

        if (!fiber.alternate) {
          var nextNode = node;

          do {
            node = nextNode;

            if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
              nearestMounted = node.return;
            }

            nextNode = node.return;
          } while (nextNode);
        } else {
          while (node.return) {
            node = node.return;
          }
        }

        if (node.tag === HostRoot) {
          return nearestMounted;
        }

        return null;
      }

      function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
      }

      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current;

          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;

            if (!instance._warnedAboutRefsInRender) {
              error("%s is accessing isMounted inside its render() function. " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
            }

            instance._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get(component);

        if (!fiber) {
          return false;
        }

        return getNearestMountedFiber(fiber) === fiber;
      }

      function assertIsMounted(fiber) {
        if (!(getNearestMountedFiber(fiber) === fiber)) {
          throw Error("Unable to find node on an unmounted component.");
        }
      }

      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;

        if (!alternate) {
          var nearestMounted = getNearestMountedFiber(fiber);

          if (!(nearestMounted !== null)) {
            throw Error("Unable to find node on an unmounted component.");
          }

          if (nearestMounted !== fiber) {
            return null;
          }

          return fiber;
        }

        var a = fiber;
        var b = alternate;

        while (true) {
          var parentA = a.return;

          if (parentA === null) {
            break;
          }

          var parentB = parentA.alternate;

          if (parentB === null) {
            var nextParent = parentA.return;

            if (nextParent !== null) {
              a = b = nextParent;
              continue;
            }

            break;
          }

          if (parentA.child === parentB.child) {
            var child = parentA.child;

            while (child) {
              if (child === a) {
                assertIsMounted(parentA);
                return fiber;
              }

              if (child === b) {
                assertIsMounted(parentA);
                return alternate;
              }

              child = child.sibling;
            }

            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }

          if (a.return !== b.return) {
            a = parentA;
            b = parentB;
          } else {
            var didFindChild = false;
            var _child = parentA.child;

            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentA;
                b = parentB;
                break;
              }

              if (_child === b) {
                didFindChild = true;
                b = parentA;
                a = parentB;
                break;
              }

              _child = _child.sibling;
            }

            if (!didFindChild) {
              _child = parentB.child;

              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentB;
                  b = parentA;
                  break;
                }

                if (_child === b) {
                  didFindChild = true;
                  b = parentB;
                  a = parentA;
                  break;
                }

                _child = _child.sibling;
              }

              if (!didFindChild) {
                throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
              }
            }
          }

          if (!(a.alternate === b)) {
            throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
          }
        }

        if (!(a.tag === HostRoot)) {
          throw Error("Unable to find node on an unmounted component.");
        }

        if (a.stateNode.current === a) {
          return fiber;
        }

        return alternate;
      }

      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);

        if (!currentParent) {
          return null;
        }

        var node = currentParent;

        while (true) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          } else if (node.child) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === currentParent) {
            return null;
          }

          while (!node.sibling) {
            if (!node.return || node.return === currentParent) {
              return null;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }

        return null;
      }

      function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
        return function () {
          if (!callback) {
            return undefined;
          }

          if (typeof context.__isMounted === "boolean") {
            if (!context.__isMounted) {
              return undefined;
            }
          }

          return callback.apply(context, arguments);
        };
      }

      var emptyObject = {};
      var removedKeys = null;
      var removedKeyCount = 0;
      var deepDifferOptions = {
        unsafelyIgnoreFunctions: true
      };

      function defaultDiffer(prevProp, nextProp) {
        if (typeof nextProp !== "object" || nextProp === null) {
          return true;
        } else {
          return ReactNativePrivateInterface.deepDiffer(prevProp, nextProp, deepDifferOptions);
        }
      }

      function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
        if (Array.isArray(node)) {
          var i = node.length;

          while (i-- && removedKeyCount > 0) {
            restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
          }
        } else if (node && removedKeyCount > 0) {
          var obj = node;

          for (var propKey in removedKeys) {
            if (!removedKeys[propKey]) {
              continue;
            }

            var nextProp = obj[propKey];

            if (nextProp === undefined) {
              continue;
            }

            var attributeConfig = validAttributes[propKey];

            if (!attributeConfig) {
              continue;
            }

            if (typeof nextProp === "function") {
              nextProp = true;
            }

            if (typeof nextProp === "undefined") {
              nextProp = null;
            }

            if (typeof attributeConfig !== "object") {
              updatePayload[propKey] = nextProp;
            } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
              var nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;
              updatePayload[propKey] = nextValue;
            }

            removedKeys[propKey] = false;
            removedKeyCount--;
          }
        }
      }

      function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
        var minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
        var i;

        for (i = 0; i < minLength; i++) {
          updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
        }

        for (; i < prevArray.length; i++) {
          updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
        }

        for (; i < nextArray.length; i++) {
          updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
        }

        return updatePayload;
      }

      function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
        if (!updatePayload && prevProp === nextProp) {
          return updatePayload;
        }

        if (!prevProp || !nextProp) {
          if (nextProp) {
            return addNestedProperty(updatePayload, nextProp, validAttributes);
          }

          if (prevProp) {
            return clearNestedProperty(updatePayload, prevProp, validAttributes);
          }

          return updatePayload;
        }

        if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) {
          return diffProperties(updatePayload, prevProp, nextProp, validAttributes);
        }

        if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
          return diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes);
        }

        if (Array.isArray(prevProp)) {
          return diffProperties(updatePayload, ReactNativePrivateInterface.flattenStyle(prevProp), nextProp, validAttributes);
        }

        return diffProperties(updatePayload, prevProp, ReactNativePrivateInterface.flattenStyle(nextProp), validAttributes);
      }

      function addNestedProperty(updatePayload, nextProp, validAttributes) {
        if (!nextProp) {
          return updatePayload;
        }

        if (!Array.isArray(nextProp)) {
          return addProperties(updatePayload, nextProp, validAttributes);
        }

        for (var i = 0; i < nextProp.length; i++) {
          updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
        }

        return updatePayload;
      }

      function clearNestedProperty(updatePayload, prevProp, validAttributes) {
        if (!prevProp) {
          return updatePayload;
        }

        if (!Array.isArray(prevProp)) {
          return clearProperties(updatePayload, prevProp, validAttributes);
        }

        for (var i = 0; i < prevProp.length; i++) {
          updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
        }

        return updatePayload;
      }

      function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
        var attributeConfig;
        var nextProp;
        var prevProp;

        for (var propKey in nextProps) {
          attributeConfig = validAttributes[propKey];

          if (!attributeConfig) {
            continue;
          }

          prevProp = prevProps[propKey];
          nextProp = nextProps[propKey];

          if (typeof nextProp === "function") {
            nextProp = true;

            if (typeof prevProp === "function") {
              prevProp = true;
            }
          }

          if (typeof nextProp === "undefined") {
            nextProp = null;

            if (typeof prevProp === "undefined") {
              prevProp = null;
            }
          }

          if (removedKeys) {
            removedKeys[propKey] = false;
          }

          if (updatePayload && updatePayload[propKey] !== undefined) {
            if (typeof attributeConfig !== "object") {
              updatePayload[propKey] = nextProp;
            } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
              var nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;
              updatePayload[propKey] = nextValue;
            }

            continue;
          }

          if (prevProp === nextProp) {
            continue;
          }

          if (typeof attributeConfig !== "object") {
            if (defaultDiffer(prevProp, nextProp)) {
              (updatePayload || (updatePayload = {}))[propKey] = nextProp;
            }
          } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
            var shouldUpdate = prevProp === undefined || (typeof attributeConfig.diff === "function" ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));

            if (shouldUpdate) {
              var _nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;

              (updatePayload || (updatePayload = {}))[propKey] = _nextValue;
            }
          } else {
            removedKeys = null;
            removedKeyCount = 0;
            updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig);

            if (removedKeyCount > 0 && updatePayload) {
              restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig);
              removedKeys = null;
            }
          }
        }

        for (var _propKey in prevProps) {
          if (nextProps[_propKey] !== undefined) {
            continue;
          }

          attributeConfig = validAttributes[_propKey];

          if (!attributeConfig) {
            continue;
          }

          if (updatePayload && updatePayload[_propKey] !== undefined) {
            continue;
          }

          prevProp = prevProps[_propKey];

          if (prevProp === undefined) {
            continue;
          }

          if (typeof attributeConfig !== "object" || typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
            (updatePayload || (updatePayload = {}))[_propKey] = null;

            if (!removedKeys) {
              removedKeys = {};
            }

            if (!removedKeys[_propKey]) {
              removedKeys[_propKey] = true;
              removedKeyCount++;
            }
          } else {
            updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig);
          }
        }

        return updatePayload;
      }

      function addProperties(updatePayload, props, validAttributes) {
        return diffProperties(updatePayload, emptyObject, props, validAttributes);
      }

      function clearProperties(updatePayload, prevProps, validAttributes) {
        return diffProperties(updatePayload, prevProps, emptyObject, validAttributes);
      }

      function create(props, validAttributes) {
        return addProperties(null, props, validAttributes);
      }

      function diff(prevProps, nextProps, validAttributes) {
        return diffProperties(null, prevProps, nextProps, validAttributes);
      }

      var PLUGIN_EVENT_SYSTEM = 1;

      var batchedUpdatesImpl = function batchedUpdatesImpl(fn, bookkeeping) {
        return fn(bookkeeping);
      };

      var isInsideEventHandler = false;

      function batchedUpdates(fn, bookkeeping) {
        if (isInsideEventHandler) {
          return fn(bookkeeping);
        }

        isInsideEventHandler = true;

        try {
          return batchedUpdatesImpl(fn, bookkeeping);
        } finally {
          isInsideEventHandler = false;
        }
      }

      function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
      }

      var eventQueue = null;

      var executeDispatchesAndRelease = function executeDispatchesAndRelease(event) {
        if (event) {
          executeDispatchesInOrder(event);

          if (!event.isPersistent()) {
            event.constructor.release(event);
          }
        }
      };

      var executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
        return executeDispatchesAndRelease(e);
      };

      function runEventsInBatch(events) {
        if (events !== null) {
          eventQueue = accumulateInto(eventQueue, events);
        }

        var processingEventQueue = eventQueue;
        eventQueue = null;

        if (!processingEventQueue) {
          return;
        }

        forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);

        if (!!eventQueue) {
          throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
        }

        rethrowCaughtError();
      }

      function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
        var events = null;

        for (var i = 0; i < plugins.length; i++) {
          var possiblePlugin = plugins[i];

          if (possiblePlugin) {
            var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);

            if (extractedEvents) {
              events = accumulateInto(events, extractedEvents);
            }
          }
        }

        return events;
      }

      function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
        var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        runEventsInBatch(events);
      }

      function dispatchEvent(target, topLevelType, nativeEvent) {
        var targetFiber = target;
        var eventTarget = null;

        if (targetFiber != null) {
          var stateNode = targetFiber.stateNode;

          if (stateNode != null) {
            eventTarget = stateNode.canonical;
          }
        }

        batchedUpdates(function () {
          runExtractedPluginEventsInBatch(topLevelType, targetFiber, nativeEvent, eventTarget, PLUGIN_EVENT_SYSTEM);
        });
      }

      function shim() {
        {
          throw Error("The current renderer does not support mutation. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      var supportsMutation = false;
      var commitMount = shim;

      function shim$1() {
        {
          throw Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      var isSuspenseInstancePending = shim$1;
      var isSuspenseInstanceFallback = shim$1;
      var hydrateTextInstance = shim$1;
      var _nativeFabricUIManage = nativeFabricUIManager,
          createNode = _nativeFabricUIManage.createNode,
          cloneNode = _nativeFabricUIManage.cloneNode,
          cloneNodeWithNewChildren = _nativeFabricUIManage.cloneNodeWithNewChildren,
          cloneNodeWithNewChildrenAndProps = _nativeFabricUIManage.cloneNodeWithNewChildrenAndProps,
          cloneNodeWithNewProps = _nativeFabricUIManage.cloneNodeWithNewProps,
          createChildNodeSet = _nativeFabricUIManage.createChildSet,
          appendChildNode = _nativeFabricUIManage.appendChild,
          appendChildNodeToSet = _nativeFabricUIManage.appendChildToSet,
          completeRoot = _nativeFabricUIManage.completeRoot,
          registerEventHandler = _nativeFabricUIManage.registerEventHandler,
          fabricMeasure = _nativeFabricUIManage.measure,
          fabricMeasureInWindow = _nativeFabricUIManage.measureInWindow,
          fabricMeasureLayout = _nativeFabricUIManage.measureLayout;
      var getViewConfigForType = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get;
      var nextReactTag = 2;

      if (registerEventHandler) {
        registerEventHandler(dispatchEvent);
      }

      var ReactFabricHostComponent = function () {
        function ReactFabricHostComponent(tag, viewConfig, props, internalInstanceHandle) {
          this._nativeTag = tag;
          this.viewConfig = viewConfig;
          this.currentProps = props;
          this._internalInstanceHandle = internalInstanceHandle;
        }

        var _proto = ReactFabricHostComponent.prototype;

        _proto.blur = function blur() {
          ReactNativePrivateInterface.TextInputState.blurTextInput(this);
        };

        _proto.focus = function focus() {
          ReactNativePrivateInterface.TextInputState.focusTextInput(this);
        };

        _proto.measure = function measure(callback) {
          fabricMeasure(this._internalInstanceHandle.stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
        };

        _proto.measureInWindow = function measureInWindow(callback) {
          fabricMeasureInWindow(this._internalInstanceHandle.stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
        };

        _proto.measureLayout = function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          if (typeof relativeToNativeNode === "number" || !(relativeToNativeNode instanceof ReactFabricHostComponent)) {
            {
              error("Warning: ref.measureLayout must be called with a ref to a native component.");
            }
            return;
          }

          fabricMeasureLayout(this._internalInstanceHandle.stateNode.node, relativeToNativeNode._internalInstanceHandle.stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
        };

        _proto.setNativeProps = function setNativeProps(nativeProps) {
          {
            error("Warning: setNativeProps is not currently supported in Fabric");
          }
          return;
        };

        return ReactFabricHostComponent;
      }();

      function appendInitialChild(parentInstance, child) {
        appendChildNode(parentInstance.node, child.node);
      }

      function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var tag = nextReactTag;
        nextReactTag += 2;
        var viewConfig = getViewConfigForType(type);
        {
          for (var key in viewConfig.validAttributes) {
            if (props.hasOwnProperty(key)) {
              ReactNativePrivateInterface.deepFreezeAndThrowOnMutationInDev(props[key]);
            }
          }
        }
        var updatePayload = create(props, viewConfig.validAttributes);
        var node = createNode(tag, viewConfig.uiViewClassName, rootContainerInstance, updatePayload, internalInstanceHandle);
        var component = new ReactFabricHostComponent(tag, viewConfig, props, internalInstanceHandle);
        return {
          node: node,
          canonical: component
        };
      }

      function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        if (!hostContext.isInAParentText) {
          throw Error("Text strings must be rendered within a <Text> component.");
        }

        var tag = nextReactTag;
        nextReactTag += 2;
        var node = createNode(tag, "RCTRawText", rootContainerInstance, {
          text: text
        }, internalInstanceHandle);
        return {
          node: node
        };
      }

      function getRootHostContext(rootContainerInstance) {
        return {
          isInAParentText: false
        };
      }

      function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var prevIsInAParentText = parentHostContext.isInAParentText;
        var isInAParentText = type === "AndroidTextInput" || type === "RCTMultilineTextInputView" || type === "RCTSinglelineTextInputView" || type === "RCTText" || type === "RCTVirtualText";

        if (prevIsInAParentText !== isInAParentText) {
          return {
            isInAParentText: isInAParentText
          };
        } else {
          return parentHostContext;
        }
      }

      function getPublicInstance(instance) {
        return instance.canonical;
      }

      function prepareForCommit(containerInfo) {}

      function prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, hostContext) {
        var viewConfig = instance.canonical.viewConfig;
        var updatePayload = diff(oldProps, newProps, viewConfig.validAttributes);
        instance.canonical.currentProps = newProps;
        return updatePayload;
      }

      function resetAfterCommit(containerInfo) {}

      function shouldDeprioritizeSubtree(type, props) {
        return false;
      }

      function shouldSetTextContent(type, props) {
        return false;
      }

      var scheduleTimeout = setTimeout;
      var cancelTimeout = clearTimeout;
      var noTimeout = -1;

      function cloneInstance(instance, updatePayload, type, oldProps, newProps, internalInstanceHandle, keepChildren, recyclableInstance) {
        var node = instance.node;
        var clone;

        if (keepChildren) {
          if (updatePayload !== null) {
            clone = cloneNodeWithNewProps(node, updatePayload);
          } else {
            clone = cloneNode(node);
          }
        } else {
          if (updatePayload !== null) {
            clone = cloneNodeWithNewChildrenAndProps(node, updatePayload);
          } else {
            clone = cloneNodeWithNewChildren(node);
          }
        }

        return {
          node: clone,
          canonical: instance.canonical
        };
      }

      function cloneHiddenInstance(instance, type, props, internalInstanceHandle) {
        var viewConfig = instance.canonical.viewConfig;
        var node = instance.node;
        var updatePayload = create({
          style: {
            display: "none"
          }
        }, viewConfig.validAttributes);
        return {
          node: cloneNodeWithNewProps(node, updatePayload),
          canonical: instance.canonical
        };
      }

      function cloneHiddenTextInstance(instance, text, internalInstanceHandle) {
        throw new Error("Not yet implemented.");
      }

      function createContainerChildSet(container) {
        return createChildNodeSet(container);
      }

      function appendChildToContainerChildSet(childSet, child) {
        appendChildNodeToSet(childSet, child.node);
      }

      function finalizeContainerChildren(container, newChildren) {
        completeRoot(container, newChildren);
      }

      var loggedTypeFailures = {};

      function checkPropTypes(typeSpecs, values, location, componentName) {
        {
          var has = Function.call.bind(Object.prototype.hasOwnProperty);

          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;

              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }

                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }

              if (error$1 && !(error$1 instanceof Error)) {
                error("%s: type specification of %s" + " `%s` is invalid; the type checker " + "function must return `null` or an `Error` but returned a %s. " + "You may have forgotten to pass an argument to the type checker " + "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " + "shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
              }

              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                error("Failed %s type: %s", location, error$1.message);
              }
            }
          }
        }
      }

      var reactEmoji = "\u269B";
      var warningEmoji = "\u26D4";
      var supportsUserTiming = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function" && typeof performance.measure === "function" && typeof performance.clearMeasures === "function";
      var currentFiber = null;
      var currentPhase = null;
      var currentPhaseFiber = null;
      var isCommitting = false;
      var hasScheduledUpdateInCurrentCommit = false;
      var hasScheduledUpdateInCurrentPhase = false;
      var commitCountInCurrentWorkLoop = 0;
      var effectCountInCurrentCommit = 0;
      var labelsInCurrentCommit = new Set();

      var formatMarkName = function formatMarkName(markName) {
        return reactEmoji + " " + markName;
      };

      var formatLabel = function formatLabel(label, warning) {
        var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
        var suffix = warning ? " Warning: " + warning : "";
        return "" + prefix + label + suffix;
      };

      var beginMark = function beginMark(markName) {
        performance.mark(formatMarkName(markName));
      };

      var clearMark = function clearMark(markName) {
        performance.clearMarks(formatMarkName(markName));
      };

      var endMark = function endMark(label, markName, warning) {
        var formattedMarkName = formatMarkName(markName);
        var formattedLabel = formatLabel(label, warning);

        try {
          performance.measure(formattedLabel, formattedMarkName);
        } catch (err) {}

        performance.clearMarks(formattedMarkName);
        performance.clearMeasures(formattedLabel);
      };

      var getFiberMarkName = function getFiberMarkName(label, debugID) {
        return label + " (#" + debugID + ")";
      };

      var getFiberLabel = function getFiberLabel(componentName, isMounted, phase) {
        if (phase === null) {
          return componentName + " [" + (isMounted ? "update" : "mount") + "]";
        } else {
          return componentName + "." + phase;
        }
      };

      var beginFiberMark = function beginFiberMark(fiber, phase) {
        var componentName = getComponentName(fiber.type) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);

        if (isCommitting && labelsInCurrentCommit.has(label)) {
          return false;
        }

        labelsInCurrentCommit.add(label);
        var markName = getFiberMarkName(label, debugID);
        beginMark(markName);
        return true;
      };

      var clearFiberMark = function clearFiberMark(fiber, phase) {
        var componentName = getComponentName(fiber.type) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        var markName = getFiberMarkName(label, debugID);
        clearMark(markName);
      };

      var endFiberMark = function endFiberMark(fiber, phase, warning) {
        var componentName = getComponentName(fiber.type) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        var markName = getFiberMarkName(label, debugID);
        endMark(label, markName, warning);
      };

      var shouldIgnoreFiber = function shouldIgnoreFiber(fiber) {
        switch (fiber.tag) {
          case HostRoot:
          case HostComponent:
          case HostText:
          case HostPortal:
          case Fragment:
          case ContextProvider:
          case ContextConsumer:
          case Mode:
            return true;

          default:
            return false;
        }
      };

      var clearPendingPhaseMeasurement = function clearPendingPhaseMeasurement() {
        if (currentPhase !== null && currentPhaseFiber !== null) {
          clearFiberMark(currentPhaseFiber, currentPhase);
        }

        currentPhaseFiber = null;
        currentPhase = null;
        hasScheduledUpdateInCurrentPhase = false;
      };

      var pauseTimers = function pauseTimers() {
        var fiber = currentFiber;

        while (fiber) {
          if (fiber._debugIsCurrentlyTiming) {
            endFiberMark(fiber, null, null);
          }

          fiber = fiber.return;
        }
      };

      var resumeTimersRecursively = function resumeTimersRecursively(fiber) {
        if (fiber.return !== null) {
          resumeTimersRecursively(fiber.return);
        }

        if (fiber._debugIsCurrentlyTiming) {
          beginFiberMark(fiber, null);
        }
      };

      var resumeTimers = function resumeTimers() {
        if (currentFiber !== null) {
          resumeTimersRecursively(currentFiber);
        }
      };

      function recordEffect() {
        {
          effectCountInCurrentCommit++;
        }
      }

      function recordScheduleUpdate() {
        {
          if (isCommitting) {
            hasScheduledUpdateInCurrentCommit = true;
          }

          if (currentPhase !== null && currentPhase !== "componentWillMount" && currentPhase !== "componentWillReceiveProps") {
            hasScheduledUpdateInCurrentPhase = true;
          }
        }
      }

      function startWorkTimer(fiber) {
        {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          currentFiber = fiber;

          if (!beginFiberMark(fiber, null)) {
            return;
          }

          fiber._debugIsCurrentlyTiming = true;
        }
      }

      function cancelWorkTimer(fiber) {
        {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          fiber._debugIsCurrentlyTiming = false;
          clearFiberMark(fiber, null);
        }
      }

      function stopWorkTimer(fiber) {
        {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          currentFiber = fiber.return;

          if (!fiber._debugIsCurrentlyTiming) {
            return;
          }

          fiber._debugIsCurrentlyTiming = false;
          endFiberMark(fiber, null, null);
        }
      }

      function stopFailedWorkTimer(fiber) {
        {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          currentFiber = fiber.return;

          if (!fiber._debugIsCurrentlyTiming) {
            return;
          }

          fiber._debugIsCurrentlyTiming = false;
          var warning = fiber.tag === SuspenseComponent ? "Rendering was suspended" : "An error was thrown inside this error boundary";
          endFiberMark(fiber, null, warning);
        }
      }

      function startPhaseTimer(fiber, phase) {
        {
          if (!supportsUserTiming) {
            return;
          }

          clearPendingPhaseMeasurement();

          if (!beginFiberMark(fiber, phase)) {
            return;
          }

          currentPhaseFiber = fiber;
          currentPhase = phase;
        }
      }

      function stopPhaseTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }

          if (currentPhase !== null && currentPhaseFiber !== null) {
            var warning = hasScheduledUpdateInCurrentPhase ? "Scheduled a cascading update" : null;
            endFiberMark(currentPhaseFiber, currentPhase, warning);
          }

          currentPhase = null;
          currentPhaseFiber = null;
        }
      }

      function startWorkLoopTimer(nextUnitOfWork) {
        {
          currentFiber = nextUnitOfWork;

          if (!supportsUserTiming) {
            return;
          }

          commitCountInCurrentWorkLoop = 0;
          beginMark("(React Tree Reconciliation)");
          resumeTimers();
        }
      }

      function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
        {
          if (!supportsUserTiming) {
            return;
          }

          var warning = null;

          if (interruptedBy !== null) {
            if (interruptedBy.tag === HostRoot) {
              warning = "A top-level update interrupted the previous render";
            } else {
              var componentName = getComponentName(interruptedBy.type) || "Unknown";
              warning = "An update to " + componentName + " interrupted the previous render";
            }
          } else if (commitCountInCurrentWorkLoop > 1) {
            warning = "There were cascading updates";
          }

          commitCountInCurrentWorkLoop = 0;
          var label = didCompleteRoot ? "(React Tree Reconciliation: Completed Root)" : "(React Tree Reconciliation: Yielded)";
          pauseTimers();
          endMark(label, "(React Tree Reconciliation)", warning);
        }
      }

      function startCommitTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }

          isCommitting = true;
          hasScheduledUpdateInCurrentCommit = false;
          labelsInCurrentCommit.clear();
          beginMark("(Committing Changes)");
        }
      }

      function stopCommitTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }

          var warning = null;

          if (hasScheduledUpdateInCurrentCommit) {
            warning = "Lifecycle hook scheduled a cascading update";
          } else if (commitCountInCurrentWorkLoop > 0) {
            warning = "Caused by a cascading update in earlier commit";
          }

          hasScheduledUpdateInCurrentCommit = false;
          commitCountInCurrentWorkLoop++;
          isCommitting = false;
          labelsInCurrentCommit.clear();
          endMark("(Committing Changes)", "(Committing Changes)", warning);
        }
      }

      function startCommitSnapshotEffectsTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }

          effectCountInCurrentCommit = 0;
          beginMark("(Committing Snapshot Effects)");
        }
      }

      function stopCommitSnapshotEffectsTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }

          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark("(Committing Snapshot Effects: " + count + " Total)", "(Committing Snapshot Effects)", null);
        }
      }

      function startCommitHostEffectsTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }

          effectCountInCurrentCommit = 0;
          beginMark("(Committing Host Effects)");
        }
      }

      function stopCommitHostEffectsTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }

          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark("(Committing Host Effects: " + count + " Total)", "(Committing Host Effects)", null);
        }
      }

      function startCommitLifeCyclesTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }

          effectCountInCurrentCommit = 0;
          beginMark("(Calling Lifecycle Methods)");
        }
      }

      function stopCommitLifeCyclesTimer() {
        {
          if (!supportsUserTiming) {
            return;
          }

          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark("(Calling Lifecycle Methods: " + count + " Total)", "(Calling Lifecycle Methods)", null);
        }
      }

      var valueStack = [];
      var fiberStack;
      {
        fiberStack = [];
      }
      var index = -1;

      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }

      function pop(cursor, fiber) {
        if (index < 0) {
          {
            error("Unexpected pop.");
          }
          return;
        }

        {
          if (fiber !== fiberStack[index]) {
            error("Unexpected Fiber popped.");
          }
        }
        cursor.current = valueStack[index];
        valueStack[index] = null;
        {
          fiberStack[index] = null;
        }
        index--;
      }

      function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        {
          fiberStack[index] = fiber;
        }
        cursor.current = value;
      }

      var warnedAboutMissingGetChildContext;
      {
        warnedAboutMissingGetChildContext = {};
      }
      var emptyContextObject = {};
      {
        Object.freeze(emptyContextObject);
      }
      var contextStackCursor = createCursor(emptyContextObject);
      var didPerformWorkStackCursor = createCursor(false);
      var previousContext = emptyContextObject;

      function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        {
          if (didPushOwnContextIfProvider && isContextProvider(Component)) {
            return previousContext;
          }

          return contextStackCursor.current;
        }
      }

      function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        {
          var instance = workInProgress.stateNode;
          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
          instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
      }

      function getMaskedContext(workInProgress, unmaskedContext) {
        {
          var type = workInProgress.type;
          var contextTypes = type.contextTypes;

          if (!contextTypes) {
            return emptyContextObject;
          }

          var instance = workInProgress.stateNode;

          if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
            return instance.__reactInternalMemoizedMaskedChildContext;
          }

          var context = {};

          for (var key in contextTypes) {
            context[key] = unmaskedContext[key];
          }

          {
            var name = getComponentName(type) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
          }

          if (instance) {
            cacheContext(workInProgress, unmaskedContext, context);
          }

          return context;
        }
      }

      function hasContextChanged() {
        {
          return didPerformWorkStackCursor.current;
        }
      }

      function isContextProvider(type) {
        {
          var childContextTypes = type.childContextTypes;
          return childContextTypes !== null && childContextTypes !== undefined;
        }
      }

      function popContext(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }

      function popTopLevelContextObject(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }

      function pushTopLevelContextObject(fiber, context, didChange) {
        {
          if (!(contextStackCursor.current === emptyContextObject)) {
            throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
          }

          push(contextStackCursor, context, fiber);
          push(didPerformWorkStackCursor, didChange, fiber);
        }
      }

      function processChildContext(fiber, type, parentContext) {
        {
          var instance = fiber.stateNode;
          var childContextTypes = type.childContextTypes;

          if (typeof instance.getChildContext !== "function") {
            {
              var componentName = getComponentName(type) || "Unknown";

              if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method " + "on the instance. You can either define getChildContext() on %s or remove " + "childContextTypes from it.", componentName, componentName);
              }
            }
            return parentContext;
          }

          var childContext;
          startPhaseTimer(fiber, "getChildContext");
          childContext = instance.getChildContext();
          stopPhaseTimer();

          for (var contextKey in childContext) {
            if (!(contextKey in childContextTypes)) {
              throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
            }
          }

          {
            var name = getComponentName(type) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return Object.assign({}, parentContext, {}, childContext);
        }
      }

      function pushContextProvider(workInProgress) {
        {
          var instance = workInProgress.stateNode;
          var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
          previousContext = contextStackCursor.current;
          push(contextStackCursor, memoizedMergedChildContext, workInProgress);
          push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
          return true;
        }
      }

      function invalidateContextProvider(workInProgress, type, didChange) {
        {
          var instance = workInProgress.stateNode;

          if (!instance) {
            throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
          }

          if (didChange) {
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress);
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
          } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
          }
        }
      }

      function findCurrentUnmaskedContext(fiber) {
        {
          if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
            throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
          }

          var node = fiber;

          do {
            switch (node.tag) {
              case HostRoot:
                return node.stateNode.context;

              case ClassComponent:
                {
                  var Component = node.type;

                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }

                  break;
                }
            }

            node = node.return;
          } while (node !== null);

          {
            throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }

      var LegacyRoot = 0;
      var BlockingRoot = 1;
      var ConcurrentRoot = 2;
      var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
          Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
          Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
          Scheduler_shouldYield = Scheduler.unstable_shouldYield,
          Scheduler_requestPaint = Scheduler.unstable_requestPaint,
          Scheduler_now = Scheduler.unstable_now,
          Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
          Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
          Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
          Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
          Scheduler_LowPriority = Scheduler.unstable_LowPriority,
          Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
      {
        if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
          throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling");
        }
      }
      var fakeCallbackNode = {};
      var ImmediatePriority = 99;
      var UserBlockingPriority = 98;
      var NormalPriority = 97;
      var LowPriority = 96;
      var IdlePriority = 95;
      var NoPriority = 90;
      var shouldYield = Scheduler_shouldYield;
      var requestPaint = Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
      var syncQueue = null;
      var immediateQueueCallbackNode = null;
      var isFlushingSyncQueue = false;
      var initialTimeMs = Scheduler_now();
      var now = initialTimeMs < 10000 ? Scheduler_now : function () {
        return Scheduler_now() - initialTimeMs;
      };

      function getCurrentPriorityLevel() {
        switch (Scheduler_getCurrentPriorityLevel()) {
          case Scheduler_ImmediatePriority:
            return ImmediatePriority;

          case Scheduler_UserBlockingPriority:
            return UserBlockingPriority;

          case Scheduler_NormalPriority:
            return NormalPriority;

          case Scheduler_LowPriority:
            return LowPriority;

          case Scheduler_IdlePriority:
            return IdlePriority;

          default:
            {
              throw Error("Unknown priority level.");
            }
        }
      }

      function reactPriorityToSchedulerPriority(reactPriorityLevel) {
        switch (reactPriorityLevel) {
          case ImmediatePriority:
            return Scheduler_ImmediatePriority;

          case UserBlockingPriority:
            return Scheduler_UserBlockingPriority;

          case NormalPriority:
            return Scheduler_NormalPriority;

          case LowPriority:
            return Scheduler_LowPriority;

          case IdlePriority:
            return Scheduler_IdlePriority;

          default:
            {
              throw Error("Unknown priority level.");
            }
        }
      }

      function runWithPriority(reactPriorityLevel, fn) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_runWithPriority(priorityLevel, fn);
      }

      function scheduleCallback(reactPriorityLevel, callback, options) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_scheduleCallback(priorityLevel, callback, options);
      }

      function scheduleSyncCallback(callback) {
        if (syncQueue === null) {
          syncQueue = [callback];
          immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
        } else {
          syncQueue.push(callback);
        }

        return fakeCallbackNode;
      }

      function cancelCallback(callbackNode) {
        if (callbackNode !== fakeCallbackNode) {
          Scheduler_cancelCallback(callbackNode);
        }
      }

      function flushSyncCallbackQueue() {
        if (immediateQueueCallbackNode !== null) {
          var node = immediateQueueCallbackNode;
          immediateQueueCallbackNode = null;
          Scheduler_cancelCallback(node);
        }

        flushSyncCallbackQueueImpl();
      }

      function flushSyncCallbackQueueImpl() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
          isFlushingSyncQueue = true;
          var i = 0;

          try {
            var _isSync = true;
            var queue = syncQueue;
            runWithPriority(ImmediatePriority, function () {
              for (; i < queue.length; i++) {
                var callback = queue[i];

                do {
                  callback = callback(_isSync);
                } while (callback !== null);
              }
            });
            syncQueue = null;
          } catch (error) {
            if (syncQueue !== null) {
              syncQueue = syncQueue.slice(i + 1);
            }

            Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
            throw error;
          } finally {
            isFlushingSyncQueue = false;
          }
        }
      }

      var NoMode = 0;
      var StrictMode = 1;
      var BlockingMode = 2;
      var ConcurrentMode = 4;
      var ProfileMode = 8;
      var MAX_SIGNED_31_BIT_INT = 1073741823;
      var NoWork = 0;
      var Never = 1;
      var Idle = 2;
      var Sync = MAX_SIGNED_31_BIT_INT;
      var Batched = Sync - 1;
      var UNIT_SIZE = 10;
      var MAGIC_NUMBER_OFFSET = Batched - 1;

      function msToExpirationTime(ms) {
        return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
      }

      function expirationTimeToMs(expirationTime) {
        return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
      }

      function ceiling(num, precision) {
        return ((num / precision | 0) + 1) * precision;
      }

      function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
        return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
      }

      var LOW_PRIORITY_EXPIRATION = 5000;
      var LOW_PRIORITY_BATCH_SIZE = 250;

      function computeAsyncExpiration(currentTime) {
        return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
      }

      function computeSuspenseExpiration(currentTime, timeoutMs) {
        return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
      }

      var HIGH_PRIORITY_EXPIRATION = 500;
      var HIGH_PRIORITY_BATCH_SIZE = 100;

      function computeInteractiveExpiration(currentTime) {
        return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
      }

      function inferPriorityFromExpirationTime(currentTime, expirationTime) {
        if (expirationTime === Sync) {
          return ImmediatePriority;
        }

        if (expirationTime === Never || expirationTime === Idle) {
          return IdlePriority;
        }

        var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);

        if (msUntil <= 0) {
          return ImmediatePriority;
        }

        if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
          return UserBlockingPriority;
        }

        if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
          return NormalPriority;
        }

        return IdlePriority;
      }

      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }

      var objectIs = typeof Object.is === "function" ? Object.is : is;
      var hasOwnProperty = Object.prototype.hasOwnProperty;

      function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) {
          return true;
        }

        if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
          return false;
        }

        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);

        if (keysA.length !== keysB.length) {
          return false;
        }

        for (var i = 0; i < keysA.length; i++) {
          if (!hasOwnProperty.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
            return false;
          }
        }

        return true;
      }

      var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

      function describeComponentFrame(name, source, ownerName) {
        var sourceInfo = "";

        if (source) {
          var path = source.fileName;
          var fileName = path.replace(BEFORE_SLASH_RE, "");
          {
            if (/^index\./.test(fileName)) {
              var match = path.match(BEFORE_SLASH_RE);

              if (match) {
                var pathBeforeSlash = match[1];

                if (pathBeforeSlash) {
                  var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                  fileName = folderName + "/" + fileName;
                }
              }
            }
          }
          sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
        } else if (ownerName) {
          sourceInfo = " (created by " + ownerName + ")";
        }

        return "\n    in " + (name || "Unknown") + sourceInfo;
      }

      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

      function describeFiber(fiber) {
        switch (fiber.tag) {
          case HostRoot:
          case HostPortal:
          case HostText:
          case Fragment:
          case ContextProvider:
          case ContextConsumer:
            return "";

          default:
            var owner = fiber._debugOwner;
            var source = fiber._debugSource;
            var name = getComponentName(fiber.type);
            var ownerName = null;

            if (owner) {
              ownerName = getComponentName(owner.type);
            }

            return describeComponentFrame(name, source, ownerName);
        }
      }

      function getStackByFiberInDevAndProd(workInProgress) {
        var info = "";
        var node = workInProgress;

        do {
          info += describeFiber(node);
          node = node.return;
        } while (node);

        return info;
      }

      var current = null;
      var isRendering = false;

      function getCurrentFiberOwnerNameInDevOrNull() {
        {
          if (current === null) {
            return null;
          }

          var owner = current._debugOwner;

          if (owner !== null && typeof owner !== "undefined") {
            return getComponentName(owner.type);
          }
        }
        return null;
      }

      function getCurrentFiberStackInDev() {
        {
          if (current === null) {
            return "";
          }

          return getStackByFiberInDevAndProd(current);
        }
      }

      function resetCurrentFiber() {
        {
          ReactDebugCurrentFrame.getCurrentStack = null;
          current = null;
          isRendering = false;
        }
      }

      function setCurrentFiber(fiber) {
        {
          ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
          current = fiber;
          isRendering = false;
        }
      }

      function setIsRendering(rendering) {
        {
          isRendering = rendering;
        }
      }

      var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function recordUnsafeLifecycleWarnings(fiber, instance) {},
        flushPendingUnsafeLifecycleWarnings: function flushPendingUnsafeLifecycleWarnings() {},
        recordLegacyContextWarning: function recordLegacyContextWarning(fiber, instance) {},
        flushLegacyContextWarning: function flushLegacyContextWarning() {},
        discardPendingWarnings: function discardPendingWarnings() {}
      };
      {
        var findStrictRoot = function findStrictRoot(fiber) {
          var maybeStrictRoot = null;
          var node = fiber;

          while (node !== null) {
            if (node.mode & StrictMode) {
              maybeStrictRoot = node;
            }

            node = node.return;
          }

          return maybeStrictRoot;
        };

        var setToSortedString = function setToSortedString(set) {
          var array = [];
          set.forEach(function (value) {
            array.push(value);
          });
          return array.sort().join(", ");
        };

        var pendingComponentWillMountWarnings = [];
        var pendingUNSAFE_ComponentWillMountWarnings = [];
        var pendingComponentWillReceivePropsWarnings = [];
        var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        var pendingComponentWillUpdateWarnings = [];
        var pendingUNSAFE_ComponentWillUpdateWarnings = [];
        var didWarnAboutUnsafeLifecycles = new Set();

        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
            return;
          }

          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            pendingComponentWillMountWarnings.push(fiber);
          }

          if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
            pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
          }

          if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            pendingComponentWillReceivePropsWarnings.push(fiber);
          }

          if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
          }

          if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            pendingComponentWillUpdateWarnings.push(fiber);
          }

          if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
            pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
          }
        };

        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
          var componentWillMountUniqueNames = new Set();

          if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function (fiber) {
              componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
          }

          var UNSAFE_componentWillMountUniqueNames = new Set();

          if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
              UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
          }

          var componentWillReceivePropsUniqueNames = new Set();

          if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
              componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
          }

          var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

          if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
              UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          }

          var componentWillUpdateUniqueNames = new Set();

          if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function (fiber) {
              componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
          }

          var UNSAFE_componentWillUpdateUniqueNames = new Set();

          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
              UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
          }

          if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. " + "See https://fb.me/react-unsafe-component-lifecycles for details.\n\n" + "* Move code with side effects to componentDidMount, and set initial state in the constructor.\n" + "\nPlease update the following components: %s", sortedNames);
          }

          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended " + "and may indicate bugs in your code. " + "See https://fb.me/react-unsafe-component-lifecycles for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "* If you're updating state whenever props change, " + "refactor your code to use memoization techniques or move it to " + "static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n" + "\nPlease update the following components: %s", _sortedNames);
          }

          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended " + "and may indicate bugs in your code. " + "See https://fb.me/react-unsafe-component-lifecycles for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "\nPlease update the following components: %s", _sortedNames2);
          }

          if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

            warn("componentWillMount has been renamed, and is not recommended for use. " + "See https://fb.me/react-unsafe-component-lifecycles for details.\n\n" + "* Move code with side effects to componentDidMount, and set initial state in the constructor.\n" + "* Rename componentWillMount to UNSAFE_componentWillMount to suppress " + "this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + "\nPlease update the following components: %s", _sortedNames3);
          }

          if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

            warn("componentWillReceiveProps has been renamed, and is not recommended for use. " + "See https://fb.me/react-unsafe-component-lifecycles for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "* If you're updating state whenever props change, refactor your " + "code to use memoization techniques or move it to " + "static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n" + "* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress " + "this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + "\nPlease update the following components: %s", _sortedNames4);
          }

          if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

            warn("componentWillUpdate has been renamed, and is not recommended for use. " + "See https://fb.me/react-unsafe-component-lifecycles for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress " + "this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + "\nPlease update the following components: %s", _sortedNames5);
          }
        };

        var pendingLegacyContextWarning = new Map();
        var didWarnAboutLegacyContext = new Set();

        ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
          var strictRoot = findStrictRoot(fiber);

          if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. " + "This error is likely caused by a bug in React. Please file an issue.");
            return;
          }

          if (didWarnAboutLegacyContext.has(fiber.type)) {
            return;
          }

          var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

          if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
            if (warningsForRoot === undefined) {
              warningsForRoot = [];
              pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }

            warningsForRoot.push(fiber);
          }
        };

        ReactStrictModeWarnings.flushLegacyContextWarning = function () {
          pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
            if (fiberArray.length === 0) {
              return;
            }

            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function (fiber) {
              uniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            var firstComponentStack = getStackByFiberInDevAndProd(firstFiber);
            error("Legacy context API has been detected within a strict-mode tree." + "\n\nThe old API will be supported in all 16.x releases, but applications " + "using it should migrate to the new version." + "\n\nPlease update the following components: %s" + "\n\nLearn more about this warning here: https://fb.me/react-legacy-context" + "%s", sortedNames, firstComponentStack);
          });
        };

        ReactStrictModeWarnings.discardPendingWarnings = function () {
          pendingComponentWillMountWarnings = [];
          pendingUNSAFE_ComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
          pendingLegacyContextWarning = new Map();
        };
      }
      var resolveFamily = null;
      var failedBoundaries = null;

      var setRefreshHandler = function setRefreshHandler(handler) {
        {
          resolveFamily = handler;
        }
      };

      function resolveFunctionForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }

          var family = resolveFamily(type);

          if (family === undefined) {
            return type;
          }

          return family.current;
        }
      }

      function resolveClassForHotReloading(type) {
        return resolveFunctionForHotReloading(type);
      }

      function resolveForwardRefForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }

          var family = resolveFamily(type);

          if (family === undefined) {
            if (type !== null && type !== undefined && typeof type.render === "function") {
              var currentRender = resolveFunctionForHotReloading(type.render);

              if (type.render !== currentRender) {
                var syntheticType = {
                  $$typeof: REACT_FORWARD_REF_TYPE,
                  render: currentRender
                };

                if (type.displayName !== undefined) {
                  syntheticType.displayName = type.displayName;
                }

                return syntheticType;
              }
            }

            return type;
          }

          return family.current;
        }
      }

      function isCompatibleFamilyForHotReloading(fiber, element) {
        {
          if (resolveFamily === null) {
            return false;
          }

          var prevType = fiber.elementType;
          var nextType = element.type;
          var needsCompareFamilies = false;
          var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;

          switch (fiber.tag) {
            case ClassComponent:
              {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }

                break;
              }

            case FunctionComponent:
              {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }

                break;
              }

            case ForwardRef:
              {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }

                break;
              }

            case MemoComponent:
            case SimpleMemoComponent:
              {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }

                break;
              }

            default:
              return false;
          }

          if (needsCompareFamilies) {
            var prevFamily = resolveFamily(prevType);

            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
              return true;
            }
          }

          return false;
        }
      }

      function markFailedErrorBoundaryForHotReloading(fiber) {
        {
          if (resolveFamily === null) {
            return;
          }

          if (typeof WeakSet !== "function") {
            return;
          }

          if (failedBoundaries === null) {
            failedBoundaries = new WeakSet();
          }

          failedBoundaries.add(fiber);
        }
      }

      var scheduleRefresh = function scheduleRefresh(root, update) {
        {
          if (resolveFamily === null) {
            return;
          }

          var staleFamilies = update.staleFamilies,
              updatedFamilies = update.updatedFamilies;
          flushPassiveEffects();
          flushSync(function () {
            scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
          });
        }
      };

      var scheduleRoot = function scheduleRoot(root, element) {
        {
          if (root.context !== emptyContextObject) {
            return;
          }

          flushPassiveEffects();
          syncUpdates(function () {
            updateContainer(element, root, null, null);
          });
        }
      };

      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        {
          var alternate = fiber.alternate,
              child = fiber.child,
              sibling = fiber.sibling,
              tag = fiber.tag,
              type = fiber.type;
          var candidateType = null;

          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;

            case ForwardRef:
              candidateType = type.render;
              break;
          }

          if (resolveFamily === null) {
            throw new Error("Expected resolveFamily to be set during hot reload.");
          }

          var needsRender = false;
          var needsRemount = false;

          if (candidateType !== null) {
            var family = resolveFamily(candidateType);

            if (family !== undefined) {
              if (staleFamilies.has(family)) {
                needsRemount = true;
              } else if (updatedFamilies.has(family)) {
                if (tag === ClassComponent) {
                  needsRemount = true;
                } else {
                  needsRender = true;
                }
              }
            }
          }

          if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
              needsRemount = true;
            }
          }

          if (needsRemount) {
            fiber._debugNeedsRemount = true;
          }

          if (needsRemount || needsRender) {
            scheduleWork(fiber, Sync);
          }

          if (child !== null && !needsRemount) {
            scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
          }

          if (sibling !== null) {
            scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
          }
        }
      }

      var findHostInstancesForRefresh = function findHostInstancesForRefresh(root, families) {
        {
          var hostInstances = new Set();
          var types = new Set(families.map(function (family) {
            return family.current;
          }));
          findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
          return hostInstances;
        }
      };

      function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        {
          var child = fiber.child,
              sibling = fiber.sibling,
              tag = fiber.tag,
              type = fiber.type;
          var candidateType = null;

          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;

            case ForwardRef:
              candidateType = type.render;
              break;
          }

          var didMatch = false;

          if (candidateType !== null) {
            if (types.has(candidateType)) {
              didMatch = true;
            }
          }

          if (didMatch) {
            findHostInstancesForFiberShallowly(fiber, hostInstances);
          } else {
            if (child !== null) {
              findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
            }
          }

          if (sibling !== null) {
            findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
          }
        }
      }

      function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

          if (foundHostInstances) {
            return;
          }

          var node = fiber;

          while (true) {
            switch (node.tag) {
              case HostComponent:
                hostInstances.add(node.stateNode);
                return;

              case HostPortal:
                hostInstances.add(node.stateNode.containerInfo);
                return;

              case HostRoot:
                hostInstances.add(node.stateNode.containerInfo);
                return;
            }

            if (node.return === null) {
              throw new Error("Expected to reach root first.");
            }

            node = node.return;
          }
        }
      }

      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var node = fiber;
          var foundHostInstances = false;

          while (true) {
            if (node.tag === HostComponent) {
              foundHostInstances = true;
              hostInstances.add(node.stateNode);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            if (node === fiber) {
              return foundHostInstances;
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === fiber) {
                return foundHostInstances;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        return false;
      }

      function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
          var props = Object.assign({}, baseProps);
          var defaultProps = Component.defaultProps;

          for (var propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }

          return props;
        }

        return baseProps;
      }

      function readLazyComponentType(lazyComponent) {
        initializeLazyComponentType(lazyComponent);

        if (lazyComponent._status !== Resolved) {
          throw lazyComponent._result;
        }

        return lazyComponent._result;
      }

      var valueCursor = createCursor(null);
      var rendererSigil;
      {
        rendererSigil = {};
      }
      var currentlyRenderingFiber = null;
      var lastContextDependency = null;
      var lastContextWithAllBitsObserved = null;
      var isDisallowedContextReadInDEV = false;

      function resetContextDependencies() {
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        {
          isDisallowedContextReadInDEV = false;
        }
      }

      function enterDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = true;
        }
      }

      function exitDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = false;
        }
      }

      function pushProvider(providerFiber, nextValue) {
        var context = providerFiber.type._context;
        {
          push(valueCursor, context._currentValue2, providerFiber);
          context._currentValue2 = nextValue;
          {
            if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
              error("Detected multiple renderers concurrently rendering the " + "same context provider. This is currently unsupported.");
            }

            context._currentRenderer2 = rendererSigil;
          }
        }
      }

      function popProvider(providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        var context = providerFiber.type._context;
        {
          context._currentValue2 = currentValue;
        }
      }

      function calculateChangedBits(context, newValue, oldValue) {
        if (objectIs(oldValue, newValue)) {
          return 0;
        } else {
          var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
          {
            if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
              error("calculateChangedBits: Expected the return value to be a " + "31-bit integer. Instead received: %s", changedBits);
            }
          }
          return changedBits | 0;
        }
      }

      function scheduleWorkOnParentPath(parent, renderExpirationTime) {
        var node = parent;

        while (node !== null) {
          var alternate = node.alternate;

          if (node.childExpirationTime < renderExpirationTime) {
            node.childExpirationTime = renderExpirationTime;

            if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
              alternate.childExpirationTime = renderExpirationTime;
            }
          } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
            alternate.childExpirationTime = renderExpirationTime;
          } else {
            break;
          }

          node = node.return;
        }
      }

      function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
        var fiber = workInProgress.child;

        if (fiber !== null) {
          fiber.return = workInProgress;
        }

        while (fiber !== null) {
          var nextFiber = void 0;
          var list = fiber.dependencies;

          if (list !== null) {
            nextFiber = fiber.child;
            var dependency = list.firstContext;

            while (dependency !== null) {
              if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                if (fiber.tag === ClassComponent) {
                  var update = createUpdate(renderExpirationTime, null);
                  update.tag = ForceUpdate;
                  enqueueUpdate(fiber, update);
                }

                if (fiber.expirationTime < renderExpirationTime) {
                  fiber.expirationTime = renderExpirationTime;
                }

                var alternate = fiber.alternate;

                if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
                  alternate.expirationTime = renderExpirationTime;
                }

                scheduleWorkOnParentPath(fiber.return, renderExpirationTime);

                if (list.expirationTime < renderExpirationTime) {
                  list.expirationTime = renderExpirationTime;
                }

                break;
              }

              dependency = dependency.next;
            }
          } else if (fiber.tag === ContextProvider) {
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
          } else {
            nextFiber = fiber.child;
          }

          if (nextFiber !== null) {
            nextFiber.return = fiber;
          } else {
            nextFiber = fiber;

            while (nextFiber !== null) {
              if (nextFiber === workInProgress) {
                nextFiber = null;
                break;
              }

              var sibling = nextFiber.sibling;

              if (sibling !== null) {
                sibling.return = nextFiber.return;
                nextFiber = sibling;
                break;
              }

              nextFiber = nextFiber.return;
            }
          }

          fiber = nextFiber;
        }
      }

      function prepareToReadContext(workInProgress, renderExpirationTime) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        var dependencies = workInProgress.dependencies;

        if (dependencies !== null) {
          var firstContext = dependencies.firstContext;

          if (firstContext !== null) {
            if (dependencies.expirationTime >= renderExpirationTime) {
              markWorkInProgressReceivedUpdate();
            }

            dependencies.firstContext = null;
          }
        }
      }

      function _readContext(context, observedBits) {
        {
          if (isDisallowedContextReadInDEV) {
            error("Context can only be read while React is rendering. " + "In classes, you can read it in the render method or getDerivedStateFromProps. " + "In function components, you can read it directly in the function body, but not " + "inside Hooks like useReducer() or useMemo().");
          }
        }
        if (lastContextWithAllBitsObserved === context) ;else if (observedBits === false || observedBits === 0) ;else {
          var resolvedObservedBits;

          if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
            lastContextWithAllBitsObserved = context;
            resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
          } else {
            resolvedObservedBits = observedBits;
          }

          var contextItem = {
            context: context,
            observedBits: resolvedObservedBits,
            next: null
          };

          if (lastContextDependency === null) {
            if (!(currentlyRenderingFiber !== null)) {
              throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }

            lastContextDependency = contextItem;
            currentlyRenderingFiber.dependencies = {
              expirationTime: NoWork,
              firstContext: contextItem,
              responders: null
            };
          } else {
            lastContextDependency = lastContextDependency.next = contextItem;
          }
        }
        return context._currentValue2;
      }

      var UpdateState = 0;
      var ReplaceState = 1;
      var ForceUpdate = 2;
      var CaptureUpdate = 3;
      var hasForceUpdate = false;
      var didWarnUpdateInsideUpdate;
      var currentlyProcessingQueue;
      {
        didWarnUpdateInsideUpdate = false;
        currentlyProcessingQueue = null;
      }

      function initializeUpdateQueue(fiber) {
        var queue = {
          baseState: fiber.memoizedState,
          baseQueue: null,
          shared: {
            pending: null
          },
          effects: null
        };
        fiber.updateQueue = queue;
      }

      function cloneUpdateQueue(current, workInProgress) {
        var queue = workInProgress.updateQueue;
        var currentQueue = current.updateQueue;

        if (queue === currentQueue) {
          var clone = {
            baseState: currentQueue.baseState,
            baseQueue: currentQueue.baseQueue,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress.updateQueue = clone;
        }
      }

      function createUpdate(expirationTime, suspenseConfig) {
        var update = {
          expirationTime: expirationTime,
          suspenseConfig: suspenseConfig,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null
        };
        update.next = update;
        {
          update.priority = getCurrentPriorityLevel();
        }
        return update;
      }

      function enqueueUpdate(fiber, update) {
        var updateQueue = fiber.updateQueue;

        if (updateQueue === null) {
          return;
        }

        var sharedQueue = updateQueue.shared;
        var pending = sharedQueue.pending;

        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }

        sharedQueue.pending = update;
        {
          if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled " + "from inside an update function. Update functions should be pure, " + "with zero side-effects. Consider using componentDidUpdate or a " + "callback.");
            didWarnUpdateInsideUpdate = true;
          }
        }
      }

      function enqueueCapturedUpdate(workInProgress, update) {
        var current = workInProgress.alternate;

        if (current !== null) {
          cloneUpdateQueue(current, workInProgress);
        }

        var queue = workInProgress.updateQueue;
        var last = queue.baseQueue;

        if (last === null) {
          queue.baseQueue = update.next = update;
          update.next = update;
        } else {
          update.next = last.next;
          last.next = update;
        }
      }

      function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch (update.tag) {
          case ReplaceState:
            {
              var payload = update.payload;

              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }

              return payload;
            }

          case CaptureUpdate:
            {
              workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
            }

          case UpdateState:
            {
              var _payload = update.payload;
              var partialState;

              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }

              if (partialState === null || partialState === undefined) {
                return prevState;
              }

              return Object.assign({}, prevState, partialState);
            }

          case ForceUpdate:
            {
              hasForceUpdate = true;
              return prevState;
            }
        }

        return prevState;
      }

      function processUpdateQueue(workInProgress, props, instance, renderExpirationTime) {
        var queue = workInProgress.updateQueue;
        hasForceUpdate = false;
        {
          currentlyProcessingQueue = queue.shared;
        }
        var baseQueue = queue.baseQueue;
        var pendingQueue = queue.shared.pending;

        if (pendingQueue !== null) {
          if (baseQueue !== null) {
            var baseFirst = baseQueue.next;
            var pendingFirst = pendingQueue.next;
            baseQueue.next = pendingFirst;
            pendingQueue.next = baseFirst;
          }

          baseQueue = pendingQueue;
          queue.shared.pending = null;
          var current = workInProgress.alternate;

          if (current !== null) {
            var currentQueue = current.updateQueue;

            if (currentQueue !== null) {
              currentQueue.baseQueue = pendingQueue;
            }
          }
        }

        if (baseQueue !== null) {
          var first = baseQueue.next;
          var newState = queue.baseState;
          var newExpirationTime = NoWork;
          var newBaseState = null;
          var newBaseQueueFirst = null;
          var newBaseQueueLast = null;

          if (first !== null) {
            var update = first;

            do {
              var updateExpirationTime = update.expirationTime;

              if (updateExpirationTime < renderExpirationTime) {
                var clone = {
                  expirationTime: update.expirationTime,
                  suspenseConfig: update.suspenseConfig,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };

                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }

                if (updateExpirationTime > newExpirationTime) {
                  newExpirationTime = updateExpirationTime;
                }
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    expirationTime: Sync,
                    suspenseConfig: update.suspenseConfig,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }

                markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);
                newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                var callback = update.callback;

                if (callback !== null) {
                  workInProgress.effectTag |= Callback;
                  var effects = queue.effects;

                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }

              update = update.next;

              if (update === null || update === first) {
                pendingQueue = queue.shared.pending;

                if (pendingQueue === null) {
                  break;
                } else {
                  update = baseQueue.next = pendingQueue.next;
                  pendingQueue.next = first;
                  queue.baseQueue = baseQueue = pendingQueue;
                  queue.shared.pending = null;
                }
              }
            } while (true);
          }

          if (newBaseQueueLast === null) {
            newBaseState = newState;
          } else {
            newBaseQueueLast.next = newBaseQueueFirst;
          }

          queue.baseState = newBaseState;
          queue.baseQueue = newBaseQueueLast;
          markUnprocessedUpdateTime(newExpirationTime);
          workInProgress.expirationTime = newExpirationTime;
          workInProgress.memoizedState = newState;
        }

        {
          currentlyProcessingQueue = null;
        }
      }

      function callCallback(callback, context) {
        if (!(typeof callback === "function")) {
          throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        }

        callback.call(context);
      }

      function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
      }

      function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
      }

      function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;

        if (effects !== null) {
          for (var i = 0; i < effects.length; i++) {
            var effect = effects[i];
            var callback = effect.callback;

            if (callback !== null) {
              effect.callback = null;
              callCallback(callback, instance);
            }
          }
        }
      }

      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;

      function requestCurrentSuspenseConfig() {
        return ReactCurrentBatchConfig.suspense;
      }

      var fakeInternalInstance = {};
      var isArray = Array.isArray;
      var emptyRefsObject = new React.Component().refs;
      var didWarnAboutStateAssignmentForComponent;
      var didWarnAboutUninitializedState;
      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
      var didWarnAboutLegacyLifecyclesAndDerivedState;
      var didWarnAboutUndefinedDerivedState;
      var warnOnUndefinedDerivedState;
      var warnOnInvalidCallback;
      var didWarnAboutDirectlyAssigningPropsToState;
      var didWarnAboutContextTypeAndContextTypes;
      var didWarnAboutInvalidateContextType;
      {
        didWarnAboutStateAssignmentForComponent = new Set();
        didWarnAboutUninitializedState = new Set();
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
        didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
        didWarnAboutDirectlyAssigningPropsToState = new Set();
        didWarnAboutUndefinedDerivedState = new Set();
        didWarnAboutContextTypeAndContextTypes = new Set();
        didWarnAboutInvalidateContextType = new Set();
        var didWarnOnInvalidCallback = new Set();

        warnOnInvalidCallback = function warnOnInvalidCallback(callback, callerName) {
          if (callback === null || typeof callback === "function") {
            return;
          }

          var key = callerName + "_" + callback;

          if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callerName, callback);
          }
        };

        warnOnUndefinedDerivedState = function warnOnUndefinedDerivedState(type, partialState) {
          if (partialState === undefined) {
            var componentName = getComponentName(type) || "Component";

            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
              didWarnAboutUndefinedDerivedState.add(componentName);
              error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. " + "You have returned undefined.", componentName);
            }
          }
        };

        Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: false,
          value: function value() {
            {
              throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          }
        });
        Object.freeze(fakeInternalInstance);
      }

      function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        {
          warnOnUndefinedDerivedState(ctor, partialState);
        }
        var memoizedState = partialState === null || partialState === undefined ? prevState : Object.assign({}, prevState, partialState);
        workInProgress.memoizedState = memoizedState;

        if (workInProgress.expirationTime === NoWork) {
          var updateQueue = workInProgress.updateQueue;
          updateQueue.baseState = memoizedState;
        }
      }

      var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function enqueueSetState(inst, payload, callback) {
          var fiber = get(inst);
          var currentTime = requestCurrentTimeForUpdate();
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
          var update = createUpdate(expirationTime, suspenseConfig);
          update.payload = payload;

          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "setState");
            }
            update.callback = callback;
          }

          enqueueUpdate(fiber, update);
          scheduleWork(fiber, expirationTime);
        },
        enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
          var fiber = get(inst);
          var currentTime = requestCurrentTimeForUpdate();
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
          var update = createUpdate(expirationTime, suspenseConfig);
          update.tag = ReplaceState;
          update.payload = payload;

          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "replaceState");
            }
            update.callback = callback;
          }

          enqueueUpdate(fiber, update);
          scheduleWork(fiber, expirationTime);
        },
        enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
          var fiber = get(inst);
          var currentTime = requestCurrentTimeForUpdate();
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
          var update = createUpdate(expirationTime, suspenseConfig);
          update.tag = ForceUpdate;

          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "forceUpdate");
            }
            update.callback = callback;
          }

          enqueueUpdate(fiber, update);
          scheduleWork(fiber, expirationTime);
        }
      };

      function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;

        if (typeof instance.shouldComponentUpdate === "function") {
          startPhaseTimer(workInProgress, "shouldComponentUpdate");
          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
          stopPhaseTimer();
          {
            if (shouldUpdate === undefined) {
              error("%s.shouldComponentUpdate(): Returned undefined instead of a " + "boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
            }
          }
          return shouldUpdate;
        }

        if (ctor.prototype && ctor.prototype.isPureReactComponent) {
          return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        }

        return true;
      }

      function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        {
          var name = getComponentName(ctor) || "Component";
          var renderPresent = instance.render;

          if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === "function") {
              error("%s(...): No `render` method found on the returned component " + "instance: did you accidentally return an object from the constructor?", name);
            } else {
              error("%s(...): No `render` method found on the returned component " + "instance: you may have forgotten to define `render`.", name);
            }
          }

          if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
            error("getInitialState was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Did you mean to define a state property instead?", name);
          }

          if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Use a static property to define defaultProps instead.", name);
          }

          if (instance.propTypes) {
            error("propTypes was defined as an instance property on %s. Use a static " + "property to define propTypes instead.", name);
          }

          if (instance.contextType) {
            error("contextType was defined as an instance property on %s. Use a static " + "property to define contextType instead.", name);
          }

          {
            if (instance.contextTypes) {
              error("contextTypes was defined as an instance property on %s. Use a static " + "property to define contextTypes instead.", name);
            }

            if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
              didWarnAboutContextTypeAndContextTypes.add(ctor);
              error("%s declares both contextTypes and contextType static properties. " + "The legacy contextTypes property will be ignored.", name);
            }
          }

          if (typeof instance.componentShouldUpdate === "function") {
            error("%s has a method called " + "componentShouldUpdate(). Did you mean shouldComponentUpdate()? " + "The name is phrased as a question because the function is " + "expected to return a value.", name);
          }

          if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
            error("%s has a method called shouldComponentUpdate(). " + "shouldComponentUpdate should not be used when extending React.PureComponent. " + "Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
          }

          if (typeof instance.componentDidUnmount === "function") {
            error("%s has a method called " + "componentDidUnmount(). But there is no such lifecycle method. " + "Did you mean componentWillUnmount()?", name);
          }

          if (typeof instance.componentDidReceiveProps === "function") {
            error("%s has a method called " + "componentDidReceiveProps(). But there is no such lifecycle method. " + "If you meant to update the state in response to changing props, " + "use componentWillReceiveProps(). If you meant to fetch data or " + "run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
          }

          if (typeof instance.componentWillRecieveProps === "function") {
            error("%s has a method called " + "componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
          }

          if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
            error("%s has a method called " + "UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          }

          var hasMutatedProps = instance.props !== newProps;

          if (instance.props !== undefined && hasMutatedProps) {
            error("%s(...): When calling super() in `%s`, make sure to pass " + "up the same props that your component's constructor was passed.", name, name);
          }

          if (instance.defaultProps) {
            error("Setting defaultProps as an instance property on %s is not supported and will be ignored." + " Instead, define defaultProps as a static property on %s.", name, name);
          }

          if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). " + "This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
          }

          if (typeof instance.getDerivedStateFromProps === "function") {
            error("%s: getDerivedStateFromProps() is defined as an instance method " + "and will be ignored. Instead, declare it as a static method.", name);
          }

          if (typeof instance.getDerivedStateFromError === "function") {
            error("%s: getDerivedStateFromError() is defined as an instance method " + "and will be ignored. Instead, declare it as a static method.", name);
          }

          if (typeof ctor.getSnapshotBeforeUpdate === "function") {
            error("%s: getSnapshotBeforeUpdate() is defined as a static method " + "and will be ignored. Instead, declare it as an instance method.", name);
          }

          var _state = instance.state;

          if (_state && (typeof _state !== "object" || isArray(_state))) {
            error("%s.state: must be set to an object or null", name);
          }

          if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
            error("%s.getChildContext(): childContextTypes must be defined in order to " + "use getChildContext().", name);
          }
        }
      }

      function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance;
        set(instance, workInProgress);
        {
          instance._reactInternalInstance = fakeInternalInstance;
        }
      }

      function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        {
          if ("contextType" in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined;

            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
              didWarnAboutInvalidateContextType.add(ctor);
              var addendum = "";

              if (contextType === undefined) {
                addendum = " However, it is set to undefined. " + "This can be caused by a typo or by mixing up named and default imports. " + "This can also happen due to a circular dependency, so " + "try moving the createContext() call to a separate file.";
              } else if (typeof contextType !== "object") {
                addendum = " However, it is set to a " + typeof contextType + ".";
              } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                addendum = " Did you accidentally pass the Context.Provider instead?";
              } else if (contextType._context !== undefined) {
                addendum = " Did you accidentally pass the Context.Consumer instead?";
              } else {
                addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
              }

              error("%s defines an invalid contextType. " + "contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
            }
          }
        }

        if (typeof contextType === "object" && contextType !== null) {
          context = _readContext(contextType);
        } else {
          unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
          var contextTypes = ctor.contextTypes;
          isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
          context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        }

        var instance = new ctor(props, context);
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        {
          if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
            var componentName = getComponentName(ctor) || "Component";

            if (!didWarnAboutUninitializedState.has(componentName)) {
              didWarnAboutUninitializedState.add(componentName);
              error("`%s` uses `getDerivedStateFromProps` but its initial state is " + "%s. This is not recommended. Instead, define the initial state by " + "assigning an object to `this.state` in the constructor of `%s`. " + "This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
            }
          }

          if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;

            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              foundWillMountName = "componentWillMount";
            } else if (typeof instance.UNSAFE_componentWillMount === "function") {
              foundWillMountName = "UNSAFE_componentWillMount";
            }

            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              foundWillReceivePropsName = "componentWillReceiveProps";
            } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
            }

            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              foundWillUpdateName = "componentWillUpdate";
            } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              foundWillUpdateName = "UNSAFE_componentWillUpdate";
            }

            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentName(ctor) || "Component";

              var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";

              if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n" + "%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n" + "The above lifecycles should be removed. Learn more about this warning here:\n" + "https://fb.me/react-unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
              }
            }
          }
        }

        if (isLegacyContextConsumer) {
          cacheContext(workInProgress, unmaskedContext, context);
        }

        return instance;
      }

      function callComponentWillMount(workInProgress, instance) {
        startPhaseTimer(workInProgress, "componentWillMount");
        var oldState = instance.state;

        if (typeof instance.componentWillMount === "function") {
          instance.componentWillMount();
        }

        if (typeof instance.UNSAFE_componentWillMount === "function") {
          instance.UNSAFE_componentWillMount();
        }

        stopPhaseTimer();

        if (oldState !== instance.state) {
          {
            error("%s.componentWillMount(): Assigning directly to this.state is " + "deprecated (except inside a component's " + "constructor). Use setState instead.", getComponentName(workInProgress.type) || "Component");
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }

      function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        startPhaseTimer(workInProgress, "componentWillReceiveProps");

        if (typeof instance.componentWillReceiveProps === "function") {
          instance.componentWillReceiveProps(newProps, nextContext);
        }

        if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
          instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        }

        stopPhaseTimer();

        if (instance.state !== oldState) {
          {
            var componentName = getComponentName(workInProgress.type) || "Component";

            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
              didWarnAboutStateAssignmentForComponent.add(componentName);
              error("%s.componentWillReceiveProps(): Assigning directly to " + "this.state is deprecated (except inside a component's " + "constructor). Use setState instead.", componentName);
            }
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }

      function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
        {
          checkClassInstance(workInProgress, ctor, newProps);
        }
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress);
        var contextType = ctor.contextType;

        if (typeof contextType === "object" && contextType !== null) {
          instance.context = _readContext(contextType);
        } else {
          var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
          instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }

        {
          if (instance.state === newProps) {
            var componentName = getComponentName(ctor) || "Component";

            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
              didWarnAboutDirectlyAssigningPropsToState.add(componentName);
              error("%s: It is not recommended to assign props directly to state " + "because updates to props won't be reflected in state. " + "In most cases, it is better to use props directly.", componentName);
            }
          }

          if (workInProgress.mode & StrictMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
          }

          {
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
          }
        }
        processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
        instance.state = workInProgress.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
          instance.state = workInProgress.memoizedState;
        }

        if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
          callComponentWillMount(workInProgress, instance);
          processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
          instance.state = workInProgress.memoizedState;
        }

        if (typeof instance.componentDidMount === "function") {
          workInProgress.effectTag |= Update;
        }
      }

      function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;

        if (typeof contextType === "object" && contextType !== null) {
          nextContext = _readContext(contextType);
        } else {
          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
          nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }

        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";

        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (oldProps !== newProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
          }
        }

        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
        newState = workInProgress.memoizedState;

        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidMount === "function") {
            workInProgress.effectTag |= Update;
          }

          return false;
        }

        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress.memoizedState;
        }

        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            startPhaseTimer(workInProgress, "componentWillMount");

            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }

            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }

            stopPhaseTimer();
          }

          if (typeof instance.componentDidMount === "function") {
            workInProgress.effectTag |= Update;
          }
        } else {
          if (typeof instance.componentDidMount === "function") {
            workInProgress.effectTag |= Update;
          }

          workInProgress.memoizedProps = newProps;
          workInProgress.memoizedState = newState;
        }

        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }

      function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
        var instance = workInProgress.stateNode;
        cloneUpdateQueue(current, workInProgress);
        var oldProps = workInProgress.memoizedProps;
        instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;

        if (typeof contextType === "object" && contextType !== null) {
          nextContext = _readContext(contextType);
        } else {
          var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
          nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }

        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";

        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (oldProps !== newProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
          }
        }

        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
        newState = workInProgress.memoizedState;

        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidUpdate === "function") {
            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.effectTag |= Update;
            }
          }

          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.effectTag |= Snapshot;
            }
          }

          return false;
        }

        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress.memoizedState;
        }

        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
            startPhaseTimer(workInProgress, "componentWillUpdate");

            if (typeof instance.componentWillUpdate === "function") {
              instance.componentWillUpdate(newProps, newState, nextContext);
            }

            if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }

            stopPhaseTimer();
          }

          if (typeof instance.componentDidUpdate === "function") {
            workInProgress.effectTag |= Update;
          }

          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            workInProgress.effectTag |= Snapshot;
          }
        } else {
          if (typeof instance.componentDidUpdate === "function") {
            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.effectTag |= Update;
            }
          }

          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.effectTag |= Snapshot;
            }
          }

          workInProgress.memoizedProps = newProps;
          workInProgress.memoizedState = newState;
        }

        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }

      var didWarnAboutMaps;
      var didWarnAboutGenerators;
      var didWarnAboutStringRefs;
      var ownerHasKeyUseWarning;
      var ownerHasFunctionTypeWarning;

      var warnForMissingKey = function warnForMissingKey(child) {};

      {
        didWarnAboutMaps = false;
        didWarnAboutGenerators = false;
        didWarnAboutStringRefs = {};
        ownerHasKeyUseWarning = {};
        ownerHasFunctionTypeWarning = {};

        warnForMissingKey = function warnForMissingKey(child) {
          if (child === null || typeof child !== "object") {
            return;
          }

          if (!child._store || child._store.validated || child.key != null) {
            return;
          }

          if (!(typeof child._store === "object")) {
            throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
          }

          child._store.validated = true;
          var currentComponentErrorInfo = "Each child in a list should have a unique " + '"key" prop. See https://fb.me/react-warning-keys for ' + "more information." + getCurrentFiberStackInDev();

          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }

          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          error("Each child in a list should have a unique " + '"key" prop. See https://fb.me/react-warning-keys for ' + "more information.");
        };
      }
      var isArray$1 = Array.isArray;

      function coerceRef(returnFiber, current, element) {
        var mixedRef = element.ref;

        if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
          {
            if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
              var componentName = getComponentName(returnFiber.type) || "Component";

              if (!didWarnAboutStringRefs[componentName]) {
                {
                  error('A string ref, "%s", has been found within a strict mode tree. ' + "String refs are a source of potential bugs and should be avoided. " + "We recommend using useRef() or createRef() instead. " + "Learn more about using refs safely here: " + "https://fb.me/react-strict-mode-string-ref%s", mixedRef, getStackByFiberInDevAndProd(returnFiber));
                }
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }

          if (element._owner) {
            var owner = element._owner;
            var inst;

            if (owner) {
              var ownerFiber = owner;

              if (!(ownerFiber.tag === ClassComponent)) {
                throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref");
              }

              inst = ownerFiber.stateNode;
            }

            if (!inst) {
              throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
            }

            var stringRef = "" + mixedRef;

            if (current !== null && current.ref !== null && typeof current.ref === "function" && current.ref._stringRef === stringRef) {
              return current.ref;
            }

            var ref = function ref(value) {
              var refs = inst.refs;

              if (refs === emptyRefsObject) {
                refs = inst.refs = {};
              }

              if (value === null) {
                delete refs[stringRef];
              } else {
                refs[stringRef] = value;
              }
            };

            ref._stringRef = stringRef;
            return ref;
          } else {
            if (!(typeof mixedRef === "string")) {
              throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
            }

            if (!element._owner) {
              throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.");
            }
          }
        }

        return mixedRef;
      }

      function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== "textarea") {
          var addendum = "";
          {
            addendum = " If you meant to render a collection of children, use an array " + "instead." + getCurrentFiberStackInDev();
          }
          {
            throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + ")." + addendum);
          }
        }
      }

      function warnOnFunctionType() {
        {
          var currentComponentErrorInfo = "Functions are not valid as a React child. This may happen if " + "you return a Component instead of <Component /> from render. " + "Or maybe you meant to call this function rather than return it." + getCurrentFiberStackInDev();

          if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
            return;
          }

          ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
          error("Functions are not valid as a React child. This may happen if " + "you return a Component instead of <Component /> from render. " + "Or maybe you meant to call this function rather than return it.");
        }
      }

      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            return;
          }

          var last = returnFiber.lastEffect;

          if (last !== null) {
            last.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }

          childToDelete.nextEffect = null;
          childToDelete.effectTag = Deletion;
        }

        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            return null;
          }

          var childToDelete = currentFirstChild;

          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete);
            childToDelete = childToDelete.sibling;
          }

          return null;
        }

        function mapRemainingChildren(returnFiber, currentFirstChild) {
          var existingChildren = new Map();
          var existingChild = currentFirstChild;

          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild);
            } else {
              existingChildren.set(existingChild.index, existingChild);
            }

            existingChild = existingChild.sibling;
          }

          return existingChildren;
        }

        function useFiber(fiber, pendingProps) {
          var clone = createWorkInProgress(fiber, pendingProps);
          clone.index = 0;
          clone.sibling = null;
          return clone;
        }

        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;

          if (!shouldTrackSideEffects) {
            return lastPlacedIndex;
          }

          var current = newFiber.alternate;

          if (current !== null) {
            var oldIndex = current.index;

            if (oldIndex < lastPlacedIndex) {
              newFiber.effectTag = Placement;
              return lastPlacedIndex;
            } else {
              return oldIndex;
            }
          } else {
            newFiber.effectTag = Placement;
            return lastPlacedIndex;
          }
        }

        function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.effectTag = Placement;
          }

          return newFiber;
        }

        function updateTextNode(returnFiber, current, textContent, expirationTime) {
          if (current === null || current.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, textContent);
            existing.return = returnFiber;
            return existing;
          }
        }

        function updateElement(returnFiber, current, element, expirationTime) {
          if (current !== null) {
            if (current.elementType === element.type || isCompatibleFamilyForHotReloading(current, element)) {
              var existing = useFiber(current, element.props);
              existing.ref = coerceRef(returnFiber, current, element);
              existing.return = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            }
          }

          var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
          created.ref = coerceRef(returnFiber, current, element);
          created.return = returnFiber;
          return created;
        }

        function updatePortal(returnFiber, current, portal, expirationTime) {
          if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, portal.children || []);
            existing.return = returnFiber;
            return existing;
          }
        }

        function updateFragment(returnFiber, current, fragment, expirationTime, key) {
          if (current === null || current.tag !== Fragment) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, fragment);
            existing.return = returnFiber;
            return existing;
          }
        }

        function createChild(returnFiber, newChild, expirationTime) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }

              case REACT_PORTAL_TYPE:
                {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

                  _created2.return = returnFiber;
                  return _created2;
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

              _created3.return = returnFiber;
              return _created3;
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }

        function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
          var key = oldFiber !== null ? oldFiber.key : null;

          if (typeof newChild === "string" || typeof newChild === "number") {
            if (key !== null) {
              return null;
            }

            return updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  if (newChild.key === key) {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                    }

                    return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }

              case REACT_PORTAL_TYPE:
                {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              if (key !== null) {
                return null;
              }

              return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }

        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, expirationTime);
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                  }

                  return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
                }

              case REACT_PORTAL_TYPE:
                {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;

              return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }

        function warnOnInvalidKey(child, knownKeys) {
          {
            if (typeof child !== "object" || child === null) {
              return knownKeys;
            }

            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child);
                var key = child.key;

                if (typeof key !== "string") {
                  break;
                }

                if (knownKeys === null) {
                  knownKeys = new Set();
                  knownKeys.add(key);
                  break;
                }

                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }

                error("Encountered two children with the same key, `%s`. " + "Keys should be unique so that components maintain their identity " + "across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted — the behavior is unsupported and " + "could change in a future version.", key);
                break;
            }
          }
          return knownKeys;
        }

        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
          {
            var knownKeys = null;

            for (var i = 0; i < newChildren.length; i++) {
              var child = newChildren[i];
              knownKeys = warnOnInvalidKey(child, knownKeys);
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;

          for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }

            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }

              break;
            }

            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }

            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }

            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }

          if (newIdx === newChildren.length) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }

          if (oldFiber === null) {
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

              if (_newFiber === null) {
                continue;
              }

              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber;
              } else {
                previousNewFiber.sibling = _newFiber;
              }

              previousNewFiber = _newFiber;
            }

            return resultingFirstChild;
          }

          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

            if (_newFiber2 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                }
              }

              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2;
              } else {
                previousNewFiber.sibling = _newFiber2;
              }

              previousNewFiber = _newFiber2;
            }
          }

          if (shouldTrackSideEffects) {
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child);
            });
          }

          return resultingFirstChild;
        }

        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
          var iteratorFn = getIteratorFn(newChildrenIterable);

          if (!(typeof iteratorFn === "function")) {
            throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
          }

          {
            if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield " + "unexpected results because enumerating a generator mutates it. " + "You may convert it to an array with `Array.from()` or the " + "`[...spread]` operator before rendering. Keep in mind " + "you might need to polyfill these features for older browsers.");
              }

              didWarnAboutGenerators = true;
            }

            if (newChildrenIterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is unsupported and will likely yield " + "unexpected results. Convert it to a sequence/iterable of keyed " + "ReactElements instead.");
              }

              didWarnAboutMaps = true;
            }

            var _newChildren = iteratorFn.call(newChildrenIterable);

            if (_newChildren) {
              var knownKeys = null;

              var _step = _newChildren.next();

              for (; !_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys);
              }
            }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);

          if (!(newChildren != null)) {
            throw Error("An iterable object provided no iterator.");
          }

          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          var step = newChildren.next();

          for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }

            var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }

              break;
            }

            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }

            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }

            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }

          if (step.done) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }

          if (oldFiber === null) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

              if (_newFiber3 === null) {
                continue;
              }

              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber3;
              } else {
                previousNewFiber.sibling = _newFiber3;
              }

              previousNewFiber = _newFiber3;
            }

            return resultingFirstChild;
          }

          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                }
              }

              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4;
              } else {
                previousNewFiber.sibling = _newFiber4;
              }

              previousNewFiber = _newFiber4;
            }
          }

          if (shouldTrackSideEffects) {
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child);
            });
          }

          return resultingFirstChild;
        }

        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent);
            existing.return = returnFiber;
            return existing;
          }

          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        }

        function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
          var key = element.key;
          var child = currentFirstChild;

          while (child !== null) {
            if (child.key === key) {
              switch (child.tag) {
                case Fragment:
                  {
                    if (element.type === REACT_FRAGMENT_TYPE) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }

                    break;
                  }

                case Block:
                default:
                  {
                    if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                      deleteRemainingChildren(returnFiber, child.sibling);

                      var _existing3 = useFiber(child, element.props);

                      _existing3.ref = coerceRef(returnFiber, child, element);
                      _existing3.return = returnFiber;
                      {
                        _existing3._debugSource = element._source;
                        _existing3._debugOwner = element._owner;
                      }
                      return _existing3;
                    }

                    break;
                  }
              }

              deleteRemainingChildren(returnFiber, child);
              break;
            } else {
              deleteChild(returnFiber, child);
            }

            child = child.sibling;
          }

          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
            created.return = returnFiber;
            return created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
            _created4.return = returnFiber;
            return _created4;
          }
        }

        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
          var key = portal.key;
          var child = currentFirstChild;

          while (child !== null) {
            if (child.key === key) {
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || []);
                existing.return = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }

            child = child.sibling;
          }

          var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        }

        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
          var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

          if (isUnkeyedTopLevelFragment) {
            newChild = newChild.props.children;
          }

          var isObject = typeof newChild === "object" && newChild !== null;

          if (isObject) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
            }
          }

          if (typeof newChild === "string" || typeof newChild === "number") {
            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, expirationTime));
          }

          if (isArray$1(newChild)) {
            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
          }

          if (getIteratorFn(newChild)) {
            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
          }

          if (isObject) {
            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }

          if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
            switch (returnFiber.tag) {
              case ClassComponent:
                {
                  {
                    var instance = returnFiber.stateNode;

                    if (instance.render._isMockFunction) {
                      break;
                    }
                  }
                }

              case FunctionComponent:
                {
                  var Component = returnFiber.type;
                  {
                    throw Error((Component.displayName || Component.name || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                  }
                }
            }
          }

          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }

        return reconcileChildFibers;
      }

      var reconcileChildFibers = ChildReconciler(true);
      var mountChildFibers = ChildReconciler(false);

      function cloneChildFibers(current, workInProgress) {
        if (!(current === null || workInProgress.child === current.child)) {
          throw Error("Resuming work not yet implemented.");
        }

        if (workInProgress.child === null) {
          return;
        }

        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress.child = newChild;
        newChild.return = workInProgress;

        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling;
          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
          newChild.return = workInProgress;
        }

        newChild.sibling = null;
      }

      function resetChildFibers(workInProgress, renderExpirationTime) {
        var child = workInProgress.child;

        while (child !== null) {
          resetWorkInProgress(child, renderExpirationTime);
          child = child.sibling;
        }
      }

      var NO_CONTEXT = {};
      var contextStackCursor$1 = createCursor(NO_CONTEXT);
      var contextFiberStackCursor = createCursor(NO_CONTEXT);
      var rootInstanceStackCursor = createCursor(NO_CONTEXT);

      function requiredContext(c) {
        if (!(c !== NO_CONTEXT)) {
          throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        }

        return c;
      }

      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }

      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext();
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
      }

      function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      }

      function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
      }

      function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type);

        if (context === nextContext) {
          return;
        }

        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
      }

      function popHostContext(fiber) {
        if (contextFiberStackCursor.current !== fiber) {
          return;
        }

        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
      }

      var DefaultSuspenseContext = 0;
      var SubtreeSuspenseContextMask = 1;
      var InvisibleParentSuspenseContext = 1;
      var ForceSuspenseFallback = 2;
      var suspenseStackCursor = createCursor(DefaultSuspenseContext);

      function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
      }

      function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
      }

      function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
      }

      function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
      }

      function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
      }

      function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
      }

      function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        var nextState = workInProgress.memoizedState;

        if (nextState !== null) {
          if (nextState.dehydrated !== null) {
            return true;
          }

          return false;
        }

        var props = workInProgress.memoizedProps;

        if (props.fallback === undefined) {
          return false;
        }

        if (props.unstable_avoidThisFallback !== true) {
          return true;
        }

        if (hasInvisibleParent) {
          return false;
        }

        return true;
      }

      function findFirstSuspended(row) {
        var node = row;

        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;

            if (state !== null) {
              var dehydrated = state.dehydrated;

              if (dehydrated === null || isSuspenseInstancePending() || isSuspenseInstanceFallback()) {
                return node;
              }
            }
          } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== undefined) {
            var didSuspend = (node.effectTag & DidCapture) !== NoEffect;

            if (didSuspend) {
              return node;
            }
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === row) {
            return null;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === row) {
              return null;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }

        return null;
      }

      function createDeprecatedResponderListener(responder, props) {
        var eventResponderListener = {
          responder: responder,
          props: props
        };
        {
          Object.freeze(eventResponderListener);
        }
        return eventResponderListener;
      }

      var HasEffect = 1;
      var Layout = 2;
      var Passive$1 = 4;
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,
          ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
      var didWarnAboutMismatchedHooksForComponent;
      {
        didWarnAboutMismatchedHooksForComponent = new Set();
      }
      var renderExpirationTime = NoWork;
      var currentlyRenderingFiber$1 = null;
      var currentHook = null;
      var workInProgressHook = null;
      var didScheduleRenderPhaseUpdate = false;
      var RE_RENDER_LIMIT = 25;
      var currentHookNameInDev = null;
      var hookTypesDev = null;
      var hookTypesUpdateIndexDev = -1;
      var ignorePreviousDependencies = false;

      function mountHookTypesDev() {
        {
          var hookName = currentHookNameInDev;

          if (hookTypesDev === null) {
            hookTypesDev = [hookName];
          } else {
            hookTypesDev.push(hookName);
          }
        }
      }

      function updateHookTypesDev() {
        {
          var hookName = currentHookNameInDev;

          if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;

            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
              warnOnHookMismatchInDev(hookName);
            }
          }
        }
      }

      function checkDepsAreArrayDev(deps) {
        {
          if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
            error("%s received a final argument that is not an array (instead, received `%s`). When " + "specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
          }
        }
      }

      function warnOnHookMismatchInDev(currentHookName) {
        {
          var componentName = getComponentName(currentlyRenderingFiber$1.type);

          if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);

            if (hookTypesDev !== null) {
              var table = "";
              var secondColumnStart = 30;

              for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                var oldHookName = hookTypesDev[i];
                var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                var row = i + 1 + ". " + oldHookName;

                while (row.length < secondColumnStart) {
                  row += " ";
                }

                row += newHookName + "\n";
                table += row;
              }

              error("React has detected a change in the order of Hooks called by %s. " + "This will lead to bugs and errors if not fixed. " + "For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n" + "   Previous render            Next render\n" + "   ------------------------------------------------------\n" + "%s" + "   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
          }
        }
      }

      function throwInvalidHookError() {
        {
          throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
        }
      }

      function areHookInputsEqual(nextDeps, prevDeps) {
        {
          if (ignorePreviousDependencies) {
            return false;
          }
        }

        if (prevDeps === null) {
          {
            error("%s received a final argument during this render, but not during " + "the previous render. Even though the final argument is optional, " + "its type cannot change between renders.", currentHookNameInDev);
          }
          return false;
        }

        {
          if (nextDeps.length !== prevDeps.length) {
            error("The final argument passed to %s changed size between renders. The " + "order and size of this array must remain constant.\n\n" + "Previous: %s\n" + "Incoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
          }
        }

        for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
          if (objectIs(nextDeps[i], prevDeps[i])) {
            continue;
          }

          return false;
        }

        return true;
      }

      function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderExpirationTime) {
        renderExpirationTime = nextRenderExpirationTime;
        currentlyRenderingFiber$1 = workInProgress;
        {
          hookTypesDev = current !== null ? current._debugHookTypes : null;
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
        }
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.expirationTime = NoWork;
        {
          if (current !== null && current.memoizedState !== null) {
            ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;
          } else if (hookTypesDev !== null) {
            ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;
          } else {
            ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;
          }
        }
        var children = Component(props, secondArg);

        if (workInProgress.expirationTime === renderExpirationTime) {
          var numberOfReRenders = 0;

          do {
            workInProgress.expirationTime = NoWork;

            if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
              throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            }

            numberOfReRenders += 1;
            {
              ignorePreviousDependencies = false;
            }
            currentHook = null;
            workInProgressHook = null;
            workInProgress.updateQueue = null;
            {
              hookTypesUpdateIndexDev = -1;
            }
            ReactCurrentDispatcher.current = HooksDispatcherOnRerenderInDEV;
            children = Component(props, secondArg);
          } while (workInProgress.expirationTime === renderExpirationTime);
        }

        ReactCurrentDispatcher.current = ContextOnlyDispatcher;
        {
          workInProgress._debugHookTypes = hookTypesDev;
        }
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderExpirationTime = NoWork;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          currentHookNameInDev = null;
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
        }
        didScheduleRenderPhaseUpdate = false;

        if (!!didRenderTooFewHooks) {
          throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        }

        return children;
      }

      function bailoutHooks(current, workInProgress, expirationTime) {
        workInProgress.updateQueue = current.updateQueue;
        workInProgress.effectTag &= ~(Passive | Update);

        if (current.expirationTime <= expirationTime) {
          current.expirationTime = NoWork;
        }
      }

      function resetHooksAfterThrow() {
        ReactCurrentDispatcher.current = ContextOnlyDispatcher;

        if (didScheduleRenderPhaseUpdate) {
          var hook = currentlyRenderingFiber$1.memoizedState;

          while (hook !== null) {
            var queue = hook.queue;

            if (queue !== null) {
              queue.pending = null;
            }

            hook = hook.next;
          }
        }

        renderExpirationTime = NoWork;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          currentHookNameInDev = null;
        }
        didScheduleRenderPhaseUpdate = false;
      }

      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };

        if (workInProgressHook === null) {
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        } else {
          workInProgressHook = workInProgressHook.next = hook;
        }

        return workInProgressHook;
      }

      function updateWorkInProgressHook() {
        var nextCurrentHook;

        if (currentHook === null) {
          var current = currentlyRenderingFiber$1.alternate;

          if (current !== null) {
            nextCurrentHook = current.memoizedState;
          } else {
            nextCurrentHook = null;
          }
        } else {
          nextCurrentHook = currentHook.next;
        }

        var nextWorkInProgressHook;

        if (workInProgressHook === null) {
          nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        } else {
          nextWorkInProgressHook = workInProgressHook.next;
        }

        if (nextWorkInProgressHook !== null) {
          workInProgressHook = nextWorkInProgressHook;
          nextWorkInProgressHook = workInProgressHook.next;
          currentHook = nextCurrentHook;
        } else {
          if (!(nextCurrentHook !== null)) {
            throw Error("Rendered more hooks than during the previous render.");
          }

          currentHook = nextCurrentHook;
          var newHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };

          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
          } else {
            workInProgressHook = workInProgressHook.next = newHook;
          }
        }

        return workInProgressHook;
      }

      function createFunctionComponentUpdateQueue() {
        return {
          lastEffect: null
        };
      }

      function basicStateReducer(state, action) {
        return typeof action === "function" ? action(state) : action;
      }

      function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;

        if (init !== undefined) {
          initialState = init(initialArg);
        } else {
          initialState = initialArg;
        }

        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
          pending: null,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }

      function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;

        if (!(queue !== null)) {
          throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }

        queue.lastRenderedReducer = reducer;
        var current = currentHook;
        var baseQueue = current.baseQueue;
        var pendingQueue = queue.pending;

        if (pendingQueue !== null) {
          if (baseQueue !== null) {
            var baseFirst = baseQueue.next;
            var pendingFirst = pendingQueue.next;
            baseQueue.next = pendingFirst;
            pendingQueue.next = baseFirst;
          }

          current.baseQueue = baseQueue = pendingQueue;
          queue.pending = null;
        }

        if (baseQueue !== null) {
          var first = baseQueue.next;
          var newState = current.baseState;
          var newBaseState = null;
          var newBaseQueueFirst = null;
          var newBaseQueueLast = null;
          var update = first;

          do {
            var updateExpirationTime = update.expirationTime;

            if (updateExpirationTime < renderExpirationTime) {
              var clone = {
                expirationTime: update.expirationTime,
                suspenseConfig: update.suspenseConfig,
                action: update.action,
                eagerReducer: update.eagerReducer,
                eagerState: update.eagerState,
                next: null
              };

              if (newBaseQueueLast === null) {
                newBaseQueueFirst = newBaseQueueLast = clone;
                newBaseState = newState;
              } else {
                newBaseQueueLast = newBaseQueueLast.next = clone;
              }

              if (updateExpirationTime > currentlyRenderingFiber$1.expirationTime) {
                currentlyRenderingFiber$1.expirationTime = updateExpirationTime;
                markUnprocessedUpdateTime(updateExpirationTime);
              }
            } else {
              if (newBaseQueueLast !== null) {
                var _clone = {
                  expirationTime: Sync,
                  suspenseConfig: update.suspenseConfig,
                  action: update.action,
                  eagerReducer: update.eagerReducer,
                  eagerState: update.eagerState,
                  next: null
                };
                newBaseQueueLast = newBaseQueueLast.next = _clone;
              }

              markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);

              if (update.eagerReducer === reducer) {
                newState = update.eagerState;
              } else {
                var action = update.action;
                newState = reducer(newState, action);
              }
            }

            update = update.next;
          } while (update !== null && update !== first);

          if (newBaseQueueLast === null) {
            newBaseState = newState;
          } else {
            newBaseQueueLast.next = newBaseQueueFirst;
          }

          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }

          hook.memoizedState = newState;
          hook.baseState = newBaseState;
          hook.baseQueue = newBaseQueueLast;
          queue.lastRenderedState = newState;
        }

        var dispatch = queue.dispatch;
        return [hook.memoizedState, dispatch];
      }

      function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;

        if (!(queue !== null)) {
          throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }

        queue.lastRenderedReducer = reducer;
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;

        if (lastRenderPhaseUpdate !== null) {
          queue.pending = null;
          var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          var update = firstRenderPhaseUpdate;

          do {
            var action = update.action;
            newState = reducer(newState, action);
            update = update.next;
          } while (update !== firstRenderPhaseUpdate);

          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }

          hook.memoizedState = newState;

          if (hook.baseQueue === null) {
            hook.baseState = newState;
          }

          queue.lastRenderedState = newState;
        }

        return [newState, dispatch];
      }

      function mountState(initialState) {
        var hook = mountWorkInProgressHook();

        if (typeof initialState === "function") {
          initialState = initialState();
        }

        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
          pending: null,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }

      function updateState(initialState) {
        return updateReducer(basicStateReducer);
      }

      function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
      }

      function pushEffect(tag, create, destroy, deps) {
        var effect = {
          tag: tag,
          create: create,
          destroy: destroy,
          deps: deps,
          next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var lastEffect = componentUpdateQueue.lastEffect;

          if (lastEffect === null) {
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var firstEffect = lastEffect.next;
            lastEffect.next = effect;
            effect.next = firstEffect;
            componentUpdateQueue.lastEffect = effect;
          }
        }

        return effect;
      }

      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var ref = {
          current: initialValue
        };
        {
          Object.seal(ref);
        }
        hook.memoizedState = ref;
        return ref;
      }

      function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
      }

      function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
        hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, undefined, nextDeps);
      }

      function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;

        if (currentHook !== null) {
          var prevEffect = currentHook.memoizedState;
          destroy = prevEffect.destroy;

          if (nextDeps !== null) {
            var prevDeps = prevEffect.deps;

            if (areHookInputsEqual(nextDeps, prevDeps)) {
              pushEffect(hookEffectTag, create, destroy, nextDeps);
              return;
            }
          }
        }

        currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
        hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, destroy, nextDeps);
      }

      function mountEffect(create, deps) {
        return mountEffectImpl(Update | Passive, Passive$1, create, deps);
      }

      function updateEffect(create, deps) {
        return updateEffectImpl(Update | Passive, Passive$1, create, deps);
      }

      function mountLayoutEffect(create, deps) {
        return mountEffectImpl(Update, Layout, create, deps);
      }

      function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
      }

      function imperativeHandleEffect(create, ref) {
        if (typeof ref === "function") {
          var refCallback = ref;

          var _inst = create();

          refCallback(_inst);
          return function () {
            refCallback(null);
          };
        } else if (ref !== null && ref !== undefined) {
          var refObject = ref;
          {
            if (!refObject.hasOwnProperty("current")) {
              error("Expected useImperativeHandle() first argument to either be a " + "ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
            }
          }

          var _inst2 = create();

          refObject.current = _inst2;
          return function () {
            refObject.current = null;
          };
        }
      }

      function mountImperativeHandle(ref, create, deps) {
        {
          if (typeof create !== "function") {
            error("Expected useImperativeHandle() second argument to be a function " + "that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
          }
        }
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }

      function updateImperativeHandle(ref, create, deps) {
        {
          if (typeof create !== "function") {
            error("Expected useImperativeHandle() second argument to be a function " + "that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
          }
        }
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }

      function mountDebugValue(value, formatterFn) {}

      var updateDebugValue = mountDebugValue;

      function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }

      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;

        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];

            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }

        hook.memoizedState = [callback, nextDeps];
        return callback;
      }

      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }

      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;

        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];

            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }

        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }

      function mountDeferredValue(value, config) {
        var _mountState = mountState(value),
            prevValue = _mountState[0],
            setValue = _mountState[1];

        mountEffect(function () {
          var previousConfig = ReactCurrentBatchConfig$1.suspense;
          ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

          try {
            setValue(value);
          } finally {
            ReactCurrentBatchConfig$1.suspense = previousConfig;
          }
        }, [value, config]);
        return prevValue;
      }

      function updateDeferredValue(value, config) {
        var _updateState = updateState(),
            prevValue = _updateState[0],
            setValue = _updateState[1];

        updateEffect(function () {
          var previousConfig = ReactCurrentBatchConfig$1.suspense;
          ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

          try {
            setValue(value);
          } finally {
            ReactCurrentBatchConfig$1.suspense = previousConfig;
          }
        }, [value, config]);
        return prevValue;
      }

      function rerenderDeferredValue(value, config) {
        var _rerenderState = rerenderState(),
            prevValue = _rerenderState[0],
            setValue = _rerenderState[1];

        updateEffect(function () {
          var previousConfig = ReactCurrentBatchConfig$1.suspense;
          ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

          try {
            setValue(value);
          } finally {
            ReactCurrentBatchConfig$1.suspense = previousConfig;
          }
        }, [value, config]);
        return prevValue;
      }

      function startTransition(setPending, config, callback) {
        var priorityLevel = getCurrentPriorityLevel();
        runWithPriority(priorityLevel < UserBlockingPriority ? UserBlockingPriority : priorityLevel, function () {
          setPending(true);
        });
        runWithPriority(priorityLevel > NormalPriority ? NormalPriority : priorityLevel, function () {
          var previousConfig = ReactCurrentBatchConfig$1.suspense;
          ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

          try {
            setPending(false);
            callback();
          } finally {
            ReactCurrentBatchConfig$1.suspense = previousConfig;
          }
        });
      }

      function mountTransition(config) {
        var _mountState2 = mountState(false),
            isPending = _mountState2[0],
            setPending = _mountState2[1];

        var start = mountCallback(startTransition.bind(null, setPending, config), [setPending, config]);
        return [start, isPending];
      }

      function updateTransition(config) {
        var _updateState2 = updateState(),
            isPending = _updateState2[0],
            setPending = _updateState2[1];

        var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
        return [start, isPending];
      }

      function rerenderTransition(config) {
        var _rerenderState2 = rerenderState(),
            isPending = _rerenderState2[0],
            setPending = _rerenderState2[1];

        var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
        return [start, isPending];
      }

      function dispatchAction(fiber, queue, action) {
        {
          if (typeof arguments[3] === "function") {
            error("State updates from the useState() and useReducer() Hooks don't support the " + "second callback argument. To execute a side effect after " + "rendering, declare it in the component body with useEffect().");
          }
        }
        var currentTime = requestCurrentTimeForUpdate();
        var suspenseConfig = requestCurrentSuspenseConfig();
        var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
        var update = {
          expirationTime: expirationTime,
          suspenseConfig: suspenseConfig,
          action: action,
          eagerReducer: null,
          eagerState: null,
          next: null
        };
        {
          update.priority = getCurrentPriorityLevel();
        }
        var pending = queue.pending;

        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }

        queue.pending = update;
        var alternate = fiber.alternate;

        if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
          didScheduleRenderPhaseUpdate = true;
          update.expirationTime = renderExpirationTime;
          currentlyRenderingFiber$1.expirationTime = renderExpirationTime;
        } else {
          if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
            var lastRenderedReducer = queue.lastRenderedReducer;

            if (lastRenderedReducer !== null) {
              var prevDispatcher;
              {
                prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              }

              try {
                var currentState = queue.lastRenderedState;
                var eagerState = lastRenderedReducer(currentState, action);
                update.eagerReducer = lastRenderedReducer;
                update.eagerState = eagerState;

                if (objectIs(eagerState, currentState)) {
                  return;
                }
              } catch (error) {} finally {
                {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              }
            }
          }

          scheduleWork(fiber, expirationTime);
        }
      }

      function mountEventListener(event) {
        return undefined;
      }

      function updateEventListener(event) {
        return undefined;
      }

      var ContextOnlyDispatcher = {
        readContext: _readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useResponder: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useEvent: throwInvalidHookError
      };
      var HooksDispatcherOnMountInDEV = null;
      var HooksDispatcherOnMountWithHookTypesInDEV = null;
      var HooksDispatcherOnUpdateInDEV = null;
      var HooksDispatcherOnRerenderInDEV = null;
      var InvalidNestedHooksDispatcherOnMountInDEV = null;
      var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
      var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
      {
        var warnInvalidContextAccess = function warnInvalidContextAccess() {
          error("Context can only be read while React is rendering. " + "In classes, you can read it in the render method or getDerivedStateFromProps. " + "In function components, you can read it directly in the function body, but not " + "inside Hooks like useReducer() or useMemo().");
        };

        var warnInvalidHookAccess = function warnInvalidHookAccess() {
          error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. " + "You can only call Hooks at the top level of your React function. " + "For more information, see " + "https://fb.me/rules-of-hooks");
        };

        HooksDispatcherOnMountInDEV = {
          readContext: function readContext(context, observedBits) {
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
            return mountDebugValue();
          },
          useResponder: function useResponder(responder, props) {
            currentHookNameInDev = "useResponder";
            mountHookTypesDev();
            return createDeprecatedResponderListener(responder, props);
          },
          useDeferredValue: function useDeferredValue(value, config) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value, config);
          },
          useTransition: function useTransition(config) {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition(config);
          },
          useEvent: function useEvent(event) {
            currentHookNameInDev = "useEvent";
            mountHookTypesDev();
            return mountEventListener();
          }
        };
        HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function readContext(context, observedBits) {
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return mountDebugValue();
          },
          useResponder: function useResponder(responder, props) {
            currentHookNameInDev = "useResponder";
            updateHookTypesDev();
            return createDeprecatedResponderListener(responder, props);
          },
          useDeferredValue: function useDeferredValue(value, config) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value, config);
          },
          useTransition: function useTransition(config) {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition(config);
          },
          useEvent: function useEvent(event) {
            currentHookNameInDev = "useEvent";
            updateHookTypesDev();
            return mountEventListener();
          }
        };
        HooksDispatcherOnUpdateInDEV = {
          readContext: function readContext(context, observedBits) {
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useResponder: function useResponder(responder, props) {
            currentHookNameInDev = "useResponder";
            updateHookTypesDev();
            return createDeprecatedResponderListener(responder, props);
          },
          useDeferredValue: function useDeferredValue(value, config) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value, config);
          },
          useTransition: function useTransition(config) {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition(config);
          },
          useEvent: function useEvent(event) {
            currentHookNameInDev = "useEvent";
            updateHookTypesDev();
            return updateEventListener();
          }
        };
        HooksDispatcherOnRerenderInDEV = {
          readContext: function readContext(context, observedBits) {
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useResponder: function useResponder(responder, props) {
            currentHookNameInDev = "useResponder";
            updateHookTypesDev();
            return createDeprecatedResponderListener(responder, props);
          },
          useDeferredValue: function useDeferredValue(value, config) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return rerenderDeferredValue(value, config);
          },
          useTransition: function useTransition(config) {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return rerenderTransition(config);
          },
          useEvent: function useEvent(event) {
            currentHookNameInDev = "useEvent";
            updateHookTypesDev();
            return updateEventListener();
          }
        };
        InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function readContext(context, observedBits) {
            warnInvalidContextAccess();
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
          },
          useResponder: function useResponder(responder, props) {
            currentHookNameInDev = "useResponder";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return createDeprecatedResponderListener(responder, props);
          },
          useDeferredValue: function useDeferredValue(value, config) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value, config);
          },
          useTransition: function useTransition(config) {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition(config);
          },
          useEvent: function useEvent(event) {
            currentHookNameInDev = "useEvent";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEventListener();
          }
        };
        InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function readContext(context, observedBits) {
            warnInvalidContextAccess();
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useResponder: function useResponder(responder, props) {
            currentHookNameInDev = "useResponder";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return createDeprecatedResponderListener(responder, props);
          },
          useDeferredValue: function useDeferredValue(value, config) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value, config);
          },
          useTransition: function useTransition(config) {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition(config);
          },
          useEvent: function useEvent(event) {
            currentHookNameInDev = "useEvent";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEventListener();
          }
        };
        InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function readContext(context, observedBits) {
            warnInvalidContextAccess();
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useResponder: function useResponder(responder, props) {
            currentHookNameInDev = "useResponder";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return createDeprecatedResponderListener(responder, props);
          },
          useDeferredValue: function useDeferredValue(value, config) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value, config);
          },
          useTransition: function useTransition(config) {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition(config);
          },
          useEvent: function useEvent(event) {
            currentHookNameInDev = "useEvent";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEventListener();
          }
        };
      }
      var now$1 = Scheduler.unstable_now;
      var commitTime = 0;
      var profilerStartTime = -1;

      function getCommitTime() {
        return commitTime;
      }

      function recordCommitTime() {
        commitTime = now$1();
      }

      function startProfilerTimer(fiber) {
        profilerStartTime = now$1();

        if (fiber.actualStartTime < 0) {
          fiber.actualStartTime = now$1();
        }
      }

      function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
      }

      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
          var elapsedTime = now$1() - profilerStartTime;
          fiber.actualDuration += elapsedTime;

          if (overrideBaseTime) {
            fiber.selfBaseDuration = elapsedTime;
          }

          profilerStartTime = -1;
        }
      }

      function enterHydrationState(fiber) {
        {
          return false;
        }
      }

      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        {
          {
            throw Error("Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }

      function prepareToHydrateHostTextInstance(fiber) {
        {
          {
            throw Error("Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var shouldUpdate = hydrateTextInstance();
      }

      function popHydrationState(fiber) {
        {
          return false;
        }
      }

      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var didReceiveUpdate = false;
      var didWarnAboutBadClass;
      var didWarnAboutModulePatternComponent;
      var didWarnAboutContextTypeOnFunctionComponent;
      var didWarnAboutGetDerivedStateOnFunctionComponent;
      var didWarnAboutFunctionRefs;
      var didWarnAboutReassigningProps;
      var didWarnAboutRevealOrder;
      var didWarnAboutTailOptions;
      {
        didWarnAboutBadClass = {};
        didWarnAboutModulePatternComponent = {};
        didWarnAboutContextTypeOnFunctionComponent = {};
        didWarnAboutGetDerivedStateOnFunctionComponent = {};
        didWarnAboutFunctionRefs = {};
        didWarnAboutReassigningProps = false;
        didWarnAboutRevealOrder = {};
        didWarnAboutTailOptions = {};
      }

      function reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime) {
        if (current === null) {
          workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
        } else {
          workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
        }
      }

      function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime) {
        workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderExpirationTime);
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      }

      function updateForwardRef(current, workInProgress, Component, nextProps, renderExpirationTime) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var innerPropTypes = Component.propTypes;

            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
            }
          }
        }
        var render = Component.render;
        var ref = workInProgress.ref;
        var nextChildren;
        prepareToReadContext(workInProgress, renderExpirationTime);
        {
          ReactCurrentOwner$1.current = workInProgress;
          setIsRendering(true);
          nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);
          setIsRendering(false);
        }

        if (current !== null && !didReceiveUpdate) {
          bailoutHooks(current, workInProgress, renderExpirationTime);
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
        }

        workInProgress.effectTag |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
      }

      function updateMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
        if (current === null) {
          var type = Component.type;

          if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
            var resolvedType = type;
            {
              resolvedType = resolveFunctionForHotReloading(type);
            }
            workInProgress.tag = SimpleMemoComponent;
            workInProgress.type = resolvedType;
            {
              validateFunctionComponentInDev(workInProgress, type);
            }
            return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateExpirationTime, renderExpirationTime);
          }

          {
            var innerPropTypes = type.propTypes;

            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
            }
          }
          var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
          child.ref = workInProgress.ref;
          child.return = workInProgress;
          workInProgress.child = child;
          return child;
        }

        {
          var _type = Component.type;
          var _innerPropTypes = _type.propTypes;

          if (_innerPropTypes) {
            checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
          }
        }
        var currentChild = current.child;

        if (updateExpirationTime < renderExpirationTime) {
          var prevProps = currentChild.memoizedProps;
          var compare = Component.compare;
          compare = compare !== null ? compare : shallowEqual;

          if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
          }
        }

        workInProgress.effectTag |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
      }

      function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerMemoType = workInProgress.elementType;

            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
              outerMemoType = refineResolvedLazyComponent(outerMemoType);
            }

            var outerPropTypes = outerMemoType && outerMemoType.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
            }
          }
        }

        if (current !== null) {
          var prevProps = current.memoizedProps;

          if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && workInProgress.type === current.type) {
            didReceiveUpdate = false;

            if (updateExpirationTime < renderExpirationTime) {
              workInProgress.expirationTime = current.expirationTime;
              return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
            }
          }
        }

        return updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime);
      }

      function updateFragment(current, workInProgress, renderExpirationTime) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
      }

      function updateMode(current, workInProgress, renderExpirationTime) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
      }

      function updateProfiler(current, workInProgress, renderExpirationTime) {
        {
          workInProgress.effectTag |= Update;
          var stateNode = workInProgress.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
        }
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
      }

      function markRef(current, workInProgress) {
        var ref = workInProgress.ref;

        if (current === null && ref !== null || current !== null && current.ref !== ref) {
          workInProgress.effectTag |= Ref;
        }
      }

      function updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var innerPropTypes = Component.propTypes;

            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
            }
          }
        }
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
          context = getMaskedContext(workInProgress, unmaskedContext);
        }
        var nextChildren;
        prepareToReadContext(workInProgress, renderExpirationTime);
        {
          ReactCurrentOwner$1.current = workInProgress;
          setIsRendering(true);
          nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);
          setIsRendering(false);
        }

        if (current !== null && !didReceiveUpdate) {
          bailoutHooks(current, workInProgress, renderExpirationTime);
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
        }

        workInProgress.effectTag |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
      }

      function updateClassComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var innerPropTypes = Component.propTypes;

            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
            }
          }
        }
        var hasContext;

        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress);
        } else {
          hasContext = false;
        }

        prepareToReadContext(workInProgress, renderExpirationTime);
        var instance = workInProgress.stateNode;
        var shouldUpdate;

        if (instance === null) {
          if (current !== null) {
            current.alternate = null;
            workInProgress.alternate = null;
            workInProgress.effectTag |= Placement;
          }

          constructClassInstance(workInProgress, Component, nextProps);
          mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
          shouldUpdate = true;
        } else if (current === null) {
          shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        } else {
          shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderExpirationTime);
        }

        var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);
        {
          var inst = workInProgress.stateNode;

          if (inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) {
              error("It looks like %s is reassigning its own `this.props` while rendering. " + "This is not supported and can lead to confusing bugs.", getComponentName(workInProgress.type) || "a component");
            }

            didWarnAboutReassigningProps = true;
          }
        }
        return nextUnitOfWork;
      }

      function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
        markRef(current, workInProgress);
        var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

        if (!shouldUpdate && !didCaptureError) {
          if (hasContext) {
            invalidateContextProvider(workInProgress, Component, false);
          }

          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
        }

        var instance = workInProgress.stateNode;
        ReactCurrentOwner$1.current = workInProgress;
        var nextChildren;

        if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
          nextChildren = null;
          {
            stopProfilerTimerIfRunning();
          }
        } else {
          {
            setIsRendering(true);
            nextChildren = instance.render();
            setIsRendering(false);
          }
        }

        workInProgress.effectTag |= PerformedWork;

        if (current !== null && didCaptureError) {
          forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime);
        } else {
          reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
        }

        workInProgress.memoizedState = instance.state;

        if (hasContext) {
          invalidateContextProvider(workInProgress, Component, true);
        }

        return workInProgress.child;
      }

      function pushHostRootContext(workInProgress) {
        var root = workInProgress.stateNode;

        if (root.pendingContext) {
          pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
        } else if (root.context) {
          pushTopLevelContextObject(workInProgress, root.context, false);
        }

        pushHostContainer(workInProgress, root.containerInfo);
      }

      function updateHostRoot(current, workInProgress, renderExpirationTime) {
        pushHostRootContext(workInProgress);
        var updateQueue = workInProgress.updateQueue;

        if (!(current !== null && updateQueue !== null)) {
          throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
        }

        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState !== null ? prevState.element : null;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderExpirationTime);
        var nextState = workInProgress.memoizedState;
        var nextChildren = nextState.element;

        if (nextChildren === prevChildren) {
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
        }

        var root = workInProgress.stateNode;

        if (root.hydrate && enterHydrationState()) {
          var child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
          workInProgress.child = child;
          var node = child;

          while (node) {
            node.effectTag = node.effectTag & ~Placement | Hydrating;
            node = node.sibling;
          }
        } else {
          reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
        }

        return workInProgress.child;
      }

      function updateHostComponent(current, workInProgress, renderExpirationTime) {
        pushHostContext(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current !== null ? current.memoizedProps : null;
        var nextChildren = nextProps.children;

        if (prevProps !== null && shouldSetTextContent()) {
          workInProgress.effectTag |= ContentReset;
        }

        markRef(current, workInProgress);

        if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree()) {
          {
            markSpawnedWork(Never);
          }
          workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
          return null;
        }

        reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
      }

      function updateHostText(current, workInProgress) {
        return null;
      }

      function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress.alternate = null;
          workInProgress.effectTag |= Placement;
        }

        var props = workInProgress.pendingProps;
        cancelWorkTimer(workInProgress);
        var Component = readLazyComponentType(elementType);
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        startWorkTimer(workInProgress);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;

        switch (resolvedTag) {
          case FunctionComponent:
            {
              {
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
              return child;
            }

          case ClassComponent:
            {
              {
                workInProgress.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
              return child;
            }

          case ForwardRef:
            {
              {
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
              return child;
            }

          case MemoComponent:
            {
              {
                if (workInProgress.type !== workInProgress.elementType) {
                  var outerPropTypes = Component.propTypes;

                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component));
                  }
                }
              }
              child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), updateExpirationTime, renderExpirationTime);
              return child;
            }
        }

        var hint = "";
        {
          if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
            hint = " Did you wrap a component in React.lazy() more than once?";
          }
        }
        {
          throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
        }
      }

      function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress.alternate = null;
          workInProgress.effectTag |= Placement;
        }

        workInProgress.tag = ClassComponent;
        var hasContext;

        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress);
        } else {
          hasContext = false;
        }

        prepareToReadContext(workInProgress, renderExpirationTime);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
      }

      function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress.alternate = null;
          workInProgress.effectTag |= Placement;
        }

        var props = workInProgress.pendingProps;
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
          context = getMaskedContext(workInProgress, unmaskedContext);
        }
        prepareToReadContext(workInProgress, renderExpirationTime);
        var value;
        {
          if (Component.prototype && typeof Component.prototype.render === "function") {
            var componentName = getComponentName(Component) || "Unknown";

            if (!didWarnAboutBadClass[componentName]) {
              error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + "This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
              didWarnAboutBadClass[componentName] = true;
            }
          }

          if (workInProgress.mode & StrictMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
          }

          ReactCurrentOwner$1.current = workInProgress;
          value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
        }
        workInProgress.effectTag |= PerformedWork;

        if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
          {
            var _componentName = getComponentName(Component) || "Unknown";

            if (!didWarnAboutModulePatternComponent[_componentName]) {
              error("The <%s /> component appears to be a function component that returns a class instance. " + "Change %s to a class that extends React.Component instead. " + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + "cannot be called with `new` by React.", _componentName, _componentName, _componentName);
              didWarnAboutModulePatternComponent[_componentName] = true;
            }
          }
          workInProgress.tag = ClassComponent;
          workInProgress.memoizedState = null;
          workInProgress.updateQueue = null;
          var hasContext = false;

          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
          } else {
            hasContext = false;
          }

          workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
          initializeUpdateQueue(workInProgress);
          var getDerivedStateFromProps = Component.getDerivedStateFromProps;

          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
          }

          adoptClassInstance(workInProgress, value);
          mountClassInstance(workInProgress, Component, props, renderExpirationTime);
          return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
        } else {
          workInProgress.tag = FunctionComponent;
          reconcileChildren(null, workInProgress, value, renderExpirationTime);
          {
            validateFunctionComponentInDev(workInProgress, Component);
          }
          return workInProgress.child;
        }
      }

      function validateFunctionComponentInDev(workInProgress, Component) {
        {
          if (Component) {
            if (Component.childContextTypes) {
              error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
            }
          }

          if (workInProgress.ref !== null) {
            var info = "";
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();

            if (ownerName) {
              info += "\n\nCheck the render method of `" + ownerName + "`.";
            }

            var warningKey = ownerName || workInProgress._debugID || "";
            var debugSource = workInProgress._debugSource;

            if (debugSource) {
              warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
            }

            if (!didWarnAboutFunctionRefs[warningKey]) {
              didWarnAboutFunctionRefs[warningKey] = true;
              error("Function components cannot be given refs. " + "Attempts to access this ref will fail. " + "Did you mean to use React.forwardRef()?%s", info);
            }
          }

          if (typeof Component.getDerivedStateFromProps === "function") {
            var _componentName2 = getComponentName(Component) || "Unknown";

            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
              error("%s: Function components do not support getDerivedStateFromProps.", _componentName2);
              didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
            }
          }

          if (typeof Component.contextType === "object" && Component.contextType !== null) {
            var _componentName3 = getComponentName(Component) || "Unknown";

            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
              error("%s: Function components do not support contextType.", _componentName3);
              didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
            }
          }
        }
      }

      var SUSPENDED_MARKER = {
        dehydrated: null,
        retryTime: NoWork
      };

      function shouldRemainOnFallback(suspenseContext, current, workInProgress) {
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current === null || current.memoizedState !== null);
      }

      function updateSuspenseComponent(current, workInProgress, renderExpirationTime) {
        var mode = workInProgress.mode;
        var nextProps = workInProgress.pendingProps;
        {
          if (shouldSuspend(workInProgress)) {
            workInProgress.effectTag |= DidCapture;
          }
        }
        var suspenseContext = suspenseStackCursor.current;
        var nextDidTimeout = false;
        var didSuspend = (workInProgress.effectTag & DidCapture) !== NoEffect;

        if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
          nextDidTimeout = true;
          workInProgress.effectTag &= ~DidCapture;
        } else {
          if (current === null || current.memoizedState !== null) {
            if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
              suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
          }
        }

        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext);

        if (current === null) {
          if (nextProps.fallback !== undefined) ;

          if (nextDidTimeout) {
            var nextFallbackChildren = nextProps.fallback;
            var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
            primaryChildFragment.return = workInProgress;

            if ((workInProgress.mode & BlockingMode) === NoMode) {
              var progressedState = workInProgress.memoizedState;
              var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
              primaryChildFragment.child = progressedPrimaryChild;
              var progressedChild = progressedPrimaryChild;

              while (progressedChild !== null) {
                progressedChild.return = primaryChildFragment;
                progressedChild = progressedChild.sibling;
              }
            }

            var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
            fallbackChildFragment.return = workInProgress;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress.memoizedState = SUSPENDED_MARKER;
            workInProgress.child = primaryChildFragment;
            return fallbackChildFragment;
          } else {
            var nextPrimaryChildren = nextProps.children;
            workInProgress.memoizedState = null;
            return workInProgress.child = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
          }
        } else {
          var prevState = current.memoizedState;

          if (prevState !== null) {
            var currentPrimaryChildFragment = current.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;

            if (nextDidTimeout) {
              var _nextFallbackChildren2 = nextProps.fallback;

              var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps);

              _primaryChildFragment2.return = workInProgress;

              if ((workInProgress.mode & BlockingMode) === NoMode) {
                var _progressedState = workInProgress.memoizedState;

                var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;

                if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
                  _primaryChildFragment2.child = _progressedPrimaryChild;
                  var _progressedChild2 = _progressedPrimaryChild;

                  while (_progressedChild2 !== null) {
                    _progressedChild2.return = _primaryChildFragment2;
                    _progressedChild2 = _progressedChild2.sibling;
                  }
                }
              }

              if (workInProgress.mode & ProfileMode) {
                var _treeBaseDuration = 0;
                var _hiddenChild = _primaryChildFragment2.child;

                while (_hiddenChild !== null) {
                  _treeBaseDuration += _hiddenChild.treeBaseDuration;
                  _hiddenChild = _hiddenChild.sibling;
                }

                _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
              }

              var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2);

              _fallbackChildFragment2.return = workInProgress;
              _primaryChildFragment2.sibling = _fallbackChildFragment2;
              _primaryChildFragment2.childExpirationTime = NoWork;
              workInProgress.memoizedState = SUSPENDED_MARKER;
              workInProgress.child = _primaryChildFragment2;
              return _fallbackChildFragment2;
            } else {
              var _nextPrimaryChildren = nextProps.children;
              var currentPrimaryChild = currentPrimaryChildFragment.child;
              var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime);
              workInProgress.memoizedState = null;
              return workInProgress.child = primaryChild;
            }
          } else {
            var _currentPrimaryChild = current.child;

            if (nextDidTimeout) {
              var _nextFallbackChildren3 = nextProps.fallback;

              var _primaryChildFragment3 = createFiberFromFragment(null, mode, NoWork, null);

              _primaryChildFragment3.return = workInProgress;
              _primaryChildFragment3.child = _currentPrimaryChild;

              if (_currentPrimaryChild !== null) {
                _currentPrimaryChild.return = _primaryChildFragment3;
              }

              if ((workInProgress.mode & BlockingMode) === NoMode) {
                var _progressedState2 = workInProgress.memoizedState;

                var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;

                _primaryChildFragment3.child = _progressedPrimaryChild2;
                var _progressedChild3 = _progressedPrimaryChild2;

                while (_progressedChild3 !== null) {
                  _progressedChild3.return = _primaryChildFragment3;
                  _progressedChild3 = _progressedChild3.sibling;
                }
              }

              if (workInProgress.mode & ProfileMode) {
                var _treeBaseDuration2 = 0;
                var _hiddenChild2 = _primaryChildFragment3.child;

                while (_hiddenChild2 !== null) {
                  _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
                  _hiddenChild2 = _hiddenChild2.sibling;
                }

                _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
              }

              var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime, null);

              _fallbackChildFragment3.return = workInProgress;
              _primaryChildFragment3.sibling = _fallbackChildFragment3;
              _fallbackChildFragment3.effectTag |= Placement;
              _primaryChildFragment3.childExpirationTime = NoWork;
              workInProgress.memoizedState = SUSPENDED_MARKER;
              workInProgress.child = _primaryChildFragment3;
              return _fallbackChildFragment3;
            } else {
              workInProgress.memoizedState = null;
              var _nextPrimaryChildren2 = nextProps.children;
              return workInProgress.child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
            }
          }
        }
      }

      function scheduleWorkOnFiber(fiber, renderExpirationTime) {
        if (fiber.expirationTime < renderExpirationTime) {
          fiber.expirationTime = renderExpirationTime;
        }

        var alternate = fiber.alternate;

        if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
          alternate.expirationTime = renderExpirationTime;
        }

        scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
      }

      function propagateSuspenseContextChange(workInProgress, firstChild, renderExpirationTime) {
        var node = firstChild;

        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;

            if (state !== null) {
              scheduleWorkOnFiber(node, renderExpirationTime);
            }
          } else if (node.tag === SuspenseListComponent) {
            scheduleWorkOnFiber(node, renderExpirationTime);
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === workInProgress) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress) {
              return;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      }

      function findLastContentRow(firstChild) {
        var row = firstChild;
        var lastContentRow = null;

        while (row !== null) {
          var currentRow = row.alternate;

          if (currentRow !== null && findFirstSuspended(currentRow) === null) {
            lastContentRow = row;
          }

          row = row.sibling;
        }

        return lastContentRow;
      }

      function validateRevealOrder(revealOrder) {
        {
          if (revealOrder !== undefined && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;

            if (typeof revealOrder === "string") {
              switch (revealOrder.toLowerCase()) {
                case "together":
                case "forwards":
                case "backwards":
                  {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }

                case "forward":
                case "backward":
                  {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }

                default:
                  error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
                  break;
              }
            } else {
              error("%s is not a supported value for revealOrder on <SuspenseList />. " + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
            }
          }
        }
      }

      function validateTailOptions(tailMode, revealOrder) {
        {
          if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== "collapsed" && tailMode !== "hidden") {
              didWarnAboutTailOptions[tailMode] = true;
              error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
              didWarnAboutTailOptions[tailMode] = true;
              error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
            }
          }
        }
      }

      function validateSuspenseListNestedChild(childSlot, index) {
        {
          var isArray = Array.isArray(childSlot);
          var isIterable = !isArray && typeof getIteratorFn(childSlot) === "function";

          if (isArray || isIterable) {
            var type = isArray ? "array" : "iterable";
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in " + "an additional SuspenseList to configure its revealOrder: " + "<SuspenseList revealOrder=...> ... " + "<SuspenseList revealOrder=...>{%s}</SuspenseList> ... " + "</SuspenseList>", type, index, type);
            return false;
          }
        }
        return true;
      }

      function validateSuspenseListChildren(children, revealOrder) {
        {
          if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== undefined && children !== null && children !== false) {
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                if (!validateSuspenseListNestedChild(children[i], i)) {
                  return;
                }
              }
            } else {
              var iteratorFn = getIteratorFn(children);

              if (typeof iteratorFn === "function") {
                var childrenIterator = iteratorFn.call(children);

                if (childrenIterator) {
                  var step = childrenIterator.next();
                  var _i = 0;

                  for (; !step.done; step = childrenIterator.next()) {
                    if (!validateSuspenseListNestedChild(step.value, _i)) {
                      return;
                    }

                    _i++;
                  }
                }
              } else {
                error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + "This is not useful since it needs multiple rows. " + "Did you mean to pass multiple children or an array?", revealOrder);
              }
            }
          }
        }
      }

      function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
        var renderState = workInProgress.memoizedState;

        if (renderState === null) {
          workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailExpiration: 0,
            tailMode: tailMode,
            lastEffect: lastEffectBeforeRendering
          };
        } else {
          renderState.isBackwards = isBackwards;
          renderState.rendering = null;
          renderState.renderingStartTime = 0;
          renderState.last = lastContentRow;
          renderState.tail = tail;
          renderState.tailExpiration = 0;
          renderState.tailMode = tailMode;
          renderState.lastEffect = lastEffectBeforeRendering;
        }
      }

      function updateSuspenseListComponent(current, workInProgress, renderExpirationTime) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

        if (shouldForceFallback) {
          suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          workInProgress.effectTag |= DidCapture;
        } else {
          var didSuspendBefore = current !== null && (current.effectTag & DidCapture) !== NoEffect;

          if (didSuspendBefore) {
            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderExpirationTime);
          }

          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }

        pushSuspenseContext(workInProgress, suspenseContext);

        if ((workInProgress.mode & BlockingMode) === NoMode) {
          workInProgress.memoizedState = null;
        } else {
          switch (revealOrder) {
            case "forwards":
              {
                var lastContentRow = findLastContentRow(workInProgress.child);
                var tail;

                if (lastContentRow === null) {
                  tail = workInProgress.child;
                  workInProgress.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }

                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode, workInProgress.lastEffect);
                break;
              }

            case "backwards":
              {
                var _tail = null;
                var row = workInProgress.child;
                workInProgress.child = null;

                while (row !== null) {
                  var currentRow = row.alternate;

                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress.child = row;
                    break;
                  }

                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }

                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode, workInProgress.lastEffect);
                break;
              }

            case "together":
              {
                initSuspenseListRenderState(workInProgress, false, null, null, undefined, workInProgress.lastEffect);
                break;
              }

            default:
              {
                workInProgress.memoizedState = null;
              }
          }
        }

        return workInProgress.child;
      }

      function updatePortalComponent(current, workInProgress, renderExpirationTime) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;

        if (current === null) {
          workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
        } else {
          reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
        }

        return workInProgress.child;
      }

      function updateContextProvider(current, workInProgress, renderExpirationTime) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        {
          var providerPropTypes = workInProgress.type.propTypes;

          if (providerPropTypes) {
            checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
          }
        }
        pushProvider(workInProgress, newValue);

        if (oldProps !== null) {
          var oldValue = oldProps.value;
          var changedBits = calculateChangedBits(context, newValue, oldValue);

          if (changedBits === 0) {
            if (oldProps.children === newProps.children && !hasContextChanged()) {
              return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
            }
          } else {
            propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
          }
        }

        var newChildren = newProps.children;
        reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
        return workInProgress.child;
      }

      var hasWarnedAboutUsingContextAsConsumer = false;

      function updateContextConsumer(current, workInProgress, renderExpirationTime) {
        var context = workInProgress.type;
        {
          if (context._context === undefined) {
            if (context !== context.Consumer) {
              if (!hasWarnedAboutUsingContextAsConsumer) {
                hasWarnedAboutUsingContextAsConsumer = true;
                error("Rendering <Context> directly is not supported and will be removed in " + "a future major release. Did you mean to render <Context.Consumer> instead?");
              }
            }
          } else {
            context = context._context;
          }
        }
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        {
          if (typeof render !== "function") {
            error("A context consumer was rendered with multiple children, or a child " + "that isn't a function. A context consumer expects a single child " + "that is a function. If you did pass a function, make sure there " + "is no trailing or leading whitespace around it.");
          }
        }
        prepareToReadContext(workInProgress, renderExpirationTime);

        var newValue = _readContext(context, newProps.unstable_observedBits);

        var newChildren;
        {
          ReactCurrentOwner$1.current = workInProgress;
          setIsRendering(true);
          newChildren = render(newValue);
          setIsRendering(false);
        }
        workInProgress.effectTag |= PerformedWork;
        reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
        return workInProgress.child;
      }

      function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
      }

      function bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime) {
        cancelWorkTimer(workInProgress);

        if (current !== null) {
          workInProgress.dependencies = current.dependencies;
        }

        {
          stopProfilerTimerIfRunning();
        }
        var updateExpirationTime = workInProgress.expirationTime;

        if (updateExpirationTime !== NoWork) {
          markUnprocessedUpdateTime(updateExpirationTime);
        }

        var childExpirationTime = workInProgress.childExpirationTime;

        if (childExpirationTime < renderExpirationTime) {
          return null;
        } else {
          cloneChildFibers(current, workInProgress);
          return workInProgress.child;
        }
      }

      function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
        {
          var returnFiber = oldWorkInProgress.return;

          if (returnFiber === null) {
            throw new Error("Cannot swap the root fiber.");
          }

          current.alternate = null;
          oldWorkInProgress.alternate = null;
          newWorkInProgress.index = oldWorkInProgress.index;
          newWorkInProgress.sibling = oldWorkInProgress.sibling;
          newWorkInProgress.return = oldWorkInProgress.return;
          newWorkInProgress.ref = oldWorkInProgress.ref;

          if (oldWorkInProgress === returnFiber.child) {
            returnFiber.child = newWorkInProgress;
          } else {
            var prevSibling = returnFiber.child;

            if (prevSibling === null) {
              throw new Error("Expected parent to have a child.");
            }

            while (prevSibling.sibling !== oldWorkInProgress) {
              prevSibling = prevSibling.sibling;

              if (prevSibling === null) {
                throw new Error("Expected to find the previous sibling.");
              }
            }

            prevSibling.sibling = newWorkInProgress;
          }

          var last = returnFiber.lastEffect;

          if (last !== null) {
            last.nextEffect = current;
            returnFiber.lastEffect = current;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = current;
          }

          current.nextEffect = null;
          current.effectTag = Deletion;
          newWorkInProgress.effectTag |= Placement;
          return newWorkInProgress;
        }
      }

      function beginWork(current, workInProgress, renderExpirationTime) {
        var updateExpirationTime = workInProgress.expirationTime;
        {
          if (workInProgress._debugNeedsRemount && current !== null) {
            return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.expirationTime));
          }
        }

        if (current !== null) {
          var oldProps = current.memoizedProps;
          var newProps = workInProgress.pendingProps;

          if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current.type) {
            didReceiveUpdate = true;
          } else if (updateExpirationTime < renderExpirationTime) {
            didReceiveUpdate = false;

            switch (workInProgress.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress);
                break;

              case HostComponent:
                pushHostContext(workInProgress);

                if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(workInProgress.type)) {
                  {
                    markSpawnedWork(Never);
                  }
                  workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
                  return null;
                }

                break;

              case ClassComponent:
                {
                  var Component = workInProgress.type;

                  if (isContextProvider(Component)) {
                    pushContextProvider(workInProgress);
                  }

                  break;
                }

              case HostPortal:
                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                break;

              case ContextProvider:
                {
                  var newValue = workInProgress.memoizedProps.value;
                  pushProvider(workInProgress, newValue);
                  break;
                }

              case Profiler:
                {
                  var hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

                  if (hasChildWork) {
                    workInProgress.effectTag |= Update;
                  }

                  var stateNode = workInProgress.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
                break;

              case SuspenseComponent:
                {
                  var state = workInProgress.memoizedState;

                  if (state !== null) {
                    var primaryChildFragment = workInProgress.child;
                    var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;

                    if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
                      return updateSuspenseComponent(current, workInProgress, renderExpirationTime);
                    } else {
                      pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                      var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);

                      if (child !== null) {
                        return child.sibling;
                      } else {
                        return null;
                      }
                    }
                  } else {
                    pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  }

                  break;
                }

              case SuspenseListComponent:
                {
                  var didSuspendBefore = (current.effectTag & DidCapture) !== NoEffect;

                  var _hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

                  if (didSuspendBefore) {
                    if (_hasChildWork) {
                      return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
                    }

                    workInProgress.effectTag |= DidCapture;
                  }

                  var renderState = workInProgress.memoizedState;

                  if (renderState !== null) {
                    renderState.rendering = null;
                    renderState.tail = null;
                  }

                  pushSuspenseContext(workInProgress, suspenseStackCursor.current);

                  if (_hasChildWork) {
                    break;
                  } else {
                    return null;
                  }
                }
            }

            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
          } else {
            didReceiveUpdate = false;
          }
        } else {
          didReceiveUpdate = false;
        }

        workInProgress.expirationTime = NoWork;

        switch (workInProgress.tag) {
          case IndeterminateComponent:
            {
              return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderExpirationTime);
            }

          case LazyComponent:
            {
              var elementType = workInProgress.elementType;
              return mountLazyComponent(current, workInProgress, elementType, updateExpirationTime, renderExpirationTime);
            }

          case FunctionComponent:
            {
              var _Component = workInProgress.type;
              var unresolvedProps = workInProgress.pendingProps;
              var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
              return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderExpirationTime);
            }

          case ClassComponent:
            {
              var _Component2 = workInProgress.type;
              var _unresolvedProps = workInProgress.pendingProps;

              var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

              return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
            }

          case HostRoot:
            return updateHostRoot(current, workInProgress, renderExpirationTime);

          case HostComponent:
            return updateHostComponent(current, workInProgress, renderExpirationTime);

          case HostText:
            return updateHostText();

          case SuspenseComponent:
            return updateSuspenseComponent(current, workInProgress, renderExpirationTime);

          case HostPortal:
            return updatePortalComponent(current, workInProgress, renderExpirationTime);

          case ForwardRef:
            {
              var type = workInProgress.type;
              var _unresolvedProps2 = workInProgress.pendingProps;

              var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

              return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderExpirationTime);
            }

          case Fragment:
            return updateFragment(current, workInProgress, renderExpirationTime);

          case Mode:
            return updateMode(current, workInProgress, renderExpirationTime);

          case Profiler:
            return updateProfiler(current, workInProgress, renderExpirationTime);

          case ContextProvider:
            return updateContextProvider(current, workInProgress, renderExpirationTime);

          case ContextConsumer:
            return updateContextConsumer(current, workInProgress, renderExpirationTime);

          case MemoComponent:
            {
              var _type2 = workInProgress.type;
              var _unresolvedProps3 = workInProgress.pendingProps;

              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

              {
                if (workInProgress.type !== workInProgress.elementType) {
                  var outerPropTypes = _type2.propTypes;

                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
            }

          case SimpleMemoComponent:
            {
              return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
            }

          case IncompleteClassComponent:
            {
              var _Component3 = workInProgress.type;
              var _unresolvedProps4 = workInProgress.pendingProps;

              var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

              return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
            }

          case SuspenseListComponent:
            {
              return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
            }
        }

        {
          throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function markUpdate(workInProgress) {
        workInProgress.effectTag |= Update;
      }

      function markRef$1(workInProgress) {
        workInProgress.effectTag |= Ref;
      }

      var _appendAllChildren;

      var updateHostContainer;
      var updateHostComponent$1;
      var updateHostText$1;
      {
        _appendAllChildren = function appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {
          var node = workInProgress.child;

          while (node !== null) {
            if (node.tag === HostComponent) {
              var instance = node.stateNode;

              if (needsVisibilityToggle && isHidden) {
                var props = node.memoizedProps;
                var type = node.type;
                instance = cloneHiddenInstance(instance);
              }

              appendInitialChild(parent, instance);
            } else if (node.tag === HostText) {
              var _instance = node.stateNode;

              if (needsVisibilityToggle && isHidden) {
                var text = node.memoizedProps;
                _instance = cloneHiddenTextInstance();
              }

              appendInitialChild(parent, _instance);
            } else if (node.tag === HostPortal) ;else if (node.tag === SuspenseComponent) {
              if ((node.effectTag & Update) !== NoEffect) {
                var newIsHidden = node.memoizedState !== null;

                if (newIsHidden) {
                  var primaryChildParent = node.child;

                  if (primaryChildParent !== null) {
                    if (primaryChildParent.child !== null) {
                      primaryChildParent.child.return = primaryChildParent;

                      _appendAllChildren(parent, primaryChildParent, true, newIsHidden);
                    }

                    var fallbackChildParent = primaryChildParent.sibling;

                    if (fallbackChildParent !== null) {
                      fallbackChildParent.return = node;
                      node = fallbackChildParent;
                      continue;
                    }
                  }
                }
              }

              if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            node = node;

            if (node === workInProgress) {
              return;
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress) {
                return;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }
        };

        var appendAllChildrenToContainer = function appendAllChildrenToContainer(containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
          var node = workInProgress.child;

          while (node !== null) {
            if (node.tag === HostComponent) {
              var instance = node.stateNode;

              if (needsVisibilityToggle && isHidden) {
                var props = node.memoizedProps;
                var type = node.type;
                instance = cloneHiddenInstance(instance);
              }

              appendChildToContainerChildSet(containerChildSet, instance);
            } else if (node.tag === HostText) {
              var _instance3 = node.stateNode;

              if (needsVisibilityToggle && isHidden) {
                var text = node.memoizedProps;
                _instance3 = cloneHiddenTextInstance();
              }

              appendChildToContainerChildSet(containerChildSet, _instance3);
            } else if (node.tag === HostPortal) ;else if (node.tag === SuspenseComponent) {
              if ((node.effectTag & Update) !== NoEffect) {
                var newIsHidden = node.memoizedState !== null;

                if (newIsHidden) {
                  var primaryChildParent = node.child;

                  if (primaryChildParent !== null) {
                    if (primaryChildParent.child !== null) {
                      primaryChildParent.child.return = primaryChildParent;
                      appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);
                    }

                    var fallbackChildParent = primaryChildParent.sibling;

                    if (fallbackChildParent !== null) {
                      fallbackChildParent.return = node;
                      node = fallbackChildParent;
                      continue;
                    }
                  }
                }
              }

              if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            node = node;

            if (node === workInProgress) {
              return;
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress) {
                return;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }
        };

        updateHostContainer = function updateHostContainer(workInProgress) {
          var portalOrRoot = workInProgress.stateNode;
          var childrenUnchanged = workInProgress.firstEffect === null;
          if (childrenUnchanged) ;else {
            var container = portalOrRoot.containerInfo;
            var newChildSet = createContainerChildSet(container);
            appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
            portalOrRoot.pendingChildren = newChildSet;
            markUpdate(workInProgress);
            finalizeContainerChildren(container, newChildSet);
          }
        };

        updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance) {
          var currentInstance = current.stateNode;
          var oldProps = current.memoizedProps;
          var childrenUnchanged = workInProgress.firstEffect === null;

          if (childrenUnchanged && oldProps === newProps) {
            workInProgress.stateNode = currentInstance;
            return;
          }

          var recyclableInstance = workInProgress.stateNode;
          var currentHostContext = getHostContext();
          var updatePayload = null;

          if (oldProps !== newProps) {
            updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps);
          }

          if (childrenUnchanged && updatePayload === null) {
            workInProgress.stateNode = currentInstance;
            return;
          }

          var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged);
          workInProgress.stateNode = newInstance;

          if (childrenUnchanged) {
            markUpdate(workInProgress);
          } else {
            _appendAllChildren(newInstance, workInProgress, false, false);
          }
        };

        updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
          if (oldText !== newText) {
            var rootContainerInstance = getRootHostContainer();
            var currentHostContext = getHostContext();
            workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
            markUpdate(workInProgress);
          } else {
            workInProgress.stateNode = current.stateNode;
          }
        };
      }

      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        switch (renderState.tailMode) {
          case "hidden":
            {
              var tailNode = renderState.tail;
              var lastTailNode = null;

              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }

                tailNode = tailNode.sibling;
              }

              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }

              break;
            }

          case "collapsed":
            {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;

              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }

                _tailNode = _tailNode.sibling;
              }

              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }

              break;
            }
        }
      }

      function completeWork(current, workInProgress, renderExpirationTime) {
        var newProps = workInProgress.pendingProps;

        switch (workInProgress.tag) {
          case IndeterminateComponent:
          case LazyComponent:
          case SimpleMemoComponent:
          case FunctionComponent:
          case ForwardRef:
          case Fragment:
          case Mode:
          case Profiler:
          case ContextConsumer:
          case MemoComponent:
            return null;

          case ClassComponent:
            {
              var Component = workInProgress.type;

              if (isContextProvider(Component)) {
                popContext(workInProgress);
              }

              return null;
            }

          case HostRoot:
            {
              popHostContainer(workInProgress);
              popTopLevelContextObject(workInProgress);
              var fiberRoot = workInProgress.stateNode;

              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }

              if (current === null || current.child === null) {
                var wasHydrated = popHydrationState();

                if (wasHydrated) {
                  markUpdate(workInProgress);
                }
              }

              updateHostContainer(workInProgress);
              return null;
            }

          case HostComponent:
            {
              popHostContext(workInProgress);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress.type;

              if (current !== null && workInProgress.stateNode != null) {
                updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

                if (current.ref !== workInProgress.ref) {
                  markRef$1(workInProgress);
                }
              } else {
                if (!newProps) {
                  if (!(workInProgress.stateNode !== null)) {
                    throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }

                  return null;
                }

                var currentHostContext = getHostContext();

                var _wasHydrated = popHydrationState();

                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance()) {
                    markUpdate(workInProgress);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);

                  _appendAllChildren(instance, workInProgress, false, false);

                  workInProgress.stateNode = instance;
                }

                if (workInProgress.ref !== null) {
                  markRef$1(workInProgress);
                }
              }

              return null;
            }

          case HostText:
            {
              var newText = newProps;

              if (current && workInProgress.stateNode != null) {
                var oldText = current.memoizedProps;
                updateHostText$1(current, workInProgress, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (!(workInProgress.stateNode !== null)) {
                    throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }

                var _rootContainerInstance = getRootHostContainer();

                var _currentHostContext = getHostContext();

                var _wasHydrated2 = popHydrationState();

                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance()) {
                    markUpdate(workInProgress);
                  }
                } else {
                  workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
              }

              return null;
            }

          case SuspenseComponent:
            {
              popSuspenseContext(workInProgress);
              var nextState = workInProgress.memoizedState;

              if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
                workInProgress.expirationTime = renderExpirationTime;
                return workInProgress;
              }

              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = false;

              if (current === null) {
                if (workInProgress.memoizedProps.fallback !== undefined) ;
              } else {
                var prevState = current.memoizedState;
                prevDidTimeout = prevState !== null;

                if (!nextDidTimeout && prevState !== null) {
                  var currentFallbackChild = current.child.sibling;

                  if (currentFallbackChild !== null) {
                    var first = workInProgress.firstEffect;

                    if (first !== null) {
                      workInProgress.firstEffect = currentFallbackChild;
                      currentFallbackChild.nextEffect = first;
                    } else {
                      workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                      currentFallbackChild.nextEffect = null;
                    }

                    currentFallbackChild.effectTag = Deletion;
                  }
                }
              }

              if (nextDidTimeout && !prevDidTimeout) {
                if ((workInProgress.mode & BlockingMode) !== NoMode) {
                  var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }

              {
                if (nextDidTimeout) {
                  workInProgress.effectTag |= Update;
                }
              }
              return null;
            }

          case HostPortal:
            popHostContainer(workInProgress);
            updateHostContainer(workInProgress);
            return null;

          case ContextProvider:
            popProvider(workInProgress);
            return null;

          case IncompleteClassComponent:
            {
              var _Component = workInProgress.type;

              if (isContextProvider(_Component)) {
                popContext(workInProgress);
              }

              return null;
            }

          case SuspenseListComponent:
            {
              popSuspenseContext(workInProgress);
              var renderState = workInProgress.memoizedState;

              if (renderState === null) {
                return null;
              }

              var didSuspendAlready = (workInProgress.effectTag & DidCapture) !== NoEffect;
              var renderedTail = renderState.rendering;

              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.effectTag & DidCapture) === NoEffect);

                  if (!cannotBeSuspended) {
                    var row = workInProgress.child;

                    while (row !== null) {
                      var suspended = findFirstSuspended(row);

                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress.effectTag |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThennables = suspended.updateQueue;

                        if (newThennables !== null) {
                          workInProgress.updateQueue = newThennables;
                          workInProgress.effectTag |= Update;
                        }

                        if (renderState.lastEffect === null) {
                          workInProgress.firstEffect = null;
                        }

                        workInProgress.lastEffect = renderState.lastEffect;
                        resetChildFibers(workInProgress, renderExpirationTime);
                        pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress.child;
                      }

                      row = row.sibling;
                    }
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);

                  if (_suspended !== null) {
                    workInProgress.effectTag |= DidCapture;
                    didSuspendAlready = true;
                    var _newThennables = _suspended.updateQueue;

                    if (_newThennables !== null) {
                      workInProgress.updateQueue = _newThennables;
                      workInProgress.effectTag |= Update;
                    }

                    cutOffTailIfNeeded(renderState, true);

                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate) {
                      var lastEffect = workInProgress.lastEffect = renderState.lastEffect;

                      if (lastEffect !== null) {
                        lastEffect.nextEffect = null;
                      }

                      return null;
                    }
                  } else if (now() * 2 - renderState.renderingStartTime > renderState.tailExpiration && renderExpirationTime > Never) {
                    workInProgress.effectTag |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    var nextPriority = renderExpirationTime - 1;
                    workInProgress.expirationTime = workInProgress.childExpirationTime = nextPriority;
                    {
                      markSpawnedWork(nextPriority);
                    }
                  }
                }

                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress.child;
                  workInProgress.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;

                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress.child = renderedTail;
                  }

                  renderState.last = renderedTail;
                }
              }

              if (renderState.tail !== null) {
                if (renderState.tailExpiration === 0) {
                  var TAIL_EXPIRATION_TIMEOUT_MS = 500;
                  renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS;
                }

                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.lastEffect = workInProgress.lastEffect;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;

                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }

                pushSuspenseContext(workInProgress, suspenseContext);
                return next;
              }

              return null;
            }
        }

        {
          throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function unwindWork(workInProgress, renderExpirationTime) {
        switch (workInProgress.tag) {
          case ClassComponent:
            {
              var Component = workInProgress.type;

              if (isContextProvider(Component)) {
                popContext(workInProgress);
              }

              var effectTag = workInProgress.effectTag;

              if (effectTag & ShouldCapture) {
                workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
                return workInProgress;
              }

              return null;
            }

          case HostRoot:
            {
              popHostContainer(workInProgress);
              popTopLevelContextObject(workInProgress);
              var _effectTag = workInProgress.effectTag;

              if (!((_effectTag & DidCapture) === NoEffect)) {
                throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
              }

              workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
              return workInProgress;
            }

          case HostComponent:
            {
              popHostContext(workInProgress);
              return null;
            }

          case SuspenseComponent:
            {
              popSuspenseContext(workInProgress);
              var _effectTag2 = workInProgress.effectTag;

              if (_effectTag2 & ShouldCapture) {
                workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
                return workInProgress;
              }

              return null;
            }

          case SuspenseListComponent:
            {
              popSuspenseContext(workInProgress);
              return null;
            }

          case HostPortal:
            popHostContainer(workInProgress);
            return null;

          case ContextProvider:
            popProvider(workInProgress);
            return null;

          default:
            return null;
        }
      }

      function unwindInterruptedWork(interruptedWork) {
        switch (interruptedWork.tag) {
          case ClassComponent:
            {
              var childContextTypes = interruptedWork.type.childContextTypes;

              if (childContextTypes !== null && childContextTypes !== undefined) {
                popContext(interruptedWork);
              }

              break;
            }

          case HostRoot:
            {
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              break;
            }

          case HostComponent:
            {
              popHostContext(interruptedWork);
              break;
            }

          case HostPortal:
            popHostContainer(interruptedWork);
            break;

          case SuspenseComponent:
            popSuspenseContext(interruptedWork);
            break;

          case SuspenseListComponent:
            popSuspenseContext(interruptedWork);
            break;

          case ContextProvider:
            popProvider(interruptedWork);
            break;
        }
      }

      function createCapturedValue(value, source) {
        return {
          value: value,
          source: source,
          stack: getStackByFiberInDevAndProd(source)
        };
      }

      if (!(typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog === "function")) {
        throw Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function.");
      }

      function showErrorDialog(capturedError) {
        return ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog(capturedError);
      }

      function logCapturedError(capturedError) {
        var logError = showErrorDialog(capturedError);

        if (logError === false) {
          return;
        }

        var error = capturedError.error;
        {
          var componentName = capturedError.componentName,
              componentStack = capturedError.componentStack,
              errorBoundaryName = capturedError.errorBoundaryName,
              errorBoundaryFound = capturedError.errorBoundaryFound,
              willRetry = capturedError.willRetry;

          if (error != null && error._suppressLogging) {
            if (errorBoundaryFound && willRetry) {
              return;
            }

            console["error"](error);
          }

          var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
          var errorBoundaryMessage;

          if (errorBoundaryFound && errorBoundaryName) {
            if (willRetry) {
              errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            } else {
              errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
            }
          } else {
            errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\n" + "Visit https://fb.me/react-error-boundaries to learn more about error boundaries.";
          }

          var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage);
          console["error"](combinedMessage);
        }
      }

      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      {
        didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
      }
      var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;

      function logError(boundary, errorInfo) {
        var source = errorInfo.source;
        var stack = errorInfo.stack;

        if (stack === null && source !== null) {
          stack = getStackByFiberInDevAndProd(source);
        }

        var capturedError = {
          componentName: source !== null ? getComponentName(source.type) : null,
          componentStack: stack !== null ? stack : "",
          error: errorInfo.value,
          errorBoundary: null,
          errorBoundaryName: null,
          errorBoundaryFound: false,
          willRetry: false
        };

        if (boundary !== null && boundary.tag === ClassComponent) {
          capturedError.errorBoundary = boundary.stateNode;
          capturedError.errorBoundaryName = getComponentName(boundary.type);
          capturedError.errorBoundaryFound = true;
          capturedError.willRetry = true;
        }

        try {
          logCapturedError(capturedError);
        } catch (e) {
          setTimeout(function () {
            throw e;
          });
        }
      }

      var callComponentWillUnmountWithTimer = function callComponentWillUnmountWithTimer(current, instance) {
        startPhaseTimer(current, "componentWillUnmount");
        instance.props = current.memoizedProps;
        instance.state = current.memoizedState;
        {
          instance.componentWillUnmount();
        }
        stopPhaseTimer();
      };

      function safelyCallComponentWillUnmount(current, instance) {
        {
          invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);

          if (hasCaughtError()) {
            var unmountError = clearCaughtError();
            captureCommitPhaseError(current, unmountError);
          }
        }
      }

      function safelyDetachRef(current) {
        var ref = current.ref;

        if (ref !== null) {
          if (typeof ref === "function") {
            {
              invokeGuardedCallback(null, ref, null, null);

              if (hasCaughtError()) {
                var refError = clearCaughtError();
                captureCommitPhaseError(current, refError);
              }
            }
          } else {
            ref.current = null;
          }
        }
      }

      function safelyCallDestroy(current, destroy) {
        {
          invokeGuardedCallback(null, destroy, null);

          if (hasCaughtError()) {
            var error = clearCaughtError();
            captureCommitPhaseError(current, error);
          }
        }
      }

      function commitBeforeMutationLifeCycles(current, finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
          case Block:
            {
              return;
            }

          case ClassComponent:
            {
              if (finishedWork.effectTag & Snapshot) {
                if (current !== null) {
                  var prevProps = current.memoizedProps;
                  var prevState = current.memoizedState;
                  startPhaseTimer(finishedWork, "getSnapshotBeforeUpdate");
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before " + "getSnapshotBeforeUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }

                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before " + "getSnapshotBeforeUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

                    if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) " + "must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  stopPhaseTimer();
                }
              }

              return;
            }

          case HostRoot:
          case HostComponent:
          case HostText:
          case HostPortal:
          case IncompleteClassComponent:
            return;
        }

        {
          throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function commitHookEffectListUnmount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;

          do {
            if ((effect.tag & tag) === tag) {
              var destroy = effect.destroy;
              effect.destroy = undefined;

              if (destroy !== undefined) {
                destroy();
              }
            }

            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }

      function commitHookEffectListMount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;

          do {
            if ((effect.tag & tag) === tag) {
              var create = effect.create;
              effect.destroy = create();
              {
                var destroy = effect.destroy;

                if (destroy !== undefined && typeof destroy !== "function") {
                  var addendum = void 0;

                  if (destroy === null) {
                    addendum = " You returned null. If your effect does not require clean " + "up, return undefined (or nothing).";
                  } else if (typeof destroy.then === "function") {
                    addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. " + "Instead, write the async function inside your effect " + "and call it immediately:\n\n" + "useEffect(() => {\n" + "  async function fetchData() {\n" + "    // You can await here\n" + "    const response = await MyAPI.getData(someId);\n" + "    // ...\n" + "  }\n" + "  fetchData();\n" + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + "Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching";
                  } else {
                    addendum = " You returned: " + destroy;
                  }

                  error("An effect function must not return anything besides a function, " + "which is used for clean-up.%s%s", addendum, getStackByFiberInDevAndProd(finishedWork));
                }
              }
            }

            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }

      function commitPassiveHookEffects(finishedWork) {
        if ((finishedWork.effectTag & Passive) !== NoEffect) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
              {
                {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork);
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
          }
        }
      }

      function commitLifeCycles(finishedRoot, current, finishedWork, committedExpirationTime) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
          case Block:
            {
              {
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
              }
              return;
            }

          case ClassComponent:
            {
              var instance = finishedWork.stateNode;

              if (finishedWork.effectTag & Update) {
                if (current === null) {
                  startPhaseTimer(finishedWork, "componentDidMount");
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before " + "componentDidMount. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }

                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before " + "componentDidMount. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  {
                    instance.componentDidMount();
                  }
                  stopPhaseTimer();
                } else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                  var prevState = current.memoizedState;
                  startPhaseTimer(finishedWork, "componentDidUpdate");
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before " + "componentDidUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }

                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before " + "componentDidUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  {
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                  }
                  stopPhaseTimer();
                }
              }

              var updateQueue = finishedWork.updateQueue;

              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before " + "processing the update queue. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }

                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before " + "processing the update queue. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance);
              }

              return;
            }

          case HostRoot:
            {
              var _updateQueue = finishedWork.updateQueue;

              if (_updateQueue !== null) {
                var _instance = null;

                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;

                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }

                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }

              return;
            }

          case HostComponent:
            {
              var _instance2 = finishedWork.stateNode;

              if (current === null && finishedWork.effectTag & Update) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount();
              }

              return;
            }

          case HostText:
            {
              return;
            }

          case HostPortal:
            {
              return;
            }

          case Profiler:
            {
              {
                var _finishedWork$memoize2 = finishedWork.memoizedProps,
                    onCommit = _finishedWork$memoize2.onCommit,
                    onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime = getCommitTime();

                if (typeof onRender === "function") {
                  {
                    onRender(finishedWork.memoizedProps.id, current === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime, finishedRoot.memoizedInteractions);
                  }
                }
              }
              return;
            }

          case SuspenseComponent:
            {
              return;
            }

          case SuspenseListComponent:
          case IncompleteClassComponent:
          case FundamentalComponent:
          case ScopeComponent:
            return;
        }

        {
          throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;

        if (ref !== null) {
          var instance = finishedWork.stateNode;
          var instanceToUse;

          switch (finishedWork.tag) {
            case HostComponent:
              instanceToUse = getPublicInstance(instance);
              break;

            default:
              instanceToUse = instance;
          }

          if (typeof ref === "function") {
            ref(instanceToUse);
          } else {
            {
              if (!ref.hasOwnProperty("current")) {
                error("Unexpected ref object provided for %s. " + "Use either a ref-setter function or React.createRef().%s", getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
              }
            }
            ref.current = instanceToUse;
          }
        }
      }

      function commitDetachRef(current) {
        var currentRef = current.ref;

        if (currentRef !== null) {
          if (typeof currentRef === "function") {
            currentRef(null);
          } else {
            currentRef.current = null;
          }
        }
      }

      function commitUnmount(finishedRoot, current, renderPriorityLevel) {
        onCommitUnmount(current);

        switch (current.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent:
          case Block:
            {
              var updateQueue = current.updateQueue;

              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;

                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  {
                    var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
                    runWithPriority(priorityLevel, function () {
                      var effect = firstEffect;

                      do {
                        var _effect3 = effect,
                            _destroy = _effect3.destroy,
                            _tag = _effect3.tag;

                        if (_destroy !== undefined) {
                          {
                            safelyCallDestroy(current, _destroy);
                          }
                        }

                        effect = effect.next;
                      } while (effect !== firstEffect);
                    });
                  }
                }
              }

              return;
            }

          case ClassComponent:
            {
              safelyDetachRef(current);
              var instance = current.stateNode;

              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(current, instance);
              }

              return;
            }

          case HostComponent:
            {
              safelyDetachRef(current);
              return;
            }

          case HostPortal:
            {
              {
                emptyPortalContainer(current);
              }
              return;
            }

          case FundamentalComponent:
            {
              return;
            }

          case DehydratedFragment:
            {
              return;
            }

          case ScopeComponent:
            {
              return;
            }
        }
      }

      function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
        var node = root;

        while (true) {
          commitUnmount(finishedRoot, node, renderPriorityLevel);

          if (node.child !== null && !supportsMutation) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === root) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === root) {
              return;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      }

      function detachFiber(current) {
        var alternate = current.alternate;
        current.return = null;
        current.child = null;
        current.memoizedState = null;
        current.updateQueue = null;
        current.dependencies = null;
        current.alternate = null;
        current.firstEffect = null;
        current.lastEffect = null;
        current.pendingProps = null;
        current.memoizedProps = null;
        current.stateNode = null;

        if (alternate !== null) {
          detachFiber(alternate);
        }
      }

      function emptyPortalContainer(current) {
        var portal = current.stateNode;
        var containerInfo = portal.containerInfo;
        var emptyChildSet = createContainerChildSet(containerInfo);
      }

      function commitContainer(finishedWork) {
        switch (finishedWork.tag) {
          case ClassComponent:
          case HostComponent:
          case HostText:
          case FundamentalComponent:
            {
              return;
            }

          case HostRoot:
          case HostPortal:
            {
              var portalOrRoot = finishedWork.stateNode;
              var containerInfo = portalOrRoot.containerInfo,
                  pendingChildren = portalOrRoot.pendingChildren;
              return;
            }
        }

        {
          throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function commitDeletion(finishedRoot, current, renderPriorityLevel) {
        {
          commitNestedUnmounts(finishedRoot, current, renderPriorityLevel);
        }
        detachFiber(current);
      }

      function commitWork(current, finishedWork) {
        {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
              {
                {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                }
                return;
              }

            case Profiler:
              {
                return;
              }

            case SuspenseComponent:
              {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }

            case SuspenseListComponent:
              {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
          }

          commitContainer(finishedWork);
          return;
        }
      }

      function commitSuspenseComponent(finishedWork) {
        var newState = finishedWork.memoizedState;
        var primaryChildParent = finishedWork;
        if (newState === null) ;else {
          primaryChildParent = finishedWork.child;
          markCommitTimeOfFallback();
        }
      }

      function attachSuspenseRetryListeners(finishedWork) {
        var thenables = finishedWork.updateQueue;

        if (thenables !== null) {
          finishedWork.updateQueue = null;
          var retryCache = finishedWork.stateNode;

          if (retryCache === null) {
            retryCache = finishedWork.stateNode = new PossiblyWeakSet();
          }

          thenables.forEach(function (thenable) {
            var retry = resolveRetryThenable.bind(null, finishedWork, thenable);

            if (!retryCache.has(thenable)) {
              {
                if (thenable.__reactDoNotTraceInteractions !== true) {
                  retry = tracing.unstable_wrap(retry);
                }
              }
              retryCache.add(thenable);
              thenable.then(retry, retry);
            }
          });
        }
      }

      var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;

      function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
        var update = createUpdate(expirationTime, null);
        update.tag = CaptureUpdate;
        update.payload = {
          element: null
        };
        var error = errorInfo.value;

        update.callback = function () {
          onUncaughtError(error);
          logError(fiber, errorInfo);
        };

        return update;
      }

      function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
        var update = createUpdate(expirationTime, null);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

        if (typeof getDerivedStateFromError === "function") {
          var error$1 = errorInfo.value;

          update.payload = function () {
            logError(fiber, errorInfo);
            return getDerivedStateFromError(error$1);
          };
        }

        var inst = fiber.stateNode;

        if (inst !== null && typeof inst.componentDidCatch === "function") {
          update.callback = function callback() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }

            if (typeof getDerivedStateFromError !== "function") {
              markLegacyErrorBoundaryAsFailed(this);
              logError(fiber, errorInfo);
            }

            var error$1 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$1, {
              componentStack: stack !== null ? stack : ""
            });
            {
              if (typeof getDerivedStateFromError !== "function") {
                if (fiber.expirationTime !== Sync) {
                  error("%s: Error boundaries should implement getDerivedStateFromError(). " + "In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                }
              }
            }
          };
        } else {
          update.callback = function () {
            markFailedErrorBoundaryForHotReloading(fiber);
          };
        }

        return update;
      }

      function attachPingListener(root, renderExpirationTime, thenable) {
        var pingCache = root.pingCache;
        var threadIDs;

        if (pingCache === null) {
          pingCache = root.pingCache = new PossiblyWeakMap();
          threadIDs = new Set();
          pingCache.set(thenable, threadIDs);
        } else {
          threadIDs = pingCache.get(thenable);

          if (threadIDs === undefined) {
            threadIDs = new Set();
            pingCache.set(thenable, threadIDs);
          }
        }

        if (!threadIDs.has(renderExpirationTime)) {
          threadIDs.add(renderExpirationTime);
          var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);
          thenable.then(ping, ping);
        }
      }

      function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
        sourceFiber.effectTag |= Incomplete;
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;

        if (value !== null && typeof value === "object" && typeof value.then === "function") {
          var thenable = value;

          if ((sourceFiber.mode & BlockingMode) === NoMode) {
            var currentSource = sourceFiber.alternate;

            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.expirationTime = currentSource.expirationTime;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }

          var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
          var _workInProgress = returnFiber;

          do {
            if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
              var thenables = _workInProgress.updateQueue;

              if (thenables === null) {
                var updateQueue = new Set();
                updateQueue.add(thenable);
                _workInProgress.updateQueue = updateQueue;
              } else {
                thenables.add(thenable);
              }

              if ((_workInProgress.mode & BlockingMode) === NoMode) {
                _workInProgress.effectTag |= DidCapture;
                sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;

                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(Sync, null);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update);
                  }
                }

                sourceFiber.expirationTime = Sync;
                return;
              }

              attachPingListener(root, renderExpirationTime, thenable);
              _workInProgress.effectTag |= ShouldCapture;
              _workInProgress.expirationTime = renderExpirationTime;
              return;
            }

            _workInProgress = _workInProgress.return;
          } while (_workInProgress !== null);

          value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n" + "\n" + "Add a <Suspense fallback=...> component higher in the tree to " + "provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber));
        }

        renderDidError();
        value = createCapturedValue(value, sourceFiber);
        var workInProgress = returnFiber;

        do {
          switch (workInProgress.tag) {
            case HostRoot:
              {
                var _errorInfo = value;
                workInProgress.effectTag |= ShouldCapture;
                workInProgress.expirationTime = renderExpirationTime;

                var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);

                enqueueCapturedUpdate(workInProgress, _update);
                return;
              }

            case ClassComponent:
              var errorInfo = value;
              var ctor = workInProgress.type;
              var instance = workInProgress.stateNode;

              if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                workInProgress.effectTag |= ShouldCapture;
                workInProgress.expirationTime = renderExpirationTime;

                var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);

                enqueueCapturedUpdate(workInProgress, _update2);
                return;
              }

              break;
          }

          workInProgress = workInProgress.return;
        } while (workInProgress !== null);
      }

      var ceil = Math.ceil;
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
          ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
          IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
      var NoContext = 0;
      var BatchedContext = 1;
      var DiscreteEventContext = 4;
      var LegacyUnbatchedContext = 8;
      var RenderContext = 16;
      var CommitContext = 32;
      var RootIncomplete = 0;
      var RootFatalErrored = 1;
      var RootErrored = 2;
      var RootSuspended = 3;
      var RootSuspendedWithDelay = 4;
      var RootCompleted = 5;
      var executionContext = NoContext;
      var workInProgressRoot = null;
      var workInProgress = null;
      var renderExpirationTime$1 = NoWork;
      var workInProgressRootExitStatus = RootIncomplete;
      var workInProgressRootFatalError = null;
      var workInProgressRootLatestProcessedExpirationTime = Sync;
      var workInProgressRootLatestSuspenseTimeout = Sync;
      var workInProgressRootCanSuspendUsingConfig = null;
      var workInProgressRootNextUnprocessedUpdateTime = NoWork;
      var workInProgressRootHasPendingPing = false;
      var globalMostRecentFallbackTime = 0;
      var FALLBACK_THROTTLE_MS = 500;
      var nextEffect = null;
      var hasUncaughtError = false;
      var firstUncaughtError = null;
      var legacyErrorBoundariesThatAlreadyFailed = null;
      var rootDoesHavePassiveEffects = false;
      var rootWithPendingPassiveEffects = null;
      var pendingPassiveEffectsRenderPriority = NoPriority;
      var pendingPassiveEffectsExpirationTime = NoWork;
      var rootsWithPendingDiscreteUpdates = null;
      var NESTED_UPDATE_LIMIT = 50;
      var nestedUpdateCount = 0;
      var rootWithNestedUpdates = null;
      var NESTED_PASSIVE_UPDATE_LIMIT = 50;
      var nestedPassiveUpdateCount = 0;
      var interruptedBy = null;
      var spawnedWorkDuringRender = null;
      var currentEventTime = NoWork;

      function requestCurrentTimeForUpdate() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          return msToExpirationTime(now());
        }

        if (currentEventTime !== NoWork) {
          return currentEventTime;
        }

        currentEventTime = msToExpirationTime(now());
        return currentEventTime;
      }

      function getCurrentTime() {
        return msToExpirationTime(now());
      }

      function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
        var mode = fiber.mode;

        if ((mode & BlockingMode) === NoMode) {
          return Sync;
        }

        var priorityLevel = getCurrentPriorityLevel();

        if ((mode & ConcurrentMode) === NoMode) {
          return priorityLevel === ImmediatePriority ? Sync : Batched;
        }

        if ((executionContext & RenderContext) !== NoContext) {
          return renderExpirationTime$1;
        }

        var expirationTime;

        if (suspenseConfig !== null) {
          expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
        } else {
          switch (priorityLevel) {
            case ImmediatePriority:
              expirationTime = Sync;
              break;

            case UserBlockingPriority:
              expirationTime = computeInteractiveExpiration(currentTime);
              break;

            case NormalPriority:
            case LowPriority:
              expirationTime = computeAsyncExpiration(currentTime);
              break;

            case IdlePriority:
              expirationTime = Idle;
              break;

            default:
              {
                throw Error("Expected a valid priority level");
              }
          }
        }

        if (workInProgressRoot !== null && expirationTime === renderExpirationTime$1) {
          expirationTime -= 1;
        }

        return expirationTime;
      }

      function scheduleUpdateOnFiber(fiber, expirationTime) {
        checkForNestedUpdates();
        warnAboutRenderPhaseUpdatesInDEV(fiber);
        var root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

        if (root === null) {
          warnAboutUpdateOnUnmountedFiberInDEV(fiber);
          return;
        }

        checkForInterruption(fiber, expirationTime);
        recordScheduleUpdate();
        var priorityLevel = getCurrentPriorityLevel();

        if (expirationTime === Sync) {
          if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            schedulePendingInteractions(root, expirationTime);
            performSyncWorkOnRoot(root);
          } else {
            ensureRootIsScheduled(root);
            schedulePendingInteractions(root, expirationTime);

            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        } else {
          ensureRootIsScheduled(root);
          schedulePendingInteractions(root, expirationTime);
        }

        if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority || priorityLevel === ImmediatePriority)) {
          if (rootsWithPendingDiscreteUpdates === null) {
            rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);
          } else {
            var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);

            if (lastDiscreteTime === undefined || lastDiscreteTime > expirationTime) {
              rootsWithPendingDiscreteUpdates.set(root, expirationTime);
            }
          }
        }
      }

      var scheduleWork = scheduleUpdateOnFiber;

      function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
        if (fiber.expirationTime < expirationTime) {
          fiber.expirationTime = expirationTime;
        }

        var alternate = fiber.alternate;

        if (alternate !== null && alternate.expirationTime < expirationTime) {
          alternate.expirationTime = expirationTime;
        }

        var node = fiber.return;
        var root = null;

        if (node === null && fiber.tag === HostRoot) {
          root = fiber.stateNode;
        } else {
          while (node !== null) {
            alternate = node.alternate;

            if (node.childExpirationTime < expirationTime) {
              node.childExpirationTime = expirationTime;

              if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                alternate.childExpirationTime = expirationTime;
              }
            } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
              alternate.childExpirationTime = expirationTime;
            }

            if (node.return === null && node.tag === HostRoot) {
              root = node.stateNode;
              break;
            }

            node = node.return;
          }
        }

        if (root !== null) {
          if (workInProgressRoot === root) {
            markUnprocessedUpdateTime(expirationTime);

            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
              markRootSuspendedAtTime(root, renderExpirationTime$1);
            }
          }

          markRootUpdatedAtTime(root, expirationTime);
        }

        return root;
      }

      function getNextRootExpirationTimeToWorkOn(root) {
        var lastExpiredTime = root.lastExpiredTime;

        if (lastExpiredTime !== NoWork) {
          return lastExpiredTime;
        }

        var firstPendingTime = root.firstPendingTime;

        if (!isRootSuspendedAtTime(root, firstPendingTime)) {
          return firstPendingTime;
        }

        var lastPingedTime = root.lastPingedTime;
        var nextKnownPendingLevel = root.nextKnownPendingLevel;
        var nextLevel = lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;

        if (nextLevel <= Idle && firstPendingTime !== nextLevel) {
          return NoWork;
        }

        return nextLevel;
      }

      function ensureRootIsScheduled(root) {
        var lastExpiredTime = root.lastExpiredTime;

        if (lastExpiredTime !== NoWork) {
          root.callbackExpirationTime = Sync;
          root.callbackPriority = ImmediatePriority;
          root.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
          return;
        }

        var expirationTime = getNextRootExpirationTimeToWorkOn(root);
        var existingCallbackNode = root.callbackNode;

        if (expirationTime === NoWork) {
          if (existingCallbackNode !== null) {
            root.callbackNode = null;
            root.callbackExpirationTime = NoWork;
            root.callbackPriority = NoPriority;
          }

          return;
        }

        var currentTime = requestCurrentTimeForUpdate();
        var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);

        if (existingCallbackNode !== null) {
          var existingCallbackPriority = root.callbackPriority;
          var existingCallbackExpirationTime = root.callbackExpirationTime;

          if (existingCallbackExpirationTime === expirationTime && existingCallbackPriority >= priorityLevel) {
            return;
          }

          cancelCallback(existingCallbackNode);
        }

        root.callbackExpirationTime = expirationTime;
        root.callbackPriority = priorityLevel;
        var callbackNode;

        if (expirationTime === Sync) {
          callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
        } else {
          callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root), {
            timeout: expirationTimeToMs(expirationTime) - now()
          });
        }

        root.callbackNode = callbackNode;
      }

      function performConcurrentWorkOnRoot(root, didTimeout) {
        currentEventTime = NoWork;

        if (didTimeout) {
          var currentTime = requestCurrentTimeForUpdate();
          markRootExpiredAtTime(root, currentTime);
          ensureRootIsScheduled(root);
          return null;
        }

        var expirationTime = getNextRootExpirationTimeToWorkOn(root);

        if (expirationTime === NoWork) {
          return null;
        }

        var originalCallbackNode = root.callbackNode;

        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          throw Error("Should not already be working.");
        }

        flushPassiveEffects();
        var exitStatus = renderRootConcurrent(root, expirationTime);

        if (exitStatus !== RootIncomplete) {
          if (exitStatus === RootErrored) {
            expirationTime = expirationTime > Idle ? Idle : expirationTime;
            exitStatus = renderRootSync(root, expirationTime);
          }

          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root, expirationTime);
            markRootSuspendedAtTime(root, expirationTime);
            ensureRootIsScheduled(root);
            throw fatalError;
          }

          var finishedWork = root.finishedWork = root.current.alternate;
          root.finishedExpirationTime = expirationTime;
          finishConcurrentRender(root, finishedWork, exitStatus, expirationTime);
        }

        ensureRootIsScheduled(root);

        if (root.callbackNode === originalCallbackNode) {
          return performConcurrentWorkOnRoot.bind(null, root);
        }

        return null;
      }

      function finishConcurrentRender(root, finishedWork, exitStatus, expirationTime) {
        switch (exitStatus) {
          case RootIncomplete:
          case RootFatalErrored:
            {
              {
                throw Error("Root did not complete. This is a bug in React.");
              }
            }

          case RootErrored:
            {
              commitRoot(root);
              break;
            }

          case RootSuspended:
            {
              markRootSuspendedAtTime(root, expirationTime);
              var lastSuspendedTime = root.lastSuspendedTime;

              if (expirationTime === lastSuspendedTime) {
                root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
              }

              var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;

              if (hasNotProcessedNewUpdates && !IsThisRendererActing.current) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();

                if (msUntilTimeout > 10) {
                  if (workInProgressRootHasPendingPing) {
                    var lastPingedTime = root.lastPingedTime;

                    if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                      root.lastPingedTime = expirationTime;
                      prepareFreshStack(root, expirationTime);
                      break;
                    }
                  }

                  var nextTime = getNextRootExpirationTimeToWorkOn(root);

                  if (nextTime !== NoWork && nextTime !== expirationTime) {
                    break;
                  }

                  if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
                    root.lastPingedTime = lastSuspendedTime;
                    break;
                  }

                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
                  break;
                }
              }

              commitRoot(root);
              break;
            }

          case RootSuspendedWithDelay:
            {
              markRootSuspendedAtTime(root, expirationTime);
              var _lastSuspendedTime = root.lastSuspendedTime;

              if (expirationTime === _lastSuspendedTime) {
                root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
              }

              {
                if (workInProgressRootHasPendingPing) {
                  var _lastPingedTime = root.lastPingedTime;

                  if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
                    root.lastPingedTime = expirationTime;
                    prepareFreshStack(root, expirationTime);
                    break;
                  }
                }

                var _nextTime = getNextRootExpirationTimeToWorkOn(root);

                if (_nextTime !== NoWork && _nextTime !== expirationTime) {
                  break;
                }

                if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
                  root.lastPingedTime = _lastSuspendedTime;
                  break;
                }

                var _msUntilTimeout;

                if (workInProgressRootLatestSuspenseTimeout !== Sync) {
                  _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
                } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
                  _msUntilTimeout = 0;
                } else {
                  var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
                  var currentTimeMs = now();
                  var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
                  var timeElapsed = currentTimeMs - eventTimeMs;

                  if (timeElapsed < 0) {
                    timeElapsed = 0;
                  }

                  _msUntilTimeout = jnd(timeElapsed) - timeElapsed;

                  if (timeUntilExpirationMs < _msUntilTimeout) {
                    _msUntilTimeout = timeUntilExpirationMs;
                  }
                }

                if (_msUntilTimeout > 10) {
                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root);
              break;
            }

          case RootCompleted:
            {
              if (workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
                var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);

                if (_msUntilTimeout2 > 10) {
                  markRootSuspendedAtTime(root, expirationTime);
                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout2);
                  break;
                }
              }

              commitRoot(root);
              break;
            }

          default:
            {
              {
                throw Error("Unknown root exit status.");
              }
            }
        }
      }

      function performSyncWorkOnRoot(root) {
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          throw Error("Should not already be working.");
        }

        flushPassiveEffects();
        var lastExpiredTime = root.lastExpiredTime;
        var expirationTime;

        if (lastExpiredTime !== NoWork) {
          if (root === workInProgressRoot && renderExpirationTime$1 >= lastExpiredTime) {
            expirationTime = renderExpirationTime$1;
          } else {
            expirationTime = lastExpiredTime;
          }
        } else {
          expirationTime = Sync;
        }

        var exitStatus = renderRootSync(root, expirationTime);

        if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
          expirationTime = expirationTime > Idle ? Idle : expirationTime;
          exitStatus = renderRootSync(root, expirationTime);
        }

        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          prepareFreshStack(root, expirationTime);
          markRootSuspendedAtTime(root, expirationTime);
          ensureRootIsScheduled(root);
          throw fatalError;
        }

        root.finishedWork = root.current.alternate;
        root.finishedExpirationTime = expirationTime;
        commitRoot(root);
        ensureRootIsScheduled(root);
        return null;
      }

      function syncUpdates(fn, a, b, c) {
        return runWithPriority(ImmediatePriority, fn.bind(null, a, b, c));
      }

      function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;

        try {
          return fn(a);
        } finally {
          executionContext = prevExecutionContext;

          if (executionContext === NoContext) {
            flushSyncCallbackQueue();
          }
        }
      }

      function flushSync(fn, a) {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          {
            throw Error("flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
          }
        }

        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;

        try {
          return runWithPriority(ImmediatePriority, fn.bind(null, a));
        } finally {
          executionContext = prevExecutionContext;
          flushSyncCallbackQueue();
        }
      }

      function prepareFreshStack(root, expirationTime) {
        root.finishedWork = null;
        root.finishedExpirationTime = NoWork;
        var timeoutHandle = root.timeoutHandle;

        if (timeoutHandle !== noTimeout) {
          root.timeoutHandle = noTimeout;
          cancelTimeout(timeoutHandle);
        }

        if (workInProgress !== null) {
          var interruptedWork = workInProgress.return;

          while (interruptedWork !== null) {
            unwindInterruptedWork(interruptedWork);
            interruptedWork = interruptedWork.return;
          }
        }

        workInProgressRoot = root;
        workInProgress = createWorkInProgress(root.current, null);
        renderExpirationTime$1 = expirationTime;
        workInProgressRootExitStatus = RootIncomplete;
        workInProgressRootFatalError = null;
        workInProgressRootLatestProcessedExpirationTime = Sync;
        workInProgressRootLatestSuspenseTimeout = Sync;
        workInProgressRootCanSuspendUsingConfig = null;
        workInProgressRootNextUnprocessedUpdateTime = NoWork;
        workInProgressRootHasPendingPing = false;
        {
          spawnedWorkDuringRender = null;
        }
        {
          ReactStrictModeWarnings.discardPendingWarnings();
        }
      }

      function handleError(root, thrownValue) {
        do {
          try {
            resetContextDependencies();
            resetHooksAfterThrow();
            resetCurrentFiber();

            if (workInProgress === null || workInProgress.return === null) {
              workInProgressRootExitStatus = RootFatalErrored;
              workInProgressRootFatalError = thrownValue;
              workInProgress = null;
              return null;
            }

            if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
              stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
            }

            throwException(root, workInProgress.return, workInProgress, thrownValue, renderExpirationTime$1);
            workInProgress = completeUnitOfWork(workInProgress);
          } catch (yetAnotherThrownValue) {
            thrownValue = yetAnotherThrownValue;
            continue;
          }

          return;
        } while (true);
      }

      function pushDispatcher(root) {
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

        if (prevDispatcher === null) {
          return ContextOnlyDispatcher;
        } else {
          return prevDispatcher;
        }
      }

      function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }

      function pushInteractions(root) {
        {
          var prevInteractions = tracing.__interactionsRef.current;
          tracing.__interactionsRef.current = root.memoizedInteractions;
          return prevInteractions;
        }
      }

      function popInteractions(prevInteractions) {
        {
          tracing.__interactionsRef.current = prevInteractions;
        }
      }

      function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
      }

      function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
        if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
          workInProgressRootLatestProcessedExpirationTime = expirationTime;
        }

        if (suspenseConfig !== null) {
          if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
            workInProgressRootLatestSuspenseTimeout = expirationTime;
            workInProgressRootCanSuspendUsingConfig = suspenseConfig;
          }
        }
      }

      function markUnprocessedUpdateTime(expirationTime) {
        if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
          workInProgressRootNextUnprocessedUpdateTime = expirationTime;
        }
      }

      function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootIncomplete) {
          workInProgressRootExitStatus = RootSuspended;
        }
      }

      function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
          workInProgressRootExitStatus = RootSuspendedWithDelay;
        }

        if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
          markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1);
          markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
        }
      }

      function renderDidError() {
        if (workInProgressRootExitStatus !== RootCompleted) {
          workInProgressRootExitStatus = RootErrored;
        }
      }

      function renderHasNotSuspendedYet() {
        return workInProgressRootExitStatus === RootIncomplete;
      }

      function inferTimeFromExpirationTime(expirationTime) {
        var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
        return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
      }

      function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
        var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
        return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
      }

      function renderRootSync(root, expirationTime) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();

        if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
          prepareFreshStack(root, expirationTime);
          startWorkOnPendingInteractions(root, expirationTime);
        }

        var prevInteractions = pushInteractions(root);
        startWorkLoopTimer(workInProgress);

        do {
          try {
            workLoopSync();
            break;
          } catch (thrownValue) {
            handleError(root, thrownValue);
          }
        } while (true);

        resetContextDependencies();
        {
          popInteractions(prevInteractions);
        }
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);

        if (workInProgress !== null) {
          {
            throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
        }

        stopFinishedWorkLoopTimer();
        workInProgressRoot = null;
        return workInProgressRootExitStatus;
      }

      function workLoopSync() {
        while (workInProgress !== null) {
          workInProgress = performUnitOfWork(workInProgress);
        }
      }

      function renderRootConcurrent(root, expirationTime) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();

        if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
          prepareFreshStack(root, expirationTime);
          startWorkOnPendingInteractions(root, expirationTime);
        }

        var prevInteractions = pushInteractions(root);
        startWorkLoopTimer(workInProgress);

        do {
          try {
            workLoopConcurrent();
            break;
          } catch (thrownValue) {
            handleError(root, thrownValue);
          }
        } while (true);

        resetContextDependencies();
        {
          popInteractions(prevInteractions);
        }
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;

        if (workInProgress !== null) {
          stopInterruptedWorkLoopTimer();
          return RootIncomplete;
        } else {
          stopFinishedWorkLoopTimer();
          workInProgressRoot = null;
          return workInProgressRootExitStatus;
        }
      }

      function workLoopConcurrent() {
        while (workInProgress !== null && !shouldYield()) {
          workInProgress = performUnitOfWork(workInProgress);
        }
      }

      function performUnitOfWork(unitOfWork) {
        var current = unitOfWork.alternate;
        startWorkTimer(unitOfWork);
        setCurrentFiber(unitOfWork);
        var next;

        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
          startProfilerTimer(unitOfWork);
          next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
          stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else {
          next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
        }

        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;

        if (next === null) {
          next = completeUnitOfWork(unitOfWork);
        }

        ReactCurrentOwner$2.current = null;
        return next;
      }

      function completeUnitOfWork(unitOfWork) {
        workInProgress = unitOfWork;

        do {
          var current = workInProgress.alternate;
          var returnFiber = workInProgress.return;

          if ((workInProgress.effectTag & Incomplete) === NoEffect) {
            setCurrentFiber(workInProgress);
            var next = void 0;

            if ((workInProgress.mode & ProfileMode) === NoMode) {
              next = completeWork(current, workInProgress, renderExpirationTime$1);
            } else {
              startProfilerTimer(workInProgress);
              next = completeWork(current, workInProgress, renderExpirationTime$1);
              stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
            }

            stopWorkTimer(workInProgress);
            resetCurrentFiber();
            resetChildExpirationTime(workInProgress);

            if (next !== null) {
              return next;
            }

            if (returnFiber !== null && (returnFiber.effectTag & Incomplete) === NoEffect) {
              if (returnFiber.firstEffect === null) {
                returnFiber.firstEffect = workInProgress.firstEffect;
              }

              if (workInProgress.lastEffect !== null) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                }

                returnFiber.lastEffect = workInProgress.lastEffect;
              }

              var effectTag = workInProgress.effectTag;

              if (effectTag > PerformedWork) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = workInProgress;
                } else {
                  returnFiber.firstEffect = workInProgress;
                }

                returnFiber.lastEffect = workInProgress;
              }
            }
          } else {
            var _next = unwindWork(workInProgress);

            if ((workInProgress.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
              var actualDuration = workInProgress.actualDuration;
              var child = workInProgress.child;

              while (child !== null) {
                actualDuration += child.actualDuration;
                child = child.sibling;
              }

              workInProgress.actualDuration = actualDuration;
            }

            if (_next !== null) {
              stopFailedWorkTimer(workInProgress);
              _next.effectTag &= HostEffectMask;
              return _next;
            }

            stopWorkTimer(workInProgress);

            if (returnFiber !== null) {
              returnFiber.firstEffect = returnFiber.lastEffect = null;
              returnFiber.effectTag |= Incomplete;
            }
          }

          var siblingFiber = workInProgress.sibling;

          if (siblingFiber !== null) {
            return siblingFiber;
          }

          workInProgress = returnFiber;
        } while (workInProgress !== null);

        if (workInProgressRootExitStatus === RootIncomplete) {
          workInProgressRootExitStatus = RootCompleted;
        }

        return null;
      }

      function getRemainingExpirationTime(fiber) {
        var updateExpirationTime = fiber.expirationTime;
        var childExpirationTime = fiber.childExpirationTime;
        return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
      }

      function resetChildExpirationTime(completedWork) {
        if (renderExpirationTime$1 !== Never && completedWork.childExpirationTime === Never) {
          return;
        }

        var newChildExpirationTime = NoWork;

        if ((completedWork.mode & ProfileMode) !== NoMode) {
          var actualDuration = completedWork.actualDuration;
          var treeBaseDuration = completedWork.selfBaseDuration;
          var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
          var child = completedWork.child;

          while (child !== null) {
            var childUpdateExpirationTime = child.expirationTime;
            var childChildExpirationTime = child.childExpirationTime;

            if (childUpdateExpirationTime > newChildExpirationTime) {
              newChildExpirationTime = childUpdateExpirationTime;
            }

            if (childChildExpirationTime > newChildExpirationTime) {
              newChildExpirationTime = childChildExpirationTime;
            }

            if (shouldBubbleActualDurations) {
              actualDuration += child.actualDuration;
            }

            treeBaseDuration += child.treeBaseDuration;
            child = child.sibling;
          }

          completedWork.actualDuration = actualDuration;
          completedWork.treeBaseDuration = treeBaseDuration;
        } else {
          var _child = completedWork.child;

          while (_child !== null) {
            var _childUpdateExpirationTime = _child.expirationTime;
            var _childChildExpirationTime = _child.childExpirationTime;

            if (_childUpdateExpirationTime > newChildExpirationTime) {
              newChildExpirationTime = _childUpdateExpirationTime;
            }

            if (_childChildExpirationTime > newChildExpirationTime) {
              newChildExpirationTime = _childChildExpirationTime;
            }

            _child = _child.sibling;
          }
        }

        completedWork.childExpirationTime = newChildExpirationTime;
      }

      function commitRoot(root) {
        var renderPriorityLevel = getCurrentPriorityLevel();
        runWithPriority(ImmediatePriority, commitRootImpl.bind(null, root, renderPriorityLevel));
        return null;
      }

      function commitRootImpl(root, renderPriorityLevel) {
        do {
          flushPassiveEffects();
        } while (rootWithPendingPassiveEffects !== null);

        flushRenderPhaseStrictModeWarningsInDEV();

        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          throw Error("Should not already be working.");
        }

        var finishedWork = root.finishedWork;
        var expirationTime = root.finishedExpirationTime;

        if (finishedWork === null) {
          return null;
        }

        root.finishedWork = null;
        root.finishedExpirationTime = NoWork;

        if (!(finishedWork !== root.current)) {
          throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
        }

        root.callbackNode = null;
        root.callbackExpirationTime = NoWork;
        root.callbackPriority = NoPriority;
        root.nextKnownPendingLevel = NoWork;
        startCommitTimer();
        var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
        markRootFinishedAtTime(root, expirationTime, remainingExpirationTimeBeforeCommit);

        if (root === workInProgressRoot) {
          workInProgressRoot = null;
          workInProgress = null;
          renderExpirationTime$1 = NoWork;
        }

        var firstEffect;

        if (finishedWork.effectTag > PerformedWork) {
          if (finishedWork.lastEffect !== null) {
            finishedWork.lastEffect.nextEffect = finishedWork;
            firstEffect = finishedWork.firstEffect;
          } else {
            firstEffect = finishedWork;
          }
        } else {
          firstEffect = finishedWork.firstEffect;
        }

        if (firstEffect !== null) {
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root);
          ReactCurrentOwner$2.current = null;
          startCommitSnapshotEffectsTimer();
          prepareForCommit(root.containerInfo);
          nextEffect = firstEffect;

          do {
            {
              invokeGuardedCallback(null, commitBeforeMutationEffects, null);

              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  throw Error("Should be working on an effect.");
                }

                var error = clearCaughtError();
                captureCommitPhaseError(nextEffect, error);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);

          stopCommitSnapshotEffectsTimer();
          {
            recordCommitTime();
          }
          startCommitHostEffectsTimer();
          nextEffect = firstEffect;

          do {
            {
              invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  throw Error("Should be working on an effect.");
                }

                var _error = clearCaughtError();

                captureCommitPhaseError(nextEffect, _error);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);

          stopCommitHostEffectsTimer();
          resetAfterCommit(root.containerInfo);
          root.current = finishedWork;
          startCommitLifeCyclesTimer();
          nextEffect = firstEffect;

          do {
            {
              invokeGuardedCallback(null, commitLayoutEffects, null, root, expirationTime);

              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  throw Error("Should be working on an effect.");
                }

                var _error2 = clearCaughtError();

                captureCommitPhaseError(nextEffect, _error2);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);

          stopCommitLifeCyclesTimer();
          nextEffect = null;
          requestPaint();
          {
            popInteractions(prevInteractions);
          }
          executionContext = prevExecutionContext;
        } else {
          root.current = finishedWork;
          startCommitSnapshotEffectsTimer();
          stopCommitSnapshotEffectsTimer();
          {
            recordCommitTime();
          }
          startCommitHostEffectsTimer();
          stopCommitHostEffectsTimer();
          startCommitLifeCyclesTimer();
          stopCommitLifeCyclesTimer();
        }

        stopCommitTimer();
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

        if (rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = false;
          rootWithPendingPassiveEffects = root;
          pendingPassiveEffectsExpirationTime = expirationTime;
          pendingPassiveEffectsRenderPriority = renderPriorityLevel;
        } else {
          nextEffect = firstEffect;

          while (nextEffect !== null) {
            var nextNextEffect = nextEffect.nextEffect;
            nextEffect.nextEffect = null;
            nextEffect = nextNextEffect;
          }
        }

        var remainingExpirationTime = root.firstPendingTime;

        if (remainingExpirationTime !== NoWork) {
          {
            if (spawnedWorkDuringRender !== null) {
              var expirationTimes = spawnedWorkDuringRender;
              spawnedWorkDuringRender = null;

              for (var i = 0; i < expirationTimes.length; i++) {
                scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
              }
            }

            schedulePendingInteractions(root, remainingExpirationTime);
          }
        } else {
          legacyErrorBoundariesThatAlreadyFailed = null;
        }

        {
          if (!rootDidHavePassiveEffects) {
            finishPendingInteractions(root, expirationTime);
          }
        }

        if (remainingExpirationTime === Sync) {
          if (root === rootWithNestedUpdates) {
            nestedUpdateCount++;
          } else {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = root;
          }
        } else {
          nestedUpdateCount = 0;
        }

        onCommitRoot(finishedWork.stateNode, expirationTime);
        ensureRootIsScheduled(root);

        if (hasUncaughtError) {
          hasUncaughtError = false;
          var _error3 = firstUncaughtError;
          firstUncaughtError = null;
          throw _error3;
        }

        if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
          return null;
        }

        flushSyncCallbackQueue();
        return null;
      }

      function commitBeforeMutationEffects() {
        while (nextEffect !== null) {
          var effectTag = nextEffect.effectTag;

          if ((effectTag & Snapshot) !== NoEffect) {
            setCurrentFiber(nextEffect);
            recordEffect();
            var current = nextEffect.alternate;
            commitBeforeMutationLifeCycles(current, nextEffect);
            resetCurrentFiber();
          }

          if ((effectTag & Passive) !== NoEffect) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority, function () {
                flushPassiveEffects();
                return null;
              });
            }
          }

          nextEffect = nextEffect.nextEffect;
        }
      }

      function commitMutationEffects(root, renderPriorityLevel) {
        while (nextEffect !== null) {
          setCurrentFiber(nextEffect);
          var effectTag = nextEffect.effectTag;

          if (effectTag & Ref) {
            var current = nextEffect.alternate;

            if (current !== null) {
              commitDetachRef(current);
            }
          }

          var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);

          switch (primaryEffectTag) {
            case Placement:
              {
                nextEffect.effectTag &= ~Placement;
                break;
              }

            case PlacementAndUpdate:
              {
                nextEffect.effectTag &= ~Placement;
                var _current = nextEffect.alternate;
                commitWork(_current, nextEffect);
                break;
              }

            case Hydrating:
              {
                nextEffect.effectTag &= ~Hydrating;
                break;
              }

            case HydratingAndUpdate:
              {
                nextEffect.effectTag &= ~Hydrating;
                var _current2 = nextEffect.alternate;
                commitWork(_current2, nextEffect);
                break;
              }

            case Update:
              {
                var _current3 = nextEffect.alternate;
                commitWork(_current3, nextEffect);
                break;
              }

            case Deletion:
              {
                commitDeletion(root, nextEffect, renderPriorityLevel);
                break;
              }
          }

          recordEffect();
          resetCurrentFiber();
          nextEffect = nextEffect.nextEffect;
        }
      }

      function commitLayoutEffects(root, committedExpirationTime) {
        while (nextEffect !== null) {
          setCurrentFiber(nextEffect);
          var effectTag = nextEffect.effectTag;

          if (effectTag & (Update | Callback)) {
            recordEffect();
            var current = nextEffect.alternate;
            commitLifeCycles(root, current, nextEffect);
          }

          if (effectTag & Ref) {
            recordEffect();
            commitAttachRef(nextEffect);
          }

          resetCurrentFiber();
          nextEffect = nextEffect.nextEffect;
        }
      }

      function flushPassiveEffects() {
        if (pendingPassiveEffectsRenderPriority !== NoPriority) {
          var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
          pendingPassiveEffectsRenderPriority = NoPriority;
          return runWithPriority(priorityLevel, flushPassiveEffectsImpl);
        }
      }

      function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) {
          return false;
        }

        var root = rootWithPendingPassiveEffects;
        var expirationTime = pendingPassiveEffectsExpirationTime;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsExpirationTime = NoWork;

        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          throw Error("Cannot flush passive effects while already rendering.");
        }

        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        var prevInteractions = pushInteractions(root);
        {
          var _effect2 = root.current.firstEffect;

          while (_effect2 !== null) {
            {
              setCurrentFiber(_effect2);
              invokeGuardedCallback(null, commitPassiveHookEffects, null, _effect2);

              if (hasCaughtError()) {
                if (!(_effect2 !== null)) {
                  throw Error("Should be working on an effect.");
                }

                var _error5 = clearCaughtError();

                captureCommitPhaseError(_effect2, _error5);
              }

              resetCurrentFiber();
            }
            var nextNextEffect = _effect2.nextEffect;
            _effect2.nextEffect = null;
            _effect2 = nextNextEffect;
          }
        }
        {
          popInteractions(prevInteractions);
          finishPendingInteractions(root, expirationTime);
        }
        executionContext = prevExecutionContext;
        flushSyncCallbackQueue();
        nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
        return true;
      }

      function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
      }

      function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) {
          legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
        } else {
          legacyErrorBoundariesThatAlreadyFailed.add(instance);
        }
      }

      function prepareToThrowUncaughtError(error) {
        if (!hasUncaughtError) {
          hasUncaughtError = true;
          firstUncaughtError = error;
        }
      }

      var onUncaughtError = prepareToThrowUncaughtError;

      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        var errorInfo = createCapturedValue(error, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
        enqueueUpdate(rootFiber, update);
        var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync);

        if (root !== null) {
          ensureRootIsScheduled(root);
          schedulePendingInteractions(root, Sync);
        }
      }

      function captureCommitPhaseError(sourceFiber, error) {
        if (sourceFiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
          return;
        }

        var fiber = sourceFiber.return;

        while (fiber !== null) {
          if (fiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
            return;
          } else if (fiber.tag === ClassComponent) {
            var ctor = fiber.type;
            var instance = fiber.stateNode;

            if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValue(error, sourceFiber);
              var update = createClassErrorUpdate(fiber, errorInfo, Sync);
              enqueueUpdate(fiber, update);
              var root = markUpdateTimeFromFiberToRoot(fiber, Sync);

              if (root !== null) {
                ensureRootIsScheduled(root);
                schedulePendingInteractions(root, Sync);
              }

              return;
            }
          }

          fiber = fiber.return;
        }
      }

      function pingSuspendedRoot(root, thenable, suspendedTime) {
        var pingCache = root.pingCache;

        if (pingCache !== null) {
          pingCache.delete(thenable);
        }

        if (workInProgressRoot === root && renderExpirationTime$1 === suspendedTime) {
          if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
            prepareFreshStack(root, renderExpirationTime$1);
          } else {
            workInProgressRootHasPendingPing = true;
          }

          return;
        }

        if (!isRootSuspendedAtTime(root, suspendedTime)) {
          return;
        }

        var lastPingedTime = root.lastPingedTime;

        if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
          return;
        }

        root.lastPingedTime = suspendedTime;
        ensureRootIsScheduled(root);
        schedulePendingInteractions(root, suspendedTime);
      }

      function retryTimedOutBoundary(boundaryFiber, retryTime) {
        if (retryTime === NoWork) {
          var suspenseConfig = null;
          var currentTime = requestCurrentTimeForUpdate();
          retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
        }

        var root = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);

        if (root !== null) {
          ensureRootIsScheduled(root);
          schedulePendingInteractions(root, retryTime);
        }
      }

      function resolveRetryThenable(boundaryFiber, thenable) {
        var retryTime = NoWork;
        var retryCache;
        {
          retryCache = boundaryFiber.stateNode;
        }

        if (retryCache !== null) {
          retryCache.delete(thenable);
        }

        retryTimedOutBoundary(boundaryFiber, retryTime);
      }

      function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
      }

      function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
        var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;

        if (busyMinDurationMs <= 0) {
          return 0;
        }

        var busyDelayMs = suspenseConfig.busyDelayMs | 0;
        var currentTimeMs = now();
        var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
        var timeElapsed = currentTimeMs - eventTimeMs;

        if (timeElapsed <= busyDelayMs) {
          return 0;
        }

        var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed;
        return msUntilTimeout;
      }

      function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = null;
          {
            throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
        }

        {
          if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            error("Maximum update depth exceeded. This can happen when a component " + "calls setState inside useEffect, but useEffect either doesn't " + "have a dependency array, or one of the dependencies changes on " + "every render.");
          }
        }
      }

      function flushRenderPhaseStrictModeWarningsInDEV() {
        {
          ReactStrictModeWarnings.flushLegacyContextWarning();
          {
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
          }
        }
      }

      function stopFinishedWorkLoopTimer() {
        var didCompleteRoot = true;
        stopWorkLoopTimer(interruptedBy, didCompleteRoot);
        interruptedBy = null;
      }

      function stopInterruptedWorkLoopTimer() {
        var didCompleteRoot = false;
        stopWorkLoopTimer(interruptedBy, didCompleteRoot);
        interruptedBy = null;
      }

      function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
        if (workInProgressRoot !== null && updateExpirationTime > renderExpirationTime$1) {
          interruptedBy = fiberThatReceivedUpdate;
        }
      }

      var didWarnStateUpdateForUnmountedComponent = null;

      function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
        {
          var tag = fiber.tag;

          if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
            return;
          }

          var componentName = getComponentName(fiber.type) || "ReactComponent";

          if (didWarnStateUpdateForUnmountedComponent !== null) {
            if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
              return;
            }

            didWarnStateUpdateForUnmountedComponent.add(componentName);
          } else {
            didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
          }

          error("Can't perform a React state update on an unmounted component. This " + "is a no-op, but it indicates a memory leak in your application. To " + "fix, cancel all subscriptions and asynchronous tasks in %s.%s", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function", getStackByFiberInDevAndProd(fiber));
        }
      }

      var beginWork$1;
      {
        var dummyFiber = null;

        beginWork$1 = function beginWork$1(current, unitOfWork, expirationTime) {
          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

          try {
            return beginWork(current, unitOfWork, expirationTime);
          } catch (originalError) {
            if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
              throw originalError;
            }

            resetContextDependencies();
            resetHooksAfterThrow();
            unwindInterruptedWork(unitOfWork);
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

            if (unitOfWork.mode & ProfileMode) {
              startProfilerTimer(unitOfWork);
            }

            invokeGuardedCallback(null, beginWork, null, current, unitOfWork, expirationTime);

            if (hasCaughtError()) {
              var replayError = clearCaughtError();
              throw replayError;
            } else {
              throw originalError;
            }
          }
        };
      }
      var didWarnAboutUpdateInRender = false;

      function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        {
          if ((executionContext & RenderContext) !== NoContext) {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
                {
                  error("Cannot update a component from inside the function body of a " + "different component.");
                  break;
                }

              case ClassComponent:
                {
                  if (isRendering && !didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as " + "within `render`). Render methods should be a pure " + "function of props and state.");
                    didWarnAboutUpdateInRender = true;
                    break;
                  }
                }
            }
          }
        }
      }

      var IsThisRendererActing = {
        current: false
      };
      var didWarnAboutUnmockedScheduler = false;

      function warnIfUnmockedScheduler(fiber) {
        {
          if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
            if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
              didWarnAboutUnmockedScheduler = true;
              error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + "to guarantee consistent behaviour across tests and browsers. " + "For example, with jest: \n" + "jest.mock('scheduler', () => require" + "('scheduler/unstable_mock'));\n\n" + "For more info, visit https://fb.me/react-mock-scheduler");
            }
          }
        }
      }

      function computeThreadID(root, expirationTime) {
        return expirationTime * 1000 + root.interactionThreadID;
      }

      function markSpawnedWork(expirationTime) {
        if (spawnedWorkDuringRender === null) {
          spawnedWorkDuringRender = [expirationTime];
        } else {
          spawnedWorkDuringRender.push(expirationTime);
        }
      }

      function scheduleInteractions(root, expirationTime, interactions) {
        if (interactions.size > 0) {
          var pendingInteractionMap = root.pendingInteractionMap;
          var pendingInteractions = pendingInteractionMap.get(expirationTime);

          if (pendingInteractions != null) {
            interactions.forEach(function (interaction) {
              if (!pendingInteractions.has(interaction)) {
                interaction.__count++;
              }

              pendingInteractions.add(interaction);
            });
          } else {
            pendingInteractionMap.set(expirationTime, new Set(interactions));
            interactions.forEach(function (interaction) {
              interaction.__count++;
            });
          }

          var subscriber = tracing.__subscriberRef.current;

          if (subscriber !== null) {
            var threadID = computeThreadID(root, expirationTime);
            subscriber.onWorkScheduled(interactions, threadID);
          }
        }
      }

      function schedulePendingInteractions(root, expirationTime) {
        scheduleInteractions(root, expirationTime, tracing.__interactionsRef.current);
      }

      function startWorkOnPendingInteractions(root, expirationTime) {
        var interactions = new Set();
        root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
          if (scheduledExpirationTime >= expirationTime) {
            scheduledInteractions.forEach(function (interaction) {
              return interactions.add(interaction);
            });
          }
        });
        root.memoizedInteractions = interactions;

        if (interactions.size > 0) {
          var subscriber = tracing.__subscriberRef.current;

          if (subscriber !== null) {
            var threadID = computeThreadID(root, expirationTime);

            try {
              subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
              scheduleCallback(ImmediatePriority, function () {
                throw error;
              });
            }
          }
        }
      }

      function finishPendingInteractions(root, committedExpirationTime) {
        var earliestRemainingTimeAfterCommit = root.firstPendingTime;
        var subscriber;

        try {
          subscriber = tracing.__subscriberRef.current;

          if (subscriber !== null && root.memoizedInteractions.size > 0) {
            var threadID = computeThreadID(root, committedExpirationTime);
            subscriber.onWorkStopped(root.memoizedInteractions, threadID);
          }
        } catch (error) {
          scheduleCallback(ImmediatePriority, function () {
            throw error;
          });
        } finally {
          var pendingInteractionMap = root.pendingInteractionMap;
          pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
            if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
              pendingInteractionMap.delete(scheduledExpirationTime);
              scheduledInteractions.forEach(function (interaction) {
                interaction.__count--;

                if (subscriber !== null && interaction.__count === 0) {
                  try {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  } catch (error) {
                    scheduleCallback(ImmediatePriority, function () {
                      throw error;
                    });
                  }
                }
              });
            }
          });
        }
      }

      var onScheduleFiberRoot = null;
      var onCommitFiberRoot = null;
      var onCommitFiberUnmount = null;
      var hasLoggedError = false;
      var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";

      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
          return false;
        }

        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

        if (hook.isDisabled) {
          return true;
        }

        if (!hook.supportsFiber) {
          {
            error("The installed version of React DevTools is too old and will not work " + "with the current version of React. Please update React DevTools. " + "https://fb.me/react-devtools");
          }
          return true;
        }

        try {
          var rendererID = hook.inject(internals);

          if (true) {
            if (typeof hook.onScheduleFiberRoot === "function") {
              onScheduleFiberRoot = function onScheduleFiberRoot(root, children) {
                try {
                  hook.onScheduleFiberRoot(rendererID, root, children);
                } catch (err) {
                  if (true && !hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              };
            }
          }

          onCommitFiberRoot = function onCommitFiberRoot(root, expirationTime) {
            try {
              var didError = (root.current.effectTag & DidCapture) === DidCapture;

              if (enableProfilerTimer) {
                var currentTime = getCurrentTime();
                var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
                hook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
              } else {
                hook.onCommitFiberRoot(rendererID, root, undefined, didError);
              }
            } catch (err) {
              if (true) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          };

          onCommitFiberUnmount = function onCommitFiberUnmount(fiber) {
            try {
              hook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              if (true) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          };
        } catch (err) {
          {
            error("React instrumentation encountered an error: %s.", err);
          }
        }

        return true;
      }

      function onScheduleRoot(root, children) {
        if (typeof onScheduleFiberRoot === "function") {
          onScheduleFiberRoot(root, children);
        }
      }

      function onCommitRoot(root, expirationTime) {
        if (typeof onCommitFiberRoot === "function") {
          onCommitFiberRoot(root, expirationTime);
        }
      }

      function onCommitUnmount(fiber) {
        if (typeof onCommitFiberUnmount === "function") {
          onCommitFiberUnmount(fiber);
        }
      }

      var hasBadMapPolyfill;
      {
        hasBadMapPolyfill = false;

        try {
          var nonExtensibleObject = Object.preventExtensions({});
          var testMap = new Map([[nonExtensibleObject, null]]);
          var testSet = new Set([nonExtensibleObject]);
          testMap.set(0, 0);
          testSet.add(0);
        } catch (e) {
          hasBadMapPolyfill = true;
        }
      }
      var debugCounter = 1;

      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null;
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode;
        this.effectTag = NoEffect;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.expirationTime = NoWork;
        this.childExpirationTime = NoWork;
        this.alternate = null;
        {
          this.actualDuration = Number.NaN;
          this.actualStartTime = Number.NaN;
          this.selfBaseDuration = Number.NaN;
          this.treeBaseDuration = Number.NaN;
          this.actualDuration = 0;
          this.actualStartTime = -1;
          this.selfBaseDuration = 0;
          this.treeBaseDuration = 0;
        }
        {
          this._debugID = debugCounter++;
          this._debugIsCurrentlyTiming = false;
        }
        {
          this._debugSource = null;
          this._debugOwner = null;
          this._debugNeedsRemount = false;
          this._debugHookTypes = null;

          if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
            Object.preventExtensions(this);
          }
        }
      }

      var createFiber = function createFiber(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      };

      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }

      function isSimpleFunctionComponent(type) {
        return typeof type === "function" && !shouldConstruct(type) && type.defaultProps === undefined;
      }

      function resolveLazyComponentTag(Component) {
        if (typeof Component === "function") {
          return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
        } else if (Component !== undefined && Component !== null) {
          var $$typeof = Component.$$typeof;

          if ($$typeof === REACT_FORWARD_REF_TYPE) {
            return ForwardRef;
          }

          if ($$typeof === REACT_MEMO_TYPE) {
            return MemoComponent;
          }
        }

        return IndeterminateComponent;
      }

      function createWorkInProgress(current, pendingProps) {
        var workInProgress = current.alternate;

        if (workInProgress === null) {
          workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
          workInProgress.elementType = current.elementType;
          workInProgress.type = current.type;
          workInProgress.stateNode = current.stateNode;
          {
            {
              workInProgress._debugID = current._debugID;
            }
            workInProgress._debugSource = current._debugSource;
            workInProgress._debugOwner = current._debugOwner;
            workInProgress._debugHookTypes = current._debugHookTypes;
          }
          workInProgress.alternate = current;
          current.alternate = workInProgress;
        } else {
          workInProgress.pendingProps = pendingProps;
          workInProgress.effectTag = NoEffect;
          workInProgress.nextEffect = null;
          workInProgress.firstEffect = null;
          workInProgress.lastEffect = null;
          {
            workInProgress.actualDuration = 0;
            workInProgress.actualStartTime = -1;
          }
        }

        workInProgress.childExpirationTime = current.childExpirationTime;
        workInProgress.expirationTime = current.expirationTime;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue;
        var currentDependencies = current.dependencies;
        workInProgress.dependencies = currentDependencies === null ? null : {
          expirationTime: currentDependencies.expirationTime,
          firstContext: currentDependencies.firstContext,
          responders: currentDependencies.responders
        };
        workInProgress.sibling = current.sibling;
        workInProgress.index = current.index;
        workInProgress.ref = current.ref;
        {
          workInProgress.selfBaseDuration = current.selfBaseDuration;
          workInProgress.treeBaseDuration = current.treeBaseDuration;
        }
        {
          workInProgress._debugNeedsRemount = current._debugNeedsRemount;

          switch (workInProgress.tag) {
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
              workInProgress.type = resolveFunctionForHotReloading(current.type);
              break;

            case ClassComponent:
              workInProgress.type = resolveClassForHotReloading(current.type);
              break;

            case ForwardRef:
              workInProgress.type = resolveForwardRefForHotReloading(current.type);
              break;
          }
        }
        return workInProgress;
      }

      function resetWorkInProgress(workInProgress, renderExpirationTime) {
        workInProgress.effectTag &= Placement;
        workInProgress.nextEffect = null;
        workInProgress.firstEffect = null;
        workInProgress.lastEffect = null;
        var current = workInProgress.alternate;

        if (current === null) {
          workInProgress.childExpirationTime = NoWork;
          workInProgress.expirationTime = renderExpirationTime;
          workInProgress.child = null;
          workInProgress.memoizedProps = null;
          workInProgress.memoizedState = null;
          workInProgress.updateQueue = null;
          workInProgress.dependencies = null;
          {
            workInProgress.selfBaseDuration = 0;
            workInProgress.treeBaseDuration = 0;
          }
        } else {
          workInProgress.childExpirationTime = current.childExpirationTime;
          workInProgress.expirationTime = current.expirationTime;
          workInProgress.child = current.child;
          workInProgress.memoizedProps = current.memoizedProps;
          workInProgress.memoizedState = current.memoizedState;
          workInProgress.updateQueue = current.updateQueue;
          var currentDependencies = current.dependencies;
          workInProgress.dependencies = currentDependencies === null ? null : {
            expirationTime: currentDependencies.expirationTime,
            firstContext: currentDependencies.firstContext,
            responders: currentDependencies.responders
          };
          {
            workInProgress.selfBaseDuration = current.selfBaseDuration;
            workInProgress.treeBaseDuration = current.treeBaseDuration;
          }
        }

        return workInProgress;
      }

      function createHostRootFiber(tag) {
        var mode;

        if (tag === ConcurrentRoot) {
          mode = ConcurrentMode | BlockingMode | StrictMode;
        } else if (tag === BlockingRoot) {
          mode = BlockingMode | StrictMode;
        } else {
          mode = NoMode;
        }

        if (isDevToolsPresent) {
          mode |= ProfileMode;
        }

        return createFiber(HostRoot, null, null, mode);
      }

      function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
        var fiber;
        var fiberTag = IndeterminateComponent;
        var resolvedType = type;

        if (typeof type === "function") {
          if (shouldConstruct(type)) {
            fiberTag = ClassComponent;
            {
              resolvedType = resolveClassForHotReloading(resolvedType);
            }
          } else {
            {
              resolvedType = resolveFunctionForHotReloading(resolvedType);
            }
          }
        } else if (typeof type === "string") {
          fiberTag = HostComponent;
        } else {
          getTag: switch (type) {
            case REACT_FRAGMENT_TYPE:
              return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

            case REACT_CONCURRENT_MODE_TYPE:
              fiberTag = Mode;
              mode |= ConcurrentMode | BlockingMode | StrictMode;
              break;

            case REACT_STRICT_MODE_TYPE:
              fiberTag = Mode;
              mode |= StrictMode;
              break;

            case REACT_PROFILER_TYPE:
              return createFiberFromProfiler(pendingProps, mode, expirationTime, key);

            case REACT_SUSPENSE_TYPE:
              return createFiberFromSuspense(pendingProps, mode, expirationTime, key);

            case REACT_SUSPENSE_LIST_TYPE:
              return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);

            default:
              {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;

                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;

                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      {
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;

                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;

                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;

                    case REACT_BLOCK_TYPE:
                      fiberTag = Block;
                      break getTag;
                  }
                }

                var info = "";
                {
                  if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info += " You likely forgot to export your component from the file " + "it's defined in, or you might have mixed up default and " + "named imports.";
                  }

                  var ownerName = owner ? getComponentName(owner.type) : null;

                  if (ownerName) {
                    info += "\n\nCheck the render method of `" + ownerName + "`.";
                  }
                }
                {
                  throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                }
              }
          }
        }

        fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromElement(element, mode, expirationTime) {
        var owner = null;
        {
          owner = element._owner;
        }
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
        {
          fiber._debugSource = element._source;
          fiber._debugOwner = element._owner;
        }
        return fiber;
      }

      function createFiberFromFragment(elements, mode, expirationTime, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
        {
          if (typeof pendingProps.id !== "string") {
            error('Profiler must specify an "id" as a prop');
          }
        }
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.type = REACT_PROFILER_TYPE;
        fiber.expirationTime = expirationTime;
        {
          fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
          };
        }
        return fiber;
      }

      function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        fiber.type = REACT_SUSPENSE_TYPE;
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        {
          fiber.type = REACT_SUSPENSE_LIST_TYPE;
        }
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromText(content, mode, expirationTime) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromPortal(portal, mode, expirationTime) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.expirationTime = expirationTime;
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return fiber;
      }

      function assignFiberPropertiesInDEV(target, source) {
        if (target === null) {
          target = createFiber(IndeterminateComponent, null, null, NoMode);
        }

        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.effectTag = source.effectTag;
        target.nextEffect = source.nextEffect;
        target.firstEffect = source.firstEffect;
        target.lastEffect = source.lastEffect;
        target.expirationTime = source.expirationTime;
        target.childExpirationTime = source.childExpirationTime;
        target.alternate = source.alternate;
        {
          target.actualDuration = source.actualDuration;
          target.actualStartTime = source.actualStartTime;
          target.selfBaseDuration = source.selfBaseDuration;
          target.treeBaseDuration = source.treeBaseDuration;
        }
        {
          target._debugID = source._debugID;
          target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
        }
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
      }

      function FiberRootNode(containerInfo, tag, hydrate) {
        this.tag = tag;
        this.current = null;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.pingCache = null;
        this.finishedExpirationTime = NoWork;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.hydrate = hydrate;
        this.callbackNode = null;
        this.callbackPriority = NoPriority;
        this.firstPendingTime = NoWork;
        this.firstSuspendedTime = NoWork;
        this.lastSuspendedTime = NoWork;
        this.nextKnownPendingLevel = NoWork;
        this.lastPingedTime = NoWork;
        this.lastExpiredTime = NoWork;
        {
          this.interactionThreadID = tracing.unstable_getThreadID();
          this.memoizedInteractions = new Set();
          this.pendingInteractionMap = new Map();
        }
      }

      function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
        var root = new FiberRootNode(containerInfo, tag, hydrate);
        var uninitializedFiber = createHostRootFiber(tag);
        root.current = uninitializedFiber;
        uninitializedFiber.stateNode = root;
        initializeUpdateQueue(uninitializedFiber);
        return root;
      }

      function isRootSuspendedAtTime(root, expirationTime) {
        var firstSuspendedTime = root.firstSuspendedTime;
        var lastSuspendedTime = root.lastSuspendedTime;
        return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
      }

      function markRootSuspendedAtTime(root, expirationTime) {
        var firstSuspendedTime = root.firstSuspendedTime;
        var lastSuspendedTime = root.lastSuspendedTime;

        if (firstSuspendedTime < expirationTime) {
          root.firstSuspendedTime = expirationTime;
        }

        if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
          root.lastSuspendedTime = expirationTime;
        }

        if (expirationTime <= root.lastPingedTime) {
          root.lastPingedTime = NoWork;
        }

        if (expirationTime <= root.lastExpiredTime) {
          root.lastExpiredTime = NoWork;
        }
      }

      function markRootUpdatedAtTime(root, expirationTime) {
        var firstPendingTime = root.firstPendingTime;

        if (expirationTime > firstPendingTime) {
          root.firstPendingTime = expirationTime;
        }

        var firstSuspendedTime = root.firstSuspendedTime;

        if (firstSuspendedTime !== NoWork) {
          if (expirationTime >= firstSuspendedTime) {
            root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
          } else if (expirationTime >= root.lastSuspendedTime) {
            root.lastSuspendedTime = expirationTime + 1;
          }

          if (expirationTime > root.nextKnownPendingLevel) {
            root.nextKnownPendingLevel = expirationTime;
          }
        }
      }

      function markRootFinishedAtTime(root, finishedExpirationTime, remainingExpirationTime) {
        root.firstPendingTime = remainingExpirationTime;

        if (finishedExpirationTime <= root.lastSuspendedTime) {
          root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
        } else if (finishedExpirationTime <= root.firstSuspendedTime) {
          root.firstSuspendedTime = finishedExpirationTime - 1;
        }

        if (finishedExpirationTime <= root.lastPingedTime) {
          root.lastPingedTime = NoWork;
        }

        if (finishedExpirationTime <= root.lastExpiredTime) {
          root.lastExpiredTime = NoWork;
        }
      }

      function markRootExpiredAtTime(root, expirationTime) {
        var lastExpiredTime = root.lastExpiredTime;

        if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
          root.lastExpiredTime = expirationTime;
        }
      }

      var didWarnAboutNestedUpdates;
      var didWarnAboutFindNodeInStrictMode;
      {
        didWarnAboutNestedUpdates = false;
        didWarnAboutFindNodeInStrictMode = {};
      }

      function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
          return emptyContextObject;
        }

        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);

        if (fiber.tag === ClassComponent) {
          var Component = fiber.type;

          if (isContextProvider(Component)) {
            return processChildContext(fiber, Component, parentContext);
          }
        }

        return parentContext;
      }

      function findHostInstanceWithWarning(component, methodName) {
        {
          var fiber = get(component);

          if (fiber === undefined) {
            if (typeof component.render === "function") {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            } else {
              {
                throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
              }
            }
          }

          var hostFiber = findCurrentHostFiber(fiber);

          if (hostFiber === null) {
            return null;
          }

          if (hostFiber.mode & StrictMode) {
            var componentName = getComponentName(fiber.type) || "Component";

            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
              didWarnAboutFindNodeInStrictMode[componentName] = true;

              if (fiber.mode & StrictMode) {
                error("%s is deprecated in StrictMode. " + "%s was passed an instance of %s which is inside StrictMode. " + "Instead, add a ref directly to the element you want to reference. " + "Learn more about using refs safely here: " + "https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
              } else {
                error("%s is deprecated in StrictMode. " + "%s was passed an instance of %s which renders StrictMode children. " + "Instead, add a ref directly to the element you want to reference. " + "Learn more about using refs safely here: " + "https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
              }
            }
          }

          return hostFiber.stateNode;
        }
      }

      function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
        return createFiberRoot(containerInfo, tag, hydrate);
      }

      function updateContainer(element, container, parentComponent, callback) {
        {
          onScheduleRoot(container, element);
        }
        var current$1 = container.current;
        var currentTime = requestCurrentTimeForUpdate();
        {
          if ("undefined" !== typeof jest) {
            warnIfUnmockedScheduler(current$1);
          }
        }
        var suspenseConfig = requestCurrentSuspenseConfig();
        var expirationTime = computeExpirationForFiber(currentTime, current$1, suspenseConfig);
        var context = getContextForSubtree(parentComponent);

        if (container.context === null) {
          container.context = context;
        } else {
          container.pendingContext = context;
        }

        {
          if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; " + "triggering nested component updates from render is not allowed. " + "If necessary, trigger nested updates in componentDidUpdate.\n\n" + "Check the render method of %s.", getComponentName(current.type) || "Unknown");
          }
        }
        var update = createUpdate(expirationTime, suspenseConfig);
        update.payload = {
          element: element
        };
        callback = callback === undefined ? null : callback;

        if (callback !== null) {
          {
            if (typeof callback !== "function") {
              error("render(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callback);
            }
          }
          update.callback = callback;
        }

        enqueueUpdate(current$1, update);
        scheduleWork(current$1, expirationTime);
        return expirationTime;
      }

      function getPublicRootInstance(container) {
        var containerFiber = container.current;

        if (!containerFiber.child) {
          return null;
        }

        switch (containerFiber.child.tag) {
          case HostComponent:
            return getPublicInstance(containerFiber.child.stateNode);

          default:
            return containerFiber.child.stateNode;
        }
      }

      var shouldSuspendImpl = function shouldSuspendImpl(fiber) {
        return false;
      };

      function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
      }

      var overrideHookState = null;
      var overrideProps = null;
      var scheduleUpdate = null;
      var setSuspenseHandler = null;
      {
        var copyWithSetImpl = function copyWithSetImpl(obj, path, idx, value) {
          if (idx >= path.length) {
            return value;
          }

          var key = path[idx];
          var updated = Array.isArray(obj) ? obj.slice() : Object.assign({}, obj);
          updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
          return updated;
        };

        var copyWithSet = function copyWithSet(obj, path, value) {
          return copyWithSetImpl(obj, path, 0, value);
        };

        overrideHookState = function overrideHookState(fiber, id, path, value) {
          var currentHook = fiber.memoizedState;

          while (currentHook !== null && id > 0) {
            currentHook = currentHook.next;
            id--;
          }

          if (currentHook !== null) {
            var newState = copyWithSet(currentHook.memoizedState, path, value);
            currentHook.memoizedState = newState;
            currentHook.baseState = newState;
            fiber.memoizedProps = Object.assign({}, fiber.memoizedProps);
            scheduleWork(fiber, Sync);
          }
        };

        overrideProps = function overrideProps(fiber, path, value) {
          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }

          scheduleWork(fiber, Sync);
        };

        scheduleUpdate = function scheduleUpdate(fiber) {
          scheduleWork(fiber, Sync);
        };

        setSuspenseHandler = function setSuspenseHandler(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
      }

      function injectIntoDevTools(devToolsConfig) {
        var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
          bundleType: devToolsConfig.bundleType,
          version: devToolsConfig.version,
          rendererPackageName: devToolsConfig.rendererPackageName,
          rendererConfig: devToolsConfig.rendererConfig,
          overrideHookState: overrideHookState,
          overrideProps: overrideProps,
          setSuspenseHandler: setSuspenseHandler,
          scheduleUpdate: scheduleUpdate,
          currentDispatcherRef: ReactCurrentDispatcher,
          findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);

            if (hostFiber === null) {
              return null;
            }

            return hostFiber.stateNode;
          },
          findFiberByHostInstance: function findFiberByHostInstance(instance) {
            if (!_findFiberByHostInstance) {
              return null;
            }

            return _findFiberByHostInstance(instance);
          },
          findHostInstancesForRefresh: findHostInstancesForRefresh,
          scheduleRefresh: scheduleRefresh,
          scheduleRoot: scheduleRoot,
          setRefreshHandler: setRefreshHandler,
          getCurrentFiber: function getCurrentFiber() {
            return current;
          }
        });
      }

      var IsSomeRendererActing$1 = ReactSharedInternals.IsSomeRendererActing;

      function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : "" + key,
          children: children,
          containerInfo: containerInfo,
          implementation: implementation
        };
      }

      var ReactVersion = "16.13.0";
      var instanceCache = new Map();

      function getInstanceFromTag(tag) {
        return instanceCache.get(tag) || null;
      }

      var emptyObject$1 = {};
      {
        Object.freeze(emptyObject$1);
      }
      var getInspectorDataForViewTag;
      var getInspectorDataForViewAtPoint;
      {
        var traverseOwnerTreeUp = function traverseOwnerTreeUp(hierarchy, instance) {
          if (instance) {
            hierarchy.unshift(instance);
            traverseOwnerTreeUp(hierarchy, instance._debugOwner);
          }
        };

        var getOwnerHierarchy = function getOwnerHierarchy(instance) {
          var hierarchy = [];
          traverseOwnerTreeUp(hierarchy, instance);
          return hierarchy;
        };

        var lastNonHostInstance = function lastNonHostInstance(hierarchy) {
          for (var i = hierarchy.length - 1; i > 1; i--) {
            var instance = hierarchy[i];

            if (instance.tag !== HostComponent) {
              return instance;
            }
          }

          return hierarchy[0];
        };

        var getHostProps = function getHostProps(fiber) {
          var host = findCurrentHostFiber(fiber);

          if (host) {
            return host.memoizedProps || emptyObject$1;
          }

          return emptyObject$1;
        };

        var getHostNode = function getHostNode(fiber, findNodeHandle) {
          var hostNode;

          while (fiber) {
            if (fiber.stateNode !== null && fiber.tag === HostComponent) {
              hostNode = findNodeHandle(fiber.stateNode);
            }

            if (hostNode) {
              return hostNode;
            }

            fiber = fiber.child;
          }

          return null;
        };

        var createHierarchy = function createHierarchy(fiberHierarchy) {
          return fiberHierarchy.map(function (fiber) {
            return {
              name: getComponentName(fiber.type),
              getInspectorData: function getInspectorData(findNodeHandle) {
                return {
                  props: getHostProps(fiber),
                  source: fiber._debugSource,
                  measure: function measure(callback) {
                    var hostFiber = findCurrentHostFiber(fiber);
                    var shadowNode = hostFiber != null && hostFiber.stateNode !== null && hostFiber.stateNode.node;

                    if (shadowNode) {
                      nativeFabricUIManager.measure(shadowNode, callback);
                    } else {
                      return ReactNativePrivateInterface.UIManager.measure(getHostNode(fiber, findNodeHandle), callback);
                    }
                  }
                };
              }
            };
          });
        };

        var getInspectorDataForInstance = function getInspectorDataForInstance(closestInstance) {
          if (!closestInstance) {
            return {
              hierarchy: [],
              props: emptyObject$1,
              selectedIndex: null,
              source: null
            };
          }

          var fiber = findCurrentFiberUsingSlowPath(closestInstance);
          var fiberHierarchy = getOwnerHierarchy(fiber);
          var instance = lastNonHostInstance(fiberHierarchy);
          var hierarchy = createHierarchy(fiberHierarchy);
          var props = getHostProps(instance);
          var source = instance._debugSource;
          var selectedIndex = fiberHierarchy.indexOf(instance);
          return {
            hierarchy: hierarchy,
            props: props,
            selectedIndex: selectedIndex,
            source: source
          };
        };

        getInspectorDataForViewTag = function getInspectorDataForViewTag(viewTag) {
          var closestInstance = getInstanceFromTag(viewTag);

          if (!closestInstance) {
            return {
              hierarchy: [],
              props: emptyObject$1,
              selectedIndex: null,
              source: null
            };
          }

          var fiber = findCurrentFiberUsingSlowPath(closestInstance);
          var fiberHierarchy = getOwnerHierarchy(fiber);
          var instance = lastNonHostInstance(fiberHierarchy);
          var hierarchy = createHierarchy(fiberHierarchy);
          var props = getHostProps(instance);
          var source = instance._debugSource;
          var selectedIndex = fiberHierarchy.indexOf(instance);
          return {
            hierarchy: hierarchy,
            props: props,
            selectedIndex: selectedIndex,
            source: source
          };
        };

        getInspectorDataForViewAtPoint = function getInspectorDataForViewAtPoint(findNodeHandle, inspectedView, locationX, locationY, callback) {
          var closestInstance = null;

          if (inspectedView._internalInstanceHandle != null) {
            nativeFabricUIManager.findNodeAtPoint(inspectedView._internalInstanceHandle.stateNode.node, locationX, locationY, function (internalInstanceHandle) {
              if (internalInstanceHandle == null) {
                callback(Object.assign({
                  pointerY: locationY,
                  frame: {
                    left: 0,
                    top: 0,
                    width: 0,
                    height: 0
                  }
                }, getInspectorDataForInstance(closestInstance)));
              }

              closestInstance = internalInstanceHandle.stateNode.canonical._internalInstanceHandle;
              nativeFabricUIManager.measure(internalInstanceHandle.stateNode.node, function (x, y, width, height, pageX, pageY) {
                callback(Object.assign({
                  pointerY: locationY,
                  frame: {
                    left: pageX,
                    top: pageY,
                    width: width,
                    height: height
                  }
                }, getInspectorDataForInstance(closestInstance)));
              });
            });
          } else if (inspectedView._internalFiberInstanceHandleDEV != null) {
            ReactNativePrivateInterface.UIManager.findSubviewIn(findNodeHandle(inspectedView), [locationX, locationY], function (nativeViewTag, left, top, width, height) {
              var inspectorData = getInspectorDataForInstance(getInstanceFromTag(nativeViewTag));
              callback(Object.assign({}, inspectorData, {
                pointerY: locationY,
                frame: {
                  left: left,
                  top: top,
                  width: width,
                  height: height
                },
                touchedViewTag: nativeViewTag
              }));
            });
          } else {
            error("getInspectorDataForViewAtPoint expects to receieve a host component");
            return;
          }
        };
      }
      var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;

      function findHostInstance_DEPRECATED(componentOrHandle) {
        {
          var owner = ReactCurrentOwner$3.current;

          if (owner !== null && owner.stateNode !== null) {
            if (!owner.stateNode._warnedAboutRefsInRender) {
              error("%s is accessing findNodeHandle inside its render(). " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(owner.type) || "A component");
            }

            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }

        if (componentOrHandle == null) {
          return null;
        }

        if (componentOrHandle._nativeTag) {
          return componentOrHandle;
        }

        if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) {
          return componentOrHandle.canonical;
        }

        var hostInstance;
        {
          hostInstance = findHostInstanceWithWarning(componentOrHandle, "findHostInstance_DEPRECATED");
        }

        if (hostInstance == null) {
          return hostInstance;
        }

        if (hostInstance.canonical) {
          return hostInstance.canonical;
        }

        return hostInstance;
      }

      function findNodeHandle(componentOrHandle) {
        {
          var owner = ReactCurrentOwner$3.current;

          if (owner !== null && owner.stateNode !== null) {
            if (!owner.stateNode._warnedAboutRefsInRender) {
              error("%s is accessing findNodeHandle inside its render(). " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(owner.type) || "A component");
            }

            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }

        if (componentOrHandle == null) {
          return null;
        }

        if (typeof componentOrHandle === "number") {
          return componentOrHandle;
        }

        if (componentOrHandle._nativeTag) {
          return componentOrHandle._nativeTag;
        }

        if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) {
          return componentOrHandle.canonical._nativeTag;
        }

        var hostInstance;
        {
          hostInstance = findHostInstanceWithWarning(componentOrHandle, "findNodeHandle");
        }

        if (hostInstance == null) {
          return hostInstance;
        }

        if (hostInstance.canonical) {
          return hostInstance.canonical._nativeTag;
        }

        return hostInstance._nativeTag;
      }

      function dispatchCommand(handle, command, args) {
        if (handle._nativeTag == null) {
          {
            error("dispatchCommand was called with a ref that isn't a " + "native component. Use React.forwardRef to get access to the underlying native component");
          }
          return;
        }

        if (handle._internalInstanceHandle) {
          nativeFabricUIManager.dispatchCommand(handle._internalInstanceHandle.stateNode.node, command, args);
        } else {
          ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(handle._nativeTag, command, args);
        }
      }

      function render(element, containerTag, callback) {
        var root = roots.get(containerTag);

        if (!root) {
          root = createContainer(containerTag, LegacyRoot, false);
          roots.set(containerTag, root);
        }

        updateContainer(element, root, null, callback);
        return getPublicRootInstance(root);
      }

      function unmountComponentAtNode(containerTag) {
        this.stopSurface(containerTag);
      }

      function stopSurface(containerTag) {
        var root = roots.get(containerTag);

        if (root) {
          updateContainer(null, root, null, function () {
            roots.delete(containerTag);
          });
        }
      }

      function createPortal$1(children, containerTag) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        return createPortal(children, containerTag, null, key);
      }

      setBatchingImplementation(batchedUpdates$1);
      var roots = new Map();
      injectIntoDevTools({
        findFiberByHostInstance: getInstanceFromInstance,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-native-renderer",
        rendererConfig: {
          getInspectorDataForViewTag: getInspectorDataForViewTag,
          getInspectorDataForViewAtPoint: getInspectorDataForViewAtPoint.bind(null, findNodeHandle)
        }
      });
      exports.createPortal = createPortal$1;
      exports.dispatchCommand = dispatchCommand;
      exports.findHostInstance_DEPRECATED = findHostInstance_DEPRECATED;
      exports.findNodeHandle = findNodeHandle;
      exports.render = render;
      exports.stopSurface = stopSurface;
      exports.unmountComponentAtNode = unmountComponentAtNode;
    })();
  }
},420,[49,87,58,192,195],"node_modules/react-native/Libraries/Renderer/implementations/ReactFabric-dev.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  _$$_REQUIRE(_dependencyMap[0], "react-native/Libraries/ReactPrivate/ReactNativePrivateInitializeCore");

  var React = _$$_REQUIRE(_dependencyMap[1], "react");

  function getParent(inst) {
    do {
      inst = inst.return;
    } while (inst && 5 !== inst.tag);

    return inst ? inst : null;
  }

  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
      path.push(inst), inst = getParent(inst);
    }

    for (inst = path.length; 0 < inst--;) {
      fn(path[inst], "captured", arg);
    }

    for (inst = 0; inst < path.length; inst++) {
      fn(path[inst], "bubbled", arg);
    }
  }

  function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);

    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this.onError(error);
    }
  }

  var hasError = !1,
      caughtError = null,
      hasRethrowError = !1,
      rethrowError = null,
      reporter = {
    onError: function onError(error) {
      hasError = !0;
      caughtError = error;
    }
  };

  function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    hasError = !1;
    caughtError = null;
    invokeGuardedCallbackImpl.apply(reporter, arguments);
  }

  function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback.apply(this, arguments);

    if (hasError) {
      if (hasError) {
        var error = caughtError;
        hasError = !1;
        caughtError = null;
      } else throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");

      hasRethrowError || (hasRethrowError = !0, rethrowError = error);
    }
  }

  var getFiberCurrentPropsFromNode = null,
      getInstanceFromNode = null,
      getNodeFromInstance = null;

  function executeDispatch(event, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
    event.currentTarget = null;
  }

  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    if (Array.isArray(dispatchListener)) throw Error("executeDirectDispatch(...): Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }

  function getListener(inst, registrationName) {
    var listener = inst.stateNode;
    if (!listener) return null;
    var props = getFiberCurrentPropsFromNode(listener);
    if (!props) return null;
    listener = props[registrationName];

    a: switch (registrationName) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
      case "onMouseEnter":
        (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
        inst = !props;
        break a;

      default:
        inst = !1;
    }

    if (inst) return null;
    if (listener && "function" !== typeof listener) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
    return listener;
  }

  function accumulateInto(current, next) {
    if (null == next) throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
    if (null == current) return next;

    if (Array.isArray(current)) {
      if (Array.isArray(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }

    return Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }

  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }

  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }

  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }

  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;

      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }

  function functionThatReturnsTrue() {
    return !0;
  }

  function functionThatReturnsFalse() {
    return !1;
  }

  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    dispatchConfig = this.constructor.Interface;

    for (var propName in dispatchConfig) {
      dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    }

    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : !1 === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }

  Object.assign(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = !0;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = !1), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = !0), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function persist() {
      this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function destructor() {
      var Interface = this.constructor.Interface,
          propName;

      for (propName in Interface) {
        this[propName] = null;
      }

      this.nativeEvent = this._targetInst = this.dispatchConfig = null;
      this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
      this._dispatchInstances = this._dispatchListeners = null;
    }
  });
  SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function currentTarget() {
      return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };

  SyntheticEvent.extend = function (Interface) {
    function E() {}

    function Class() {
      return Super.apply(this, arguments);
    }

    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();
    Object.assign(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = Object.assign({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };

  addEventPoolingTo(SyntheticEvent);

  function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }

    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }

  function releasePooledEvent(event) {
    if (!(event instanceof this)) throw Error("Trying to release an event instance into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }

  function addEventPoolingTo(EventConstructor) {
    EventConstructor.eventPool = [];
    EventConstructor.getPooled = getPooledEvent;
    EventConstructor.release = releasePooledEvent;
  }

  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function touchHistory() {
      return null;
    }
  });

  function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
  }

  function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
  }

  var startDependencies = ["topTouchStart"],
      moveDependencies = ["topTouchMove"],
      endDependencies = ["topTouchCancel", "topTouchEnd"],
      touchBank = [],
      touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
  };

  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }

  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    if (null == _ref) throw Error("Touch object is missing identifier.");
    return _ref;
  }

  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: !0,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }

  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = !0, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
  }

  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = !1, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
  }

  var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
      if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) {
        if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      }
    },
    touchHistory: touchHistory
  };

  function accumulate(current, next) {
    if (null == next) throw Error("accumulate(...): Accumulated items must not be null or undefined.");
    return null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  var responderInst = null,
      trackedTouchCount = 0;

  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }

  var eventTypes = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      },
      dependencies: startDependencies
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      },
      dependencies: ["topScroll"]
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      },
      dependencies: ["topSelectionChange"]
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      },
      dependencies: moveDependencies
    },
    responderStart: {
      registrationName: "onResponderStart",
      dependencies: startDependencies
    },
    responderMove: {
      registrationName: "onResponderMove",
      dependencies: moveDependencies
    },
    responderEnd: {
      registrationName: "onResponderEnd",
      dependencies: endDependencies
    },
    responderRelease: {
      registrationName: "onResponderRelease",
      dependencies: endDependencies
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest",
      dependencies: []
    },
    responderGrant: {
      registrationName: "onResponderGrant",
      dependencies: []
    },
    responderReject: {
      registrationName: "onResponderReject",
      dependencies: []
    },
    responderTerminate: {
      registrationName: "onResponderTerminate",
      dependencies: []
    }
  },
      ResponderEventPlugin = {
    _getResponder: function _getResponder() {
      return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (isStartish(topLevelType)) trackedTouchCount += 1;else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;else return null;
      ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);

      if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
        var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        if (responderInst) b: {
          var JSCompiler_temp = responderInst;

          for (var depthA = 0, tempA = JSCompiler_temp; tempA; tempA = getParent(tempA)) {
            depthA++;
          }

          tempA = 0;

          for (var tempB = targetInst; tempB; tempB = getParent(tempB)) {
            tempA++;
          }

          for (; 0 < depthA - tempA;) {
            JSCompiler_temp = getParent(JSCompiler_temp), depthA--;
          }

          for (; 0 < tempA - depthA;) {
            targetInst = getParent(targetInst), tempA--;
          }

          for (; depthA--;) {
            if (JSCompiler_temp === targetInst || JSCompiler_temp === targetInst.alternate) break b;
            JSCompiler_temp = getParent(JSCompiler_temp);
            targetInst = getParent(targetInst);
          }

          JSCompiler_temp = null;
        } else JSCompiler_temp = targetInst;
        targetInst = JSCompiler_temp === responderInst;
        JSCompiler_temp = ResponderSyntheticEvent.getPooled(shouldSetEventType, JSCompiler_temp, nativeEvent, nativeEventTarget);
        JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory;
        targetInst ? forEachAccumulated(JSCompiler_temp, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(JSCompiler_temp, accumulateTwoPhaseDispatchesSingle);

        b: {
          shouldSetEventType = JSCompiler_temp._dispatchListeners;
          targetInst = JSCompiler_temp._dispatchInstances;
          if (Array.isArray(shouldSetEventType)) for (depthA = 0; depthA < shouldSetEventType.length && !JSCompiler_temp.isPropagationStopped(); depthA++) {
            if (shouldSetEventType[depthA](JSCompiler_temp, targetInst[depthA])) {
              shouldSetEventType = targetInst[depthA];
              break b;
            }
          } else if (shouldSetEventType && shouldSetEventType(JSCompiler_temp, targetInst)) {
            shouldSetEventType = targetInst;
            break b;
          }
          shouldSetEventType = null;
        }

        JSCompiler_temp._dispatchInstances = null;
        JSCompiler_temp._dispatchListeners = null;
        JSCompiler_temp.isPersistent() || JSCompiler_temp.constructor.release(JSCompiler_temp);
        if (shouldSetEventType && shouldSetEventType !== responderInst) {
          if (JSCompiler_temp = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, shouldSetEventType, nativeEvent, nativeEventTarget), JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp, accumulateDirectDispatchesSingle), targetInst = !0 === executeDirectDispatch(JSCompiler_temp), responderInst) {
            if (depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), depthA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(depthA, accumulateDirectDispatchesSingle), tempA = !depthA._dispatchListeners || executeDirectDispatch(depthA), depthA.isPersistent() || depthA.constructor.release(depthA), tempA) {
              depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
              depthA.touchHistory = ResponderTouchHistoryStore.touchHistory;
              forEachAccumulated(depthA, accumulateDirectDispatchesSingle);
              var JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [JSCompiler_temp, depthA]);
              changeResponder(shouldSetEventType, targetInst);
            } else shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, shouldSetEventType, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
          } else JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, JSCompiler_temp), changeResponder(shouldSetEventType, targetInst);
        } else JSCompiler_temp$jscomp$0 = null;
      } else JSCompiler_temp$jscomp$0 = null;

      shouldSetEventType = responderInst && isStartish(topLevelType);
      JSCompiler_temp = responderInst && isMoveish(topLevelType);
      targetInst = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
      if (shouldSetEventType = shouldSetEventType ? eventTypes.responderStart : JSCompiler_temp ? eventTypes.responderMove : targetInst ? eventTypes.responderEnd : null) shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, responderInst, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
      shouldSetEventType = responderInst && "topTouchCancel" === topLevelType;
      if (topLevelType = responderInst && !shouldSetEventType && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
        if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (JSCompiler_temp = 0; JSCompiler_temp < topLevelType.length; JSCompiler_temp++) {
          if (targetInst = topLevelType[JSCompiler_temp].target, null !== targetInst && void 0 !== targetInst && 0 !== targetInst) {
            depthA = getInstanceFromNode(targetInst);

            b: {
              for (targetInst = responderInst; depthA;) {
                if (targetInst === depthA || targetInst === depthA.alternate) {
                  targetInst = !0;
                  break b;
                }

                depthA = getParent(depthA);
              }

              targetInst = !1;
            }

            if (targetInst) {
              topLevelType = !1;
              break a;
            }
          }
        }
        topLevelType = !0;
      }
      if (topLevelType = shouldSetEventType ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, nativeEvent), changeResponder(null);
      return JSCompiler_temp$jscomp$0;
    },
    GlobalResponderHandler: null,
    injection: {
      injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
        ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
      }
    }
  },
      eventPluginOrder = null,
      namesToPlugins = {};

  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
          pluginIndex = eventPluginOrder.indexOf(pluginName);
      if (!(-1 < pluginIndex)) throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`.");

      if (!plugins[pluginIndex]) {
        if (!pluginModule.extractEvents) throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not.");
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;

        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = void 0;
          var dispatchConfig = pluginIndex[eventName],
              pluginModule$jscomp$0 = pluginModule,
              eventName$jscomp$0 = eventName;
          if (eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0)) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName$jscomp$0 + "`.");
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) {
              phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule$jscomp$0, eventName$jscomp$0);
            }

            JSCompiler_inline_result = !0;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule$jscomp$0, eventName$jscomp$0), JSCompiler_inline_result = !0) : JSCompiler_inline_result = !1;

          if (!JSCompiler_inline_result) throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
        }
      }
    }
  }

  function publishRegistrationName(registrationName, pluginModule) {
    if (registrationNameModules[registrationName]) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`.");
    registrationNameModules[registrationName] = pluginModule;
  }

  var plugins = [],
      eventNameDispatchConfigs = {},
      registrationNameModules = {},
      customBubblingEventTypes = _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").ReactNativeViewConfigRegistry.customBubblingEventTypes,
      customDirectEventTypes = _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").ReactNativeViewConfigRegistry.customDirectEventTypes;

  if (eventPluginOrder) throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
  eventPluginOrder = Array.prototype.slice.call(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  recomputePluginOrdering();
  var injectedNamesToPlugins$jscomp$inline_92 = {
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: {
      eventTypes: {},
      extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (null == targetInst) return null;
        var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType];
        if (!bubbleDispatchConfig && !directDispatchConfig) throw Error('Unsupported top level event type "' + topLevelType + '" dispatched');
        topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        if (bubbleDispatchConfig) forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);else return null;
        return topLevelType;
      }
    }
  },
      isOrderingDirty$jscomp$inline_93 = !1,
      pluginName$jscomp$inline_94;

  for (pluginName$jscomp$inline_94 in injectedNamesToPlugins$jscomp$inline_92) {
    if (injectedNamesToPlugins$jscomp$inline_92.hasOwnProperty(pluginName$jscomp$inline_94)) {
      var pluginModule$jscomp$inline_95 = injectedNamesToPlugins$jscomp$inline_92[pluginName$jscomp$inline_94];

      if (!namesToPlugins.hasOwnProperty(pluginName$jscomp$inline_94) || namesToPlugins[pluginName$jscomp$inline_94] !== pluginModule$jscomp$inline_95) {
        if (namesToPlugins[pluginName$jscomp$inline_94]) throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName$jscomp$inline_94 + "`.");
        namesToPlugins[pluginName$jscomp$inline_94] = pluginModule$jscomp$inline_95;
        isOrderingDirty$jscomp$inline_93 = !0;
      }
    }
  }

  isOrderingDirty$jscomp$inline_93 && recomputePluginOrdering();

  function getInstanceFromInstance(instanceHandle) {
    return instanceHandle;
  }

  getFiberCurrentPropsFromNode = function getFiberCurrentPropsFromNode(inst) {
    return inst.canonical.currentProps;
  };

  getInstanceFromNode = getInstanceFromInstance;

  getNodeFromInstance = function getNodeFromInstance(inst) {
    inst = inst.stateNode.canonical;
    if (!inst._nativeTag) throw Error("All native instances should have a tag.");
    return inst;
  };

  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function onChange(from, to, blockNativeResponder) {
      null !== to ? _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.setJSResponder(to.stateNode.canonical._nativeTag, blockNativeResponder) : _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.clearJSResponder();
    }
  });
  var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  ReactSharedInternals.hasOwnProperty("ReactCurrentDispatcher") || (ReactSharedInternals.ReactCurrentDispatcher = {
    current: null
  });
  ReactSharedInternals.hasOwnProperty("ReactCurrentBatchConfig") || (ReactSharedInternals.ReactCurrentBatchConfig = {
    suspense: null
  });
  var hasSymbol = "function" === typeof Symbol && Symbol.for,
      REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103,
      REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106,
      REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107,
      REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108,
      REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114,
      REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109,
      REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110,
      REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111,
      REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112,
      REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113,
      REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120,
      REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115,
      REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116,
      REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121,
      MAYBE_ITERATOR_SYMBOL = "function" === typeof Symbol && Symbol.iterator;

  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }

  function initializeLazyComponentType(lazyComponent) {
    if (-1 === lazyComponent._status) {
      var ctor = lazyComponent._result;
      ctor || (ctor = lazyComponent._ctor);
      ctor = ctor();
      lazyComponent._status = 0;
      lazyComponent._result = ctor;
      ctor.then(function (moduleObject) {
        0 === lazyComponent._status && (moduleObject = moduleObject.default, lazyComponent._status = 1, lazyComponent._result = moduleObject);
      }, function (error) {
        0 === lazyComponent._status && (lazyComponent._status = 2, lazyComponent._result = error);
      });
    }
  }

  function getComponentName(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.displayName || type.name || null;
    if ("string" === typeof type) return type;

    switch (type) {
      case REACT_FRAGMENT_TYPE:
        return "Fragment";

      case REACT_PORTAL_TYPE:
        return "Portal";

      case REACT_PROFILER_TYPE:
        return "Profiler";

      case REACT_STRICT_MODE_TYPE:
        return "StrictMode";

      case REACT_SUSPENSE_TYPE:
        return "Suspense";

      case REACT_SUSPENSE_LIST_TYPE:
        return "SuspenseList";
    }

    if ("object" === typeof type) switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return (type.displayName || "Context") + ".Consumer";

      case REACT_PROVIDER_TYPE:
        return (type._context.displayName || "Context") + ".Provider";

      case REACT_FORWARD_REF_TYPE:
        var innerType = type.render;
        innerType = innerType.displayName || innerType.name || "";
        return type.displayName || ("" !== innerType ? "ForwardRef(" + innerType + ")" : "ForwardRef");

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type.render);

      case REACT_LAZY_TYPE:
        if (type = 1 === type._status ? type._result : null) return getComponentName(type);
    }
    return null;
  }

  function getNearestMountedFiber(fiber) {
    var node = fiber,
        nearestMounted = fiber;
    if (fiber.alternate) for (; node.return;) {
      node = node.return;
    } else {
      fiber = node;

      do {
        node = fiber, 0 !== (node.effectTag & 1026) && (nearestMounted = node.return), fiber = node.return;
      } while (fiber);
    }
    return 3 === node.tag ? nearestMounted : null;
  }

  function assertIsMounted(fiber) {
    if (getNearestMountedFiber(fiber) !== fiber) throw Error("Unable to find node on an unmounted component.");
  }

  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;

    if (!alternate) {
      alternate = getNearestMountedFiber(fiber);
      if (null === alternate) throw Error("Unable to find node on an unmounted component.");
      return alternate !== fiber ? null : fiber;
    }

    for (var a = fiber, b = alternate;;) {
      var parentA = a.return;
      if (null === parentA) break;
      var parentB = parentA.alternate;

      if (null === parentB) {
        b = parentA.return;

        if (null !== b) {
          a = b;
          continue;
        }

        break;
      }

      if (parentA.child === parentB.child) {
        for (parentB = parentA.child; parentB;) {
          if (parentB === a) return assertIsMounted(parentA), fiber;
          if (parentB === b) return assertIsMounted(parentA), alternate;
          parentB = parentB.sibling;
        }

        throw Error("Unable to find node on an unmounted component.");
      }

      if (a.return !== b.return) a = parentA, b = parentB;else {
        for (var didFindChild = !1, _child = parentA.child; _child;) {
          if (_child === a) {
            didFindChild = !0;
            a = parentA;
            b = parentB;
            break;
          }

          if (_child === b) {
            didFindChild = !0;
            b = parentA;
            a = parentB;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          for (_child = parentB.child; _child;) {
            if (_child === a) {
              didFindChild = !0;
              a = parentB;
              b = parentA;
              break;
            }

            if (_child === b) {
              didFindChild = !0;
              b = parentB;
              a = parentA;
              break;
            }

            _child = _child.sibling;
          }

          if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
        }
      }
      if (a.alternate !== b) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }

    if (3 !== a.tag) throw Error("Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
  }

  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child) node.child.return = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node.return || node.return === parent) return null;
          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    return null;
  }

  function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
    return function () {
      if (callback && ("boolean" !== typeof context.__isMounted || context.__isMounted)) return callback.apply(context, arguments);
    };
  }

  var emptyObject = {},
      removedKeys = null,
      removedKeyCount = 0,
      deepDifferOptions = {
    unsafelyIgnoreFunctions: !0
  };

  function defaultDiffer(prevProp, nextProp) {
    return "object" !== typeof nextProp || null === nextProp ? !0 : _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").deepDiffer(prevProp, nextProp, deepDifferOptions);
  }

  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) {
      restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && 0 < removedKeyCount) for (i in removedKeys) {
      if (removedKeys[i]) {
        var nextProp = node[i];

        if (void 0 !== nextProp) {
          var attributeConfig = validAttributes[i];

          if (attributeConfig) {
            "function" === typeof nextProp && (nextProp = !0);
            "undefined" === typeof nextProp && (nextProp = null);
            if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
            removedKeys[i] = !1;
            removedKeyCount--;
          }
        }
      }
    }
  }

  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);

    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
          i;

      for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      }

      for (; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      }

      for (; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      }

      return updatePayload;
    }

    return Array.isArray(prevProp) ? diffProperties(updatePayload, _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").flattenStyle(nextProp), validAttributes);
  }

  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);

    for (var i = 0; i < nextProp.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }

    return updatePayload;
  }

  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);

    for (var i = 0; i < prevProp.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }

    return updatePayload;
  }

  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;

    for (propKey in nextProps) {
      if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = !0, "function" === typeof prevProp && (prevProp = !0));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = !1);
        if (updatePayload && void 0 !== updatePayload[propKey]) {
          if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
          }
        } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) defaultDiffer(prevProp, nextProp) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
          if (void 0 === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
      }
    }

    for (var _propKey in prevProps) {
      void 0 === nextProps[_propKey] && (!(attributeConfig = validAttributes[_propKey]) || updatePayload && void 0 !== updatePayload[_propKey] || (prevProp = prevProps[_propKey], void 0 !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[_propKey] = null, removedKeys || (removedKeys = {}), removedKeys[_propKey] || (removedKeys[_propKey] = !0, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    }

    return updatePayload;
  }

  function batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
  }

  var isInsideEventHandler = !1;

  function batchedUpdates(fn, bookkeeping) {
    if (isInsideEventHandler) return fn(bookkeeping);
    isInsideEventHandler = !0;

    try {
      return batchedUpdatesImpl(fn, bookkeeping);
    } finally {
      isInsideEventHandler = !1;
    }
  }

  var eventQueue = null;

  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
          dispatchInstances = e._dispatchInstances;
      if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) {
        executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);
      } else dispatchListeners && executeDispatch(e, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }

  function dispatchEvent(target, topLevelType, nativeEvent) {
    var eventTarget = null;

    if (null != target) {
      var stateNode = target.stateNode;
      null != stateNode && (eventTarget = stateNode.canonical);
    }

    batchedUpdates(function () {
      var events = eventTarget;

      for (var events$jscomp$0 = null, i = 0; i < plugins.length; i++) {
        var possiblePlugin = plugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, target, nativeEvent, events, 1)) && (events$jscomp$0 = accumulateInto(events$jscomp$0, possiblePlugin));
      }

      events = events$jscomp$0;
      null !== events && (eventQueue = accumulateInto(eventQueue, events));
      events = eventQueue;
      eventQueue = null;

      if (events) {
        forEachAccumulated(events, executeDispatchesAndReleaseTopLevel);
        if (eventQueue) throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
        if (hasRethrowError) throw events = rethrowError, hasRethrowError = !1, rethrowError = null, events;
      }
    });
  }

  function shim$1() {
    throw Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue.");
  }

  var _nativeFabricUIManage = nativeFabricUIManager,
      createNode = _nativeFabricUIManage.createNode,
      cloneNode = _nativeFabricUIManage.cloneNode,
      cloneNodeWithNewChildren = _nativeFabricUIManage.cloneNodeWithNewChildren,
      cloneNodeWithNewChildrenAndProps = _nativeFabricUIManage.cloneNodeWithNewChildrenAndProps,
      cloneNodeWithNewProps = _nativeFabricUIManage.cloneNodeWithNewProps,
      createChildNodeSet = _nativeFabricUIManage.createChildSet,
      appendChildNode = _nativeFabricUIManage.appendChild,
      appendChildNodeToSet = _nativeFabricUIManage.appendChildToSet,
      completeRoot = _nativeFabricUIManage.completeRoot,
      registerEventHandler = _nativeFabricUIManage.registerEventHandler,
      fabricMeasure = _nativeFabricUIManage.measure,
      fabricMeasureInWindow = _nativeFabricUIManage.measureInWindow,
      fabricMeasureLayout = _nativeFabricUIManage.measureLayout,
      getViewConfigForType = _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").ReactNativeViewConfigRegistry.get,
      nextReactTag = 2;

  registerEventHandler && registerEventHandler(dispatchEvent);

  var ReactFabricHostComponent = function () {
    function ReactFabricHostComponent(tag, viewConfig, props, internalInstanceHandle) {
      this._nativeTag = tag;
      this.viewConfig = viewConfig;
      this.currentProps = props;
      this._internalInstanceHandle = internalInstanceHandle;
    }

    var _proto = ReactFabricHostComponent.prototype;

    _proto.blur = function () {
      _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").TextInputState.blurTextInput(this);
    };

    _proto.focus = function () {
      _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").TextInputState.focusTextInput(this);
    };

    _proto.measure = function (callback) {
      fabricMeasure(this._internalInstanceHandle.stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    _proto.measureInWindow = function (callback) {
      fabricMeasureInWindow(this._internalInstanceHandle.stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    _proto.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      "number" !== typeof relativeToNativeNode && relativeToNativeNode instanceof ReactFabricHostComponent && fabricMeasureLayout(this._internalInstanceHandle.stateNode.node, relativeToNativeNode._internalInstanceHandle.stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
    };

    _proto.setNativeProps = function () {};

    return ReactFabricHostComponent;
  }();

  function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
    if (!hostContext.isInAParentText) throw Error("Text strings must be rendered within a <Text> component.");
    hostContext = nextReactTag;
    nextReactTag += 2;
    return {
      node: createNode(hostContext, "RCTRawText", rootContainerInstance, {
        text: text
      }, internalInstanceHandle)
    };
  }

  var scheduleTimeout = setTimeout,
      cancelTimeout = clearTimeout;

  function cloneHiddenInstance(instance) {
    var node = instance.node;
    var updatePayload = diffProperties(null, emptyObject, {
      style: {
        display: "none"
      }
    }, instance.canonical.viewConfig.validAttributes);
    return {
      node: cloneNodeWithNewProps(node, updatePayload),
      canonical: instance.canonical
    };
  }

  var valueStack = [],
      index = -1;

  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }

  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }

  var emptyContextObject = {},
      contextStackCursor = {
    current: emptyContextObject
  },
      didPerformWorkStackCursor = {
    current: !1
  },
      previousContext = emptyContextObject;

  function getMaskedContext(workInProgress, unmaskedContext) {
    var contextTypes = workInProgress.type.contextTypes;
    if (!contextTypes) return emptyContextObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {},
        key;

    for (key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    instance && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return context;
  }

  function isContextProvider(type) {
    type = type.childContextTypes;
    return null !== type && void 0 !== type;
  }

  function popContext() {
    pop(didPerformWorkStackCursor);
    pop(contextStackCursor);
  }

  function pushTopLevelContextObject(fiber, context, didChange) {
    if (contextStackCursor.current !== emptyContextObject) throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
    push(contextStackCursor, context);
    push(didPerformWorkStackCursor, didChange);
  }

  function processChildContext(fiber, type, parentContext) {
    var instance = fiber.stateNode;
    fiber = type.childContextTypes;
    if ("function" !== typeof instance.getChildContext) return parentContext;
    instance = instance.getChildContext();

    for (var contextKey in instance) {
      if (!(contextKey in fiber)) throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
    }

    return Object.assign({}, parentContext, {}, instance);
  }

  function pushContextProvider(workInProgress) {
    workInProgress = (workInProgress = workInProgress.stateNode) && workInProgress.__reactInternalMemoizedMergedChildContext || emptyContextObject;
    previousContext = contextStackCursor.current;
    push(contextStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current);
    return !0;
  }

  function invalidateContextProvider(workInProgress, type, didChange) {
    var instance = workInProgress.stateNode;
    if (!instance) throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
    didChange ? (workInProgress = processChildContext(workInProgress, type, previousContext), instance.__reactInternalMemoizedMergedChildContext = workInProgress, pop(didPerformWorkStackCursor), pop(contextStackCursor), push(contextStackCursor, workInProgress)) : pop(didPerformWorkStackCursor);
    push(didPerformWorkStackCursor, didChange);
  }

  var fakeCallbackNode = {},
      requestPaint = void 0 !== _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_requestPaint ? _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_requestPaint : function () {},
      syncQueue = null,
      immediateQueueCallbackNode = null,
      isFlushingSyncQueue = !1,
      initialTimeMs = _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_now(),
      now = 1e4 > initialTimeMs ? _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_now : function () {
    return _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_now() - initialTimeMs;
  };

  function getCurrentPriorityLevel() {
    switch (_$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_getCurrentPriorityLevel()) {
      case _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_ImmediatePriority:
        return 99;

      case _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_UserBlockingPriority:
        return 98;

      case _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_NormalPriority:
        return 97;

      case _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_LowPriority:
        return 96;

      case _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_IdlePriority:
        return 95;

      default:
        throw Error("Unknown priority level.");
    }
  }

  function reactPriorityToSchedulerPriority(reactPriorityLevel) {
    switch (reactPriorityLevel) {
      case 99:
        return _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_ImmediatePriority;

      case 98:
        return _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_UserBlockingPriority;

      case 97:
        return _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_NormalPriority;

      case 96:
        return _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_LowPriority;

      case 95:
        return _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_IdlePriority;

      default:
        throw Error("Unknown priority level.");
    }
  }

  function runWithPriority(reactPriorityLevel, fn) {
    reactPriorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
    return _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_runWithPriority(reactPriorityLevel, fn);
  }

  function scheduleCallback(reactPriorityLevel, callback, options) {
    reactPriorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
    return _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_scheduleCallback(reactPriorityLevel, callback, options);
  }

  function scheduleSyncCallback(callback) {
    null === syncQueue ? (syncQueue = [callback], immediateQueueCallbackNode = _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_scheduleCallback(_$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_ImmediatePriority, flushSyncCallbackQueueImpl)) : syncQueue.push(callback);
    return fakeCallbackNode;
  }

  function flushSyncCallbackQueue() {
    if (null !== immediateQueueCallbackNode) {
      var node = immediateQueueCallbackNode;
      immediateQueueCallbackNode = null;

      _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_cancelCallback(node);
    }

    flushSyncCallbackQueueImpl();
  }

  function flushSyncCallbackQueueImpl() {
    if (!isFlushingSyncQueue && null !== syncQueue) {
      isFlushingSyncQueue = !0;
      var i = 0;

      try {
        var queue = syncQueue;
        runWithPriority(99, function () {
          for (; i < queue.length; i++) {
            var callback = queue[i];

            do {
              callback = callback(!0);
            } while (null !== callback);
          }
        });
        syncQueue = null;
      } catch (error) {
        throw null !== syncQueue && (syncQueue = syncQueue.slice(i + 1)), _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_scheduleCallback(_$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_ImmediatePriority, flushSyncCallbackQueue), error;
      } finally {
        isFlushingSyncQueue = !1;
      }
    }
  }

  function is(x, y) {
    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
  }

  var objectIs = "function" === typeof Object.is ? Object.is : is,
      hasOwnProperty = Object.prototype.hasOwnProperty;

  function shallowEqual(objA, objB) {
    if (objectIs(objA, objB)) return !0;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return !1;
    var keysA = Object.keys(objA),
        keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return !1;

    for (keysB = 0; keysB < keysA.length; keysB++) {
      if (!hasOwnProperty.call(objB, keysA[keysB]) || !objectIs(objA[keysA[keysB]], objB[keysA[keysB]])) return !1;
    }

    return !0;
  }

  var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

  function getStackByFiberInDevAndProd(workInProgress) {
    var info = "";

    do {
      a: switch (workInProgress.tag) {
        case 3:
        case 4:
        case 6:
        case 7:
        case 10:
        case 9:
          var JSCompiler_inline_result = "";
          break a;

        default:
          var owner = workInProgress._debugOwner,
              source = workInProgress._debugSource,
              name = getComponentName(workInProgress.type);
          JSCompiler_inline_result = null;
          owner && (JSCompiler_inline_result = getComponentName(owner.type));
          owner = name;
          name = "";
          source ? name = " (at " + source.fileName.replace(BEFORE_SLASH_RE, "") + ":" + source.lineNumber + ")" : JSCompiler_inline_result && (name = " (created by " + JSCompiler_inline_result + ")");
          JSCompiler_inline_result = "\n    in " + (owner || "Unknown") + name;
      }

      info += JSCompiler_inline_result;
      workInProgress = workInProgress.return;
    } while (workInProgress);

    return info;
  }

  function resolveDefaultProps(Component, baseProps) {
    if (Component && Component.defaultProps) {
      baseProps = Object.assign({}, baseProps);
      Component = Component.defaultProps;

      for (var propName in Component) {
        void 0 === baseProps[propName] && (baseProps[propName] = Component[propName]);
      }
    }

    return baseProps;
  }

  var valueCursor = {
    current: null
  },
      currentlyRenderingFiber = null,
      lastContextDependency = null,
      lastContextWithAllBitsObserved = null;

  function resetContextDependencies() {
    lastContextWithAllBitsObserved = lastContextDependency = currentlyRenderingFiber = null;
  }

  function popProvider(providerFiber) {
    var currentValue = valueCursor.current;
    pop(valueCursor);
    providerFiber.type._context._currentValue2 = currentValue;
  }

  function scheduleWorkOnParentPath(parent, renderExpirationTime) {
    for (; null !== parent;) {
      var alternate = parent.alternate;
      if (parent.childExpirationTime < renderExpirationTime) parent.childExpirationTime = renderExpirationTime, null !== alternate && alternate.childExpirationTime < renderExpirationTime && (alternate.childExpirationTime = renderExpirationTime);else if (null !== alternate && alternate.childExpirationTime < renderExpirationTime) alternate.childExpirationTime = renderExpirationTime;else break;
      parent = parent.return;
    }
  }

  function prepareToReadContext(workInProgress, renderExpirationTime) {
    currentlyRenderingFiber = workInProgress;
    lastContextWithAllBitsObserved = lastContextDependency = null;
    workInProgress = workInProgress.dependencies;
    null !== workInProgress && null !== workInProgress.firstContext && (workInProgress.expirationTime >= renderExpirationTime && (didReceiveUpdate = !0), workInProgress.firstContext = null);
  }

  function readContext(context, observedBits) {
    if (lastContextWithAllBitsObserved !== context && !1 !== observedBits && 0 !== observedBits) {
      if ("number" !== typeof observedBits || 1073741823 === observedBits) lastContextWithAllBitsObserved = context, observedBits = 1073741823;
      observedBits = {
        context: context,
        observedBits: observedBits,
        next: null
      };

      if (null === lastContextDependency) {
        if (null === currentlyRenderingFiber) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        lastContextDependency = observedBits;
        currentlyRenderingFiber.dependencies = {
          expirationTime: 0,
          firstContext: observedBits,
          responders: null
        };
      } else lastContextDependency = lastContextDependency.next = observedBits;
    }

    return context._currentValue2;
  }

  var hasForceUpdate = !1;

  function initializeUpdateQueue(fiber) {
    fiber.updateQueue = {
      baseState: fiber.memoizedState,
      baseQueue: null,
      shared: {
        pending: null
      },
      effects: null
    };
  }

  function cloneUpdateQueue(current, workInProgress) {
    current = current.updateQueue;
    workInProgress.updateQueue === current && (workInProgress.updateQueue = {
      baseState: current.baseState,
      baseQueue: current.baseQueue,
      shared: current.shared,
      effects: current.effects
    });
  }

  function createUpdate(expirationTime, suspenseConfig) {
    expirationTime = {
      expirationTime: expirationTime,
      suspenseConfig: suspenseConfig,
      tag: 0,
      payload: null,
      callback: null,
      next: null
    };
    return expirationTime.next = expirationTime;
  }

  function enqueueUpdate(fiber, update) {
    fiber = fiber.updateQueue;

    if (null !== fiber) {
      fiber = fiber.shared;
      var pending = fiber.pending;
      null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
      fiber.pending = update;
    }
  }

  function enqueueCapturedUpdate(workInProgress, update) {
    var current = workInProgress.alternate;
    null !== current && cloneUpdateQueue(current, workInProgress);
    workInProgress = workInProgress.updateQueue;
    current = workInProgress.baseQueue;
    null === current ? (workInProgress.baseQueue = update.next = update, update.next = update) : (update.next = current.next, current.next = update);
  }

  function processUpdateQueue(workInProgress$jscomp$0, props, instance, renderExpirationTime) {
    var queue = workInProgress$jscomp$0.updateQueue;
    hasForceUpdate = !1;
    var baseQueue = queue.baseQueue,
        pendingQueue = queue.shared.pending;

    if (null !== pendingQueue) {
      if (null !== baseQueue) {
        var baseFirst = baseQueue.next;
        baseQueue.next = pendingQueue.next;
        pendingQueue.next = baseFirst;
      }

      baseQueue = pendingQueue;
      queue.shared.pending = null;
      baseFirst = workInProgress$jscomp$0.alternate;
      null !== baseFirst && (baseFirst = baseFirst.updateQueue, null !== baseFirst && (baseFirst.baseQueue = pendingQueue));
    }

    if (null !== baseQueue) {
      baseFirst = baseQueue.next;
      var newState = queue.baseState,
          newExpirationTime = 0,
          newBaseState = null,
          newBaseQueueFirst = null,
          newBaseQueueLast = null;

      if (null !== baseFirst) {
        var update = baseFirst;

        do {
          pendingQueue = update.expirationTime;

          if (pendingQueue < renderExpirationTime) {
            var clone = {
              expirationTime: update.expirationTime,
              suspenseConfig: update.suspenseConfig,
              tag: update.tag,
              payload: update.payload,
              callback: update.callback,
              next: null
            };
            null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = clone, newBaseState = newState) : newBaseQueueLast = newBaseQueueLast.next = clone;
            pendingQueue > newExpirationTime && (newExpirationTime = pendingQueue);
          } else {
            null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
              expirationTime: 1073741823,
              suspenseConfig: update.suspenseConfig,
              tag: update.tag,
              payload: update.payload,
              callback: update.callback,
              next: null
            });
            markRenderEventTimeAndConfig(pendingQueue, update.suspenseConfig);

            a: {
              var workInProgress = workInProgress$jscomp$0,
                  update$jscomp$0 = update;
              pendingQueue = props;
              clone = instance;

              switch (update$jscomp$0.tag) {
                case 1:
                  workInProgress = update$jscomp$0.payload;

                  if ("function" === typeof workInProgress) {
                    newState = workInProgress.call(clone, newState, pendingQueue);
                    break a;
                  }

                  newState = workInProgress;
                  break a;

                case 3:
                  workInProgress.effectTag = workInProgress.effectTag & -4097 | 64;

                case 0:
                  workInProgress = update$jscomp$0.payload;
                  pendingQueue = "function" === typeof workInProgress ? workInProgress.call(clone, newState, pendingQueue) : workInProgress;
                  if (null === pendingQueue || void 0 === pendingQueue) break a;
                  newState = Object.assign({}, newState, pendingQueue);
                  break a;

                case 2:
                  hasForceUpdate = !0;
              }
            }

            null !== update.callback && (workInProgress$jscomp$0.effectTag |= 32, pendingQueue = queue.effects, null === pendingQueue ? queue.effects = [update] : pendingQueue.push(update));
          }

          update = update.next;
          if (null === update || update === baseFirst) if (pendingQueue = queue.shared.pending, null === pendingQueue) break;else update = baseQueue.next = pendingQueue.next, pendingQueue.next = baseFirst, queue.baseQueue = baseQueue = pendingQueue, queue.shared.pending = null;
        } while (1);
      }

      null === newBaseQueueLast ? newBaseState = newState : newBaseQueueLast.next = newBaseQueueFirst;
      queue.baseState = newBaseState;
      queue.baseQueue = newBaseQueueLast;
      markUnprocessedUpdateTime(newExpirationTime);
      workInProgress$jscomp$0.expirationTime = newExpirationTime;
      workInProgress$jscomp$0.memoizedState = newState;
    }
  }

  function commitUpdateQueue(finishedWork, finishedQueue, instance) {
    finishedWork = finishedQueue.effects;
    finishedQueue.effects = null;
    if (null !== finishedWork) for (finishedQueue = 0; finishedQueue < finishedWork.length; finishedQueue++) {
      var effect = finishedWork[finishedQueue],
          callback = effect.callback;

      if (null !== callback) {
        effect.callback = null;
        if ("function" !== typeof callback) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        callback.call(instance);
      }
    }
  }

  var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig,
      emptyRefsObject = new React.Component().refs;

  function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || void 0 === getDerivedStateFromProps ? ctor : Object.assign({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    0 === workInProgress.expirationTime && (workInProgress.updateQueue.baseState = getDerivedStateFromProps);
  }

  var classComponentUpdater = {
    isMounted: function isMounted(component) {
      return (component = component._reactInternalFiber) ? getNearestMountedFiber(component) === component : !1;
    },
    enqueueSetState: function enqueueSetState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTimeForUpdate(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.payload = payload;
      void 0 !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleWork(inst, currentTime);
    },
    enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTimeForUpdate(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.tag = 1;
      suspenseConfig.payload = payload;
      void 0 !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleWork(inst, currentTime);
    },
    enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTimeForUpdate(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.tag = 2;
      void 0 !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleWork(inst, currentTime);
    }
  };

  function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : !0;
  }

  function constructClassInstance(workInProgress, ctor, props) {
    var isLegacyContextConsumer = !1,
        unmaskedContext = emptyContextObject;
    var context = ctor.contextType;
    "object" === typeof context && null !== context ? context = readContext(context) : (unmaskedContext = isContextProvider(ctor) ? previousContext : contextStackCursor.current, isLegacyContextConsumer = ctor.contextTypes, context = (isLegacyContextConsumer = null !== isLegacyContextConsumer && void 0 !== isLegacyContextConsumer) ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject);
    ctor = new ctor(props, context);
    workInProgress.memoizedState = null !== ctor.state && void 0 !== ctor.state ? ctor.state : null;
    ctor.updater = classComponentUpdater;
    workInProgress.stateNode = ctor;
    ctor._reactInternalFiber = workInProgress;
    isLegacyContextConsumer && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return ctor;
  }

  function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }

  function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = emptyRefsObject;
    initializeUpdateQueue(workInProgress);
    var contextType = ctor.contextType;
    "object" === typeof contextType && null !== contextType ? instance.context = readContext(contextType) : (contextType = isContextProvider(ctor) ? previousContext : contextStackCursor.current, instance.context = getMaskedContext(workInProgress, contextType));
    processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
    instance.state = workInProgress.memoizedState;
    contextType = ctor.getDerivedStateFromProps;
    "function" === typeof contextType && (applyDerivedStateFromProps(workInProgress, ctor, contextType, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState);
    "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4);
  }

  var isArray = Array.isArray;

  function coerceRef(returnFiber, current, element) {
    returnFiber = element.ref;

    if (null !== returnFiber && "function" !== typeof returnFiber && "object" !== typeof returnFiber) {
      if (element._owner) {
        element = element._owner;

        if (element) {
          if (1 !== element.tag) throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref");
          var inst = element.stateNode;
        }

        if (!inst) throw Error("Missing owner for string ref " + returnFiber + ". This error is likely caused by a bug in React. Please file an issue.");
        var stringRef = "" + returnFiber;
        if (null !== current && null !== current.ref && "function" === typeof current.ref && current.ref._stringRef === stringRef) return current.ref;

        current = function current(value) {
          var refs = inst.refs;
          refs === emptyRefsObject && (refs = inst.refs = {});
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };

        current._stringRef = stringRef;
        return current;
      }

      if ("string" !== typeof returnFiber) throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
      if (!element._owner) throw Error("Element ref was specified as a string (" + returnFiber + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.");
    }

    return returnFiber;
  }

  function throwOnInvalidObjectType(returnFiber, newChild) {
    if ("textarea" !== returnFiber.type) throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + ").");
  }

  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var last = returnFiber.lastEffect;
        null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        childToDelete.nextEffect = null;
        childToDelete.effectTag = 8;
      }
    }

    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;

      for (; null !== currentFirstChild;) {
        deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return null;
    }

    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) {
        null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return returnFiber;
    }

    function useFiber(fiber, pendingProps) {
      fiber = createWorkInProgress(fiber, pendingProps);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }

    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.effectTag = 2, lastPlacedIndex) : newIndex;
      newFiber.effectTag = 2;
      return lastPlacedIndex;
    }

    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = 2);
      return newFiber;
    }

    function updateTextNode(returnFiber, current, textContent, expirationTime) {
      if (null === current || 6 !== current.tag) return current = createFiberFromText(textContent, returnFiber.mode, expirationTime), current.return = returnFiber, current;
      current = useFiber(current, textContent);
      current.return = returnFiber;
      return current;
    }

    function updateElement(returnFiber, current, element, expirationTime) {
      if (null !== current && current.elementType === element.type) return expirationTime = useFiber(current, element.props), expirationTime.ref = coerceRef(returnFiber, current, element), expirationTime.return = returnFiber, expirationTime;
      expirationTime = createFiberFromTypeAndProps(element.type, element.key, element.props, null, returnFiber.mode, expirationTime);
      expirationTime.ref = coerceRef(returnFiber, current, element);
      expirationTime.return = returnFiber;
      return expirationTime;
    }

    function updatePortal(returnFiber, current, portal, expirationTime) {
      if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) return current = createFiberFromPortal(portal, returnFiber.mode, expirationTime), current.return = returnFiber, current;
      current = useFiber(current, portal.children || []);
      current.return = returnFiber;
      return current;
    }

    function updateFragment(returnFiber, current, fragment, expirationTime, key) {
      if (null === current || 7 !== current.tag) return current = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key), current.return = returnFiber, current;
      current = useFiber(current, fragment);
      current.return = returnFiber;
      return current;
    }

    function createChild(returnFiber, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return expirationTime = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, null, newChild), expirationTime.return = returnFiber, expirationTime;

          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null), newChild.return = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key) : updateElement(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, expirationTime) : null;
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, existingChildren, newChild.props.children, expirationTime, newChild.key) : updateElement(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, expirationTime);
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;

      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) {
          oldFiber = createChild(returnFiber, newChildren[newIdx], expirationTime), null !== oldFiber && (currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
        }

        return resultingFirstChild;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
        nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], expirationTime), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }

    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      if ("function" !== typeof iteratorFn) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      if (null == newChildrenIterable) throw Error("An iterable object provided no iterator.");

      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;

      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) {
          step = createChild(returnFiber, step.value, expirationTime), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        }

        return iteratorFn;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) {
        step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, expirationTime), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }

    return function (returnFiber, currentFirstChild, newChild, expirationTime) {
      var isUnkeyedTopLevelFragment = "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key;
      isUnkeyedTopLevelFragment && (newChild = newChild.props.children);
      var isObject = "object" === typeof newChild && null !== newChild;
      if (isObject) switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          a: {
            isObject = newChild.key;

            for (isUnkeyedTopLevelFragment = currentFirstChild; null !== isUnkeyedTopLevelFragment;) {
              if (isUnkeyedTopLevelFragment.key === isObject) {
                switch (isUnkeyedTopLevelFragment.tag) {
                  case 7:
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment.sibling);
                      currentFirstChild = useFiber(isUnkeyedTopLevelFragment, newChild.props.children);
                      currentFirstChild.return = returnFiber;
                      returnFiber = currentFirstChild;
                      break a;
                    }

                    break;

                  default:
                    if (isUnkeyedTopLevelFragment.elementType === newChild.type) {
                      deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment.sibling);
                      currentFirstChild = useFiber(isUnkeyedTopLevelFragment, newChild.props);
                      currentFirstChild.ref = coerceRef(returnFiber, isUnkeyedTopLevelFragment, newChild);
                      currentFirstChild.return = returnFiber;
                      returnFiber = currentFirstChild;
                      break a;
                    }

                }

                deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment);
                break;
              } else deleteChild(returnFiber, isUnkeyedTopLevelFragment);

              isUnkeyedTopLevelFragment = isUnkeyedTopLevelFragment.sibling;
            }

            newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.mode, expirationTime, newChild.key), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (expirationTime = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, currentFirstChild, newChild), expirationTime.return = returnFiber, returnFiber = expirationTime);
          }

          return placeSingleChild(returnFiber);

        case REACT_PORTAL_TYPE:
          a: {
            for (isUnkeyedTopLevelFragment = newChild.key; null !== currentFirstChild;) {
              if (currentFirstChild.key === isUnkeyedTopLevelFragment) {
                if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  currentFirstChild = useFiber(currentFirstChild, newChild.children || []);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, currentFirstChild);
                  break;
                }
              } else deleteChild(returnFiber, currentFirstChild);
              currentFirstChild = currentFirstChild.sibling;
            }

            currentFirstChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
            currentFirstChild.return = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);
      }
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.mode, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild), placeSingleChild(returnFiber);
      if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
      if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
      isObject && throwOnInvalidObjectType(returnFiber, newChild);
      if ("undefined" === typeof newChild && !isUnkeyedTopLevelFragment) switch (returnFiber.tag) {
        case 1:
        case 0:
          throw returnFiber = returnFiber.type, Error((returnFiber.displayName || returnFiber.name || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
      }
      return deleteRemainingChildren(returnFiber, currentFirstChild);
    };
  }

  var reconcileChildFibers = ChildReconciler(!0),
      mountChildFibers = ChildReconciler(!1),
      NO_CONTEXT = {},
      contextStackCursor$1 = {
    current: NO_CONTEXT
  },
      contextFiberStackCursor = {
    current: NO_CONTEXT
  },
      rootInstanceStackCursor = {
    current: NO_CONTEXT
  };

  function requiredContext(c) {
    if (c === NO_CONTEXT) throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
    return c;
  }

  function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance);
    push(contextFiberStackCursor, fiber);
    push(contextStackCursor$1, NO_CONTEXT);
    pop(contextStackCursor$1);
    push(contextStackCursor$1, {
      isInAParentText: !1
    });
  }

  function popHostContainer() {
    pop(contextStackCursor$1);
    pop(contextFiberStackCursor);
    pop(rootInstanceStackCursor);
  }

  function pushHostContext(fiber) {
    requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor$1.current);
    var nextContext = fiber.type;
    nextContext = "AndroidTextInput" === nextContext || "RCTMultilineTextInputView" === nextContext || "RCTSinglelineTextInputView" === nextContext || "RCTText" === nextContext || "RCTVirtualText" === nextContext;
    nextContext = context.isInAParentText !== nextContext ? {
      isInAParentText: nextContext
    } : context;
    context !== nextContext && (push(contextFiberStackCursor, fiber), push(contextStackCursor$1, nextContext));
  }

  function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1), pop(contextFiberStackCursor));
  }

  var suspenseStackCursor = {
    current: 0
  };

  function findFirstSuspended(row) {
    for (var node = row; null !== node;) {
      if (13 === node.tag) {
        var state = node.memoizedState;
        if (null !== state && (null === state.dehydrated || shim$1() || shim$1())) return node;
      } else if (19 === node.tag && void 0 !== node.memoizedProps.revealOrder) {
        if (0 !== (node.effectTag & 64)) return node;
      } else if (null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === row) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === row) return null;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }

    return null;
  }

  function createDeprecatedResponderListener(responder, props) {
    return {
      responder: responder,
      props: props
    };
  }

  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,
      ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig,
      renderExpirationTime = 0,
      currentlyRenderingFiber$1 = null,
      currentHook = null,
      workInProgressHook = null,
      didScheduleRenderPhaseUpdate = !1;

  function throwInvalidHookError() {
    throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
  }

  function areHookInputsEqual(nextDeps, prevDeps) {
    if (null === prevDeps) return !1;

    for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
      if (!objectIs(nextDeps[i], prevDeps[i])) return !1;
    }

    return !0;
  }

  function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderExpirationTime) {
    renderExpirationTime = nextRenderExpirationTime;
    currentlyRenderingFiber$1 = workInProgress;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.expirationTime = 0;
    ReactCurrentDispatcher.current = null === current || null === current.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
    current = Component(props, secondArg);

    if (workInProgress.expirationTime === renderExpirationTime) {
      nextRenderExpirationTime = 0;

      do {
        workInProgress.expirationTime = 0;
        if (!(25 > nextRenderExpirationTime)) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        nextRenderExpirationTime += 1;
        workInProgressHook = currentHook = null;
        workInProgress.updateQueue = null;
        ReactCurrentDispatcher.current = HooksDispatcherOnRerender;
        current = Component(props, secondArg);
      } while (workInProgress.expirationTime === renderExpirationTime);
    }

    ReactCurrentDispatcher.current = ContextOnlyDispatcher;
    workInProgress = null !== currentHook && null !== currentHook.next;
    renderExpirationTime = 0;
    workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
    didScheduleRenderPhaseUpdate = !1;
    if (workInProgress) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
    return current;
  }

  function mountWorkInProgressHook() {
    var hook = {
      memoizedState: null,
      baseState: null,
      baseQueue: null,
      queue: null,
      next: null
    };
    null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
    return workInProgressHook;
  }

  function updateWorkInProgressHook() {
    if (null === currentHook) {
      var nextCurrentHook = currentlyRenderingFiber$1.alternate;
      nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
    } else nextCurrentHook = currentHook.next;

    var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState : workInProgressHook.next;
    if (null !== nextWorkInProgressHook) workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;else {
      if (null === nextCurrentHook) throw Error("Rendered more hooks than during the previous render.");
      currentHook = nextCurrentHook;
      nextCurrentHook = {
        memoizedState: currentHook.memoizedState,
        baseState: currentHook.baseState,
        baseQueue: currentHook.baseQueue,
        queue: currentHook.queue,
        next: null
      };
      null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
    }
    return workInProgressHook;
  }

  function basicStateReducer(state, action) {
    return "function" === typeof action ? action(state) : action;
  }

  function updateReducer(reducer) {
    var hook = updateWorkInProgressHook(),
        queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
    queue.lastRenderedReducer = reducer;
    var current = currentHook,
        baseQueue = current.baseQueue,
        pendingQueue = queue.pending;

    if (null !== pendingQueue) {
      if (null !== baseQueue) {
        var baseFirst = baseQueue.next;
        baseQueue.next = pendingQueue.next;
        pendingQueue.next = baseFirst;
      }

      current.baseQueue = baseQueue = pendingQueue;
      queue.pending = null;
    }

    if (null !== baseQueue) {
      baseQueue = baseQueue.next;
      current = current.baseState;
      var newBaseQueueLast = baseFirst = pendingQueue = null,
          update = baseQueue;

      do {
        var updateExpirationTime = update.expirationTime;

        if (updateExpirationTime < renderExpirationTime) {
          var clone = {
            expirationTime: update.expirationTime,
            suspenseConfig: update.suspenseConfig,
            action: update.action,
            eagerReducer: update.eagerReducer,
            eagerState: update.eagerState,
            next: null
          };
          null === newBaseQueueLast ? (baseFirst = newBaseQueueLast = clone, pendingQueue = current) : newBaseQueueLast = newBaseQueueLast.next = clone;
          updateExpirationTime > currentlyRenderingFiber$1.expirationTime && (currentlyRenderingFiber$1.expirationTime = updateExpirationTime, markUnprocessedUpdateTime(updateExpirationTime));
        } else null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
          expirationTime: 1073741823,
          suspenseConfig: update.suspenseConfig,
          action: update.action,
          eagerReducer: update.eagerReducer,
          eagerState: update.eagerState,
          next: null
        }), markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig), current = update.eagerReducer === reducer ? update.eagerState : reducer(current, update.action);

        update = update.next;
      } while (null !== update && update !== baseQueue);

      null === newBaseQueueLast ? pendingQueue = current : newBaseQueueLast.next = baseFirst;
      objectIs(current, hook.memoizedState) || (didReceiveUpdate = !0);
      hook.memoizedState = current;
      hook.baseState = pendingQueue;
      hook.baseQueue = newBaseQueueLast;
      queue.lastRenderedState = current;
    }

    return [hook.memoizedState, queue.dispatch];
  }

  function rerenderReducer(reducer) {
    var hook = updateWorkInProgressHook(),
        queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
    queue.lastRenderedReducer = reducer;
    var dispatch = queue.dispatch,
        lastRenderPhaseUpdate = queue.pending,
        newState = hook.memoizedState;

    if (null !== lastRenderPhaseUpdate) {
      queue.pending = null;
      var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;

      do {
        newState = reducer(newState, update.action), update = update.next;
      } while (update !== lastRenderPhaseUpdate);

      objectIs(newState, hook.memoizedState) || (didReceiveUpdate = !0);
      hook.memoizedState = newState;
      null === hook.baseQueue && (hook.baseState = newState);
      queue.lastRenderedState = newState;
    }

    return [newState, dispatch];
  }

  function mountState(initialState) {
    var hook = mountWorkInProgressHook();
    "function" === typeof initialState && (initialState = initialState());
    hook.memoizedState = hook.baseState = initialState;
    initialState = hook.queue = {
      pending: null,
      dispatch: null,
      lastRenderedReducer: basicStateReducer,
      lastRenderedState: initialState
    };
    initialState = initialState.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, initialState);
    return [hook.memoizedState, initialState];
  }

  function pushEffect(tag, create, destroy, deps) {
    tag = {
      tag: tag,
      create: create,
      destroy: destroy,
      deps: deps,
      next: null
    };
    create = currentlyRenderingFiber$1.updateQueue;
    null === create ? (create = {
      lastEffect: null
    }, currentlyRenderingFiber$1.updateQueue = create, create.lastEffect = tag.next = tag) : (destroy = create.lastEffect, null === destroy ? create.lastEffect = tag.next = tag : (deps = destroy.next, destroy.next = tag, tag.next = deps, create.lastEffect = tag));
    return tag;
  }

  function updateRef() {
    return updateWorkInProgressHook().memoizedState;
  }

  function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
    var hook = mountWorkInProgressHook();
    currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
    hook.memoizedState = pushEffect(1 | hookEffectTag, create, void 0, void 0 === deps ? null : deps);
  }

  function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
    var hook = updateWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var destroy = void 0;

    if (null !== currentHook) {
      var prevEffect = currentHook.memoizedState;
      destroy = prevEffect.destroy;

      if (null !== deps && areHookInputsEqual(deps, prevEffect.deps)) {
        pushEffect(hookEffectTag, create, destroy, deps);
        return;
      }
    }

    currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
    hook.memoizedState = pushEffect(1 | hookEffectTag, create, destroy, deps);
  }

  function mountEffect(create, deps) {
    return mountEffectImpl(516, 4, create, deps);
  }

  function updateEffect(create, deps) {
    return updateEffectImpl(516, 4, create, deps);
  }

  function updateLayoutEffect(create, deps) {
    return updateEffectImpl(4, 2, create, deps);
  }

  function imperativeHandleEffect(create, ref) {
    if ("function" === typeof ref) return create = create(), ref(create), function () {
      ref(null);
    };
    if (null !== ref && void 0 !== ref) return create = create(), ref.current = create, function () {
      ref.current = null;
    };
  }

  function updateImperativeHandle(ref, create, deps) {
    deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
    return updateEffectImpl(4, 2, imperativeHandleEffect.bind(null, create, ref), deps);
  }

  function mountDebugValue() {}

  function mountCallback(callback, deps) {
    mountWorkInProgressHook().memoizedState = [callback, void 0 === deps ? null : deps];
    return callback;
  }

  function updateCallback(callback, deps) {
    var hook = updateWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    hook.memoizedState = [callback, deps];
    return callback;
  }

  function updateMemo(nextCreate, deps) {
    var hook = updateWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    nextCreate = nextCreate();
    hook.memoizedState = [nextCreate, deps];
    return nextCreate;
  }

  function startTransition(setPending, config, callback) {
    var priorityLevel = getCurrentPriorityLevel();
    runWithPriority(98 > priorityLevel ? 98 : priorityLevel, function () {
      setPending(!0);
    });
    runWithPriority(97 < priorityLevel ? 97 : priorityLevel, function () {
      var previousConfig = ReactCurrentBatchConfig$1.suspense;
      ReactCurrentBatchConfig$1.suspense = void 0 === config ? null : config;

      try {
        setPending(!1), callback();
      } finally {
        ReactCurrentBatchConfig$1.suspense = previousConfig;
      }
    });
  }

  function dispatchAction(fiber, queue, action) {
    var currentTime = requestCurrentTimeForUpdate(),
        suspenseConfig = ReactCurrentBatchConfig.suspense;
    currentTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    suspenseConfig = {
      expirationTime: currentTime,
      suspenseConfig: suspenseConfig,
      action: action,
      eagerReducer: null,
      eagerState: null,
      next: null
    };
    var pending = queue.pending;
    null === pending ? suspenseConfig.next = suspenseConfig : (suspenseConfig.next = pending.next, pending.next = suspenseConfig);
    queue.pending = suspenseConfig;
    pending = fiber.alternate;
    if (fiber === currentlyRenderingFiber$1 || null !== pending && pending === currentlyRenderingFiber$1) didScheduleRenderPhaseUpdate = !0, suspenseConfig.expirationTime = renderExpirationTime, currentlyRenderingFiber$1.expirationTime = renderExpirationTime;else {
      if (0 === fiber.expirationTime && (null === pending || 0 === pending.expirationTime) && (pending = queue.lastRenderedReducer, null !== pending)) try {
        var currentState = queue.lastRenderedState,
            eagerState = pending(currentState, action);
        suspenseConfig.eagerReducer = pending;
        suspenseConfig.eagerState = eagerState;
        if (objectIs(eagerState, currentState)) return;
      } catch (error) {} finally {}
      scheduleWork(fiber, currentTime);
    }
  }

  function updateEventListener() {}

  var ContextOnlyDispatcher = {
    readContext: readContext,
    useCallback: throwInvalidHookError,
    useContext: throwInvalidHookError,
    useEffect: throwInvalidHookError,
    useImperativeHandle: throwInvalidHookError,
    useLayoutEffect: throwInvalidHookError,
    useMemo: throwInvalidHookError,
    useReducer: throwInvalidHookError,
    useRef: throwInvalidHookError,
    useState: throwInvalidHookError,
    useDebugValue: throwInvalidHookError,
    useResponder: throwInvalidHookError,
    useDeferredValue: throwInvalidHookError,
    useTransition: throwInvalidHookError,
    useEvent: throwInvalidHookError
  },
      HooksDispatcherOnMount = {
    readContext: readContext,
    useCallback: mountCallback,
    useContext: readContext,
    useEffect: mountEffect,
    useImperativeHandle: function useImperativeHandle(ref, create, deps) {
      deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
      return mountEffectImpl(4, 2, imperativeHandleEffect.bind(null, create, ref), deps);
    },
    useLayoutEffect: function useLayoutEffect(create, deps) {
      return mountEffectImpl(4, 2, create, deps);
    },
    useMemo: function useMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      deps = void 0 === deps ? null : deps;
      nextCreate = nextCreate();
      hook.memoizedState = [nextCreate, deps];
      return nextCreate;
    },
    useReducer: function useReducer(reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      initialArg = void 0 !== init ? init(initialArg) : initialArg;
      hook.memoizedState = hook.baseState = initialArg;
      reducer = hook.queue = {
        pending: null,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialArg
      };
      reducer = reducer.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, reducer);
      return [hook.memoizedState, reducer];
    },
    useRef: function useRef(initialValue) {
      var hook = mountWorkInProgressHook();
      initialValue = {
        current: initialValue
      };
      return hook.memoizedState = initialValue;
    },
    useState: mountState,
    useDebugValue: mountDebugValue,
    useResponder: createDeprecatedResponderListener,
    useDeferredValue: function useDeferredValue(value, config) {
      var _mountState = mountState(value),
          prevValue = _mountState[0],
          setValue = _mountState[1];

      mountEffect(function () {
        var previousConfig = ReactCurrentBatchConfig$1.suspense;
        ReactCurrentBatchConfig$1.suspense = void 0 === config ? null : config;

        try {
          setValue(value);
        } finally {
          ReactCurrentBatchConfig$1.suspense = previousConfig;
        }
      }, [value, config]);
      return prevValue;
    },
    useTransition: function useTransition(config) {
      var _mountState2 = mountState(!1),
          isPending = _mountState2[0];

      _mountState2 = _mountState2[1];
      return [mountCallback(startTransition.bind(null, _mountState2, config), [_mountState2, config]), isPending];
    },
    useEvent: function useEvent() {}
  },
      HooksDispatcherOnUpdate = {
    readContext: readContext,
    useCallback: updateCallback,
    useContext: readContext,
    useEffect: updateEffect,
    useImperativeHandle: updateImperativeHandle,
    useLayoutEffect: updateLayoutEffect,
    useMemo: updateMemo,
    useReducer: updateReducer,
    useRef: updateRef,
    useState: function useState() {
      return updateReducer(basicStateReducer);
    },
    useDebugValue: mountDebugValue,
    useResponder: createDeprecatedResponderListener,
    useDeferredValue: function useDeferredValue(value, config) {
      var _updateState = updateReducer(basicStateReducer),
          prevValue = _updateState[0],
          setValue = _updateState[1];

      updateEffect(function () {
        var previousConfig = ReactCurrentBatchConfig$1.suspense;
        ReactCurrentBatchConfig$1.suspense = void 0 === config ? null : config;

        try {
          setValue(value);
        } finally {
          ReactCurrentBatchConfig$1.suspense = previousConfig;
        }
      }, [value, config]);
      return prevValue;
    },
    useTransition: function useTransition(config) {
      var _updateState2 = updateReducer(basicStateReducer),
          isPending = _updateState2[0];

      _updateState2 = _updateState2[1];
      return [updateCallback(startTransition.bind(null, _updateState2, config), [_updateState2, config]), isPending];
    },
    useEvent: updateEventListener
  },
      HooksDispatcherOnRerender = {
    readContext: readContext,
    useCallback: updateCallback,
    useContext: readContext,
    useEffect: updateEffect,
    useImperativeHandle: updateImperativeHandle,
    useLayoutEffect: updateLayoutEffect,
    useMemo: updateMemo,
    useReducer: rerenderReducer,
    useRef: updateRef,
    useState: function useState() {
      return rerenderReducer(basicStateReducer);
    },
    useDebugValue: mountDebugValue,
    useResponder: createDeprecatedResponderListener,
    useDeferredValue: function useDeferredValue(value, config) {
      var _rerenderState = rerenderReducer(basicStateReducer),
          prevValue = _rerenderState[0],
          setValue = _rerenderState[1];

      updateEffect(function () {
        var previousConfig = ReactCurrentBatchConfig$1.suspense;
        ReactCurrentBatchConfig$1.suspense = void 0 === config ? null : config;

        try {
          setValue(value);
        } finally {
          ReactCurrentBatchConfig$1.suspense = previousConfig;
        }
      }, [value, config]);
      return prevValue;
    },
    useTransition: function useTransition(config) {
      var _rerenderState2 = rerenderReducer(basicStateReducer),
          isPending = _rerenderState2[0];

      _rerenderState2 = _rerenderState2[1];
      return [updateCallback(startTransition.bind(null, _rerenderState2, config), [_rerenderState2, config]), isPending];
    },
    useEvent: updateEventListener
  },
      ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner,
      didReceiveUpdate = !1;

  function reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime) {
    workInProgress.child = null === current ? mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime) : reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
  }

  function updateForwardRef(current, workInProgress, Component, nextProps, renderExpirationTime) {
    Component = Component.render;
    var ref = workInProgress.ref;
    prepareToReadContext(workInProgress, renderExpirationTime);
    nextProps = renderWithHooks(current, workInProgress, Component, nextProps, ref, renderExpirationTime);
    if (null !== current && !didReceiveUpdate) return workInProgress.updateQueue = current.updateQueue, workInProgress.effectTag &= -517, current.expirationTime <= renderExpirationTime && (current.expirationTime = 0), bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    reconcileChildren(current, workInProgress, nextProps, renderExpirationTime);
    return workInProgress.child;
  }

  function updateMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    if (null === current) {
      var type = Component.type;
      if ("function" === typeof type && !shouldConstruct(type) && void 0 === type.defaultProps && null === Component.compare && void 0 === Component.defaultProps) return workInProgress.tag = 15, workInProgress.type = type, updateSimpleMemoComponent(current, workInProgress, type, nextProps, updateExpirationTime, renderExpirationTime);
      current = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
      current.ref = workInProgress.ref;
      current.return = workInProgress;
      return workInProgress.child = current;
    }

    type = current.child;
    if (updateExpirationTime < renderExpirationTime && (updateExpirationTime = type.memoizedProps, Component = Component.compare, Component = null !== Component ? Component : shallowEqual, Component(updateExpirationTime, nextProps) && current.ref === workInProgress.ref)) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    current = createWorkInProgress(type, nextProps);
    current.ref = workInProgress.ref;
    current.return = workInProgress;
    return workInProgress.child = current;
  }

  function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    return null !== current && shallowEqual(current.memoizedProps, nextProps) && current.ref === workInProgress.ref && (didReceiveUpdate = !1, updateExpirationTime < renderExpirationTime) ? (workInProgress.expirationTime = current.expirationTime, bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime)) : updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime);
  }

  function markRef(current, workInProgress) {
    var ref = workInProgress.ref;
    if (null === current && null !== ref || null !== current && current.ref !== ref) workInProgress.effectTag |= 128;
  }

  function updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
    var context = isContextProvider(Component) ? previousContext : contextStackCursor.current;
    context = getMaskedContext(workInProgress, context);
    prepareToReadContext(workInProgress, renderExpirationTime);
    Component = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);
    if (null !== current && !didReceiveUpdate) return workInProgress.updateQueue = current.updateQueue, workInProgress.effectTag &= -517, current.expirationTime <= renderExpirationTime && (current.expirationTime = 0), bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    reconcileChildren(current, workInProgress, Component, renderExpirationTime);
    return workInProgress.child;
  }

  function updateClassComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
    if (isContextProvider(Component)) {
      var hasContext = !0;
      pushContextProvider(workInProgress);
    } else hasContext = !1;

    prepareToReadContext(workInProgress, renderExpirationTime);
    if (null === workInProgress.stateNode) null !== current && (current.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2), constructClassInstance(workInProgress, Component, nextProps), mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime), nextProps = !0;else if (null === current) {
      var instance = workInProgress.stateNode,
          oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context,
          contextType = Component.contextType;
      "object" === typeof contextType && null !== contextType ? contextType = readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType));
      var getDerivedStateFromProps = Component.getDerivedStateFromProps,
          hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
      hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType);
      hasForceUpdate = !1;
      var oldState = workInProgress.memoizedState;
      instance.state = oldState;
      processUpdateQueue(workInProgress, nextProps, instance, renderExpirationTime);
      oldContext = workInProgress.memoizedState;
      oldProps !== nextProps || oldState !== oldContext || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, oldContext, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4)) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), instance.props = nextProps, instance.state = oldContext, instance.context = contextType, nextProps = oldProps) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), nextProps = !1);
    } else instance = workInProgress.stateNode, cloneUpdateQueue(current, workInProgress), oldProps = workInProgress.memoizedProps, instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps), oldContext = instance.context, contextType = Component.contextType, "object" === typeof contextType && null !== contextType ? contextType = readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType)), getDerivedStateFromProps = Component.getDerivedStateFromProps, (hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate) || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType), hasForceUpdate = !1, oldContext = workInProgress.memoizedState, instance.state = oldContext, processUpdateQueue(workInProgress, nextProps, instance, renderExpirationTime), oldState = workInProgress.memoizedState, oldProps !== nextProps || oldContext !== oldState || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldState = workInProgress.memoizedState), (getDerivedStateFromProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldContext, oldState, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(nextProps, oldState, contextType), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(nextProps, oldState, contextType)), "function" === typeof instance.componentDidUpdate && (workInProgress.effectTag |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.effectTag |= 256)) : ("function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 256), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldState), instance.props = nextProps, instance.state = oldState, instance.context = contextType, nextProps = getDerivedStateFromProps) : ("function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 256), nextProps = !1);
    return finishClassComponent(current, workInProgress, Component, nextProps, hasContext, renderExpirationTime);
  }

  function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
    markRef(current, workInProgress);
    var didCaptureError = 0 !== (workInProgress.effectTag & 64);
    if (!shouldUpdate && !didCaptureError) return hasContext && invalidateContextProvider(workInProgress, Component, !1), bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    shouldUpdate = workInProgress.stateNode;
    ReactCurrentOwner$1.current = workInProgress;
    var nextChildren = didCaptureError && "function" !== typeof Component.getDerivedStateFromError ? null : shouldUpdate.render();
    workInProgress.effectTag |= 1;
    null !== current && didCaptureError ? (workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderExpirationTime), workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime)) : reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
    workInProgress.memoizedState = shouldUpdate.state;
    hasContext && invalidateContextProvider(workInProgress, Component, !0);
    return workInProgress.child;
  }

  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;
    root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, !1);
    pushHostContainer(workInProgress, root.containerInfo);
  }

  var SUSPENDED_MARKER = {
    dehydrated: null,
    retryTime: 0
  };

  function updateSuspenseComponent(current, workInProgress, renderExpirationTime) {
    var mode = workInProgress.mode,
        nextProps = workInProgress.pendingProps,
        suspenseContext = suspenseStackCursor.current,
        nextDidTimeout = !1,
        JSCompiler_temp;
    (JSCompiler_temp = 0 !== (workInProgress.effectTag & 64)) || (JSCompiler_temp = 0 !== (suspenseContext & 2) && (null === current || null !== current.memoizedState));
    JSCompiler_temp ? (nextDidTimeout = !0, workInProgress.effectTag &= -65) : null !== current && null === current.memoizedState || void 0 === nextProps.fallback || !0 === nextProps.unstable_avoidThisFallback || (suspenseContext |= 1);
    push(suspenseStackCursor, suspenseContext & 1);

    if (null === current) {
      if (nextDidTimeout) {
        nextDidTimeout = nextProps.fallback;
        nextProps = createFiberFromFragment(null, mode, 0, null);
        nextProps.return = workInProgress;
        if (0 === (workInProgress.mode & 2)) for (current = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, nextProps.child = current; null !== current;) {
          current.return = nextProps, current = current.sibling;
        }
        renderExpirationTime = createFiberFromFragment(nextDidTimeout, mode, renderExpirationTime, null);
        renderExpirationTime.return = workInProgress;
        nextProps.sibling = renderExpirationTime;
        workInProgress.memoizedState = SUSPENDED_MARKER;
        workInProgress.child = nextProps;
        return renderExpirationTime;
      }

      mode = nextProps.children;
      workInProgress.memoizedState = null;
      return workInProgress.child = mountChildFibers(workInProgress, null, mode, renderExpirationTime);
    }

    if (null !== current.memoizedState) {
      current = current.child;
      mode = current.sibling;

      if (nextDidTimeout) {
        nextProps = nextProps.fallback;
        renderExpirationTime = createWorkInProgress(current, current.pendingProps);
        renderExpirationTime.return = workInProgress;
        if (0 === (workInProgress.mode & 2) && (nextDidTimeout = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, nextDidTimeout !== current.child)) for (renderExpirationTime.child = nextDidTimeout; null !== nextDidTimeout;) {
          nextDidTimeout.return = renderExpirationTime, nextDidTimeout = nextDidTimeout.sibling;
        }
        mode = createWorkInProgress(mode, nextProps);
        mode.return = workInProgress;
        renderExpirationTime.sibling = mode;
        renderExpirationTime.childExpirationTime = 0;
        workInProgress.memoizedState = SUSPENDED_MARKER;
        workInProgress.child = renderExpirationTime;
        return mode;
      }

      renderExpirationTime = reconcileChildFibers(workInProgress, current.child, nextProps.children, renderExpirationTime);
      workInProgress.memoizedState = null;
      return workInProgress.child = renderExpirationTime;
    }

    current = current.child;

    if (nextDidTimeout) {
      nextDidTimeout = nextProps.fallback;
      nextProps = createFiberFromFragment(null, mode, 0, null);
      nextProps.return = workInProgress;
      nextProps.child = current;
      null !== current && (current.return = nextProps);
      if (0 === (workInProgress.mode & 2)) for (current = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, nextProps.child = current; null !== current;) {
        current.return = nextProps, current = current.sibling;
      }
      renderExpirationTime = createFiberFromFragment(nextDidTimeout, mode, renderExpirationTime, null);
      renderExpirationTime.return = workInProgress;
      nextProps.sibling = renderExpirationTime;
      renderExpirationTime.effectTag |= 2;
      nextProps.childExpirationTime = 0;
      workInProgress.memoizedState = SUSPENDED_MARKER;
      workInProgress.child = nextProps;
      return renderExpirationTime;
    }

    workInProgress.memoizedState = null;
    return workInProgress.child = reconcileChildFibers(workInProgress, current, nextProps.children, renderExpirationTime);
  }

  function scheduleWorkOnFiber(fiber, renderExpirationTime) {
    fiber.expirationTime < renderExpirationTime && (fiber.expirationTime = renderExpirationTime);
    var alternate = fiber.alternate;
    null !== alternate && alternate.expirationTime < renderExpirationTime && (alternate.expirationTime = renderExpirationTime);
    scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
  }

  function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
    var renderState = workInProgress.memoizedState;
    null === renderState ? workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      renderingStartTime: 0,
      last: lastContentRow,
      tail: tail,
      tailExpiration: 0,
      tailMode: tailMode,
      lastEffect: lastEffectBeforeRendering
    } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailExpiration = 0, renderState.tailMode = tailMode, renderState.lastEffect = lastEffectBeforeRendering);
  }

  function updateSuspenseListComponent(current, workInProgress, renderExpirationTime) {
    var nextProps = workInProgress.pendingProps,
        revealOrder = nextProps.revealOrder,
        tailMode = nextProps.tail;
    reconcileChildren(current, workInProgress, nextProps.children, renderExpirationTime);
    nextProps = suspenseStackCursor.current;
    if (0 !== (nextProps & 2)) nextProps = nextProps & 1 | 2, workInProgress.effectTag |= 64;else {
      if (null !== current && 0 !== (current.effectTag & 64)) a: for (current = workInProgress.child; null !== current;) {
        if (13 === current.tag) null !== current.memoizedState && scheduleWorkOnFiber(current, renderExpirationTime);else if (19 === current.tag) scheduleWorkOnFiber(current, renderExpirationTime);else if (null !== current.child) {
          current.child.return = current;
          current = current.child;
          continue;
        }
        if (current === workInProgress) break a;

        for (; null === current.sibling;) {
          if (null === current.return || current.return === workInProgress) break a;
          current = current.return;
        }

        current.sibling.return = current.return;
        current = current.sibling;
      }
      nextProps &= 1;
    }
    push(suspenseStackCursor, nextProps);
    if (0 === (workInProgress.mode & 2)) workInProgress.memoizedState = null;else switch (revealOrder) {
      case "forwards":
        renderExpirationTime = workInProgress.child;

        for (revealOrder = null; null !== renderExpirationTime;) {
          current = renderExpirationTime.alternate, null !== current && null === findFirstSuspended(current) && (revealOrder = renderExpirationTime), renderExpirationTime = renderExpirationTime.sibling;
        }

        renderExpirationTime = revealOrder;
        null === renderExpirationTime ? (revealOrder = workInProgress.child, workInProgress.child = null) : (revealOrder = renderExpirationTime.sibling, renderExpirationTime.sibling = null);
        initSuspenseListRenderState(workInProgress, !1, revealOrder, renderExpirationTime, tailMode, workInProgress.lastEffect);
        break;

      case "backwards":
        renderExpirationTime = null;
        revealOrder = workInProgress.child;

        for (workInProgress.child = null; null !== revealOrder;) {
          current = revealOrder.alternate;

          if (null !== current && null === findFirstSuspended(current)) {
            workInProgress.child = revealOrder;
            break;
          }

          current = revealOrder.sibling;
          revealOrder.sibling = renderExpirationTime;
          renderExpirationTime = revealOrder;
          revealOrder = current;
        }

        initSuspenseListRenderState(workInProgress, !0, renderExpirationTime, null, tailMode, workInProgress.lastEffect);
        break;

      case "together":
        initSuspenseListRenderState(workInProgress, !1, null, null, void 0, workInProgress.lastEffect);
        break;

      default:
        workInProgress.memoizedState = null;
    }
    return workInProgress.child;
  }

  function bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime) {
    null !== current && (workInProgress.dependencies = current.dependencies);
    var updateExpirationTime = workInProgress.expirationTime;
    0 !== updateExpirationTime && markUnprocessedUpdateTime(updateExpirationTime);
    if (workInProgress.childExpirationTime < renderExpirationTime) return null;
    if (null !== current && workInProgress.child !== current.child) throw Error("Resuming work not yet implemented.");

    if (null !== workInProgress.child) {
      current = workInProgress.child;
      renderExpirationTime = createWorkInProgress(current, current.pendingProps);
      workInProgress.child = renderExpirationTime;

      for (renderExpirationTime.return = workInProgress; null !== current.sibling;) {
        current = current.sibling, renderExpirationTime = renderExpirationTime.sibling = createWorkInProgress(current, current.pendingProps), renderExpirationTime.return = workInProgress;
      }

      renderExpirationTime.sibling = null;
    }

    return workInProgress.child;
  }

  var _appendAllChildren, updateHostContainer, updateHostComponent$1, updateHostText$1;

  _appendAllChildren = function appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {
    for (var node = workInProgress.child; null !== node;) {
      if (5 === node.tag) {
        var instance = node.stateNode;
        needsVisibilityToggle && isHidden && (instance = cloneHiddenInstance(instance));
        appendChildNode(parent.node, instance.node);
      } else if (6 === node.tag) {
        instance = node.stateNode;
        if (needsVisibilityToggle && isHidden) throw Error("Not yet implemented.");
        appendChildNode(parent.node, instance.node);
      } else if (4 !== node.tag) {
        if (13 === node.tag && 0 !== (node.effectTag & 4) && (instance = null !== node.memoizedState)) {
          var primaryChildParent = node.child;

          if (null !== primaryChildParent && (null !== primaryChildParent.child && (primaryChildParent.child.return = primaryChildParent, _appendAllChildren(parent, primaryChildParent, !0, instance)), instance = primaryChildParent.sibling, null !== instance)) {
            instance.return = node;
            node = instance;
            continue;
          }
        }

        if (null !== node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }
      }

      if (node === workInProgress) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  function appendAllChildrenToContainer(containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
    for (var node = workInProgress.child; null !== node;) {
      if (5 === node.tag) {
        var instance = node.stateNode;
        needsVisibilityToggle && isHidden && (instance = cloneHiddenInstance(instance));
        appendChildNodeToSet(containerChildSet, instance.node);
      } else if (6 === node.tag) {
        instance = node.stateNode;
        if (needsVisibilityToggle && isHidden) throw Error("Not yet implemented.");
        appendChildNodeToSet(containerChildSet, instance.node);
      } else if (4 !== node.tag) {
        if (13 === node.tag && 0 !== (node.effectTag & 4) && (instance = null !== node.memoizedState)) {
          var primaryChildParent = node.child;

          if (null !== primaryChildParent && (null !== primaryChildParent.child && (primaryChildParent.child.return = primaryChildParent, appendAllChildrenToContainer(containerChildSet, primaryChildParent, !0, instance)), instance = primaryChildParent.sibling, null !== instance)) {
            instance.return = node;
            node = instance;
            continue;
          }
        }

        if (null !== node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }
      }

      if (node === workInProgress) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  updateHostContainer = function updateHostContainer(workInProgress) {
    var portalOrRoot = workInProgress.stateNode;

    if (null !== workInProgress.firstEffect) {
      var container = portalOrRoot.containerInfo,
          newChildSet = createChildNodeSet(container);
      appendAllChildrenToContainer(newChildSet, workInProgress, !1, !1);
      portalOrRoot.pendingChildren = newChildSet;
      workInProgress.effectTag |= 4;
      completeRoot(container, newChildSet);
    }
  };

  updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps) {
    type = current.stateNode;
    var oldProps = current.memoizedProps;
    if ((current = null === workInProgress.firstEffect) && oldProps === newProps) workInProgress.stateNode = type;else {
      var recyclableInstance = workInProgress.stateNode;
      requiredContext(contextStackCursor$1.current);
      var updatePayload = null;
      oldProps !== newProps && (oldProps = diffProperties(null, oldProps, newProps, recyclableInstance.canonical.viewConfig.validAttributes), recyclableInstance.canonical.currentProps = newProps, updatePayload = oldProps);
      current && null === updatePayload ? workInProgress.stateNode = type : (newProps = updatePayload, recyclableInstance = type.node, type = {
        node: current ? null !== newProps ? cloneNodeWithNewProps(recyclableInstance, newProps) : cloneNode(recyclableInstance) : null !== newProps ? cloneNodeWithNewChildrenAndProps(recyclableInstance, newProps) : cloneNodeWithNewChildren(recyclableInstance),
        canonical: type.canonical
      }, workInProgress.stateNode = type, current ? workInProgress.effectTag |= 4 : _appendAllChildren(type, workInProgress, !1, !1));
    }
  };

  updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
    oldText !== newText ? (current = requiredContext(rootInstanceStackCursor.current), oldText = requiredContext(contextStackCursor$1.current), workInProgress.stateNode = createTextInstance(newText, current, oldText, workInProgress), workInProgress.effectTag |= 4) : workInProgress.stateNode = current.stateNode;
  };

  function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
    switch (renderState.tailMode) {
      case "hidden":
        hasRenderedATailFallback = renderState.tail;

        for (var lastTailNode = null; null !== hasRenderedATailFallback;) {
          null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
        }

        null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
        break;

      case "collapsed":
        lastTailNode = renderState.tail;

        for (var _lastTailNode = null; null !== lastTailNode;) {
          null !== lastTailNode.alternate && (_lastTailNode = lastTailNode), lastTailNode = lastTailNode.sibling;
        }

        null === _lastTailNode ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : _lastTailNode.sibling = null;
    }
  }

  function completeWork(current, workInProgress, renderExpirationTime) {
    var newProps = workInProgress.pendingProps;

    switch (workInProgress.tag) {
      case 2:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return null;

      case 1:
        return isContextProvider(workInProgress.type) && popContext(), null;

      case 3:
        return popHostContainer(), pop(didPerformWorkStackCursor), pop(contextStackCursor), current = workInProgress.stateNode, current.pendingContext && (current.context = current.pendingContext, current.pendingContext = null), updateHostContainer(workInProgress), null;

      case 5:
        popHostContext(workInProgress);
        var rootContainerInstance = requiredContext(rootInstanceStackCursor.current);
        renderExpirationTime = workInProgress.type;
        if (null !== current && null != workInProgress.stateNode) updateHostComponent$1(current, workInProgress, renderExpirationTime, newProps, rootContainerInstance), current.ref !== workInProgress.ref && (workInProgress.effectTag |= 128);else {
          if (!newProps) {
            if (null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
            return null;
          }

          requiredContext(contextStackCursor$1.current);
          current = nextReactTag;
          nextReactTag += 2;
          renderExpirationTime = getViewConfigForType(renderExpirationTime);
          var updatePayload = diffProperties(null, emptyObject, newProps, renderExpirationTime.validAttributes);
          rootContainerInstance = createNode(current, renderExpirationTime.uiViewClassName, rootContainerInstance, updatePayload, workInProgress);
          current = new ReactFabricHostComponent(current, renderExpirationTime, newProps, workInProgress);
          current = {
            node: rootContainerInstance,
            canonical: current
          };

          _appendAllChildren(current, workInProgress, !1, !1);

          workInProgress.stateNode = current;
          null !== workInProgress.ref && (workInProgress.effectTag |= 128);
        }
        return null;

      case 6:
        if (current && null != workInProgress.stateNode) updateHostText$1(current, workInProgress, current.memoizedProps, newProps);else {
          if ("string" !== typeof newProps && null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
          current = requiredContext(rootInstanceStackCursor.current);
          rootContainerInstance = requiredContext(contextStackCursor$1.current);
          workInProgress.stateNode = createTextInstance(newProps, current, rootContainerInstance, workInProgress);
        }
        return null;

      case 13:
        pop(suspenseStackCursor);
        newProps = workInProgress.memoizedState;
        if (0 !== (workInProgress.effectTag & 64)) return workInProgress.expirationTime = renderExpirationTime, workInProgress;
        newProps = null !== newProps;
        rootContainerInstance = !1;
        null !== current && (renderExpirationTime = current.memoizedState, rootContainerInstance = null !== renderExpirationTime, newProps || null === renderExpirationTime || (renderExpirationTime = current.child.sibling, null !== renderExpirationTime && (updatePayload = workInProgress.firstEffect, null !== updatePayload ? (workInProgress.firstEffect = renderExpirationTime, renderExpirationTime.nextEffect = updatePayload) : (workInProgress.firstEffect = workInProgress.lastEffect = renderExpirationTime, renderExpirationTime.nextEffect = null), renderExpirationTime.effectTag = 8)));
        if (newProps && !rootContainerInstance && 0 !== (workInProgress.mode & 2)) if (null === current && !0 !== workInProgress.memoizedProps.unstable_avoidThisFallback || 0 !== (suspenseStackCursor.current & 1)) workInProgressRootExitStatus === RootIncomplete && (workInProgressRootExitStatus = RootSuspended);else {
          if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) workInProgressRootExitStatus = RootSuspendedWithDelay;
          0 !== workInProgressRootNextUnprocessedUpdateTime && null !== workInProgressRoot && (markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1), markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime));
        }
        newProps && (workInProgress.effectTag |= 4);
        return null;

      case 4:
        return popHostContainer(), updateHostContainer(workInProgress), null;

      case 10:
        return popProvider(workInProgress), null;

      case 17:
        return isContextProvider(workInProgress.type) && popContext(), null;

      case 19:
        pop(suspenseStackCursor);
        newProps = workInProgress.memoizedState;
        if (null === newProps) return null;
        rootContainerInstance = 0 !== (workInProgress.effectTag & 64);
        updatePayload = newProps.rendering;
        if (null === updatePayload) {
          if (rootContainerInstance) cutOffTailIfNeeded(newProps, !1);else {
            if (workInProgressRootExitStatus !== RootIncomplete || null !== current && 0 !== (current.effectTag & 64)) for (current = workInProgress.child; null !== current;) {
              updatePayload = findFirstSuspended(current);

              if (null !== updatePayload) {
                workInProgress.effectTag |= 64;
                cutOffTailIfNeeded(newProps, !1);
                current = updatePayload.updateQueue;
                null !== current && (workInProgress.updateQueue = current, workInProgress.effectTag |= 4);
                null === newProps.lastEffect && (workInProgress.firstEffect = null);
                workInProgress.lastEffect = newProps.lastEffect;
                current = renderExpirationTime;

                for (newProps = workInProgress.child; null !== newProps;) {
                  rootContainerInstance = newProps, renderExpirationTime = current, rootContainerInstance.effectTag &= 2, rootContainerInstance.nextEffect = null, rootContainerInstance.firstEffect = null, rootContainerInstance.lastEffect = null, updatePayload = rootContainerInstance.alternate, null === updatePayload ? (rootContainerInstance.childExpirationTime = 0, rootContainerInstance.expirationTime = renderExpirationTime, rootContainerInstance.child = null, rootContainerInstance.memoizedProps = null, rootContainerInstance.memoizedState = null, rootContainerInstance.updateQueue = null, rootContainerInstance.dependencies = null) : (rootContainerInstance.childExpirationTime = updatePayload.childExpirationTime, rootContainerInstance.expirationTime = updatePayload.expirationTime, rootContainerInstance.child = updatePayload.child, rootContainerInstance.memoizedProps = updatePayload.memoizedProps, rootContainerInstance.memoizedState = updatePayload.memoizedState, rootContainerInstance.updateQueue = updatePayload.updateQueue, renderExpirationTime = updatePayload.dependencies, rootContainerInstance.dependencies = null === renderExpirationTime ? null : {
                    expirationTime: renderExpirationTime.expirationTime,
                    firstContext: renderExpirationTime.firstContext,
                    responders: renderExpirationTime.responders
                  }), newProps = newProps.sibling;
                }

                push(suspenseStackCursor, suspenseStackCursor.current & 1 | 2);
                return workInProgress.child;
              }

              current = current.sibling;
            }
          }
        } else {
          if (!rootContainerInstance) if (current = findFirstSuspended(updatePayload), null !== current) {
            if (workInProgress.effectTag |= 64, rootContainerInstance = !0, current = current.updateQueue, null !== current && (workInProgress.updateQueue = current, workInProgress.effectTag |= 4), cutOffTailIfNeeded(newProps, !0), null === newProps.tail && "hidden" === newProps.tailMode && !updatePayload.alternate) return workInProgress = workInProgress.lastEffect = newProps.lastEffect, null !== workInProgress && (workInProgress.nextEffect = null), null;
          } else 2 * now() - newProps.renderingStartTime > newProps.tailExpiration && 1 < renderExpirationTime && (workInProgress.effectTag |= 64, rootContainerInstance = !0, cutOffTailIfNeeded(newProps, !1), workInProgress.expirationTime = workInProgress.childExpirationTime = renderExpirationTime - 1);
          newProps.isBackwards ? (updatePayload.sibling = workInProgress.child, workInProgress.child = updatePayload) : (current = newProps.last, null !== current ? current.sibling = updatePayload : workInProgress.child = updatePayload, newProps.last = updatePayload);
        }
        return null !== newProps.tail ? (0 === newProps.tailExpiration && (newProps.tailExpiration = now() + 500), current = newProps.tail, newProps.rendering = current, newProps.tail = current.sibling, newProps.lastEffect = workInProgress.lastEffect, newProps.renderingStartTime = now(), current.sibling = null, workInProgress = suspenseStackCursor.current, push(suspenseStackCursor, rootContainerInstance ? workInProgress & 1 | 2 : workInProgress & 1), current) : null;
    }

    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
  }

  function unwindWork(workInProgress) {
    switch (workInProgress.tag) {
      case 1:
        isContextProvider(workInProgress.type) && popContext();
        var effectTag = workInProgress.effectTag;
        return effectTag & 4096 ? (workInProgress.effectTag = effectTag & -4097 | 64, workInProgress) : null;

      case 3:
        popHostContainer();
        pop(didPerformWorkStackCursor);
        pop(contextStackCursor);
        effectTag = workInProgress.effectTag;
        if (0 !== (effectTag & 64)) throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
        workInProgress.effectTag = effectTag & -4097 | 64;
        return workInProgress;

      case 5:
        return popHostContext(workInProgress), null;

      case 13:
        return pop(suspenseStackCursor), effectTag = workInProgress.effectTag, effectTag & 4096 ? (workInProgress.effectTag = effectTag & -4097 | 64, workInProgress) : null;

      case 19:
        return pop(suspenseStackCursor), null;

      case 4:
        return popHostContainer(), null;

      case 10:
        return popProvider(workInProgress), null;

      default:
        return null;
    }
  }

  function createCapturedValue(value, source) {
    return {
      value: value,
      source: source,
      stack: getStackByFiberInDevAndProd(source)
    };
  }

  if ("function" !== typeof _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").ReactFiberErrorDialog.showErrorDialog) throw Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function.");

  function logCapturedError(capturedError) {
    !1 !== _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").ReactFiberErrorDialog.showErrorDialog(capturedError) && console.error(capturedError.error);
  }

  var PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set;

  function logError(boundary, errorInfo) {
    var source = errorInfo.source,
        stack = errorInfo.stack;
    null === stack && null !== source && (stack = getStackByFiberInDevAndProd(source));
    errorInfo = {
      componentName: null !== source ? getComponentName(source.type) : null,
      componentStack: null !== stack ? stack : "",
      error: errorInfo.value,
      errorBoundary: null,
      errorBoundaryName: null,
      errorBoundaryFound: !1,
      willRetry: !1
    };
    null !== boundary && 1 === boundary.tag && (errorInfo.errorBoundary = boundary.stateNode, errorInfo.errorBoundaryName = getComponentName(boundary.type), errorInfo.errorBoundaryFound = !0, errorInfo.willRetry = !0);

    try {
      logCapturedError(errorInfo);
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }

  function safelyCallComponentWillUnmount(current, instance) {
    try {
      instance.props = current.memoizedProps, instance.state = current.memoizedState, instance.componentWillUnmount();
    } catch (unmountError) {
      captureCommitPhaseError(current, unmountError);
    }
  }

  function safelyDetachRef(current) {
    var ref = current.ref;
    if (null !== ref) if ("function" === typeof ref) try {
      ref(null);
    } catch (refError) {
      captureCommitPhaseError(current, refError);
    } else ref.current = null;
  }

  function commitBeforeMutationLifeCycles(current, finishedWork) {
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 15:
      case 22:
        return;

      case 1:
        if (finishedWork.effectTag & 256 && null !== current) {
          var prevProps = current.memoizedProps,
              prevState = current.memoizedState;
          current = finishedWork.stateNode;
          finishedWork = current.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
          current.__reactInternalSnapshotBeforeUpdate = finishedWork;
        }

        return;

      case 3:
      case 5:
      case 6:
      case 4:
      case 17:
        return;
    }

    throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
  }

  function commitHookEffectListUnmount(tag, finishedWork) {
    finishedWork = finishedWork.updateQueue;
    finishedWork = null !== finishedWork ? finishedWork.lastEffect : null;

    if (null !== finishedWork) {
      var effect = finishedWork = finishedWork.next;

      do {
        if ((effect.tag & tag) === tag) {
          var destroy = effect.destroy;
          effect.destroy = void 0;
          void 0 !== destroy && destroy();
        }

        effect = effect.next;
      } while (effect !== finishedWork);
    }
  }

  function commitHookEffectListMount(tag, finishedWork) {
    finishedWork = finishedWork.updateQueue;
    finishedWork = null !== finishedWork ? finishedWork.lastEffect : null;

    if (null !== finishedWork) {
      var effect = finishedWork = finishedWork.next;

      do {
        if ((effect.tag & tag) === tag) {
          var create = effect.create;
          effect.destroy = create();
        }

        effect = effect.next;
      } while (effect !== finishedWork);
    }
  }

  function commitLifeCycles(finishedRoot, current, finishedWork) {
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 15:
      case 22:
        commitHookEffectListMount(3, finishedWork);
        return;

      case 1:
        finishedRoot = finishedWork.stateNode;
        if (finishedWork.effectTag & 4) if (null === current) finishedRoot.componentDidMount();else {
          var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
          finishedRoot.componentDidUpdate(prevProps, current.memoizedState, finishedRoot.__reactInternalSnapshotBeforeUpdate);
        }
        current = finishedWork.updateQueue;
        null !== current && commitUpdateQueue(finishedWork, current, finishedRoot);
        return;

      case 3:
        current = finishedWork.updateQueue;

        if (null !== current) {
          finishedRoot = null;
          if (null !== finishedWork.child) switch (finishedWork.child.tag) {
            case 5:
              finishedRoot = finishedWork.child.stateNode.canonical;
              break;

            case 1:
              finishedRoot = finishedWork.child.stateNode;
          }
          commitUpdateQueue(finishedWork, current, finishedRoot);
        }

        return;

      case 5:
        if (null === current && finishedWork.effectTag & 4) throw Error("The current renderer does not support mutation. This error is likely caused by a bug in React. Please file an issue.");
        return;

      case 6:
        return;

      case 4:
        return;

      case 12:
        return;

      case 13:
        return;

      case 19:
      case 17:
      case 20:
      case 21:
        return;
    }

    throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
  }

  function commitUnmount(finishedRoot, current$jscomp$0, renderPriorityLevel) {
    "function" === typeof onCommitFiberUnmount && onCommitFiberUnmount(current$jscomp$0);

    switch (current$jscomp$0.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
      case 22:
        finishedRoot = current$jscomp$0.updateQueue;

        if (null !== finishedRoot && (finishedRoot = finishedRoot.lastEffect, null !== finishedRoot)) {
          var firstEffect = finishedRoot.next;
          runWithPriority(97 < renderPriorityLevel ? 97 : renderPriorityLevel, function () {
            var effect = firstEffect;

            do {
              var _destroy = effect.destroy;

              if (void 0 !== _destroy) {
                var current = current$jscomp$0;

                try {
                  _destroy();
                } catch (error) {
                  captureCommitPhaseError(current, error);
                }
              }

              effect = effect.next;
            } while (effect !== firstEffect);
          });
        }

        break;

      case 1:
        safelyDetachRef(current$jscomp$0);
        renderPriorityLevel = current$jscomp$0.stateNode;
        "function" === typeof renderPriorityLevel.componentWillUnmount && safelyCallComponentWillUnmount(current$jscomp$0, renderPriorityLevel);
        break;

      case 5:
        safelyDetachRef(current$jscomp$0);
        break;

      case 4:
        createChildNodeSet(current$jscomp$0.stateNode.containerInfo);
    }
  }

  function detachFiber(current) {
    var alternate = current.alternate;
    current.return = null;
    current.child = null;
    current.memoizedState = null;
    current.updateQueue = null;
    current.dependencies = null;
    current.alternate = null;
    current.firstEffect = null;
    current.lastEffect = null;
    current.pendingProps = null;
    current.memoizedProps = null;
    current.stateNode = null;
    null !== alternate && detachFiber(alternate);
  }

  function commitWork(current, finishedWork) {
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
      case 22:
        commitHookEffectListUnmount(3, finishedWork);
        return;

      case 12:
        return;

      case 13:
        null !== finishedWork.memoizedState && (globalMostRecentFallbackTime = now());
        attachSuspenseRetryListeners(finishedWork);
        return;

      case 19:
        attachSuspenseRetryListeners(finishedWork);
        return;
    }

    a: {
      switch (finishedWork.tag) {
        case 1:
        case 5:
        case 6:
        case 20:
          break a;

        case 3:
        case 4:
          break a;
      }

      throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  function attachSuspenseRetryListeners(finishedWork) {
    var thenables = finishedWork.updateQueue;

    if (null !== thenables) {
      finishedWork.updateQueue = null;
      var retryCache = finishedWork.stateNode;
      null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
      thenables.forEach(function (thenable) {
        var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
        retryCache.has(thenable) || (retryCache.add(thenable), thenable.then(retry, retry));
      });
    }
  }

  var PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map;

  function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime, null);
    expirationTime.tag = 3;
    expirationTime.payload = {
      element: null
    };
    var error = errorInfo.value;

    expirationTime.callback = function () {
      hasUncaughtError || (hasUncaughtError = !0, firstUncaughtError = error);
      logError(fiber, errorInfo);
    };

    return expirationTime;
  }

  function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime, null);
    expirationTime.tag = 3;
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

    if ("function" === typeof getDerivedStateFromError) {
      var error = errorInfo.value;

      expirationTime.payload = function () {
        logError(fiber, errorInfo);
        return getDerivedStateFromError(error);
      };
    }

    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (expirationTime.callback = function () {
      "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this), logError(fiber, errorInfo));
      var stack = errorInfo.stack;
      this.componentDidCatch(errorInfo.value, {
        componentStack: null !== stack ? stack : ""
      });
    });
    return expirationTime;
  }

  var ceil = Math.ceil,
      ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
      ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
      NoContext = 0,
      LegacyUnbatchedContext = 8,
      RenderContext = 16,
      CommitContext = 32,
      RootIncomplete = 0,
      RootFatalErrored = 1,
      RootErrored = 2,
      RootSuspended = 3,
      RootSuspendedWithDelay = 4,
      RootCompleted = 5,
      executionContext = NoContext,
      workInProgressRoot = null,
      workInProgress = null,
      renderExpirationTime$1 = 0,
      workInProgressRootExitStatus = RootIncomplete,
      workInProgressRootFatalError = null,
      workInProgressRootLatestProcessedExpirationTime = 1073741823,
      workInProgressRootLatestSuspenseTimeout = 1073741823,
      workInProgressRootCanSuspendUsingConfig = null,
      workInProgressRootNextUnprocessedUpdateTime = 0,
      workInProgressRootHasPendingPing = !1,
      globalMostRecentFallbackTime = 0,
      FALLBACK_THROTTLE_MS = 500,
      nextEffect = null,
      hasUncaughtError = !1,
      firstUncaughtError = null,
      legacyErrorBoundariesThatAlreadyFailed = null,
      rootDoesHavePassiveEffects = !1,
      rootWithPendingPassiveEffects = null,
      pendingPassiveEffectsRenderPriority = 90,
      rootsWithPendingDiscreteUpdates = null,
      nestedUpdateCount = 0,
      rootWithNestedUpdates = null,
      currentEventTime = 0;

  function requestCurrentTimeForUpdate() {
    return (executionContext & (RenderContext | CommitContext)) !== NoContext ? 1073741821 - (now() / 10 | 0) : 0 !== currentEventTime ? currentEventTime : currentEventTime = 1073741821 - (now() / 10 | 0);
  }

  function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
    fiber = fiber.mode;
    if (0 === (fiber & 2)) return 1073741823;
    var priorityLevel = getCurrentPriorityLevel();
    if (0 === (fiber & 4)) return 99 === priorityLevel ? 1073741823 : 1073741822;
    if ((executionContext & RenderContext) !== NoContext) return renderExpirationTime$1;
    if (null !== suspenseConfig) currentTime = 1073741821 - 25 * (((1073741821 - currentTime + (suspenseConfig.timeoutMs | 0 || 5e3) / 10) / 25 | 0) + 1);else switch (priorityLevel) {
      case 99:
        currentTime = 1073741823;
        break;

      case 98:
        currentTime = 1073741821 - 10 * (((1073741821 - currentTime + 15) / 10 | 0) + 1);
        break;

      case 97:
      case 96:
        currentTime = 1073741821 - 25 * (((1073741821 - currentTime + 500) / 25 | 0) + 1);
        break;

      case 95:
        currentTime = 2;
        break;

      default:
        throw Error("Expected a valid priority level");
    }
    null !== workInProgressRoot && currentTime === renderExpirationTime$1 && --currentTime;
    return currentTime;
  }

  function scheduleWork(fiber, expirationTime) {
    if (50 < nestedUpdateCount) throw nestedUpdateCount = 0, rootWithNestedUpdates = null, Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
    fiber = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

    if (null !== fiber) {
      var priorityLevel = getCurrentPriorityLevel();
      1073741823 === expirationTime ? (executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext ? performSyncWorkOnRoot(fiber) : (ensureRootIsScheduled(fiber), executionContext === NoContext && flushSyncCallbackQueue()) : ensureRootIsScheduled(fiber);
      (executionContext & 4) === NoContext || 98 !== priorityLevel && 99 !== priorityLevel || (null === rootsWithPendingDiscreteUpdates ? rootsWithPendingDiscreteUpdates = new Map([[fiber, expirationTime]]) : (priorityLevel = rootsWithPendingDiscreteUpdates.get(fiber), (void 0 === priorityLevel || priorityLevel > expirationTime) && rootsWithPendingDiscreteUpdates.set(fiber, expirationTime)));
    }
  }

  function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
    fiber.expirationTime < expirationTime && (fiber.expirationTime = expirationTime);
    var alternate = fiber.alternate;
    null !== alternate && alternate.expirationTime < expirationTime && (alternate.expirationTime = expirationTime);
    var node = fiber.return,
        root = null;
    if (null === node && 3 === fiber.tag) root = fiber.stateNode;else for (; null !== node;) {
      alternate = node.alternate;
      node.childExpirationTime < expirationTime && (node.childExpirationTime = expirationTime);
      null !== alternate && alternate.childExpirationTime < expirationTime && (alternate.childExpirationTime = expirationTime);

      if (null === node.return && 3 === node.tag) {
        root = node.stateNode;
        break;
      }

      node = node.return;
    }
    null !== root && (workInProgressRoot === root && (markUnprocessedUpdateTime(expirationTime), workInProgressRootExitStatus === RootSuspendedWithDelay && markRootSuspendedAtTime(root, renderExpirationTime$1)), markRootUpdatedAtTime(root, expirationTime));
    return root;
  }

  function getNextRootExpirationTimeToWorkOn(root) {
    var lastExpiredTime = root.lastExpiredTime;
    if (0 !== lastExpiredTime) return lastExpiredTime;
    lastExpiredTime = root.firstPendingTime;
    if (!isRootSuspendedAtTime(root, lastExpiredTime)) return lastExpiredTime;
    var lastPingedTime = root.lastPingedTime;
    root = root.nextKnownPendingLevel;
    root = lastPingedTime > root ? lastPingedTime : root;
    return 2 >= root && lastExpiredTime !== root ? 0 : root;
  }

  function ensureRootIsScheduled(root) {
    if (0 !== root.lastExpiredTime) root.callbackExpirationTime = 1073741823, root.callbackPriority = 99, root.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));else {
      var expirationTime = getNextRootExpirationTimeToWorkOn(root),
          existingCallbackNode = root.callbackNode;
      if (0 === expirationTime) null !== existingCallbackNode && (root.callbackNode = null, root.callbackExpirationTime = 0, root.callbackPriority = 90);else {
        var priorityLevel = requestCurrentTimeForUpdate();
        1073741823 === expirationTime ? priorityLevel = 99 : 1 === expirationTime || 2 === expirationTime ? priorityLevel = 95 : (priorityLevel = 10 * (1073741821 - expirationTime) - 10 * (1073741821 - priorityLevel), priorityLevel = 0 >= priorityLevel ? 99 : 250 >= priorityLevel ? 98 : 5250 >= priorityLevel ? 97 : 95);

        if (null !== existingCallbackNode) {
          var existingCallbackPriority = root.callbackPriority;
          if (root.callbackExpirationTime === expirationTime && existingCallbackPriority >= priorityLevel) return;
          existingCallbackNode !== fakeCallbackNode && _$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_cancelCallback(existingCallbackNode);
        }

        root.callbackExpirationTime = expirationTime;
        root.callbackPriority = priorityLevel;
        expirationTime = 1073741823 === expirationTime ? scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root)) : scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root), {
          timeout: 10 * (1073741821 - expirationTime) - now()
        });
        root.callbackNode = expirationTime;
      }
    }
  }

  function performConcurrentWorkOnRoot(root, didTimeout) {
    currentEventTime = 0;

    if (didTimeout) {
      didTimeout = requestCurrentTimeForUpdate();
      var lastExpiredTime = root.lastExpiredTime;
      if (0 === lastExpiredTime || lastExpiredTime > didTimeout) root.lastExpiredTime = didTimeout;
      ensureRootIsScheduled(root);
      return null;
    }

    lastExpiredTime = getNextRootExpirationTimeToWorkOn(root);
    if (0 === lastExpiredTime) return null;
    didTimeout = root.callbackNode;
    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw Error("Should not already be working.");
    flushPassiveEffects();
    var expirationTime = lastExpiredTime;
    var exitStatus = executionContext;
    executionContext |= RenderContext;
    var prevDispatcher = pushDispatcher();
    root === workInProgressRoot && expirationTime === renderExpirationTime$1 || prepareFreshStack(root, expirationTime);

    do {
      try {
        workLoopConcurrent();
        break;
      } catch (thrownValue) {
        handleError(root, thrownValue);
      }
    } while (1);

    resetContextDependencies();
    ReactCurrentDispatcher$1.current = prevDispatcher;
    executionContext = exitStatus;
    null !== workInProgress ? exitStatus = RootIncomplete : (workInProgressRoot = null, exitStatus = workInProgressRootExitStatus);

    if (exitStatus !== RootIncomplete) {
      exitStatus === RootErrored && (lastExpiredTime = 2 < lastExpiredTime ? 2 : lastExpiredTime, exitStatus = renderRootSync(root, lastExpiredTime));
      if (exitStatus === RootFatalErrored) throw didTimeout = workInProgressRootFatalError, prepareFreshStack(root, lastExpiredTime), markRootSuspendedAtTime(root, lastExpiredTime), ensureRootIsScheduled(root), didTimeout;
      expirationTime = root.finishedWork = root.current.alternate;
      root.finishedExpirationTime = lastExpiredTime;

      switch (exitStatus) {
        case RootIncomplete:
        case RootFatalErrored:
          throw Error("Root did not complete. This is a bug in React.");

        case RootErrored:
          commitRoot(root);
          break;

        case RootSuspended:
          markRootSuspendedAtTime(root, lastExpiredTime);
          exitStatus = root.lastSuspendedTime;
          lastExpiredTime === exitStatus && (root.nextKnownPendingLevel = getRemainingExpirationTime(expirationTime));

          if (1073741823 === workInProgressRootLatestProcessedExpirationTime && (expirationTime = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(), 10 < expirationTime)) {
            if (workInProgressRootHasPendingPing && (prevDispatcher = root.lastPingedTime, 0 === prevDispatcher || prevDispatcher >= lastExpiredTime)) {
              root.lastPingedTime = lastExpiredTime;
              prepareFreshStack(root, lastExpiredTime);
              break;
            }

            prevDispatcher = getNextRootExpirationTimeToWorkOn(root);
            if (0 !== prevDispatcher && prevDispatcher !== lastExpiredTime) break;

            if (0 !== exitStatus && exitStatus !== lastExpiredTime) {
              root.lastPingedTime = exitStatus;
              break;
            }

            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), expirationTime);
            break;
          }

          commitRoot(root);
          break;

        case RootSuspendedWithDelay:
          markRootSuspendedAtTime(root, lastExpiredTime);
          exitStatus = root.lastSuspendedTime;
          lastExpiredTime === exitStatus && (root.nextKnownPendingLevel = getRemainingExpirationTime(expirationTime));

          if (workInProgressRootHasPendingPing && (expirationTime = root.lastPingedTime, 0 === expirationTime || expirationTime >= lastExpiredTime)) {
            root.lastPingedTime = lastExpiredTime;
            prepareFreshStack(root, lastExpiredTime);
            break;
          }

          expirationTime = getNextRootExpirationTimeToWorkOn(root);
          if (0 !== expirationTime && expirationTime !== lastExpiredTime) break;

          if (0 !== exitStatus && exitStatus !== lastExpiredTime) {
            root.lastPingedTime = exitStatus;
            break;
          }

          1073741823 !== workInProgressRootLatestSuspenseTimeout ? expirationTime = 10 * (1073741821 - workInProgressRootLatestSuspenseTimeout) - now() : 1073741823 === workInProgressRootLatestProcessedExpirationTime ? expirationTime = 0 : (expirationTime = 10 * (1073741821 - workInProgressRootLatestProcessedExpirationTime) - 5e3, exitStatus = now(), lastExpiredTime = 10 * (1073741821 - lastExpiredTime) - exitStatus, expirationTime = exitStatus - expirationTime, 0 > expirationTime && (expirationTime = 0), expirationTime = (120 > expirationTime ? 120 : 480 > expirationTime ? 480 : 1080 > expirationTime ? 1080 : 1920 > expirationTime ? 1920 : 3e3 > expirationTime ? 3e3 : 4320 > expirationTime ? 4320 : 1960 * ceil(expirationTime / 1960)) - expirationTime, lastExpiredTime < expirationTime && (expirationTime = lastExpiredTime));

          if (10 < expirationTime) {
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), expirationTime);
            break;
          }

          commitRoot(root);
          break;

        case RootCompleted:
          if (1073741823 !== workInProgressRootLatestProcessedExpirationTime && null !== workInProgressRootCanSuspendUsingConfig) {
            prevDispatcher = workInProgressRootLatestProcessedExpirationTime;
            var suspenseConfig = workInProgressRootCanSuspendUsingConfig;
            expirationTime = suspenseConfig.busyMinDurationMs | 0;
            0 >= expirationTime ? expirationTime = 0 : (exitStatus = suspenseConfig.busyDelayMs | 0, prevDispatcher = now() - (10 * (1073741821 - prevDispatcher) - (suspenseConfig.timeoutMs | 0 || 5e3)), expirationTime = prevDispatcher <= exitStatus ? 0 : exitStatus + expirationTime - prevDispatcher);

            if (10 < expirationTime) {
              markRootSuspendedAtTime(root, lastExpiredTime);
              root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), expirationTime);
              break;
            }
          }

          commitRoot(root);
          break;

        default:
          throw Error("Unknown root exit status.");
      }
    }

    ensureRootIsScheduled(root);
    return root.callbackNode === didTimeout ? performConcurrentWorkOnRoot.bind(null, root) : null;
  }

  function performSyncWorkOnRoot(root) {
    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw Error("Should not already be working.");
    flushPassiveEffects();
    var lastExpiredTime = root.lastExpiredTime;
    lastExpiredTime = 0 !== lastExpiredTime ? root === workInProgressRoot && renderExpirationTime$1 >= lastExpiredTime ? renderExpirationTime$1 : lastExpiredTime : 1073741823;
    var exitStatus = renderRootSync(root, lastExpiredTime);
    0 !== root.tag && exitStatus === RootErrored && (lastExpiredTime = 2 < lastExpiredTime ? 2 : lastExpiredTime, exitStatus = renderRootSync(root, lastExpiredTime));
    if (exitStatus === RootFatalErrored) throw exitStatus = workInProgressRootFatalError, prepareFreshStack(root, lastExpiredTime), markRootSuspendedAtTime(root, lastExpiredTime), ensureRootIsScheduled(root), exitStatus;
    root.finishedWork = root.current.alternate;
    root.finishedExpirationTime = lastExpiredTime;
    commitRoot(root);
    ensureRootIsScheduled(root);
    return null;
  }

  function prepareFreshStack(root, expirationTime) {
    root.finishedWork = null;
    root.finishedExpirationTime = 0;
    var timeoutHandle = root.timeoutHandle;
    -1 !== timeoutHandle && (root.timeoutHandle = -1, cancelTimeout(timeoutHandle));
    if (null !== workInProgress) for (timeoutHandle = workInProgress.return; null !== timeoutHandle;) {
      var interruptedWork = timeoutHandle;

      switch (interruptedWork.tag) {
        case 1:
          interruptedWork = interruptedWork.type.childContextTypes;
          null !== interruptedWork && void 0 !== interruptedWork && popContext();
          break;

        case 3:
          popHostContainer();
          pop(didPerformWorkStackCursor);
          pop(contextStackCursor);
          break;

        case 5:
          popHostContext(interruptedWork);
          break;

        case 4:
          popHostContainer();
          break;

        case 13:
          pop(suspenseStackCursor);
          break;

        case 19:
          pop(suspenseStackCursor);
          break;

        case 10:
          popProvider(interruptedWork);
      }

      timeoutHandle = timeoutHandle.return;
    }
    workInProgressRoot = root;
    workInProgress = createWorkInProgress(root.current, null);
    renderExpirationTime$1 = expirationTime;
    workInProgressRootExitStatus = RootIncomplete;
    workInProgressRootFatalError = null;
    workInProgressRootLatestSuspenseTimeout = workInProgressRootLatestProcessedExpirationTime = 1073741823;
    workInProgressRootCanSuspendUsingConfig = null;
    workInProgressRootNextUnprocessedUpdateTime = 0;
    workInProgressRootHasPendingPing = !1;
  }

  function handleError(root$jscomp$0, thrownValue) {
    do {
      try {
        resetContextDependencies();
        ReactCurrentDispatcher.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) for (var hook = currentlyRenderingFiber$1.memoizedState; null !== hook;) {
          var queue = hook.queue;
          null !== queue && (queue.pending = null);
          hook = hook.next;
        }
        renderExpirationTime = 0;
        workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
        didScheduleRenderPhaseUpdate = !1;
        if (null === workInProgress || null === workInProgress.return) return workInProgressRootExitStatus = RootFatalErrored, workInProgressRootFatalError = thrownValue, workInProgress = null;

        a: {
          var root = root$jscomp$0,
              returnFiber = workInProgress.return,
              sourceFiber = workInProgress,
              value = thrownValue;
          thrownValue = renderExpirationTime$1;
          sourceFiber.effectTag |= 2048;
          sourceFiber.firstEffect = sourceFiber.lastEffect = null;

          if (null !== value && "object" === typeof value && "function" === typeof value.then) {
            var thenable = value;

            if (0 === (sourceFiber.mode & 2)) {
              var currentSource = sourceFiber.alternate;
              currentSource ? (sourceFiber.updateQueue = currentSource.updateQueue, sourceFiber.memoizedState = currentSource.memoizedState, sourceFiber.expirationTime = currentSource.expirationTime) : (sourceFiber.updateQueue = null, sourceFiber.memoizedState = null);
            }

            var hasInvisibleParentBoundary = 0 !== (suspenseStackCursor.current & 1),
                _workInProgress = returnFiber;

            do {
              var JSCompiler_temp;

              if (JSCompiler_temp = 13 === _workInProgress.tag) {
                var nextState = _workInProgress.memoizedState;
                if (null !== nextState) JSCompiler_temp = null !== nextState.dehydrated ? !0 : !1;else {
                  var props = _workInProgress.memoizedProps;
                  JSCompiler_temp = void 0 === props.fallback ? !1 : !0 !== props.unstable_avoidThisFallback ? !0 : hasInvisibleParentBoundary ? !1 : !0;
                }
              }

              if (JSCompiler_temp) {
                var thenables = _workInProgress.updateQueue;

                if (null === thenables) {
                  var updateQueue = new Set();
                  updateQueue.add(thenable);
                  _workInProgress.updateQueue = updateQueue;
                } else thenables.add(thenable);

                if (0 === (_workInProgress.mode & 2)) {
                  _workInProgress.effectTag |= 64;
                  sourceFiber.effectTag &= -2981;
                  if (1 === sourceFiber.tag) if (null === sourceFiber.alternate) sourceFiber.tag = 17;else {
                    var update = createUpdate(1073741823, null);
                    update.tag = 2;
                    enqueueUpdate(sourceFiber, update);
                  }
                  sourceFiber.expirationTime = 1073741823;
                  break a;
                }

                value = void 0;
                sourceFiber = thrownValue;
                var pingCache = root.pingCache;
                null === pingCache ? (pingCache = root.pingCache = new PossiblyWeakMap(), value = new Set(), pingCache.set(thenable, value)) : (value = pingCache.get(thenable), void 0 === value && (value = new Set(), pingCache.set(thenable, value)));

                if (!value.has(sourceFiber)) {
                  value.add(sourceFiber);
                  var ping = pingSuspendedRoot.bind(null, root, thenable, sourceFiber);
                  thenable.then(ping, ping);
                }

                _workInProgress.effectTag |= 4096;
                _workInProgress.expirationTime = thrownValue;
                break a;
              }

              _workInProgress = _workInProgress.return;
            } while (null !== _workInProgress);

            value = Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber));
          }

          workInProgressRootExitStatus !== RootCompleted && (workInProgressRootExitStatus = RootErrored);
          value = createCapturedValue(value, sourceFiber);
          _workInProgress = returnFiber;

          do {
            switch (_workInProgress.tag) {
              case 3:
                thenable = value;
                _workInProgress.effectTag |= 4096;
                _workInProgress.expirationTime = thrownValue;

                var _update = createRootErrorUpdate(_workInProgress, thenable, thrownValue);

                enqueueCapturedUpdate(_workInProgress, _update);
                break a;

              case 1:
                thenable = value;
                var ctor = _workInProgress.type,
                    instance = _workInProgress.stateNode;

                if (0 === (_workInProgress.effectTag & 64) && ("function" === typeof ctor.getDerivedStateFromError || null !== instance && "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance)))) {
                  _workInProgress.effectTag |= 4096;
                  _workInProgress.expirationTime = thrownValue;

                  var _update2 = createClassErrorUpdate(_workInProgress, thenable, thrownValue);

                  enqueueCapturedUpdate(_workInProgress, _update2);
                  break a;
                }

            }

            _workInProgress = _workInProgress.return;
          } while (null !== _workInProgress);
        }

        workInProgress = completeUnitOfWork(workInProgress);
      } catch (yetAnotherThrownValue) {
        thrownValue = yetAnotherThrownValue;
        continue;
      }

      break;
    } while (1);
  }

  function pushDispatcher() {
    var prevDispatcher = ReactCurrentDispatcher$1.current;
    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
    return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
  }

  function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
    expirationTime < workInProgressRootLatestProcessedExpirationTime && 2 < expirationTime && (workInProgressRootLatestProcessedExpirationTime = expirationTime);
    null !== suspenseConfig && expirationTime < workInProgressRootLatestSuspenseTimeout && 2 < expirationTime && (workInProgressRootLatestSuspenseTimeout = expirationTime, workInProgressRootCanSuspendUsingConfig = suspenseConfig);
  }

  function markUnprocessedUpdateTime(expirationTime) {
    expirationTime > workInProgressRootNextUnprocessedUpdateTime && (workInProgressRootNextUnprocessedUpdateTime = expirationTime);
  }

  function renderRootSync(root, expirationTime) {
    var prevExecutionContext = executionContext;
    executionContext |= RenderContext;
    var prevDispatcher = pushDispatcher();
    root === workInProgressRoot && expirationTime === renderExpirationTime$1 || prepareFreshStack(root, expirationTime);

    do {
      try {
        workLoopSync();
        break;
      } catch (thrownValue) {
        handleError(root, thrownValue);
      }
    } while (1);

    resetContextDependencies();
    executionContext = prevExecutionContext;
    ReactCurrentDispatcher$1.current = prevDispatcher;
    if (null !== workInProgress) throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
    workInProgressRoot = null;
    return workInProgressRootExitStatus;
  }

  function workLoopSync() {
    for (; null !== workInProgress;) {
      workInProgress = performUnitOfWork(workInProgress);
    }
  }

  function workLoopConcurrent() {
    for (; null !== workInProgress && !_$$_REQUIRE(_dependencyMap[3], "scheduler").unstable_shouldYield();) {
      workInProgress = performUnitOfWork(workInProgress);
    }
  }

  function performUnitOfWork(unitOfWork) {
    var next = beginWork$1(unitOfWork.alternate, unitOfWork, renderExpirationTime$1);
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next && (next = completeUnitOfWork(unitOfWork));
    ReactCurrentOwner$2.current = null;
    return next;
  }

  function completeUnitOfWork(unitOfWork) {
    workInProgress = unitOfWork;

    do {
      var current = workInProgress.alternate;
      unitOfWork = workInProgress.return;

      if (0 === (workInProgress.effectTag & 2048)) {
        current = completeWork(current, workInProgress, renderExpirationTime$1);

        if (1 === renderExpirationTime$1 || 1 !== workInProgress.childExpirationTime) {
          for (var newChildExpirationTime = 0, _child = workInProgress.child; null !== _child;) {
            var _childUpdateExpirationTime = _child.expirationTime,
                _childChildExpirationTime = _child.childExpirationTime;
            _childUpdateExpirationTime > newChildExpirationTime && (newChildExpirationTime = _childUpdateExpirationTime);
            _childChildExpirationTime > newChildExpirationTime && (newChildExpirationTime = _childChildExpirationTime);
            _child = _child.sibling;
          }

          workInProgress.childExpirationTime = newChildExpirationTime;
        }

        if (null !== current) return current;
        null !== unitOfWork && 0 === (unitOfWork.effectTag & 2048) && (null === unitOfWork.firstEffect && (unitOfWork.firstEffect = workInProgress.firstEffect), null !== workInProgress.lastEffect && (null !== unitOfWork.lastEffect && (unitOfWork.lastEffect.nextEffect = workInProgress.firstEffect), unitOfWork.lastEffect = workInProgress.lastEffect), 1 < workInProgress.effectTag && (null !== unitOfWork.lastEffect ? unitOfWork.lastEffect.nextEffect = workInProgress : unitOfWork.firstEffect = workInProgress, unitOfWork.lastEffect = workInProgress));
      } else {
        current = unwindWork(workInProgress);
        if (null !== current) return current.effectTag &= 2047, current;
        null !== unitOfWork && (unitOfWork.firstEffect = unitOfWork.lastEffect = null, unitOfWork.effectTag |= 2048);
      }

      current = workInProgress.sibling;
      if (null !== current) return current;
      workInProgress = unitOfWork;
    } while (null !== workInProgress);

    workInProgressRootExitStatus === RootIncomplete && (workInProgressRootExitStatus = RootCompleted);
    return null;
  }

  function getRemainingExpirationTime(fiber) {
    var updateExpirationTime = fiber.expirationTime;
    fiber = fiber.childExpirationTime;
    return updateExpirationTime > fiber ? updateExpirationTime : fiber;
  }

  function commitRoot(root) {
    var renderPriorityLevel = getCurrentPriorityLevel();
    runWithPriority(99, commitRootImpl.bind(null, root, renderPriorityLevel));
    return null;
  }

  function commitRootImpl(root$jscomp$1, renderPriorityLevel$jscomp$1) {
    do {
      flushPassiveEffects();
    } while (null !== rootWithPendingPassiveEffects);

    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw Error("Should not already be working.");
    var finishedWork = root$jscomp$1.finishedWork,
        expirationTime = root$jscomp$1.finishedExpirationTime;
    if (null === finishedWork) return null;
    root$jscomp$1.finishedWork = null;
    root$jscomp$1.finishedExpirationTime = 0;
    if (finishedWork === root$jscomp$1.current) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
    root$jscomp$1.callbackNode = null;
    root$jscomp$1.callbackExpirationTime = 0;
    root$jscomp$1.callbackPriority = 90;
    root$jscomp$1.nextKnownPendingLevel = 0;
    var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
    root$jscomp$1.firstPendingTime = remainingExpirationTimeBeforeCommit;
    expirationTime <= root$jscomp$1.lastSuspendedTime ? root$jscomp$1.firstSuspendedTime = root$jscomp$1.lastSuspendedTime = root$jscomp$1.nextKnownPendingLevel = 0 : expirationTime <= root$jscomp$1.firstSuspendedTime && (root$jscomp$1.firstSuspendedTime = expirationTime - 1);
    expirationTime <= root$jscomp$1.lastPingedTime && (root$jscomp$1.lastPingedTime = 0);
    expirationTime <= root$jscomp$1.lastExpiredTime && (root$jscomp$1.lastExpiredTime = 0);
    root$jscomp$1 === workInProgressRoot && (workInProgress = workInProgressRoot = null, renderExpirationTime$1 = 0);
    1 < finishedWork.effectTag ? null !== finishedWork.lastEffect ? (finishedWork.lastEffect.nextEffect = finishedWork, remainingExpirationTimeBeforeCommit = finishedWork.firstEffect) : remainingExpirationTimeBeforeCommit = finishedWork : remainingExpirationTimeBeforeCommit = finishedWork.firstEffect;

    if (null !== remainingExpirationTimeBeforeCommit) {
      var prevExecutionContext = executionContext;
      executionContext |= CommitContext;
      ReactCurrentOwner$2.current = null;
      nextEffect = remainingExpirationTimeBeforeCommit;

      do {
        try {
          commitBeforeMutationEffects();
        } catch (error) {
          if (null === nextEffect) throw Error("Should be working on an effect.");
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      nextEffect = remainingExpirationTimeBeforeCommit;

      do {
        try {
          for (var root = root$jscomp$1, renderPriorityLevel = renderPriorityLevel$jscomp$1; null !== nextEffect;) {
            var effectTag = nextEffect.effectTag;

            if (effectTag & 128) {
              var current = nextEffect.alternate;

              if (null !== current) {
                var currentRef = current.ref;
                null !== currentRef && ("function" === typeof currentRef ? currentRef(null) : currentRef.current = null);
              }
            }

            switch (effectTag & 1038) {
              case 2:
                nextEffect.effectTag &= -3;
                break;

              case 6:
                nextEffect.effectTag &= -3;
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 1024:
                nextEffect.effectTag &= -1025;
                break;

              case 1028:
                nextEffect.effectTag &= -1025;
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 4:
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 8:
                var current$jscomp$0 = nextEffect;

                a: for (var finishedRoot = root, root$jscomp$0 = current$jscomp$0, renderPriorityLevel$jscomp$0 = renderPriorityLevel, node = root$jscomp$0;;) {
                  if (commitUnmount(finishedRoot, node, renderPriorityLevel$jscomp$0), null !== node.child) node.child.return = node, node = node.child;else {
                    if (node === root$jscomp$0) break;

                    for (; null === node.sibling;) {
                      if (null === node.return || node.return === root$jscomp$0) break a;
                      node = node.return;
                    }

                    node.sibling.return = node.return;
                    node = node.sibling;
                  }
                }

                detachFiber(current$jscomp$0);
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw Error("Should be working on an effect.");
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      root$jscomp$1.current = finishedWork;
      nextEffect = remainingExpirationTimeBeforeCommit;

      do {
        try {
          for (effectTag = root$jscomp$1; null !== nextEffect;) {
            var effectTag$jscomp$0 = nextEffect.effectTag;
            effectTag$jscomp$0 & 36 && commitLifeCycles(effectTag, nextEffect.alternate, nextEffect);

            if (effectTag$jscomp$0 & 128) {
              current = void 0;
              var ref = nextEffect.ref;

              if (null !== ref) {
                var instance = nextEffect.stateNode;

                switch (nextEffect.tag) {
                  case 5:
                    current = instance.canonical;
                    break;

                  default:
                    current = instance;
                }

                "function" === typeof ref ? ref(current) : ref.current = current;
              }
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw Error("Should be working on an effect.");
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      nextEffect = null;
      requestPaint();
      executionContext = prevExecutionContext;
    } else root$jscomp$1.current = finishedWork;

    if (rootDoesHavePassiveEffects) rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = root$jscomp$1, pendingPassiveEffectsRenderPriority = renderPriorityLevel$jscomp$1;else for (nextEffect = remainingExpirationTimeBeforeCommit; null !== nextEffect;) {
      renderPriorityLevel$jscomp$1 = nextEffect.nextEffect, nextEffect.nextEffect = null, nextEffect = renderPriorityLevel$jscomp$1;
    }
    renderPriorityLevel$jscomp$1 = root$jscomp$1.firstPendingTime;
    0 === renderPriorityLevel$jscomp$1 && (legacyErrorBoundariesThatAlreadyFailed = null);
    1073741823 === renderPriorityLevel$jscomp$1 ? root$jscomp$1 === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root$jscomp$1) : nestedUpdateCount = 0;
    "function" === typeof onCommitFiberRoot && onCommitFiberRoot(finishedWork.stateNode, expirationTime);
    ensureRootIsScheduled(root$jscomp$1);
    if (hasUncaughtError) throw hasUncaughtError = !1, root$jscomp$1 = firstUncaughtError, firstUncaughtError = null, root$jscomp$1;
    if ((executionContext & LegacyUnbatchedContext) !== NoContext) return null;
    flushSyncCallbackQueue();
    return null;
  }

  function commitBeforeMutationEffects() {
    for (; null !== nextEffect;) {
      var effectTag = nextEffect.effectTag;
      0 !== (effectTag & 256) && commitBeforeMutationLifeCycles(nextEffect.alternate, nextEffect);
      0 === (effectTag & 512) || rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = !0, scheduleCallback(97, function () {
        flushPassiveEffects();
        return null;
      }));
      nextEffect = nextEffect.nextEffect;
    }
  }

  function flushPassiveEffects() {
    if (90 !== pendingPassiveEffectsRenderPriority) {
      var priorityLevel = 97 < pendingPassiveEffectsRenderPriority ? 97 : pendingPassiveEffectsRenderPriority;
      pendingPassiveEffectsRenderPriority = 90;
      return runWithPriority(priorityLevel, flushPassiveEffectsImpl);
    }
  }

  function flushPassiveEffectsImpl() {
    if (null === rootWithPendingPassiveEffects) return !1;
    var root = rootWithPendingPassiveEffects;
    rootWithPendingPassiveEffects = null;
    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw Error("Cannot flush passive effects while already rendering.");
    var prevExecutionContext = executionContext;
    executionContext |= CommitContext;

    for (root = root.current.firstEffect; null !== root;) {
      try {
        var finishedWork = root;
        if (0 !== (finishedWork.effectTag & 512)) switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
          case 22:
            commitHookEffectListUnmount(5, finishedWork), commitHookEffectListMount(5, finishedWork);
        }
      } catch (error) {
        if (null === root) throw Error("Should be working on an effect.");
        captureCommitPhaseError(root, error);
      }

      finishedWork = root.nextEffect;
      root.nextEffect = null;
      root = finishedWork;
    }

    executionContext = prevExecutionContext;
    flushSyncCallbackQueue();
    return !0;
  }

  function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
    sourceFiber = createCapturedValue(error, sourceFiber);
    sourceFiber = createRootErrorUpdate(rootFiber, sourceFiber, 1073741823);
    enqueueUpdate(rootFiber, sourceFiber);
    rootFiber = markUpdateTimeFromFiberToRoot(rootFiber, 1073741823);
    null !== rootFiber && ensureRootIsScheduled(rootFiber);
  }

  function captureCommitPhaseError(sourceFiber, error) {
    if (3 === sourceFiber.tag) captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);else for (var fiber = sourceFiber.return; null !== fiber;) {
      if (3 === fiber.tag) {
        captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
        break;
      } else if (1 === fiber.tag) {
        var instance = fiber.stateNode;

        if ("function" === typeof fiber.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
          sourceFiber = createCapturedValue(error, sourceFiber);
          sourceFiber = createClassErrorUpdate(fiber, sourceFiber, 1073741823);
          enqueueUpdate(fiber, sourceFiber);
          fiber = markUpdateTimeFromFiberToRoot(fiber, 1073741823);
          null !== fiber && ensureRootIsScheduled(fiber);
          break;
        }
      }

      fiber = fiber.return;
    }
  }

  function pingSuspendedRoot(root, thenable, suspendedTime) {
    var pingCache = root.pingCache;
    null !== pingCache && pingCache.delete(thenable);
    workInProgressRoot === root && renderExpirationTime$1 === suspendedTime ? workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && 1073741823 === workInProgressRootLatestProcessedExpirationTime && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS ? prepareFreshStack(root, renderExpirationTime$1) : workInProgressRootHasPendingPing = !0 : isRootSuspendedAtTime(root, suspendedTime) && (thenable = root.lastPingedTime, 0 !== thenable && thenable < suspendedTime || (root.lastPingedTime = suspendedTime, ensureRootIsScheduled(root)));
  }

  function resolveRetryThenable(boundaryFiber, thenable) {
    var retryCache = boundaryFiber.stateNode;
    null !== retryCache && retryCache.delete(thenable);
    thenable = 0;
    0 === thenable && (thenable = requestCurrentTimeForUpdate(), thenable = computeExpirationForFiber(thenable, boundaryFiber, null));
    boundaryFiber = markUpdateTimeFromFiberToRoot(boundaryFiber, thenable);
    null !== boundaryFiber && ensureRootIsScheduled(boundaryFiber);
  }

  var beginWork$1;

  beginWork$1 = function beginWork$1(current, workInProgress, renderExpirationTime) {
    var updateExpirationTime = workInProgress.expirationTime;
    if (null !== current) {
      if (current.memoizedProps !== workInProgress.pendingProps || didPerformWorkStackCursor.current) didReceiveUpdate = !0;else {
        if (updateExpirationTime < renderExpirationTime) {
          didReceiveUpdate = !1;

          switch (workInProgress.tag) {
            case 3:
              pushHostRootContext(workInProgress);
              break;

            case 5:
              pushHostContext(workInProgress);
              break;

            case 1:
              isContextProvider(workInProgress.type) && pushContextProvider(workInProgress);
              break;

            case 4:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;

            case 10:
              updateExpirationTime = workInProgress.memoizedProps.value;
              var context = workInProgress.type._context;
              push(valueCursor, context._currentValue2);
              context._currentValue2 = updateExpirationTime;
              break;

            case 13:
              if (null !== workInProgress.memoizedState) {
                updateExpirationTime = workInProgress.child.childExpirationTime;
                if (0 !== updateExpirationTime && updateExpirationTime >= renderExpirationTime) return updateSuspenseComponent(current, workInProgress, renderExpirationTime);
                push(suspenseStackCursor, suspenseStackCursor.current & 1);
                workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
                return null !== workInProgress ? workInProgress.sibling : null;
              }

              push(suspenseStackCursor, suspenseStackCursor.current & 1);
              break;

            case 19:
              updateExpirationTime = workInProgress.childExpirationTime >= renderExpirationTime;

              if (0 !== (current.effectTag & 64)) {
                if (updateExpirationTime) return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
                workInProgress.effectTag |= 64;
              }

              context = workInProgress.memoizedState;
              null !== context && (context.rendering = null, context.tail = null);
              push(suspenseStackCursor, suspenseStackCursor.current);
              if (!updateExpirationTime) return null;
          }

          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
        }

        didReceiveUpdate = !1;
      }
    } else didReceiveUpdate = !1;
    workInProgress.expirationTime = 0;

    switch (workInProgress.tag) {
      case 2:
        updateExpirationTime = workInProgress.type;
        null !== current && (current.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2);
        current = workInProgress.pendingProps;
        context = getMaskedContext(workInProgress, contextStackCursor.current);
        prepareToReadContext(workInProgress, renderExpirationTime);
        context = renderWithHooks(null, workInProgress, updateExpirationTime, current, context, renderExpirationTime);
        workInProgress.effectTag |= 1;

        if ("object" === typeof context && null !== context && "function" === typeof context.render && void 0 === context.$$typeof) {
          workInProgress.tag = 1;
          workInProgress.memoizedState = null;
          workInProgress.updateQueue = null;

          if (isContextProvider(updateExpirationTime)) {
            var hasContext = !0;
            pushContextProvider(workInProgress);
          } else hasContext = !1;

          workInProgress.memoizedState = null !== context.state && void 0 !== context.state ? context.state : null;
          initializeUpdateQueue(workInProgress);
          var getDerivedStateFromProps = updateExpirationTime.getDerivedStateFromProps;
          "function" === typeof getDerivedStateFromProps && applyDerivedStateFromProps(workInProgress, updateExpirationTime, getDerivedStateFromProps, current);
          context.updater = classComponentUpdater;
          workInProgress.stateNode = context;
          context._reactInternalFiber = workInProgress;
          mountClassInstance(workInProgress, updateExpirationTime, current, renderExpirationTime);
          workInProgress = finishClassComponent(null, workInProgress, updateExpirationTime, !0, hasContext, renderExpirationTime);
        } else workInProgress.tag = 0, reconcileChildren(null, workInProgress, context, renderExpirationTime), workInProgress = workInProgress.child;

        return workInProgress;

      case 16:
        a: {
          context = workInProgress.elementType;
          null !== current && (current.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2);
          current = workInProgress.pendingProps;
          initializeLazyComponentType(context);
          if (1 !== context._status) throw context._result;
          context = context._result;
          workInProgress.type = context;
          hasContext = workInProgress.tag = resolveLazyComponentTag(context);
          current = resolveDefaultProps(context, current);

          switch (hasContext) {
            case 0:
              workInProgress = updateFunctionComponent(null, workInProgress, context, current, renderExpirationTime);
              break a;

            case 1:
              workInProgress = updateClassComponent(null, workInProgress, context, current, renderExpirationTime);
              break a;

            case 11:
              workInProgress = updateForwardRef(null, workInProgress, context, current, renderExpirationTime);
              break a;

            case 14:
              workInProgress = updateMemoComponent(null, workInProgress, context, resolveDefaultProps(context.type, current), updateExpirationTime, renderExpirationTime);
              break a;
          }

          throw Error("Element type is invalid. Received a promise that resolves to: " + context + ". Lazy element type must resolve to a class or function.");
        }

        return workInProgress;

      case 0:
        return updateExpirationTime = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === updateExpirationTime ? context : resolveDefaultProps(updateExpirationTime, context), updateFunctionComponent(current, workInProgress, updateExpirationTime, context, renderExpirationTime);

      case 1:
        return updateExpirationTime = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === updateExpirationTime ? context : resolveDefaultProps(updateExpirationTime, context), updateClassComponent(current, workInProgress, updateExpirationTime, context, renderExpirationTime);

      case 3:
        pushHostRootContext(workInProgress);
        updateExpirationTime = workInProgress.updateQueue;
        if (null === current || null === updateExpirationTime) throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
        updateExpirationTime = workInProgress.pendingProps;
        context = workInProgress.memoizedState;
        context = null !== context ? context.element : null;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, updateExpirationTime, null, renderExpirationTime);
        updateExpirationTime = workInProgress.memoizedState.element;
        updateExpirationTime === context ? workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime) : (reconcileChildren(current, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress = workInProgress.child);
        return workInProgress;

      case 5:
        return pushHostContext(workInProgress), updateExpirationTime = workInProgress.pendingProps.children, markRef(current, workInProgress), reconcileChildren(current, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress = workInProgress.child, workInProgress;

      case 6:
        return null;

      case 13:
        return updateSuspenseComponent(current, workInProgress, renderExpirationTime);

      case 4:
        return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), updateExpirationTime = workInProgress.pendingProps, null === current ? workInProgress.child = reconcileChildFibers(workInProgress, null, updateExpirationTime, renderExpirationTime) : reconcileChildren(current, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 11:
        return updateExpirationTime = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === updateExpirationTime ? context : resolveDefaultProps(updateExpirationTime, context), updateForwardRef(current, workInProgress, updateExpirationTime, context, renderExpirationTime);

      case 7:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps, renderExpirationTime), workInProgress.child;

      case 8:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderExpirationTime), workInProgress.child;

      case 12:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderExpirationTime), workInProgress.child;

      case 10:
        a: {
          updateExpirationTime = workInProgress.type._context;
          context = workInProgress.pendingProps;
          getDerivedStateFromProps = workInProgress.memoizedProps;
          hasContext = context.value;
          var context$jscomp$0 = workInProgress.type._context;
          push(valueCursor, context$jscomp$0._currentValue2);
          context$jscomp$0._currentValue2 = hasContext;
          if (null !== getDerivedStateFromProps) if (context$jscomp$0 = getDerivedStateFromProps.value, hasContext = objectIs(context$jscomp$0, hasContext) ? 0 : ("function" === typeof updateExpirationTime._calculateChangedBits ? updateExpirationTime._calculateChangedBits(context$jscomp$0, hasContext) : 1073741823) | 0, 0 === hasContext) {
            if (getDerivedStateFromProps.children === context.children && !didPerformWorkStackCursor.current) {
              workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
              break a;
            }
          } else for (context$jscomp$0 = workInProgress.child, null !== context$jscomp$0 && (context$jscomp$0.return = workInProgress); null !== context$jscomp$0;) {
            var list = context$jscomp$0.dependencies;

            if (null !== list) {
              getDerivedStateFromProps = context$jscomp$0.child;

              for (var dependency = list.firstContext; null !== dependency;) {
                if (dependency.context === updateExpirationTime && 0 !== (dependency.observedBits & hasContext)) {
                  1 === context$jscomp$0.tag && (dependency = createUpdate(renderExpirationTime, null), dependency.tag = 2, enqueueUpdate(context$jscomp$0, dependency));
                  context$jscomp$0.expirationTime < renderExpirationTime && (context$jscomp$0.expirationTime = renderExpirationTime);
                  dependency = context$jscomp$0.alternate;
                  null !== dependency && dependency.expirationTime < renderExpirationTime && (dependency.expirationTime = renderExpirationTime);
                  scheduleWorkOnParentPath(context$jscomp$0.return, renderExpirationTime);
                  list.expirationTime < renderExpirationTime && (list.expirationTime = renderExpirationTime);
                  break;
                }

                dependency = dependency.next;
              }
            } else getDerivedStateFromProps = 10 === context$jscomp$0.tag ? context$jscomp$0.type === workInProgress.type ? null : context$jscomp$0.child : context$jscomp$0.child;

            if (null !== getDerivedStateFromProps) getDerivedStateFromProps.return = context$jscomp$0;else for (getDerivedStateFromProps = context$jscomp$0; null !== getDerivedStateFromProps;) {
              if (getDerivedStateFromProps === workInProgress) {
                getDerivedStateFromProps = null;
                break;
              }

              context$jscomp$0 = getDerivedStateFromProps.sibling;

              if (null !== context$jscomp$0) {
                context$jscomp$0.return = getDerivedStateFromProps.return;
                getDerivedStateFromProps = context$jscomp$0;
                break;
              }

              getDerivedStateFromProps = getDerivedStateFromProps.return;
            }
            context$jscomp$0 = getDerivedStateFromProps;
          }
          reconcileChildren(current, workInProgress, context.children, renderExpirationTime);
          workInProgress = workInProgress.child;
        }

        return workInProgress;

      case 9:
        return context = workInProgress.type, hasContext = workInProgress.pendingProps, updateExpirationTime = hasContext.children, prepareToReadContext(workInProgress, renderExpirationTime), context = readContext(context, hasContext.unstable_observedBits), updateExpirationTime = updateExpirationTime(context), workInProgress.effectTag |= 1, reconcileChildren(current, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 14:
        return context = workInProgress.type, hasContext = resolveDefaultProps(context, workInProgress.pendingProps), hasContext = resolveDefaultProps(context.type, hasContext), updateMemoComponent(current, workInProgress, context, hasContext, updateExpirationTime, renderExpirationTime);

      case 15:
        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);

      case 17:
        return updateExpirationTime = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === updateExpirationTime ? context : resolveDefaultProps(updateExpirationTime, context), null !== current && (current.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2), workInProgress.tag = 1, isContextProvider(updateExpirationTime) ? (current = !0, pushContextProvider(workInProgress)) : current = !1, prepareToReadContext(workInProgress, renderExpirationTime), constructClassInstance(workInProgress, updateExpirationTime, context), mountClassInstance(workInProgress, updateExpirationTime, context, renderExpirationTime), finishClassComponent(null, workInProgress, updateExpirationTime, !0, current, renderExpirationTime);

      case 19:
        return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
    }

    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
  };

  var onCommitFiberRoot = null,
      onCommitFiberUnmount = null;

  function injectInternals(internals) {
    if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;
    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (hook.isDisabled || !hook.supportsFiber) return !0;

    try {
      var rendererID = hook.inject(internals);

      onCommitFiberRoot = function onCommitFiberRoot(root) {
        try {
          hook.onCommitFiberRoot(rendererID, root, void 0, 64 === (root.current.effectTag & 64));
        } catch (err) {}
      };

      onCommitFiberUnmount = function onCommitFiberUnmount(fiber) {
        try {
          hook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {}
      };
    } catch (err) {}

    return !0;
  }

  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.effectTag = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.childExpirationTime = this.expirationTime = 0;
    this.alternate = null;
  }

  function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
  }

  function resolveLazyComponentTag(Component) {
    if ("function" === typeof Component) return shouldConstruct(Component) ? 1 : 0;

    if (void 0 !== Component && null !== Component) {
      Component = Component.$$typeof;
      if (Component === REACT_FORWARD_REF_TYPE) return 11;
      if (Component === REACT_MEMO_TYPE) return 14;
    }

    return 2;
  }

  function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = new FiberNode(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.effectTag = 0, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null);
    workInProgress.childExpirationTime = current.childExpirationTime;
    workInProgress.expirationTime = current.expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    pendingProps = current.dependencies;
    workInProgress.dependencies = null === pendingProps ? null : {
      expirationTime: pendingProps.expirationTime,
      firstContext: pendingProps.firstContext,
      responders: pendingProps.responders
    };
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }

  function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
    var fiberTag = 2;
    owner = type;
    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);else if ("string" === typeof type) fiberTag = 5;else a: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

      case REACT_CONCURRENT_MODE_TYPE:
        fiberTag = 8;
        mode |= 7;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = 8;
        mode |= 1;
        break;

      case REACT_PROFILER_TYPE:
        return type = new FiberNode(12, pendingProps, key, mode | 8), type.elementType = REACT_PROFILER_TYPE, type.type = REACT_PROFILER_TYPE, type.expirationTime = expirationTime, type;

      case REACT_SUSPENSE_TYPE:
        return type = new FiberNode(13, pendingProps, key, mode), type.type = REACT_SUSPENSE_TYPE, type.elementType = REACT_SUSPENSE_TYPE, type.expirationTime = expirationTime, type;

      case REACT_SUSPENSE_LIST_TYPE:
        return type = new FiberNode(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.expirationTime = expirationTime, type;

      default:
        if ("object" === typeof type && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
            fiberTag = 10;
            break a;

          case REACT_CONTEXT_TYPE:
            fiberTag = 9;
            break a;

          case REACT_FORWARD_REF_TYPE:
            fiberTag = 11;
            break a;

          case REACT_MEMO_TYPE:
            fiberTag = 14;
            break a;

          case REACT_LAZY_TYPE:
            fiberTag = 16;
            owner = null;
            break a;

          case REACT_BLOCK_TYPE:
            fiberTag = 22;
            break a;
        }
        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (null == type ? type : typeof type) + ".");
    }
    key = new FiberNode(fiberTag, pendingProps, key, mode);
    key.elementType = type;
    key.type = owner;
    key.expirationTime = expirationTime;
    return key;
  }

  function createFiberFromFragment(elements, mode, expirationTime, key) {
    elements = new FiberNode(7, elements, key, mode);
    elements.expirationTime = expirationTime;
    return elements;
  }

  function createFiberFromText(content, mode, expirationTime) {
    content = new FiberNode(6, content, null, mode);
    content.expirationTime = expirationTime;
    return content;
  }

  function createFiberFromPortal(portal, mode, expirationTime) {
    mode = new FiberNode(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.expirationTime = expirationTime;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }

  function FiberRootNode(containerInfo, tag, hydrate) {
    this.tag = tag;
    this.current = null;
    this.containerInfo = containerInfo;
    this.pingCache = this.pendingChildren = null;
    this.finishedExpirationTime = 0;
    this.finishedWork = null;
    this.timeoutHandle = -1;
    this.pendingContext = this.context = null;
    this.hydrate = hydrate;
    this.callbackNode = null;
    this.callbackPriority = 90;
    this.lastExpiredTime = this.lastPingedTime = this.nextKnownPendingLevel = this.lastSuspendedTime = this.firstSuspendedTime = this.firstPendingTime = 0;
  }

  function isRootSuspendedAtTime(root, expirationTime) {
    var firstSuspendedTime = root.firstSuspendedTime;
    root = root.lastSuspendedTime;
    return 0 !== firstSuspendedTime && firstSuspendedTime >= expirationTime && root <= expirationTime;
  }

  function markRootSuspendedAtTime(root, expirationTime) {
    var firstSuspendedTime = root.firstSuspendedTime,
        lastSuspendedTime = root.lastSuspendedTime;
    firstSuspendedTime < expirationTime && (root.firstSuspendedTime = expirationTime);
    if (lastSuspendedTime > expirationTime || 0 === firstSuspendedTime) root.lastSuspendedTime = expirationTime;
    expirationTime <= root.lastPingedTime && (root.lastPingedTime = 0);
    expirationTime <= root.lastExpiredTime && (root.lastExpiredTime = 0);
  }

  function markRootUpdatedAtTime(root, expirationTime) {
    expirationTime > root.firstPendingTime && (root.firstPendingTime = expirationTime);
    var firstSuspendedTime = root.firstSuspendedTime;
    0 !== firstSuspendedTime && (expirationTime >= firstSuspendedTime ? root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = 0 : expirationTime >= root.lastSuspendedTime && (root.lastSuspendedTime = expirationTime + 1), expirationTime > root.nextKnownPendingLevel && (root.nextKnownPendingLevel = expirationTime));
  }

  function findHostInstance(component) {
    var fiber = component._reactInternalFiber;

    if (void 0 === fiber) {
      if ("function" === typeof component.render) throw Error("Unable to find node on an unmounted component.");
      throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
    }

    component = findCurrentHostFiber(fiber);
    return null === component ? null : component.stateNode;
  }

  function updateContainer(element, container, parentComponent, callback) {
    var current = container.current,
        currentTime = requestCurrentTimeForUpdate(),
        suspenseConfig = ReactCurrentBatchConfig.suspense;
    currentTime = computeExpirationForFiber(currentTime, current, suspenseConfig);

    a: if (parentComponent) {
      parentComponent = parentComponent._reactInternalFiber;

      b: {
        if (getNearestMountedFiber(parentComponent) !== parentComponent || 1 !== parentComponent.tag) throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var parentContext = parentComponent;

        do {
          switch (parentContext.tag) {
            case 3:
              parentContext = parentContext.stateNode.context;
              break b;

            case 1:
              if (isContextProvider(parentContext.type)) {
                parentContext = parentContext.stateNode.__reactInternalMemoizedMergedChildContext;
                break b;
              }

          }

          parentContext = parentContext.return;
        } while (null !== parentContext);

        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }

      if (1 === parentComponent.tag) {
        var Component = parentComponent.type;

        if (isContextProvider(Component)) {
          parentComponent = processChildContext(parentComponent, Component, parentContext);
          break a;
        }
      }

      parentComponent = parentContext;
    } else parentComponent = emptyContextObject;

    null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
    container = createUpdate(currentTime, suspenseConfig);
    container.payload = {
      element: element
    };
    callback = void 0 === callback ? null : callback;
    null !== callback && (container.callback = callback);
    enqueueUpdate(current, container);
    scheduleWork(current, currentTime);
    return currentTime;
  }

  function createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }

  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical._nativeTag;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical._nativeTag : componentOrHandle._nativeTag;
  }

  batchedUpdatesImpl = function batchedUpdatesImpl(fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= 1;

    try {
      return fn(a);
    } finally {
      executionContext = prevExecutionContext, executionContext === NoContext && flushSyncCallbackQueue();
    }
  };

  var roots = new Map();

  (function (devToolsConfig) {
    var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
    return injectInternals({
      bundleType: devToolsConfig.bundleType,
      version: devToolsConfig.version,
      rendererPackageName: devToolsConfig.rendererPackageName,
      rendererConfig: devToolsConfig.rendererConfig,
      overrideHookState: null,
      overrideProps: null,
      setSuspenseHandler: null,
      scheduleUpdate: null,
      currentDispatcherRef: ReactSharedInternals.ReactCurrentDispatcher,
      findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
        fiber = findCurrentHostFiber(fiber);
        return null === fiber ? null : fiber.stateNode;
      },
      findFiberByHostInstance: function findFiberByHostInstance(instance) {
        return _findFiberByHostInstance ? _findFiberByHostInstance(instance) : null;
      },
      findHostInstancesForRefresh: null,
      scheduleRefresh: null,
      scheduleRoot: null,
      setRefreshHandler: null,
      getCurrentFiber: null
    });
  })({
    findFiberByHostInstance: getInstanceFromInstance,
    bundleType: 0,
    version: "16.13.0",
    rendererPackageName: "react-native-renderer",
    rendererConfig: {
      getInspectorDataForViewTag: function getInspectorDataForViewTag() {
        throw Error("getInspectorDataForViewTag() is not available in production");
      },
      getInspectorDataForViewAtPoint: function () {
        throw Error("getInspectorDataForViewAtPoint() is not available in production.");
      }.bind(null, findNodeHandle)
    }
  });

  exports.createPortal = function (children, containerTag) {
    return createPortal(children, containerTag, null, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
  };

  exports.dispatchCommand = function (handle, command, args) {
    null != handle._nativeTag && (handle._internalInstanceHandle ? nativeFabricUIManager.dispatchCommand(handle._internalInstanceHandle.stateNode.node, command, args) : _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface").UIManager.dispatchViewManagerCommand(handle._nativeTag, command, args));
  };

  exports.findHostInstance_DEPRECATED = function (componentOrHandle) {
    if (null == componentOrHandle) return null;
    if (componentOrHandle._nativeTag) return componentOrHandle;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical : componentOrHandle;
  };

  exports.findNodeHandle = findNodeHandle;

  exports.render = function (element, containerTag, callback) {
    var root = roots.get(containerTag);

    if (!root) {
      root = new FiberRootNode(containerTag, 0, !1);
      var uninitializedFiber = new FiberNode(3, null, null, 0);
      root.current = uninitializedFiber;
      uninitializedFiber.stateNode = root;
      initializeUpdateQueue(uninitializedFiber);
      roots.set(containerTag, root);
    }

    updateContainer(element, root, null, callback);

    a: if (element = root.current, element.child) switch (element.child.tag) {
      case 5:
        element = element.child.stateNode.canonical;
        break a;

      default:
        element = element.child.stateNode;
    } else element = null;

    return element;
  };

  exports.stopSurface = function (containerTag) {
    var root = roots.get(containerTag);
    root && updateContainer(null, root, null, function () {
      roots.delete(containerTag);
    });
  };

  exports.unmountComponentAtNode = function (containerTag) {
    this.stopSurface(containerTag);
  };
},421,[87,49,58,192],"node_modules/react-native/Libraries/Renderer/implementations/ReactFabric-prod.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/slicedToArray"));

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/createClass"));

  var _NativeBugReporting = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "./NativeBugReporting"));

  var _NativeRedBox = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../NativeModules/specs/NativeRedBox"));

  function defaultExtras() {
    BugReporting.addFileSource('react_hierarchy.txt', function () {
      return _$$_REQUIRE(_dependencyMap[6], "./dumpReactTree")();
    });
  }

  var BugReporting = function () {
    function BugReporting() {
      (0, _classCallCheck2.default)(this, BugReporting);
    }

    (0, _createClass2.default)(BugReporting, null, [{
      key: "_maybeInit",
      value: function _maybeInit() {
        if (!BugReporting._subscription) {
          BugReporting._subscription = _$$_REQUIRE(_dependencyMap[7], "../EventEmitter/RCTDeviceEventEmitter").addListener('collectBugExtraData', BugReporting.collectExtraData, null);
          defaultExtras();
        }

        if (!BugReporting._redboxSubscription) {
          BugReporting._redboxSubscription = _$$_REQUIRE(_dependencyMap[7], "../EventEmitter/RCTDeviceEventEmitter").addListener('collectRedBoxExtraData', BugReporting.collectExtraData, null);
        }
      }
    }, {
      key: "addSource",
      value: function addSource(key, callback) {
        return this._addSource(key, callback, BugReporting._extraSources);
      }
    }, {
      key: "addFileSource",
      value: function addFileSource(key, callback) {
        return this._addSource(key, callback, BugReporting._fileSources);
      }
    }, {
      key: "_addSource",
      value: function _addSource(key, callback, source) {
        BugReporting._maybeInit();

        if (source.has(key)) {
          console.warn("BugReporting.add* called multiple times for same key '" + key + "'");
        }

        source.set(key, callback);
        return {
          remove: function remove() {
            source.delete(key);
          }
        };
      }
    }, {
      key: "collectExtraData",
      value: function collectExtraData() {
        var extraData = {};

        for (var _ref of BugReporting._extraSources) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2);

          var _key = _ref2[0];
          var callback = _ref2[1];
          extraData[_key] = callback();
        }

        var fileData = {};

        for (var _ref3 of BugReporting._fileSources) {
          var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);

          var _key2 = _ref4[0];
          var _callback = _ref4[1];
          fileData[_key2] = _callback();
        }

        if (_NativeBugReporting.default != null && _NativeBugReporting.default.setExtraData != null) {
          _NativeBugReporting.default.setExtraData(extraData, fileData);
        }

        if (_NativeRedBox.default != null && _NativeRedBox.default.setExtraData != null) {
          _NativeRedBox.default.setExtraData(extraData, 'From BugReporting.js');
        }

        return {
          extras: extraData,
          files: fileData
        };
      }
    }]);
    return BugReporting;
  }();

  BugReporting._extraSources = new Map();
  BugReporting._fileSources = new Map();
  BugReporting._subscription = null;
  BugReporting._redboxSubscription = null;
  module.exports = BugReporting;
},422,[3,8,16,17,423,152,424,30],"node_modules/react-native/Libraries/BugReporting/BugReporting.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('BugReporting');

  exports.default = _default;
},423,[5],"node_modules/react-native/Libraries/BugReporting/NativeBugReporting.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function dumpReactTree() {
    try {
      return getReactTree();
    } catch (e) {
      return 'Failed to dump react tree: ' + e;
    }
  }

  function getReactTree() {
    return 'React tree dumps have been temporarily disabled while React is ' + 'upgraded to Fiber.';
  }

  module.exports = dumpReactTree;
},424,[],"node_modules/react-native/Libraries/BugReporting/dumpReactTree.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _listeners = [];
  var _activeScene = {
    name: 'default'
  };
  var SceneTracker = {
    setActiveScene: function setActiveScene(scene) {
      _activeScene = scene;

      _listeners.forEach(function (listener) {
        return listener(_activeScene);
      });
    },
    getActiveScene: function getActiveScene() {
      return _activeScene;
    },
    addActiveSceneChangedListener: function addActiveSceneChangedListener(callback) {
      _listeners.push(callback);

      return {
        remove: function remove() {
          _listeners = _listeners.filter(function (listener) {
            return callback !== listener;
          });
        }
      };
    }
  };
  module.exports = SceneTracker;
},425,[],"node_modules/react-native/Libraries/Utilities/SceneTracker.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports._LogBoxInspectorContainer = void 0;

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/getPrototypeOf"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6], "react"));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7], "react-native");

  var LogBoxData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8], "./Data/LogBoxData"));

  var _LogBoxInspector = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[9], "./UI/LogBoxInspector"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/LogBox/LogBoxInspectorContainer.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var _LogBoxInspectorContainer = function (_React$Component) {
    (0, _inherits2.default)(_LogBoxInspectorContainer, _React$Component);

    var _super = _createSuper(_LogBoxInspectorContainer);

    function _LogBoxInspectorContainer() {
      var _this;

      (0, _classCallCheck2.default)(this, _LogBoxInspectorContainer);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _this._handleDismiss = function () {
        var _this$props = _this.props,
            selectedLogIndex = _this$props.selectedLogIndex,
            logs = _this$props.logs;
        var logsArray = Array.from(logs);

        if (selectedLogIndex != null) {
          if (logsArray.length - 1 <= 0) {
            LogBoxData.setSelectedLog(-1);
          } else if (selectedLogIndex >= logsArray.length - 1) {
            LogBoxData.setSelectedLog(selectedLogIndex - 1);
          }

          LogBoxData.dismiss(logsArray[selectedLogIndex]);
        }
      };

      _this._handleMinimize = function () {
        LogBoxData.setSelectedLog(-1);
      };

      _this._handleSetSelectedLog = function (index) {
        LogBoxData.setSelectedLog(index);
      };

      return _this;
    }

    (0, _createClass2.default)(_LogBoxInspectorContainer, [{
      key: "render",
      value: function render() {
        return React.createElement(_reactNative.View, {
          style: _reactNative.StyleSheet.absoluteFill,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 28,
            columnNumber: 7
          }
        }, React.createElement(_LogBoxInspector.default, {
          onDismiss: this._handleDismiss,
          onMinimize: this._handleMinimize,
          onChangeSelectedIndex: this._handleSetSelectedLog,
          logs: this.props.logs,
          selectedIndex: this.props.selectedLogIndex,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 29,
            columnNumber: 9
          }
        }));
      }
    }]);
    return _LogBoxInspectorContainer;
  }(React.Component);

  exports._LogBoxInspectorContainer = _LogBoxInspectorContainer;

  var _default = LogBoxData.withSubscription(_LogBoxInspectorContainer);

  exports.default = _default;
},426,[3,16,17,35,32,31,49,1,64,427],"node_modules/react-native/Libraries/LogBox/LogBoxInspectorContainer.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/slicedToArray"));

  var _LogBoxInspectorCodeFrame = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "./LogBoxInspectorCodeFrame"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3], "react"));

  var _ScrollView = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../Components/ScrollView/ScrollView"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../StyleSheet/StyleSheet"));

  var _View = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "../../Components/View/View"));

  var LogBoxData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7], "../Data/LogBoxData"));

  var _Keyboard = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[8], "../../Components/Keyboard/Keyboard"));

  var _LogBoxInspectorFooter = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[9], "./LogBoxInspectorFooter"));

  var _LogBoxInspectorMessageHeader = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[10], "./LogBoxInspectorMessageHeader"));

  var _LogBoxInspectorReactFrames = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[11], "./LogBoxInspectorReactFrames"));

  var _LogBoxInspectorStackFrames = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[12], "./LogBoxInspectorStackFrames"));

  var _LogBoxInspectorHeader = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[13], "./LogBoxInspectorHeader"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[14], "./LogBoxStyle"));

  var _LogBoxLog = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[15], "../Data/LogBoxLog"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspector.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function LogBoxInspector(props) {
    var logs = props.logs,
        selectedIndex = props.selectedIndex;
    var log = logs[selectedIndex];
    React.useEffect(function () {
      if (log) {
        LogBoxData.symbolicateLogNow(log);
      }
    }, [log]);
    React.useEffect(function () {
      if (logs.length > 1) {
        var selected = selectedIndex;
        var lastIndex = logs.length - 1;
        var prevIndex = selected - 1 < 0 ? lastIndex : selected - 1;
        var nextIndex = selected + 1 > lastIndex ? 0 : selected + 1;
        LogBoxData.symbolicateLogLazy(logs[prevIndex]);
        LogBoxData.symbolicateLogLazy(logs[nextIndex]);
      }
    }, [logs, selectedIndex]);
    React.useEffect(function () {
      _Keyboard.default.dismiss();
    }, []);

    function _handleRetry() {
      LogBoxData.retrySymbolicateLogNow(log);
    }

    if (log == null) {
      return null;
    }

    return React.createElement(_View.default, {
      style: styles.root,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 72,
        columnNumber: 5
      }
    }, React.createElement(_LogBoxInspectorHeader.default, {
      onSelectIndex: props.onChangeSelectedIndex,
      selectedIndex: selectedIndex,
      total: logs.length,
      level: log.level,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 73,
        columnNumber: 7
      }
    }), React.createElement(LogBoxInspectorBody, {
      log: log,
      onRetry: _handleRetry,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 79,
        columnNumber: 7
      }
    }), React.createElement(_LogBoxInspectorFooter.default, {
      onDismiss: props.onDismiss,
      onMinimize: props.onMinimize,
      level: log.level,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 80,
        columnNumber: 7
      }
    }));
  }

  var headerTitleMap = {
    warn: 'Warning',
    error: 'Error',
    fatal: 'Exception',
    syntax: 'Syntax Error',
    component: 'Component Exception'
  };

  function LogBoxInspectorBody(props) {
    var _props$log$type;

    var _React$useState = React.useState(true),
        _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
        collapsed = _React$useState2[0],
        setCollapsed = _React$useState2[1];

    React.useEffect(function () {
      setCollapsed(true);
    }, [props.log]);
    var headerTitle = (_props$log$type = props.log.type) != null ? _props$log$type : headerTitleMap[props.log.isComponentError ? 'component' : props.log.level];

    if (collapsed) {
      return React.createElement(React.Fragment, null, React.createElement(_LogBoxInspectorMessageHeader.default, {
        collapsed: collapsed,
        onPress: function onPress() {
          return setCollapsed(!collapsed);
        },
        message: props.log.message,
        level: props.log.level,
        title: headerTitle,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 111,
          columnNumber: 9
        }
      }), React.createElement(_ScrollView.default, {
        style: styles.scrollBody,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 118,
          columnNumber: 9
        }
      }, React.createElement(_LogBoxInspectorCodeFrame.default, {
        codeFrame: props.log.codeFrame,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 119,
          columnNumber: 11
        }
      }), React.createElement(_LogBoxInspectorReactFrames.default, {
        log: props.log,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 120,
          columnNumber: 11
        }
      }), React.createElement(_LogBoxInspectorStackFrames.default, {
        log: props.log,
        onRetry: props.onRetry,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 121,
          columnNumber: 11
        }
      })));
    }

    return React.createElement(_ScrollView.default, {
      style: styles.scrollBody,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 127,
        columnNumber: 5
      }
    }, React.createElement(_LogBoxInspectorMessageHeader.default, {
      collapsed: collapsed,
      onPress: function onPress() {
        return setCollapsed(!collapsed);
      },
      message: props.log.message,
      level: props.log.level,
      title: headerTitle,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 128,
        columnNumber: 7
      }
    }), React.createElement(_LogBoxInspectorCodeFrame.default, {
      codeFrame: props.log.codeFrame,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 135,
        columnNumber: 7
      }
    }), React.createElement(_LogBoxInspectorReactFrames.default, {
      log: props.log,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 136,
        columnNumber: 7
      }
    }), React.createElement(_LogBoxInspectorStackFrames.default, {
      log: props.log,
      onRetry: props.onRetry,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 137,
        columnNumber: 7
      }
    }));
  }

  var styles = _StyleSheet.default.create({
    root: {
      flex: 1,
      backgroundColor: LogBoxStyle.getTextColor()
    },
    scrollBody: {
      backgroundColor: LogBoxStyle.getBackgroundColor(0.9),
      flex: 1
    }
  });

  var _default = LogBoxInspector;
  exports.default = _default;
},427,[3,8,428,49,297,241,236,64,307,432,434,435,436,441,382,65],"node_modules/react-native/Libraries/LogBox/UI/LogBoxInspector.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _Platform = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Utilities/Platform"));

  var _ScrollView = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../Components/ScrollView/ScrollView"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../StyleSheet/StyleSheet"));

  var _Text = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../Text/Text"));

  var _View = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "../../Components/View/View"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7], "./LogBoxStyle"));

  var _LogBoxButton = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[8], "./LogBoxButton"));

  var _openFileInEditor = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[9], "../../Core/Devtools/openFileInEditor"));

  var _AnsiHighlight = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[10], "./AnsiHighlight"));

  var _LogBoxInspectorSection = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[11], "./LogBoxInspectorSection"));

  var LogBoxData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12], "../Data/LogBoxData"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorCodeFrame.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function LogBoxInspectorCodeFrame(props) {
    var codeFrame = props.codeFrame;

    if (codeFrame == null) {
      return null;
    }

    function getFileName() {
      var matches = /[^/]*$/.exec(codeFrame.fileName);

      if (matches && matches.length > 0) {
        return matches[0];
      }

      return codeFrame.fileName;
    }

    function getLocation() {
      var location = codeFrame.location;

      if (location != null) {
        return " (" + location.row + ":" + (location.column + 1) + ")";
      }

      return null;
    }

    return React.createElement(_LogBoxInspectorSection.default, {
      heading: "Source",
      action: React.createElement(AppInfo, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 57,
          columnNumber: 54
        }
      }),
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 57,
        columnNumber: 5
      }
    }, React.createElement(_View.default, {
      style: styles.box,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 58,
        columnNumber: 7
      }
    }, React.createElement(_View.default, {
      style: styles.frame,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 59,
        columnNumber: 9
      }
    }, React.createElement(_ScrollView.default, {
      horizontal: true,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 60,
        columnNumber: 11
      }
    }, React.createElement(_AnsiHighlight.default, {
      style: styles.content,
      text: codeFrame.content,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 61,
        columnNumber: 13
      }
    }))), React.createElement(_LogBoxButton.default, {
      backgroundColor: {
        default: 'transparent',
        pressed: LogBoxStyle.getBackgroundDarkColor(1)
      },
      style: styles.button,
      onPress: function onPress() {
        var _codeFrame$location$r, _codeFrame$location;

        (0, _openFileInEditor.default)(codeFrame.fileName, (_codeFrame$location$r = (_codeFrame$location = codeFrame.location) == null ? void 0 : _codeFrame$location.row) != null ? _codeFrame$location$r : 0);
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 64,
        columnNumber: 9
      }
    }, React.createElement(_Text.default, {
      style: styles.fileText,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 73,
        columnNumber: 11
      }
    }, getFileName(), getLocation()))));
  }

  function AppInfo() {
    var appInfo = LogBoxData.getAppInfo();

    if (appInfo == null) {
      return null;
    }

    return React.createElement(_LogBoxButton.default, {
      backgroundColor: {
        default: 'transparent',
        pressed: appInfo.onPress ? LogBoxStyle.getBackgroundColor(1) : 'transparent'
      },
      style: appInfoStyles.buildButton,
      onPress: appInfo.onPress,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 90,
        columnNumber: 5
      }
    }, React.createElement(_Text.default, {
      style: appInfoStyles.text,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 99,
        columnNumber: 7
      }
    }, appInfo.appVersion, " (", appInfo.engine, ")"));
  }

  var appInfoStyles = _StyleSheet.default.create({
    text: {
      color: LogBoxStyle.getTextColor(0.4),
      fontSize: 12,
      lineHeight: 12
    },
    buildButton: {
      flex: 0,
      flexGrow: 0,
      paddingVertical: 4,
      paddingHorizontal: 5,
      borderRadius: 5,
      marginRight: -8
    }
  });

  var styles = _StyleSheet.default.create({
    box: {
      backgroundColor: LogBoxStyle.getBackgroundColor(),
      marginLeft: 10,
      marginRight: 10,
      marginTop: 5,
      borderRadius: 3
    },
    frame: {
      padding: 10,
      borderBottomColor: LogBoxStyle.getTextColor(0.1),
      borderBottomWidth: 1
    },
    button: {
      paddingTop: 10,
      paddingBottom: 10
    },
    content: {
      color: LogBoxStyle.getTextColor(1),
      fontSize: 12,
      includeFontPadding: false,
      lineHeight: 20,
      fontFamily: _Platform.default.select({
        android: 'monospace',
        ios: 'Menlo'
      })
    },
    fileText: {
      color: LogBoxStyle.getTextColor(0.5),
      textAlign: 'center',
      flex: 1,
      fontSize: 12,
      includeFontPadding: false,
      lineHeight: 16,
      fontFamily: _Platform.default.select({
        android: 'monospace',
        ios: 'Menlo'
      })
    }
  });

  var _default = LogBoxInspectorCodeFrame;
  exports.default = _default;
},428,[49,3,80,297,241,338,236,382,381,370,429,431,64],"node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorCodeFrame.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ansi;

  var _Text = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../Text/Text"));

  var _View = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Components/View/View"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3], "react"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/LogBox/UI/AnsiHighlight.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var COLORS = {
    'ansi-black': 'rgb(27, 27, 27)',
    'ansi-red': 'rgb(187, 86, 83)',
    'ansi-green': 'rgb(144, 157, 98)',
    'ansi-yellow': 'rgb(234, 193, 121)',
    'ansi-blue': 'rgb(125, 169, 199)',
    'ansi-magenta': 'rgb(176, 101, 151)',
    'ansi-cyan': 'rgb(140, 220, 216)',
    'ansi-bright-black': 'rgb(98, 98, 98)',
    'ansi-bright-red': 'rgb(187, 86, 83)',
    'ansi-bright-green': 'rgb(144, 157, 98)',
    'ansi-bright-yellow': 'rgb(234, 193, 121)',
    'ansi-bright-blue': 'rgb(125, 169, 199)',
    'ansi-bright-magenta': 'rgb(176, 101, 151)',
    'ansi-bright-cyan': 'rgb(140, 220, 216)',
    'ansi-bright-white': 'rgb(247, 247, 247)'
  };

  function Ansi(_ref) {
    var _this = this;

    var text = _ref.text,
        style = _ref.style;
    var commonWhitespaceLength = Infinity;
    var parsedLines = text.split(/\n/).map(function (line) {
      return (0, _$$_REQUIRE(_dependencyMap[4], "anser").ansiToJson)(line, {
        json: true,
        remove_empty: true,
        use_classes: true
      });
    });
    parsedLines.map(function (lines) {
      var _lines$, _lines$$content, _match$;

      var match = lines[2] && ((_lines$ = lines[2]) == null ? void 0 : (_lines$$content = _lines$.content) == null ? void 0 : _lines$$content.match(/^ +/));
      var whitespaceLength = match && ((_match$ = match[0]) == null ? void 0 : _match$.length) || 0;

      if (whitespaceLength < commonWhitespaceLength) {
        commonWhitespaceLength = whitespaceLength;
      }
    });

    var getText = function getText(content, key) {
      if (key === 1) {
        return content.replace(/\| $/, ' ');
      } else if (key === 2 && commonWhitespaceLength < Infinity) {
        return content.substr(commonWhitespaceLength);
      } else {
        return content;
      }
    };

    return React.createElement(_View.default, {
      style: {
        flexDirection: 'column'
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 80,
        columnNumber: 5
      }
    }, parsedLines.map(function (items, i) {
      return React.createElement(_View.default, {
        style: {
          flexDirection: 'row'
        },
        key: i,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 82,
          columnNumber: 9
        }
      }, items.map(function (bundle, key) {
        var textStyle = bundle.fg && COLORS[bundle.fg] ? {
          backgroundColor: bundle.bg && COLORS[bundle.bg],
          color: bundle.fg && COLORS[bundle.fg]
        } : {
          backgroundColor: bundle.bg && COLORS[bundle.bg]
        };
        return React.createElement(_Text.default, {
          style: [style, textStyle],
          key: key,
          __self: _this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 94,
            columnNumber: 15
          }
        }, getText(bundle.content, key));
      }));
    }));
  }
},429,[3,338,236,49,430],"node_modules/react-native/Libraries/LogBox/UI/AnsiHighlight.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var ANSI_COLORS = [[{
    color: "0, 0, 0",
    "class": "ansi-black"
  }, {
    color: "187, 0, 0",
    "class": "ansi-red"
  }, {
    color: "0, 187, 0",
    "class": "ansi-green"
  }, {
    color: "187, 187, 0",
    "class": "ansi-yellow"
  }, {
    color: "0, 0, 187",
    "class": "ansi-blue"
  }, {
    color: "187, 0, 187",
    "class": "ansi-magenta"
  }, {
    color: "0, 187, 187",
    "class": "ansi-cyan"
  }, {
    color: "255,255,255",
    "class": "ansi-white"
  }], [{
    color: "85, 85, 85",
    "class": "ansi-bright-black"
  }, {
    color: "255, 85, 85",
    "class": "ansi-bright-red"
  }, {
    color: "0, 255, 0",
    "class": "ansi-bright-green"
  }, {
    color: "255, 255, 85",
    "class": "ansi-bright-yellow"
  }, {
    color: "85, 85, 255",
    "class": "ansi-bright-blue"
  }, {
    color: "255, 85, 255",
    "class": "ansi-bright-magenta"
  }, {
    color: "85, 255, 255",
    "class": "ansi-bright-cyan"
  }, {
    color: "255, 255, 255",
    "class": "ansi-bright-white"
  }]];

  var Anser = function () {
    _createClass(Anser, null, [{
      key: "escapeForHtml",
      value: function escapeForHtml(txt) {
        return new Anser().escapeForHtml(txt);
      }
    }, {
      key: "linkify",
      value: function linkify(txt) {
        return new Anser().linkify(txt);
      }
    }, {
      key: "ansiToHtml",
      value: function ansiToHtml(txt, options) {
        return new Anser().ansiToHtml(txt, options);
      }
    }, {
      key: "ansiToJson",
      value: function ansiToJson(txt, options) {
        return new Anser().ansiToJson(txt, options);
      }
    }, {
      key: "ansiToText",
      value: function ansiToText(txt) {
        return new Anser().ansiToText(txt);
      }
    }]);

    function Anser() {
      _classCallCheck(this, Anser);

      this.fg = this.bg = this.fg_truecolor = this.bg_truecolor = null;
      this.bright = 0;
    }

    _createClass(Anser, [{
      key: "setupPalette",
      value: function setupPalette() {
        this.PALETTE_COLORS = [];

        for (var i = 0; i < 2; ++i) {
          for (var j = 0; j < 8; ++j) {
            this.PALETTE_COLORS.push(ANSI_COLORS[i][j].color);
          }
        }

        var levels = [0, 95, 135, 175, 215, 255];

        var format = function format(r, g, b) {
          return levels[r] + ", " + levels[g] + ", " + levels[b];
        };

        var r = void 0,
            g = void 0,
            b = void 0;

        for (var _r = 0; _r < 6; ++_r) {
          for (var _g = 0; _g < 6; ++_g) {
            for (var _b = 0; _b < 6; ++_b) {
              this.PALETTE_COLORS.push(format(_r, _g, _b));
            }
          }
        }

        var level = 8;

        for (var _i = 0; _i < 24; ++_i, level += 10) {
          this.PALETTE_COLORS.push(format(level, level, level));
        }
      }
    }, {
      key: "escapeForHtml",
      value: function escapeForHtml(txt) {
        return txt.replace(/[&<>]/gm, function (str) {
          return str == "&" ? "&amp;" : str == "<" ? "&lt;" : str == ">" ? "&gt;" : "";
        });
      }
    }, {
      key: "linkify",
      value: function linkify(txt) {
        return txt.replace(/(https?:\/\/[^\s]+)/gm, function (str) {
          return "<a href=\"" + str + "\">" + str + "</a>";
        });
      }
    }, {
      key: "ansiToHtml",
      value: function ansiToHtml(txt, options) {
        return this.process(txt, options, true);
      }
    }, {
      key: "ansiToJson",
      value: function ansiToJson(txt, options) {
        options = options || {};
        options.json = true;
        options.clearLine = false;
        return this.process(txt, options, true);
      }
    }, {
      key: "ansiToText",
      value: function ansiToText(txt) {
        return this.process(txt, {}, false);
      }
    }, {
      key: "process",
      value: function process(txt, options, markup) {
        var _this = this;

        var self = this;
        var raw_text_chunks = txt.split(/\033\[/);
        var first_chunk = raw_text_chunks.shift();

        if (options === undefined || options === null) {
          options = {};
        }

        options.clearLine = /\r/.test(txt);
        var color_chunks = raw_text_chunks.map(function (chunk) {
          return _this.processChunk(chunk, options, markup);
        });

        if (options && options.json) {
          var first = self.processChunkJson("");
          first.content = first_chunk;
          first.clearLine = options.clearLine;
          color_chunks.unshift(first);

          if (options.remove_empty) {
            color_chunks = color_chunks.filter(function (c) {
              return !c.isEmpty();
            });
          }

          return color_chunks;
        } else {
          color_chunks.unshift(first_chunk);
        }

        return color_chunks.join("");
      }
    }, {
      key: "processChunkJson",
      value: function processChunkJson(text, options, markup) {
        options = typeof options == "undefined" ? {} : options;
        var use_classes = options.use_classes = typeof options.use_classes != "undefined" && options.use_classes;
        var key = options.key = use_classes ? "class" : "color";
        var result = {
          content: text,
          fg: null,
          bg: null,
          fg_truecolor: null,
          bg_truecolor: null,
          clearLine: options.clearLine,
          decoration: null,
          was_processed: false,
          isEmpty: function isEmpty() {
            return !result.content;
          }
        };
        var matches = text.match(/^([!\x3c-\x3f]*)([\d;]*)([\x20-\x2c]*[\x40-\x7e])([\s\S]*)/m);
        if (!matches) return result;
        var orig_txt = result.content = matches[4];
        var nums = matches[2].split(";");

        if (matches[1] !== "" || matches[3] !== "m") {
          return result;
        }

        if (!markup) {
          return result;
        }

        var self = this;
        self.decoration = null;

        while (nums.length > 0) {
          var num_str = nums.shift();
          var num = parseInt(num_str);

          if (isNaN(num) || num === 0) {
            self.fg = self.bg = self.decoration = null;
          } else if (num === 1) {
            self.decoration = "bold";
          } else if (num === 2) {
            self.decoration = "dim";
          } else if (num == 3) {
            self.decoration = "italic";
          } else if (num == 4) {
            self.decoration = "underline";
          } else if (num == 5) {
            self.decoration = "blink";
          } else if (num === 7) {
            self.decoration = "reverse";
          } else if (num === 8) {
            self.decoration = "hidden";
          } else if (num === 9) {
            self.decoration = "strikethrough";
          } else if (num == 39) {
            self.fg = null;
          } else if (num == 49) {
            self.bg = null;
          } else if (num >= 30 && num < 38) {
            self.fg = ANSI_COLORS[0][num % 10][key];
          } else if (num >= 90 && num < 98) {
            self.fg = ANSI_COLORS[1][num % 10][key];
          } else if (num >= 40 && num < 48) {
            self.bg = ANSI_COLORS[0][num % 10][key];
          } else if (num >= 100 && num < 108) {
            self.bg = ANSI_COLORS[1][num % 10][key];
          } else if (num === 38 || num === 48) {
            var is_foreground = num === 38;

            if (nums.length >= 1) {
              var mode = nums.shift();

              if (mode === "5" && nums.length >= 1) {
                var palette_index = parseInt(nums.shift());

                if (palette_index >= 0 && palette_index <= 255) {
                  if (!use_classes) {
                    if (!this.PALETTE_COLORS) {
                      self.setupPalette();
                    }

                    if (is_foreground) {
                      self.fg = this.PALETTE_COLORS[palette_index];
                    } else {
                      self.bg = this.PALETTE_COLORS[palette_index];
                    }
                  } else {
                    var klass = palette_index >= 16 ? "ansi-palette-" + palette_index : ANSI_COLORS[palette_index > 7 ? 1 : 0][palette_index % 8]["class"];

                    if (is_foreground) {
                      self.fg = klass;
                    } else {
                      self.bg = klass;
                    }
                  }
                }
              } else if (mode === "2" && nums.length >= 3) {
                var r = parseInt(nums.shift());
                var g = parseInt(nums.shift());
                var b = parseInt(nums.shift());

                if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255) {
                  var color = r + ", " + g + ", " + b;

                  if (!use_classes) {
                    if (is_foreground) {
                      self.fg = color;
                    } else {
                      self.bg = color;
                    }
                  } else {
                    if (is_foreground) {
                      self.fg = "ansi-truecolor";
                      self.fg_truecolor = color;
                    } else {
                      self.bg = "ansi-truecolor";
                      self.bg_truecolor = color;
                    }
                  }
                }
              }
            }
          }
        }

        if (self.fg === null && self.bg === null && self.decoration === null) {
          return result;
        } else {
          var styles = [];
          var classes = [];
          var data = {};
          result.fg = self.fg;
          result.bg = self.bg;
          result.fg_truecolor = self.fg_truecolor;
          result.bg_truecolor = self.bg_truecolor;
          result.decoration = self.decoration;
          result.was_processed = true;
          return result;
        }
      }
    }, {
      key: "processChunk",
      value: function processChunk(text, options, markup) {
        var _this2 = this;

        var self = this;
        options = options || {};
        var jsonChunk = this.processChunkJson(text, options, markup);

        if (options.json) {
          return jsonChunk;
        }

        if (jsonChunk.isEmpty()) {
          return "";
        }

        if (!jsonChunk.was_processed) {
          return jsonChunk.content;
        }

        var use_classes = options.use_classes;
        var styles = [];
        var classes = [];
        var data = {};

        var render_data = function render_data(data) {
          var fragments = [];
          var key = void 0;

          for (key in data) {
            if (data.hasOwnProperty(key)) {
              fragments.push("data-" + key + "=\"" + _this2.escapeForHtml(data[key]) + "\"");
            }
          }

          return fragments.length > 0 ? " " + fragments.join(" ") : "";
        };

        if (jsonChunk.fg) {
          if (use_classes) {
            classes.push(jsonChunk.fg + "-fg");

            if (jsonChunk.fg_truecolor !== null) {
              data["ansi-truecolor-fg"] = jsonChunk.fg_truecolor;
              jsonChunk.fg_truecolor = null;
            }
          } else {
            styles.push("color:rgb(" + jsonChunk.fg + ")");
          }
        }

        if (jsonChunk.bg) {
          if (use_classes) {
            classes.push(jsonChunk.bg + "-bg");

            if (jsonChunk.bg_truecolor !== null) {
              data["ansi-truecolor-bg"] = jsonChunk.bg_truecolor;
              jsonChunk.bg_truecolor = null;
            }
          } else {
            styles.push("background-color:rgb(" + jsonChunk.bg + ")");
          }
        }

        if (jsonChunk.decoration) {
          if (use_classes) {
            classes.push("ansi-" + jsonChunk.decoration);
          } else if (jsonChunk.decoration === "bold") {
            styles.push("font-weight:bold");
          } else if (jsonChunk.decoration === "dim") {
            styles.push("opacity:0.5");
          } else if (jsonChunk.decoration === "italic") {
            styles.push("font-style:italic");
          } else if (jsonChunk.decoration === "reverse") {
            styles.push("filter:invert(100%)");
          } else if (jsonChunk.decoration === "hidden") {
            styles.push("visibility:hidden");
          } else if (jsonChunk.decoration === "strikethrough") {
            styles.push("text-decoration:line-through");
          } else {
            styles.push("text-decoration:" + jsonChunk.decoration);
          }
        }

        if (use_classes) {
          return "<span class=\"" + classes.join(" ") + "\"" + render_data(data) + ">" + jsonChunk.content + "</span>";
        } else {
          return "<span style=\"" + styles.join(";") + "\"" + render_data(data) + ">" + jsonChunk.content + "</span>";
        }
      }
    }]);

    return Anser;
  }();

  ;
  module.exports = Anser;
},430,[],"node_modules/anser/lib/index.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../StyleSheet/StyleSheet"));

  var _Text = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../Text/Text"));

  var _View = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../Components/View/View"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[5], "./LogBoxStyle"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorSection.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function LogBoxInspectorSection(props) {
    return React.createElement(_View.default, {
      style: styles.section,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 27,
        columnNumber: 5
      }
    }, React.createElement(_View.default, {
      style: styles.heading,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 28,
        columnNumber: 7
      }
    }, React.createElement(_Text.default, {
      style: styles.headingText,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 29,
        columnNumber: 9
      }
    }, props.heading), props.action), React.createElement(_View.default, {
      style: styles.body,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 32,
        columnNumber: 7
      }
    }, props.children));
  }

  var styles = _StyleSheet.default.create({
    section: {
      marginTop: 15
    },
    heading: {
      alignItems: 'center',
      flexDirection: 'row',
      paddingHorizontal: 12,
      marginBottom: 10
    },
    headingText: {
      color: LogBoxStyle.getTextColor(1),
      flex: 1,
      fontSize: 18,
      fontWeight: '600',
      includeFontPadding: false,
      lineHeight: 20
    },
    body: {
      paddingBottom: 10
    }
  });

  var _default = LogBoxInspectorSection;
  exports.default = _default;
},431,[49,3,241,338,236,382],"node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorSection.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _DeviceInfo = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Utilities/DeviceInfo"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/StyleSheet"));

  var _Text = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../Text/Text"));

  var _View = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../Components/View/View"));

  var _LogBoxButton = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "./LogBoxButton"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7], "./LogBoxStyle"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorFooter.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function LogBoxInspectorFooter(props) {
    if (props.level === 'syntax') {
      return React.createElement(_View.default, {
        style: styles.root,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 32,
          columnNumber: 7
        }
      }, React.createElement(_View.default, {
        style: styles.button,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 33,
          columnNumber: 9
        }
      }, React.createElement(_Text.default, {
        style: styles.syntaxErrorText,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 34,
          columnNumber: 11
        }
      }, "This error cannot be dismissed.")));
    }

    return React.createElement(_View.default, {
      style: styles.root,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 43,
        columnNumber: 5
      }
    }, React.createElement(FooterButton, {
      text: "Dismiss",
      onPress: props.onDismiss,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 44,
        columnNumber: 7
      }
    }), React.createElement(FooterButton, {
      text: "Minimize",
      onPress: props.onMinimize,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 45,
        columnNumber: 7
      }
    }));
  }

  function FooterButton(props) {
    return React.createElement(_LogBoxButton.default, {
      backgroundColor: {
        default: 'transparent',
        pressed: LogBoxStyle.getBackgroundDarkColor()
      },
      onPress: props.onPress,
      style: buttonStyles.safeArea,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 57,
        columnNumber: 5
      }
    }, React.createElement(_View.default, {
      style: buttonStyles.content,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 64,
        columnNumber: 7
      }
    }, React.createElement(_Text.default, {
      style: buttonStyles.label,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 65,
        columnNumber: 9
      }
    }, props.text)));
  }

  var buttonStyles = _StyleSheet.default.create({
    safeArea: {
      flex: 1,
      paddingBottom: _DeviceInfo.default.getConstants().isIPhoneX_deprecated ? 30 : 0
    },
    content: {
      alignItems: 'center',
      height: 48,
      justifyContent: 'center'
    },
    label: {
      color: LogBoxStyle.getTextColor(1),
      fontSize: 14,
      includeFontPadding: false,
      lineHeight: 20
    }
  });

  var styles = _StyleSheet.default.create({
    root: {
      backgroundColor: LogBoxStyle.getBackgroundColor(1),
      shadowColor: '#000',
      shadowOffset: {
        width: 0,
        height: -2
      },
      shadowRadius: 2,
      shadowOpacity: 0.5,
      flexDirection: 'row'
    },
    button: {
      flex: 1
    },
    syntaxErrorText: {
      textAlign: 'center',
      width: '100%',
      height: 48,
      fontSize: 14,
      lineHeight: 20,
      paddingTop: 20,
      paddingBottom: 50,
      fontStyle: 'italic',
      color: LogBoxStyle.getTextColor(0.6)
    }
  });

  var _default = LogBoxInspectorFooter;
  exports.default = _default;
},432,[49,3,433,241,338,236,381,382],"node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorFooter.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeDeviceInfo = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./NativeDeviceInfo"));

  module.exports = _NativeDeviceInfo.default;
},433,[3,233],"node_modules/react-native/Libraries/Utilities/DeviceInfo.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../StyleSheet/StyleSheet"));

  var _Text = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../Text/Text"));

  var _View = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../Components/View/View"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[5], "./LogBoxStyle"));

  var _LogBoxMessage = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "./LogBoxMessage"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorMessageHeader.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var SHOW_MORE_MESSAGE_LENGTH = 300;

  function LogBoxInspectorMessageHeader(props) {
    function renderShowMore() {
      if (props.message.content.length < SHOW_MORE_MESSAGE_LENGTH || !props.collapsed) {
        return null;
      }

      return React.createElement(_Text.default, {
        style: messageStyles.collapse,
        onPress: function onPress() {
          return props.onPress();
        },
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 41,
          columnNumber: 7
        }
      }, "... See More");
    }

    return React.createElement(_View.default, {
      style: messageStyles.body,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 48,
        columnNumber: 5
      }
    }, React.createElement(_View.default, {
      style: messageStyles.heading,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 49,
        columnNumber: 7
      }
    }, React.createElement(_Text.default, {
      style: [messageStyles.headingText, messageStyles[props.level]],
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 50,
        columnNumber: 9
      }
    }, props.title)), React.createElement(_Text.default, {
      style: messageStyles.bodyText,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 54,
        columnNumber: 7
      }
    }, React.createElement(_LogBoxMessage.default, {
      maxLength: props.collapsed ? SHOW_MORE_MESSAGE_LENGTH : Infinity,
      message: props.message,
      style: messageStyles.messageText,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 55,
        columnNumber: 9
      }
    }), renderShowMore()));
  }

  var messageStyles = _StyleSheet.default.create({
    body: {
      backgroundColor: LogBoxStyle.getBackgroundColor(1),
      shadowColor: '#000',
      shadowOffset: {
        width: 0,
        height: 2
      },
      shadowRadius: 2,
      shadowOpacity: 0.5,
      flex: 0
    },
    bodyText: {
      color: LogBoxStyle.getTextColor(1),
      fontSize: 14,
      includeFontPadding: false,
      lineHeight: 20,
      fontWeight: '500',
      paddingHorizontal: 12,
      paddingBottom: 10
    },
    heading: {
      alignItems: 'center',
      flexDirection: 'row',
      paddingHorizontal: 12,
      marginTop: 10,
      marginBottom: 5
    },
    headingText: {
      flex: 1,
      fontSize: 20,
      fontWeight: '600',
      includeFontPadding: false,
      lineHeight: 28
    },
    warn: {
      color: LogBoxStyle.getWarningColor(1)
    },
    error: {
      color: LogBoxStyle.getErrorColor(1)
    },
    fatal: {
      color: LogBoxStyle.getFatalColor(1)
    },
    syntax: {
      color: LogBoxStyle.getFatalColor(1)
    },
    messageText: {
      color: LogBoxStyle.getTextColor(0.6)
    },
    collapse: {
      color: LogBoxStyle.getTextColor(0.7),
      fontSize: 14,
      fontWeight: '300',
      lineHeight: 12
    },
    button: {
      paddingVertical: 5,
      paddingHorizontal: 10,
      borderRadius: 3
    }
  });

  var _default = LogBoxInspectorMessageHeader;
  exports.default = _default;
},434,[49,3,241,338,236,382,383],"node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorMessageHeader.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/slicedToArray"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2], "react"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/StyleSheet"));

  var _Platform = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../Utilities/Platform"));

  var _Text = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../Text/Text"));

  var _View = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "../../Components/View/View"));

  var _LogBoxButton = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "./LogBoxButton"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8], "./LogBoxStyle"));

  var _LogBoxInspectorSection = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[9], "./LogBoxInspectorSection"));

  var _openFileInEditor = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[10], "../../Core/Devtools/openFileInEditor"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorReactFrames.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var BEFORE_SLASH_RE = /^(.*)[\\/]/;

  function getPrettyFileName(path) {
    var fileName = path.replace(BEFORE_SLASH_RE, '');

    if (/^index\./.test(fileName)) {
      var match = path.match(BEFORE_SLASH_RE);

      if (match) {
        var pathBeforeSlash = match[1];

        if (pathBeforeSlash) {
          var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
          fileName = folderName + '/​' + fileName;
        }
      }
    }

    return fileName;
  }

  function LogBoxInspectorReactFrames(props) {
    var _this = this;

    var _React$useState = React.useState(true),
        _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
        collapsed = _React$useState2[0],
        setCollapsed = _React$useState2[1];

    if (props.log.componentStack == null || props.log.componentStack.length < 1) {
      return null;
    }

    function getStackList() {
      if (collapsed) {
        return props.log.componentStack.slice(0, 3);
      } else {
        return props.log.componentStack;
      }
    }

    function getCollapseMessage() {
      if (props.log.componentStack.length <= 3) {
        return;
      }

      var count = props.log.componentStack.length - 3;

      if (collapsed) {
        return "See " + count + " more components";
      } else {
        return "Collapse " + count + " components";
      }
    }

    return React.createElement(_LogBoxInspectorSection.default, {
      heading: "Component Stack",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 80,
        columnNumber: 5
      }
    }, getStackList().map(function (frame, index) {
      return React.createElement(_View.default, {
        key: index,
        style: componentStyles.frameContainer,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 82,
          columnNumber: 9
        }
      }, React.createElement(_LogBoxButton.default, {
        backgroundColor: {
          default: 'transparent',
          pressed: LogBoxStyle.getBackgroundColor(1)
        },
        onPress: frame.fileName.startsWith('/') ? function () {
          var _frame$location$row, _frame$location;

          return (0, _openFileInEditor.default)(frame.fileName, (_frame$location$row = (_frame$location = frame.location) == null ? void 0 : _frame$location.row) != null ? _frame$location$row : 1);
        } : null,
        style: componentStyles.frame,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 86,
          columnNumber: 11
        }
      }, React.createElement(_View.default, {
        style: componentStyles.component,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 101,
          columnNumber: 13
        }
      }, React.createElement(_Text.default, {
        style: componentStyles.frameName,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 102,
          columnNumber: 15
        }
      }, React.createElement(_Text.default, {
        style: componentStyles.bracket,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 103,
          columnNumber: 17
        }
      }, '<'), frame.content, React.createElement(_Text.default, {
        style: componentStyles.bracket,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 105,
          columnNumber: 17
        }
      }, ' />'))), React.createElement(_Text.default, {
        style: componentStyles.frameLocation,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 108,
          columnNumber: 13
        }
      }, getPrettyFileName(frame.fileName), frame.location ? ":" + frame.location.row : '')));
    }), React.createElement(_View.default, {
      style: componentStyles.collapseContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 115,
        columnNumber: 7
      }
    }, React.createElement(_LogBoxButton.default, {
      backgroundColor: {
        default: 'transparent',
        pressed: LogBoxStyle.getBackgroundColor(1)
      },
      onPress: function onPress() {
        return setCollapsed(!collapsed);
      },
      style: componentStyles.collapseButton,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 116,
        columnNumber: 9
      }
    }, React.createElement(_Text.default, {
      style: componentStyles.collapse,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 123,
        columnNumber: 11
      }
    }, getCollapseMessage()))));
  }

  var componentStyles = _StyleSheet.default.create({
    collapseContainer: {
      marginLeft: 15,
      flexDirection: 'row'
    },
    collapseButton: {
      borderRadius: 5
    },
    collapse: {
      color: LogBoxStyle.getTextColor(0.7),
      fontSize: 12,
      fontWeight: '300',
      lineHeight: 20,
      marginTop: 0,
      paddingVertical: 5,
      paddingHorizontal: 10
    },
    frameContainer: {
      flexDirection: 'row',
      paddingHorizontal: 15
    },
    frame: {
      flex: 1,
      paddingVertical: 4,
      paddingHorizontal: 10,
      borderRadius: 5
    },
    component: {
      flexDirection: 'row',
      paddingRight: 10
    },
    frameName: {
      fontFamily: _Platform.default.select({
        android: 'monospace',
        ios: 'Menlo'
      }),
      color: LogBoxStyle.getTextColor(1),
      fontSize: 14,
      includeFontPadding: false,
      lineHeight: 18
    },
    bracket: {
      fontFamily: _Platform.default.select({
        android: 'monospace',
        ios: 'Menlo'
      }),
      color: LogBoxStyle.getTextColor(0.4),
      fontSize: 14,
      fontWeight: '500',
      includeFontPadding: false,
      lineHeight: 18
    },
    frameLocation: {
      color: LogBoxStyle.getTextColor(0.7),
      fontSize: 12,
      fontWeight: '300',
      includeFontPadding: false,
      lineHeight: 16,
      paddingLeft: 10
    }
  });

  var _default = LogBoxInspectorReactFrames;
  exports.default = _default;
},435,[3,8,49,241,80,338,236,381,382,431,370],"node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorReactFrames.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  exports.getCollapseMessage = getCollapseMessage;

  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/slicedToArray"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2], "react"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/StyleSheet"));

  var _Text = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../Text/Text"));

  var _View = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../Components/View/View"));

  var _LogBoxButton = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "./LogBoxButton"));

  var _LogBoxInspectorSourceMapStatus = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "./LogBoxInspectorSourceMapStatus"));

  var _LogBoxInspectorStackFrame = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[8], "./LogBoxInspectorStackFrame"));

  var _LogBoxInspectorSection = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[9], "./LogBoxInspectorSection"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10], "./LogBoxStyle"));

  var _openFileInEditor = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[11], "../../Core/Devtools/openFileInEditor"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorStackFrames.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function getCollapseMessage(stackFrames, collapsed) {
    if (stackFrames.length === 0) {
      return 'No frames to show';
    }

    var collapsedCount = stackFrames.reduce(function (count, _ref) {
      var collapse = _ref.collapse;

      if (collapse === true) {
        return count + 1;
      }

      return count;
    }, 0);

    if (collapsedCount === 0) {
      return 'Showing all frames';
    }

    var framePlural = "frame" + (collapsedCount > 1 ? 's' : '');

    if (collapsedCount === stackFrames.length) {
      return collapsed ? "See" + (collapsedCount > 1 ? ' all ' : ' ') + collapsedCount + " collapsed " + framePlural : "Collapse" + (collapsedCount > 1 ? ' all ' : ' ') + collapsedCount + " " + framePlural;
    } else {
      return collapsed ? "See " + collapsedCount + " more " + framePlural : "Collapse " + collapsedCount + " " + framePlural;
    }
  }

  function LogBoxInspectorStackFrames(props) {
    var _React$useState = React.useState(true),
        _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
        collapsed = _React$useState2[0],
        setCollapsed = _React$useState2[1];

    function getStackList() {
      if (collapsed === true) {
        return props.log.getAvailableStack().filter(function (_ref2) {
          var collapse = _ref2.collapse;
          return !collapse;
        });
      } else {
        return props.log.getAvailableStack();
      }
    }

    if (props.log.getAvailableStack().length === 0) {
      return null;
    }

    return React.createElement(_LogBoxInspectorSection.default, {
      heading: "Call Stack",
      action: React.createElement(_LogBoxInspectorSourceMapStatus.default, {
        onPress: props.log.symbolicated.status === 'FAILED' ? props.onRetry : null,
        status: props.log.symbolicated.status,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 86,
          columnNumber: 9
        }
      }),
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 83,
        columnNumber: 5
      }
    }, props.log.symbolicated.status !== 'COMPLETE' && React.createElement(_View.default, {
      style: stackStyles.hintBox,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 94,
        columnNumber: 9
      }
    }, React.createElement(_Text.default, {
      style: stackStyles.hintText,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 95,
        columnNumber: 11
      }
    }, "This call stack is not symbolicated. Some features are unavailable such as viewing the function name or tapping to open files.")), React.createElement(StackFrameList, {
      list: getStackList(),
      status: props.log.symbolicated.status,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 101,
        columnNumber: 7
      }
    }), React.createElement(StackFrameFooter, {
      onPress: function onPress() {
        return setCollapsed(!collapsed);
      },
      message: getCollapseMessage(props.log.getAvailableStack(), collapsed),
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 105,
        columnNumber: 7
      }
    }));
  }

  function StackFrameList(props) {
    var _this = this;

    return React.createElement(React.Fragment, null, props.list.map(function (frame, index) {
      var file = frame.file,
          lineNumber = frame.lineNumber;
      return React.createElement(_LogBoxInspectorStackFrame.default, {
        key: index,
        frame: frame,
        onPress: props.status === 'COMPLETE' && file != null && lineNumber != null ? function () {
          return (0, _openFileInEditor.default)(file, lineNumber);
        } : null,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 119,
          columnNumber: 11
        }
      });
    }));
  }

  function StackFrameFooter(props) {
    return React.createElement(_View.default, {
      style: stackStyles.collapseContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 136,
        columnNumber: 5
      }
    }, React.createElement(_LogBoxButton.default, {
      backgroundColor: {
        default: 'transparent',
        pressed: LogBoxStyle.getBackgroundColor(1)
      },
      onPress: props.onPress,
      style: stackStyles.collapseButton,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 137,
        columnNumber: 7
      }
    }, React.createElement(_Text.default, {
      style: stackStyles.collapse,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 144,
        columnNumber: 9
      }
    }, props.message)));
  }

  var stackStyles = _StyleSheet.default.create({
    section: {
      marginTop: 15
    },
    heading: {
      alignItems: 'center',
      flexDirection: 'row',
      paddingHorizontal: 12,
      marginBottom: 10
    },
    headingText: {
      color: LogBoxStyle.getTextColor(1),
      flex: 1,
      fontSize: 20,
      fontWeight: '600',
      includeFontPadding: false,
      lineHeight: 20
    },
    body: {
      paddingBottom: 10
    },
    bodyText: {
      color: LogBoxStyle.getTextColor(1),
      fontSize: 14,
      includeFontPadding: false,
      lineHeight: 18,
      fontWeight: '500',
      paddingHorizontal: 27
    },
    hintText: {
      color: LogBoxStyle.getTextColor(0.7),
      fontSize: 13,
      includeFontPadding: false,
      lineHeight: 18,
      fontWeight: '400',
      marginHorizontal: 10
    },
    hintBox: {
      backgroundColor: LogBoxStyle.getBackgroundColor(),
      marginHorizontal: 10,
      paddingHorizontal: 5,
      paddingVertical: 10,
      borderRadius: 5,
      marginBottom: 5
    },
    collapseContainer: {
      marginLeft: 15,
      flexDirection: 'row'
    },
    collapseButton: {
      borderRadius: 5
    },
    collapse: {
      color: LogBoxStyle.getTextColor(0.7),
      fontSize: 12,
      fontWeight: '300',
      lineHeight: 20,
      marginTop: 0,
      paddingHorizontal: 10,
      paddingVertical: 5
    }
  });

  var _default = LogBoxInspectorStackFrames;
  exports.default = _default;
},436,[3,8,49,241,338,236,381,437,440,431,382,370],"node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorStackFrames.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/slicedToArray"));

  var _Animated = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Animated/src/Animated"));

  var _Easing = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../Animated/src/Easing"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4], "react"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../StyleSheet/StyleSheet"));

  var _Text = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "../../Text/Text"));

  var _LogBoxButton = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "./LogBoxButton"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8], "./LogBoxStyle"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorSourceMapStatus.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function LogBoxInspectorSourceMapStatus(props) {
    var _React$useState = React.useState({
      animation: null,
      rotate: null
    }),
        _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
        state = _React$useState2[0],
        setState = _React$useState2[1];

    React.useEffect(function () {
      if (props.status === 'PENDING') {
        if (state.animation == null) {
          var animated = new _Animated.default.Value(0);

          var animation = _Animated.default.loop(_Animated.default.timing(animated, {
            duration: 2000,
            easing: _Easing.default.linear,
            toValue: 1,
            useNativeDriver: true
          }));

          setState({
            animation: animation,
            rotate: animated.interpolate({
              inputRange: [0, 1],
              outputRange: ['0deg', '360deg']
            })
          });
          animation.start();
        }
      } else {
        if (state.animation != null) {
          state.animation.stop();
          setState({
            animation: null,
            rotate: null
          });
        }
      }

      return function () {
        if (state.animation != null) {
          state.animation.stop();
        }
      };
    }, [props.status, state.animation]);
    var image;
    var color;

    switch (props.status) {
      case 'FAILED':
        image = _$$_REQUIRE(_dependencyMap[9], "./LogBoxImages/alert-triangle.png");
        color = LogBoxStyle.getErrorColor(1);
        break;

      case 'PENDING':
        image = _$$_REQUIRE(_dependencyMap[10], "./LogBoxImages/loader.png");
        color = LogBoxStyle.getWarningColor(1);
        break;
    }

    if (props.status === 'COMPLETE' || image == null) {
      return null;
    }

    return React.createElement(_LogBoxButton.default, {
      backgroundColor: {
        default: 'transparent',
        pressed: LogBoxStyle.getBackgroundColor(1)
      },
      hitSlop: {
        bottom: 8,
        left: 8,
        right: 8,
        top: 8
      },
      onPress: props.onPress,
      style: styles.root,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 93,
        columnNumber: 5
      }
    }, React.createElement(_Animated.default.Image, {
      source: image,
      style: [styles.image, {
        tintColor: color
      }, state.rotate == null || props.status !== 'PENDING' ? null : {
        transform: [{
          rotate: state.rotate
        }]
      }],
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 101,
        columnNumber: 7
      }
    }), React.createElement(_Text.default, {
      style: [styles.text, {
        color: color
      }],
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 111,
        columnNumber: 7
      }
    }, "Source Map"));
  }

  var styles = _StyleSheet.default.create({
    root: {
      alignItems: 'center',
      borderRadius: 12,
      flexDirection: 'row',
      height: 24,
      paddingHorizontal: 8
    },
    image: {
      height: 14,
      width: 16,
      marginEnd: 4,
      tintColor: LogBoxStyle.getTextColor(0.4)
    },
    text: {
      fontSize: 12,
      includeFontPadding: false,
      lineHeight: 16
    }
  });

  var _default = LogBoxInspectorSourceMapStatus;
  exports.default = _default;
},437,[3,8,261,284,49,241,338,381,382,438,439],"node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorSourceMapStatus.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native/Libraries/LogBox/UI/LogBoxImages",
    "width": 48,
    "height": 42,
    "scales": [1],
    "hash": "ae0fcc2b007ded72c6f985671da3338e",
    "name": "alert-triangle",
    "type": "png"
  });
},438,[229],"node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/alert-triangle.png");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native/Libraries/LogBox/UI/LogBoxImages",
    "width": 44,
    "height": 44,
    "scales": [1],
    "hash": "46d1173c53d96832e868151c1648ea42",
    "name": "loader",
    "type": "png"
  });
},439,[229],"node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/loader.png");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../StyleSheet/StyleSheet"));

  var _Text = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../Text/Text"));

  var _View = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../Components/View/View"));

  var _Platform = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../Utilities/Platform"));

  var _LogBoxButton = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "./LogBoxButton"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7], "./LogBoxStyle"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorStackFrame.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function LogBoxInspectorStackFrame(props) {
    var frame = props.frame,
        onPress = props.onPress;
    var column = frame.column != null && parseInt(frame.column, 10);
    var location = getFileName(frame.file) + (frame.lineNumber != null ? ':' + frame.lineNumber + (column && !isNaN(column) ? ':' + (column + 1) : '') : '');
    return React.createElement(_View.default, {
      style: styles.frameContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 40,
        columnNumber: 5
      }
    }, React.createElement(_LogBoxButton.default, {
      backgroundColor: {
        default: 'transparent',
        pressed: onPress ? LogBoxStyle.getBackgroundColor(1) : 'transparent'
      },
      onPress: onPress,
      style: styles.frame,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 41,
        columnNumber: 7
      }
    }, React.createElement(_Text.default, {
      style: [styles.name, frame.collapse === true && styles.dim],
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 48,
        columnNumber: 9
      }
    }, frame.methodName), React.createElement(_Text.default, {
      ellipsizeMode: "middle",
      numberOfLines: 1,
      style: [styles.location, frame.collapse === true && styles.dim],
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 51,
        columnNumber: 9
      }
    }, location)));
  }

  function getFileName(file) {
    if (file == null) {
      return '<unknown>';
    }

    var queryIndex = file.indexOf('?');
    return file.substring(file.lastIndexOf('/') + 1, queryIndex === -1 ? file.length : queryIndex);
  }

  var styles = _StyleSheet.default.create({
    frameContainer: {
      flexDirection: 'row',
      paddingHorizontal: 15
    },
    frame: {
      flex: 1,
      paddingVertical: 4,
      paddingHorizontal: 10,
      borderRadius: 5
    },
    lineLocation: {
      flexDirection: 'row'
    },
    name: {
      color: LogBoxStyle.getTextColor(1),
      fontSize: 14,
      includeFontPadding: false,
      lineHeight: 18,
      fontWeight: '400',
      fontFamily: _Platform.default.select({
        android: 'monospace',
        ios: 'Menlo'
      })
    },
    location: {
      color: LogBoxStyle.getTextColor(0.8),
      fontSize: 12,
      fontWeight: '300',
      includeFontPadding: false,
      lineHeight: 16,
      paddingLeft: 10
    },
    dim: {
      color: LogBoxStyle.getTextColor(0.4),
      fontWeight: '300'
    },
    line: {
      color: LogBoxStyle.getTextColor(0.8),
      fontSize: 12,
      fontWeight: '300',
      includeFontPadding: false,
      lineHeight: 16
    }
  });

  var _default = LogBoxInspectorStackFrame;
  exports.default = _default;
},440,[49,3,241,338,236,80,381,382],"node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorStackFrame.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _Image = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../Image/Image"));

  var _Platform = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Utilities/Platform"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3], "react"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../StyleSheet/StyleSheet"));

  var _Text = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../Text/Text"));

  var _View = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "../../Components/View/View"));

  var _StatusBar = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "../../Components/StatusBar/StatusBar"));

  var _LogBoxButton = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[8], "./LogBoxButton"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9], "./LogBoxStyle"));

  var _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorHeader.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function LogBoxInspectorHeader(props) {
    if (props.level === 'syntax') {
      return React.createElement(_View.default, {
        style: [styles.safeArea, styles[props.level]],
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 33,
          columnNumber: 7
        }
      }, React.createElement(_View.default, {
        style: styles.header,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 34,
          columnNumber: 9
        }
      }, React.createElement(_View.default, {
        style: styles.title,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 35,
          columnNumber: 11
        }
      }, React.createElement(_Text.default, {
        style: styles.titleText,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 36,
          columnNumber: 13
        }
      }, "Failed to compile"))));
    }

    var prevIndex = props.selectedIndex - 1 < 0 ? props.total - 1 : props.selectedIndex - 1;
    var nextIndex = props.selectedIndex + 1 > props.total - 1 ? 0 : props.selectedIndex + 1;
    var titleText = "Log " + (props.selectedIndex + 1) + " of " + props.total;
    return React.createElement(_View.default, {
      style: [styles.safeArea, styles[props.level]],
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 51,
        columnNumber: 5
      }
    }, React.createElement(_View.default, {
      style: styles.header,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 52,
        columnNumber: 7
      }
    }, React.createElement(LogBoxInspectorHeaderButton, {
      disabled: props.total <= 1,
      level: props.level,
      image: _$$_REQUIRE(_dependencyMap[10], "./LogBoxImages/chevron-left.png"),
      onPress: function onPress() {
        return props.onSelectIndex(prevIndex);
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 53,
        columnNumber: 9
      }
    }), React.createElement(_View.default, {
      style: styles.title,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 59,
        columnNumber: 9
      }
    }, React.createElement(_Text.default, {
      style: styles.titleText,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 60,
        columnNumber: 11
      }
    }, titleText)), React.createElement(LogBoxInspectorHeaderButton, {
      disabled: props.total <= 1,
      level: props.level,
      image: _$$_REQUIRE(_dependencyMap[11], "./LogBoxImages/chevron-right.png"),
      onPress: function onPress() {
        return props.onSelectIndex(nextIndex);
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 62,
        columnNumber: 9
      }
    })));
  }

  var backgroundForLevel = function backgroundForLevel(level) {
    return {
      warn: {
        default: 'transparent',
        pressed: LogBoxStyle.getWarningDarkColor()
      },
      error: {
        default: 'transparent',
        pressed: LogBoxStyle.getErrorDarkColor()
      },
      fatal: {
        default: 'transparent',
        pressed: LogBoxStyle.getFatalDarkColor()
      },
      syntax: {
        default: 'transparent',
        pressed: LogBoxStyle.getFatalDarkColor()
      }
    }[level];
  };

  function LogBoxInspectorHeaderButton(props) {
    return React.createElement(_LogBoxButton.default, {
      backgroundColor: backgroundForLevel(props.level),
      onPress: props.disabled ? null : props.onPress,
      style: headerStyles.button,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 102,
        columnNumber: 5
      }
    }, props.disabled ? null : React.createElement(_Image.default, {
      source: props.image,
      style: headerStyles.buttonImage,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 107,
        columnNumber: 9
      }
    }));
  }

  var headerStyles = _StyleSheet.default.create({
    button: {
      alignItems: 'center',
      aspectRatio: 1,
      justifyContent: 'center',
      marginTop: 5,
      marginRight: 6,
      marginLeft: 6,
      marginBottom: -8,
      borderRadius: 3
    },
    buttonImage: {
      height: 14,
      width: 8,
      tintColor: LogBoxStyle.getTextColor()
    }
  });

  var styles = _StyleSheet.default.create({
    syntax: {
      backgroundColor: LogBoxStyle.getFatalColor()
    },
    fatal: {
      backgroundColor: LogBoxStyle.getFatalColor()
    },
    warn: {
      backgroundColor: LogBoxStyle.getWarningColor()
    },
    error: {
      backgroundColor: LogBoxStyle.getErrorColor()
    },
    header: {
      flexDirection: 'row',
      height: _Platform.default.select({
        android: 48,
        ios: 44
      })
    },
    title: {
      alignItems: 'center',
      flex: 1,
      justifyContent: 'center'
    },
    titleText: {
      color: LogBoxStyle.getTextColor(),
      fontSize: 16,
      fontWeight: '600',
      includeFontPadding: false,
      lineHeight: 20
    },
    safeArea: {
      paddingTop: _Platform.default.OS === 'android' ? _StatusBar.default.currentHeight : 40
    }
  });

  var _default = LogBoxInspectorHeader;
  exports.default = _default;
},441,[3,322,80,49,241,338,236,348,381,382,442,443],"node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorHeader.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native/Libraries/LogBox/UI/LogBoxImages",
    "width": 16,
    "height": 28,
    "scales": [1],
    "hash": "34d53ae6f3c2303163010aef6efe27ba",
    "name": "chevron-left",
    "type": "png"
  });
},442,[229],"node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/chevron-left.png");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native/Libraries/LogBox/UI/LogBoxImages",
    "width": 16,
    "height": 28,
    "scales": [1],
    "hash": "a610d434605f8a50094a4029a0ea5ff6",
    "name": "chevron-right",
    "type": "png"
  });
},443,[229],"node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/chevron-right.png");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/slicedToArray"));

  var _NativeAsyncStorage = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "./NativeAsyncStorage"));

  var _invariant = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "invariant"));

  var RCTAsyncStorage = _NativeAsyncStorage.default;
  var AsyncStorage = {
    _getRequests: [],
    _getKeys: [],
    _immediate: null,
    getItem: function getItem(key, callback) {
      (0, _invariant.default)(RCTAsyncStorage, 'RCTAsyncStorage not available');
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiGet([key], function (errors, result) {
          var value = result && result[0] && result[0][1] ? result[0][1] : null;
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0], value);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(value);
          }
        });
      });
    },
    setItem: function setItem(key, value, callback) {
      (0, _invariant.default)(RCTAsyncStorage, 'RCTAsyncStorage not available');
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiSet([[key, value]], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    removeItem: function removeItem(key, callback) {
      (0, _invariant.default)(RCTAsyncStorage, 'RCTAsyncStorage not available');
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiRemove([key], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    mergeItem: function mergeItem(key, value, callback) {
      (0, _invariant.default)(RCTAsyncStorage, 'RCTAsyncStorage not available');
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiMerge([[key, value]], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    clear: function clear(callback) {
      (0, _invariant.default)(RCTAsyncStorage, 'RCTAsyncStorage not available');
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.clear(function (error) {
          callback && callback(convertError(error));

          if (error && convertError(error)) {
            reject(convertError(error));
          } else {
            resolve(null);
          }
        });
      });
    },
    getAllKeys: function getAllKeys(callback) {
      (0, _invariant.default)(RCTAsyncStorage, 'RCTAsyncStorage not available');
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.getAllKeys(function (error, keys) {
          callback && callback(convertError(error), keys);

          if (error) {
            reject(convertError(error));
          } else {
            resolve(keys);
          }
        });
      });
    },
    flushGetRequests: function flushGetRequests() {
      var getRequests = this._getRequests;
      var getKeys = this._getKeys;
      this._getRequests = [];
      this._getKeys = [];
      (0, _invariant.default)(RCTAsyncStorage, 'RCTAsyncStorage not available');
      RCTAsyncStorage.multiGet(getKeys, function (errors, result) {
        var map = {};
        result && result.forEach(function (_ref) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
              key = _ref2[0],
              value = _ref2[1];

          map[key] = value;
          return value;
        });
        var reqLength = getRequests.length;

        for (var i = 0; i < reqLength; i++) {
          var request = getRequests[i];
          var requestKeys = request.keys;
          var requestResult = requestKeys.map(function (key) {
            return [key, map[key]];
          });
          request.callback && request.callback(null, requestResult);
          request.resolve && request.resolve(requestResult);
        }
      });
    },
    multiGet: function multiGet(keys, callback) {
      var _this = this;

      if (!this._immediate) {
        this._immediate = setImmediate(function () {
          _this._immediate = null;

          _this.flushGetRequests();
        });
      }

      var getRequest = {
        keys: keys,
        callback: callback,
        keyIndex: this._getKeys.length,
        resolve: null,
        reject: null
      };
      var promiseResult = new Promise(function (resolve, reject) {
        getRequest.resolve = resolve;
        getRequest.reject = reject;
      });

      this._getRequests.push(getRequest);

      keys.forEach(function (key) {
        if (_this._getKeys.indexOf(key) === -1) {
          _this._getKeys.push(key);
        }
      });
      return promiseResult;
    },
    multiSet: function multiSet(keyValuePairs, callback) {
      (0, _invariant.default)(RCTAsyncStorage, 'RCTAsyncStorage not available');
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiSet(keyValuePairs, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    },
    multiRemove: function multiRemove(keys, callback) {
      (0, _invariant.default)(RCTAsyncStorage, 'RCTAsyncStorage not available');
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiRemove(keys, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    },
    multiMerge: function multiMerge(keyValuePairs, callback) {
      (0, _invariant.default)(RCTAsyncStorage, 'RCTAsyncStorage not available');
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiMerge(keyValuePairs, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    }
  };

  if (!RCTAsyncStorage.multiMerge) {
    delete AsyncStorage.mergeItem;
    delete AsyncStorage.multiMerge;
  }

  function convertErrors(errs) {
    if (!errs) {
      return null;
    }

    return (Array.isArray(errs) ? errs : [errs]).map(function (e) {
      return convertError(e);
    });
  }

  function convertError(error) {
    if (!error) {
      return null;
    }

    var out = new Error(error.message);
    out.key = error.key;
    return out;
  }

  module.exports = AsyncStorage;
},444,[3,8,445,6],"node_modules/react-native/Libraries/Storage/AsyncStorage.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('AsyncSQLiteDBStorage') || TurboModuleRegistry.get('AsyncLocalStorage');

  exports.default = _default;
},445,[5],"node_modules/react-native/Libraries/Storage/NativeAsyncStorage.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeClipboard = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./NativeClipboard"));

  module.exports = {
    getString: function getString() {
      return _NativeClipboard.default.getString();
    },
    setString: function setString(content) {
      _NativeClipboard.default.setString(content);
    }
  };
},446,[3,447],"node_modules/react-native/Libraries/Components/Clipboard/Clipboard.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.getEnforcing('Clipboard');

  exports.default = _default;
},447,[5],"node_modules/react-native/Libraries/Components/Clipboard/NativeClipboard.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _asyncToGenerator2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/asyncToGenerator"));

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/createClass"));

  var _NativeDatePickerAndroid = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "./NativeDatePickerAndroid"));

  function _toMillis(options, key) {
    var dateVal = options[key];

    if (typeof dateVal === 'object' && typeof dateVal.getMonth === 'function') {
      options[key] = dateVal.getTime();
    }
  }

  var DatePickerAndroid = function () {
    function DatePickerAndroid() {
      (0, _classCallCheck2.default)(this, DatePickerAndroid);
    }

    (0, _createClass2.default)(DatePickerAndroid, null, [{
      key: "open",
      value: function () {
        var _open = (0, _asyncToGenerator2.default)(function* (options) {
          var optionsMs = options;

          if (optionsMs != null) {
            _toMillis(optionsMs, 'date');

            _toMillis(optionsMs, 'minDate');

            _toMillis(optionsMs, 'maxDate');
          }

          return _NativeDatePickerAndroid.default.open(options);
        });

        function open(_x) {
          return _open.apply(this, arguments);
        }

        return open;
      }()
    }]);
    return DatePickerAndroid;
  }();

  DatePickerAndroid.dateSetAction = 'dateSetAction';
  DatePickerAndroid.dismissedAction = 'dismissedAction';
  module.exports = DatePickerAndroid;
},448,[3,68,16,17,449],"node_modules/react-native/Libraries/Components/DatePickerAndroid/DatePickerAndroid.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.getEnforcing('DatePickerAndroid');

  exports.default = _default;
},449,[5],"node_modules/react-native/Libraries/Components/DatePickerAndroid/NativeDatePickerAndroid.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeImagePickerIOS = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./NativeImagePickerIOS"));

  var _invariant = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "invariant"));

  var ImagePickerIOS = {
    canRecordVideos: function canRecordVideos(callback) {
      (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');
      return _NativeImagePickerIOS.default.canRecordVideos(callback);
    },
    canUseCamera: function canUseCamera(callback) {
      (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');
      return _NativeImagePickerIOS.default.canUseCamera(callback);
    },
    openCameraDialog: function openCameraDialog(config, successCallback, cancelCallback) {
      (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');
      var newConfig = {
        videoMode: true,
        unmirrorFrontFacingCamera: false
      };

      if (config.videoMode != null) {
        newConfig.videoMode = config.videoMode;
      }

      if (config.unmirrorFrontFacingCamera != null) {
        newConfig.unmirrorFrontFacingCamera = config.unmirrorFrontFacingCamera;
      }

      return _NativeImagePickerIOS.default.openCameraDialog(newConfig, successCallback, cancelCallback);
    },
    openSelectDialog: function openSelectDialog(config, successCallback, cancelCallback) {
      (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');
      var newConfig = {
        showImages: true,
        showVideos: false
      };

      if (config.showImages != null) {
        newConfig.showImages = config.showImages;
      }

      if (config.showVideos != null) {
        newConfig.showVideos = config.showVideos;
      }

      return _NativeImagePickerIOS.default.openSelectDialog(newConfig, successCallback, cancelCallback);
    },
    removePendingVideo: function removePendingVideo(url) {
      (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');

      _NativeImagePickerIOS.default.removePendingVideo(url);
    },
    clearAllPendingVideos: function clearAllPendingVideos() {
      (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');

      _NativeImagePickerIOS.default.clearAllPendingVideos();
    }
  };
  module.exports = ImagePickerIOS;
},450,[3,451,6],"node_modules/react-native/Libraries/Image/ImagePickerIOS.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('ImagePickerIOS');

  exports.default = _default;
},451,[5],"node_modules/react-native/Libraries/Image/NativeImagePickerIOS.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/getPrototypeOf"));

  var _NativeLinking = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "./NativeLinking"));

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var Linking = function (_NativeEventEmitter) {
    (0, _inherits2.default)(Linking, _NativeEventEmitter);

    var _super = _createSuper(Linking);

    function Linking() {
      (0, _classCallCheck2.default)(this, Linking);
      return _super.call(this, _NativeLinking.default);
    }

    (0, _createClass2.default)(Linking, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        this.addListener(type, handler);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        this.removeListener(type, handler);
      }
    }, {
      key: "openURL",
      value: function openURL(url) {
        this._validateURL(url);

        return _NativeLinking.default.openURL(url);
      }
    }, {
      key: "canOpenURL",
      value: function canOpenURL(url) {
        this._validateURL(url);

        return _NativeLinking.default.canOpenURL(url);
      }
    }, {
      key: "openSettings",
      value: function openSettings() {
        return _NativeLinking.default.openSettings();
      }
    }, {
      key: "getInitialURL",
      value: function getInitialURL() {
        return "android" === 'android' ? _$$_REQUIRE(_dependencyMap[7], "../Interaction/InteractionManager").runAfterInteractions().then(function () {
          return _NativeLinking.default.getInitialURL();
        }) : _NativeLinking.default.getInitialURL();
      }
    }, {
      key: "sendIntent",
      value: function sendIntent(action, extras) {
        if ("android" === 'android') {
          return _NativeLinking.default.sendIntent(action, extras);
        }

        return new Promise(function (resolve, reject) {
          return reject(new Error('Unsupported'));
        });
      }
    }, {
      key: "_validateURL",
      value: function _validateURL(url) {
        _$$_REQUIRE(_dependencyMap[8], "invariant")(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);

        _$$_REQUIRE(_dependencyMap[8], "invariant")(url, 'Invalid URL: cannot be empty');
      }
    }]);
    return Linking;
  }(_$$_REQUIRE(_dependencyMap[9], "../EventEmitter/NativeEventEmitter"));

  module.exports = new Linking();
},452,[3,16,17,35,32,31,453,269,6,126],"node_modules/react-native/Libraries/Linking/Linking.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  var _Platform = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../Utilities/Platform"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = _Platform.default.OS === 'android' ? TurboModuleRegistry.getEnforcing('IntentAndroid') : TurboModuleRegistry.getEnforcing('LinkingManager');

  exports.default = _default;
},453,[5,3,80],"node_modules/react-native/Libraries/Linking/NativeLinking.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PanResponder = {
    _initializeGestureState: function _initializeGestureState(gestureState) {
      gestureState.moveX = 0;
      gestureState.moveY = 0;
      gestureState.x0 = 0;
      gestureState.y0 = 0;
      gestureState.dx = 0;
      gestureState.dy = 0;
      gestureState.vx = 0;
      gestureState.vy = 0;
      gestureState.numberActiveTouches = 0;
      gestureState._accountsForMovesUpTo = 0;
    },
    _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {
      gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
      gestureState.moveX = _$$_REQUIRE(_dependencyMap[0], "./TouchHistoryMath").currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      gestureState.moveY = _$$_REQUIRE(_dependencyMap[0], "./TouchHistoryMath").currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      var movedAfter = gestureState._accountsForMovesUpTo;

      var prevX = _$$_REQUIRE(_dependencyMap[0], "./TouchHistoryMath").previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);

      var x = _$$_REQUIRE(_dependencyMap[0], "./TouchHistoryMath").currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);

      var prevY = _$$_REQUIRE(_dependencyMap[0], "./TouchHistoryMath").previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);

      var y = _$$_REQUIRE(_dependencyMap[0], "./TouchHistoryMath").currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);

      var nextDX = gestureState.dx + (x - prevX);
      var nextDY = gestureState.dy + (y - prevY);
      var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
      gestureState.vx = (nextDX - gestureState.dx) / dt;
      gestureState.vy = (nextDY - gestureState.dy) / dt;
      gestureState.dx = nextDX;
      gestureState.dy = nextDY;
      gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
    },
    create: function create(config) {
      var interactionState = {
        handle: null
      };
      var gestureState = {
        stateID: Math.random(),
        moveX: 0,
        moveY: 0,
        x0: 0,
        y0: 0,
        dx: 0,
        dy: 0,
        vx: 0,
        vy: 0,
        numberActiveTouches: 0,
        _accountsForMovesUpTo: 0
      };
      var panHandlers = {
        onStartShouldSetResponder: function onStartShouldSetResponder(event) {
          return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);
        },
        onMoveShouldSetResponder: function onMoveShouldSetResponder(event) {
          return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);
        },
        onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(event) {
          if (event.nativeEvent.touches.length === 1) {
            PanResponder._initializeGestureState(gestureState);
          }

          gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;
          return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;
        },
        onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(event) {
          var touchHistory = event.touchHistory;

          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return false;
          }

          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);

          return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;
        },
        onResponderGrant: function onResponderGrant(event) {
          if (!interactionState.handle) {
            interactionState.handle = _$$_REQUIRE(_dependencyMap[1], "./InteractionManager").createInteractionHandle();
          }

          gestureState.x0 = _$$_REQUIRE(_dependencyMap[0], "./TouchHistoryMath").currentCentroidX(event.touchHistory);
          gestureState.y0 = _$$_REQUIRE(_dependencyMap[0], "./TouchHistoryMath").currentCentroidY(event.touchHistory);
          gestureState.dx = 0;
          gestureState.dy = 0;

          if (config.onPanResponderGrant) {
            config.onPanResponderGrant(event, gestureState);
          }

          return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);
        },
        onResponderReject: function onResponderReject(event) {
          clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);
        },
        onResponderRelease: function onResponderRelease(event) {
          clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);

          PanResponder._initializeGestureState(gestureState);
        },
        onResponderStart: function onResponderStart(event) {
          var touchHistory = event.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;

          if (config.onPanResponderStart) {
            config.onPanResponderStart(event, gestureState);
          }
        },
        onResponderMove: function onResponderMove(event) {
          var touchHistory = event.touchHistory;

          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return;
          }

          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);

          if (config.onPanResponderMove) {
            config.onPanResponderMove(event, gestureState);
          }
        },
        onResponderEnd: function onResponderEnd(event) {
          var touchHistory = event.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
          clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);
        },
        onResponderTerminate: function onResponderTerminate(event) {
          clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);

          PanResponder._initializeGestureState(gestureState);
        },
        onResponderTerminationRequest: function onResponderTerminationRequest(event) {
          return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);
        }
      };
      return {
        panHandlers: panHandlers,
        getInteractionHandle: function getInteractionHandle() {
          return interactionState.handle;
        }
      };
    }
  };

  function clearInteractionHandle(interactionState, callback, event, gestureState) {
    if (interactionState.handle) {
      _$$_REQUIRE(_dependencyMap[1], "./InteractionManager").clearInteractionHandle(interactionState.handle);

      interactionState.handle = null;
    }

    if (callback) {
      callback(event, gestureState);
    }
  }

  module.exports = PanResponder;
},454,[455,269],"node_modules/react-native/Libraries/Interaction/PanResponder.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var TouchHistoryMath = {
    centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
      var touchBank = touchHistory.touchBank;
      var total = 0;
      var count = 0;
      var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;

      if (oneTouchData !== null) {
        if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {
          total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;
          count = 1;
        }
      } else {
        for (var i = 0; i < touchBank.length; i++) {
          var touchTrack = touchBank[i];

          if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
            var toAdd = void 0;

            if (ofCurrent && isXAxis) {
              toAdd = touchTrack.currentPageX;
            } else if (ofCurrent && !isXAxis) {
              toAdd = touchTrack.currentPageY;
            } else if (!ofCurrent && isXAxis) {
              toAdd = touchTrack.previousPageX;
            } else {
              toAdd = touchTrack.previousPageY;
            }

            total += toAdd;
            count++;
          }
        }
      }

      return count > 0 ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);
    },
    noCentroid: -1
  };
  module.exports = TouchHistoryMath;
},455,[],"node_modules/react-native/Libraries/Interaction/TouchHistoryMath.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _asyncToGenerator2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/asyncToGenerator"));

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/createClass"));

  var _NativeDialogManagerAndroid = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../NativeModules/specs/NativeDialogManagerAndroid"));

  var _NativePermissionsAndroid = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "./NativePermissionsAndroid"));

  var _invariant = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "invariant"));

  var PERMISSION_REQUEST_RESULT = Object.freeze({
    GRANTED: 'granted',
    DENIED: 'denied',
    NEVER_ASK_AGAIN: 'never_ask_again'
  });
  var PERMISSIONS = Object.freeze({
    READ_CALENDAR: 'android.permission.READ_CALENDAR',
    WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',
    CAMERA: 'android.permission.CAMERA',
    READ_CONTACTS: 'android.permission.READ_CONTACTS',
    WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',
    GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',
    ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
    ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',
    ACCESS_BACKGROUND_LOCATION: 'android.permission.ACCESS_BACKGROUND_LOCATION',
    RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
    READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',
    CALL_PHONE: 'android.permission.CALL_PHONE',
    READ_CALL_LOG: 'android.permission.READ_CALL_LOG',
    WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',
    ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',
    USE_SIP: 'android.permission.USE_SIP',
    PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',
    BODY_SENSORS: 'android.permission.BODY_SENSORS',
    SEND_SMS: 'android.permission.SEND_SMS',
    RECEIVE_SMS: 'android.permission.RECEIVE_SMS',
    READ_SMS: 'android.permission.READ_SMS',
    RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',
    RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
    READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
    WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE'
  });

  var PermissionsAndroid = function () {
    function PermissionsAndroid() {
      (0, _classCallCheck2.default)(this, PermissionsAndroid);
      this.PERMISSIONS = PERMISSIONS;
      this.RESULTS = PERMISSION_REQUEST_RESULT;
    }

    (0, _createClass2.default)(PermissionsAndroid, [{
      key: "checkPermission",
      value: function checkPermission(permission) {
        console.warn('"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead');

        if ("android" !== 'android') {
          console.warn('"PermissionsAndroid" module works only for Android platform.');
          return Promise.resolve(false);
        }

        (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
        return _NativePermissionsAndroid.default.checkPermission(permission);
      }
    }, {
      key: "check",
      value: function check(permission) {
        if ("android" !== 'android') {
          console.warn('"PermissionsAndroid" module works only for Android platform.');
          return Promise.resolve(false);
        }

        (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
        return _NativePermissionsAndroid.default.checkPermission(permission);
      }
    }, {
      key: "requestPermission",
      value: function () {
        var _requestPermission = (0, _asyncToGenerator2.default)(function* (permission, rationale) {
          console.warn('"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead');

          if ("android" !== 'android') {
            console.warn('"PermissionsAndroid" module works only for Android platform.');
            return Promise.resolve(false);
          }

          var response = yield this.request(permission, rationale);
          return response === this.RESULTS.GRANTED;
        });

        function requestPermission(_x, _x2) {
          return _requestPermission.apply(this, arguments);
        }

        return requestPermission;
      }()
    }, {
      key: "request",
      value: function () {
        var _request = (0, _asyncToGenerator2.default)(function* (permission, rationale) {
          if ("android" !== 'android') {
            console.warn('"PermissionsAndroid" module works only for Android platform.');
            return Promise.resolve(this.RESULTS.DENIED);
          }

          (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');

          if (rationale) {
            var shouldShowRationale = yield _NativePermissionsAndroid.default.shouldShowRequestPermissionRationale(permission);

            if (shouldShowRationale && !!_NativeDialogManagerAndroid.default) {
              return new Promise(function (resolve, reject) {
                var options = Object.assign({}, rationale);

                _NativeDialogManagerAndroid.default.showAlert(options, function () {
                  return reject(new Error('Error showing rationale'));
                }, function () {
                  return resolve(_NativePermissionsAndroid.default.requestPermission(permission));
                });
              });
            }
          }

          return _NativePermissionsAndroid.default.requestPermission(permission);
        });

        function request(_x3, _x4) {
          return _request.apply(this, arguments);
        }

        return request;
      }()
    }, {
      key: "requestMultiple",
      value: function requestMultiple(permissions) {
        if ("android" !== 'android') {
          console.warn('"PermissionsAndroid" module works only for Android platform.');
          return Promise.resolve({});
        }

        (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
        return _NativePermissionsAndroid.default.requestMultiplePermissions(permissions);
      }
    }]);
    return PermissionsAndroid;
  }();

  var PermissionsAndroidInstance = new PermissionsAndroid();
  module.exports = PermissionsAndroidInstance;
},456,[3,68,16,17,139,457,6],"node_modules/react-native/Libraries/PermissionsAndroid/PermissionsAndroid.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('PermissionsAndroid');

  exports.default = _default;
},457,[5],"node_modules/react-native/Libraries/PermissionsAndroid/NativePermissionsAndroid.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var _NativePushNotificationManagerIOS = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "./NativePushNotificationManagerIOS"));

  var PushNotificationEmitter = new (_$$_REQUIRE(_dependencyMap[4], "../EventEmitter/NativeEventEmitter"))(_NativePushNotificationManagerIOS.default);

  var _notifHandlers = new Map();

  var DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';
  var NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';
  var NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';
  var DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';

  var PushNotificationIOS = function () {
    function PushNotificationIOS(nativeNotif) {
      var _this = this;

      (0, _classCallCheck2.default)(this, PushNotificationIOS);
      this._data = {};
      this._remoteNotificationCompleteCallbackCalled = false;
      this._isRemote = nativeNotif.remote;

      if (this._isRemote) {
        this._notificationId = nativeNotif.notificationId;
      }

      if (nativeNotif.remote) {
        Object.keys(nativeNotif).forEach(function (notifKey) {
          var notifVal = nativeNotif[notifKey];

          if (notifKey === 'aps') {
            _this._alert = notifVal.alert;
            _this._sound = notifVal.sound;
            _this._badgeCount = notifVal.badge;
            _this._category = notifVal.category;
            _this._contentAvailable = notifVal['content-available'];
            _this._threadID = notifVal['thread-id'];
          } else {
            _this._data[notifKey] = notifVal;
          }
        });
      } else {
        this._badgeCount = nativeNotif.applicationIconBadgeNumber;
        this._sound = nativeNotif.soundName;
        this._alert = nativeNotif.alertBody;
        this._data = nativeNotif.userInfo;
        this._category = nativeNotif.category;
      }
    }

    (0, _createClass2.default)(PushNotificationIOS, [{
      key: "finish",
      value: function finish(fetchResult) {
        if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {
          return;
        }

        this._remoteNotificationCompleteCallbackCalled = true;

        _$$_REQUIRE(_dependencyMap[5], "invariant")(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');

        _NativePushNotificationManagerIOS.default.onFinishRemoteNotification(this._notificationId, fetchResult);
      }
    }, {
      key: "getMessage",
      value: function getMessage() {
        return this._alert;
      }
    }, {
      key: "getSound",
      value: function getSound() {
        return this._sound;
      }
    }, {
      key: "getCategory",
      value: function getCategory() {
        return this._category;
      }
    }, {
      key: "getAlert",
      value: function getAlert() {
        return this._alert;
      }
    }, {
      key: "getContentAvailable",
      value: function getContentAvailable() {
        return this._contentAvailable;
      }
    }, {
      key: "getBadgeCount",
      value: function getBadgeCount() {
        return this._badgeCount;
      }
    }, {
      key: "getData",
      value: function getData() {
        return this._data;
      }
    }, {
      key: "getThreadID",
      value: function getThreadID() {
        return this._threadID;
      }
    }], [{
      key: "presentLocalNotification",
      value: function presentLocalNotification(details) {
        _$$_REQUIRE(_dependencyMap[5], "invariant")(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');

        _NativePushNotificationManagerIOS.default.presentLocalNotification(details);
      }
    }, {
      key: "scheduleLocalNotification",
      value: function scheduleLocalNotification(details) {
        _$$_REQUIRE(_dependencyMap[5], "invariant")(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');

        _NativePushNotificationManagerIOS.default.scheduleLocalNotification(details);
      }
    }, {
      key: "cancelAllLocalNotifications",
      value: function cancelAllLocalNotifications() {
        _$$_REQUIRE(_dependencyMap[5], "invariant")(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');

        _NativePushNotificationManagerIOS.default.cancelAllLocalNotifications();
      }
    }, {
      key: "removeAllDeliveredNotifications",
      value: function removeAllDeliveredNotifications() {
        _$$_REQUIRE(_dependencyMap[5], "invariant")(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');

        _NativePushNotificationManagerIOS.default.removeAllDeliveredNotifications();
      }
    }, {
      key: "getDeliveredNotifications",
      value: function getDeliveredNotifications(callback) {
        _$$_REQUIRE(_dependencyMap[5], "invariant")(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');

        _NativePushNotificationManagerIOS.default.getDeliveredNotifications(callback);
      }
    }, {
      key: "removeDeliveredNotifications",
      value: function removeDeliveredNotifications(identifiers) {
        _$$_REQUIRE(_dependencyMap[5], "invariant")(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');

        _NativePushNotificationManagerIOS.default.removeDeliveredNotifications(identifiers);
      }
    }, {
      key: "setApplicationIconBadgeNumber",
      value: function setApplicationIconBadgeNumber(number) {
        _$$_REQUIRE(_dependencyMap[5], "invariant")(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');

        _NativePushNotificationManagerIOS.default.setApplicationIconBadgeNumber(number);
      }
    }, {
      key: "getApplicationIconBadgeNumber",
      value: function getApplicationIconBadgeNumber(callback) {
        _$$_REQUIRE(_dependencyMap[5], "invariant")(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');

        _NativePushNotificationManagerIOS.default.getApplicationIconBadgeNumber(callback);
      }
    }, {
      key: "cancelLocalNotifications",
      value: function cancelLocalNotifications(userInfo) {
        _$$_REQUIRE(_dependencyMap[5], "invariant")(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');

        _NativePushNotificationManagerIOS.default.cancelLocalNotifications(userInfo);
      }
    }, {
      key: "getScheduledLocalNotifications",
      value: function getScheduledLocalNotifications(callback) {
        _$$_REQUIRE(_dependencyMap[5], "invariant")(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');

        _NativePushNotificationManagerIOS.default.getScheduledLocalNotifications(callback);
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        _$$_REQUIRE(_dependencyMap[5], "invariant")(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');

        var listener;

        if (type === 'notification') {
          listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, function (notifData) {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'localNotification') {
          listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, function (notifData) {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'register') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, function (registrationInfo) {
            handler(registrationInfo.deviceToken);
          });
        } else if (type === 'registrationError') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, function (errorInfo) {
            handler(errorInfo);
          });
        }

        _notifHandlers.set(type, listener);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        _$$_REQUIRE(_dependencyMap[5], "invariant")(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');

        var listener = _notifHandlers.get(type);

        if (!listener) {
          return;
        }

        listener.remove();

        _notifHandlers.delete(type);
      }
    }, {
      key: "requestPermissions",
      value: function requestPermissions(permissions) {
        var requestedPermissions = {
          alert: true,
          badge: true,
          sound: true
        };

        if (permissions) {
          requestedPermissions = {
            alert: !!permissions.alert,
            badge: !!permissions.badge,
            sound: !!permissions.sound
          };
        }

        _$$_REQUIRE(_dependencyMap[5], "invariant")(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');

        return _NativePushNotificationManagerIOS.default.requestPermissions(requestedPermissions);
      }
    }, {
      key: "abandonPermissions",
      value: function abandonPermissions() {
        _$$_REQUIRE(_dependencyMap[5], "invariant")(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');

        _NativePushNotificationManagerIOS.default.abandonPermissions();
      }
    }, {
      key: "checkPermissions",
      value: function checkPermissions(callback) {
        _$$_REQUIRE(_dependencyMap[5], "invariant")(typeof callback === 'function', 'Must provide a valid callback');

        _$$_REQUIRE(_dependencyMap[5], "invariant")(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');

        _NativePushNotificationManagerIOS.default.checkPermissions(callback);
      }
    }, {
      key: "getInitialNotification",
      value: function getInitialNotification() {
        _$$_REQUIRE(_dependencyMap[5], "invariant")(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');

        return _NativePushNotificationManagerIOS.default.getInitialNotification().then(function (notification) {
          return notification && new PushNotificationIOS(notification);
        });
      }
    }]);
    return PushNotificationIOS;
  }();

  PushNotificationIOS.FetchResult = {
    NewData: 'UIBackgroundFetchResultNewData',
    NoData: 'UIBackgroundFetchResultNoData',
    ResultFailed: 'UIBackgroundFetchResultFailed'
  };
  module.exports = PushNotificationIOS;
},458,[3,16,17,459,126,6],"node_modules/react-native/Libraries/PushNotificationIOS/PushNotificationIOS.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('PushNotificationManager');

  exports.default = _default;
},459,[5],"node_modules/react-native/Libraries/PushNotificationIOS/NativePushNotificationManagerIOS.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Settings = {
    get: function get(key) {
      console.warn('Settings is not yet supported on Android');
      return null;
    },
    set: function set(settings) {
      console.warn('Settings is not yet supported on Android');
    },
    watchKeys: function watchKeys(keys, callback) {
      console.warn('Settings is not yet supported on Android');
      return -1;
    },
    clearWatch: function clearWatch(watchId) {
      console.warn('Settings is not yet supported on Android');
    }
  };
  module.exports = Settings;
},460,[],"node_modules/react-native/Libraries/Settings/Settings.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var _NativeActionSheetManager = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../ActionSheetIOS/NativeActionSheetManager"));

  var _NativeShareModule = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "./NativeShareModule"));

  var Share = function () {
    function Share() {
      (0, _classCallCheck2.default)(this, Share);
    }

    (0, _createClass2.default)(Share, null, [{
      key: "share",
      value: function share(content) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _$$_REQUIRE(_dependencyMap[5], "invariant")(typeof content === 'object' && content !== null, 'Content to share must be a valid object');

        _$$_REQUIRE(_dependencyMap[5], "invariant")(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL and message is required');

        _$$_REQUIRE(_dependencyMap[5], "invariant")(typeof options === 'object' && options !== null, 'Options must be a valid object');

        if ("android" === 'android') {
          _$$_REQUIRE(_dependencyMap[5], "invariant")(_NativeShareModule.default, 'ShareModule should be registered on Android.');

          _$$_REQUIRE(_dependencyMap[5], "invariant")(!content.title || typeof content.title === 'string', 'Invalid title: title should be a string.');

          var newContent = {
            title: content.title,
            message: typeof content.message === 'string' ? content.message : undefined
          };
          return _NativeShareModule.default.share(newContent, options.dialogTitle);
        } else if ("android" === 'ios') {
          return new Promise(function (resolve, reject) {
            var tintColor = _$$_REQUIRE(_dependencyMap[6], "../StyleSheet/processColor")(options.tintColor);

            _$$_REQUIRE(_dependencyMap[5], "invariant")(tintColor == null || typeof tintColor === 'number', 'Unexpected color given for options.tintColor');

            _$$_REQUIRE(_dependencyMap[5], "invariant")(_NativeActionSheetManager.default, 'NativeActionSheetManager is not registered on iOS, but it should be.');

            _NativeActionSheetManager.default.showShareActionSheetWithOptions({
              message: typeof content.message === 'string' ? content.message : undefined,
              url: typeof content.url === 'string' ? content.url : undefined,
              subject: options.subject,
              tintColor: typeof tintColor === 'number' ? tintColor : undefined,
              excludedActivityTypes: options.excludedActivityTypes
            }, function (error) {
              return reject(error);
            }, function (success, activityType) {
              if (success) {
                resolve({
                  action: 'sharedAction',
                  activityType: activityType
                });
              } else {
                resolve({
                  action: 'dismissedAction'
                });
              }
            });
          });
        } else {
          return Promise.reject(new Error('Unsupported platform'));
        }
      }
    }]);
    return Share;
  }();

  Share.sharedAction = 'sharedAction';
  Share.dismissedAction = 'dismissedAction';
  module.exports = Share;
},461,[3,16,17,408,462,6,176],"node_modules/react-native/Libraries/Share/Share.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('ShareModule');

  exports.default = _default;
},462,[5],"node_modules/react-native/Libraries/Share/NativeShareModule.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/createClass"));

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/classCallCheck"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/getPrototypeOf"));

  var _NativeStatusBarManagerIOS = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "./NativeStatusBarManagerIOS"));

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var StatusBarIOS = function (_NativeEventEmitter) {
    (0, _inherits2.default)(StatusBarIOS, _NativeEventEmitter);

    var _super = _createSuper(StatusBarIOS);

    function StatusBarIOS() {
      (0, _classCallCheck2.default)(this, StatusBarIOS);
      return _super.apply(this, arguments);
    }

    return (0, _createClass2.default)(StatusBarIOS);
  }(_$$_REQUIRE(_dependencyMap[7], "../../EventEmitter/NativeEventEmitter"));

  module.exports = new StatusBarIOS(_NativeStatusBarManagerIOS.default);
},463,[3,17,16,35,32,31,350,126],"node_modules/react-native/Libraries/Components/StatusBar/StatusBarIOS.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useColorScheme;

  var _react = _$$_REQUIRE(_dependencyMap[0], "react");

  var _Appearance = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "./Appearance"));

  function useColorScheme() {
    var subscription = (0, _react.useMemo)(function () {
      return {
        getCurrentValue: function getCurrentValue() {
          return _Appearance.default.getColorScheme();
        },
        subscribe: function subscribe(callback) {
          _Appearance.default.addChangeListener(callback);

          return function () {
            return _Appearance.default.removeChangeListener(callback);
          };
        }
      };
    }, []);
    return (0, _$$_REQUIRE(_dependencyMap[3], "use-subscription").useSubscription)(subscription);
  }
},464,[49,3,409,465],"node_modules/react-native/Libraries/Utilities/useColorScheme.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (process.env.NODE_ENV === 'production') {
    module.exports = _$$_REQUIRE(_dependencyMap[0], "./cjs/use-subscription.production.min.js");
  } else {
    module.exports = _$$_REQUIRE(_dependencyMap[1], "./cjs/use-subscription.development.js");
  }
},465,[466,470],"node_modules/use-subscription/index.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * @license React
   * use-subscription.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  exports.useSubscription = function (a) {
    return _$$_REQUIRE(_dependencyMap[0], "use-sync-external-store/shim").useSyncExternalStore(a.subscribe, a.getCurrentValue);
  };
},466,[467],"node_modules/use-subscription/cjs/use-subscription.production.min.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (process.env.NODE_ENV === 'production') {
    module.exports = _$$_REQUIRE(_dependencyMap[0], "../cjs/use-sync-external-store-shim.native.production.min.js");
  } else {
    module.exports = _$$_REQUIRE(_dependencyMap[1], "../cjs/use-sync-external-store-shim.native.development.js");
  }
},467,[468,469],"node_modules/use-sync-external-store/shim/index.native.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * @license React
   * use-sync-external-store-shim.native.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  var e = _$$_REQUIRE(_dependencyMap[0], "react");

  function h(a, b) {
    return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
  }

  var k = "function" === typeof Object.is ? Object.is : h,
      l = e.useState,
      m = e.useEffect,
      n = e.useLayoutEffect,
      p = e.useDebugValue;

  function q(a, b) {
    var d = b(),
        f = l({
      inst: {
        value: d,
        getSnapshot: b
      }
    }),
        c = f[0].inst,
        g = f[1];
    n(function () {
      c.value = d;
      c.getSnapshot = b;
      r(c) && g({
        inst: c
      });
    }, [a, d, b]);
    m(function () {
      r(c) && g({
        inst: c
      });
      return a(function () {
        r(c) && g({
          inst: c
        });
      });
    }, [a]);
    p(d);
    return d;
  }

  function r(a) {
    var b = a.getSnapshot;
    a = a.value;

    try {
      var d = b();
      return !k(a, d);
    } catch (f) {
      return !0;
    }
  }

  exports.useSyncExternalStore = void 0 !== e.useSyncExternalStore ? e.useSyncExternalStore : q;
},468,[49],"node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.native.production.min.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * @license React
   * use-sync-external-store-shim.native.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  if (process.env.NODE_ENV !== "production") {
    (function () {
      'use strict';

      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      }

      var React = _$$_REQUIRE(_dependencyMap[0], "react");

      var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

      function error(format) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }

            printWarning('error', format, args);
          }
        }
      }

      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame.getStackAddendum();

          if (stack !== '') {
            format += '%s';
            args = args.concat([stack]);
          }

          var argsWithFormat = args.map(function (item) {
            return String(item);
          });
          argsWithFormat.unshift('Warning: ' + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }

      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }

      var objectIs = typeof Object.is === 'function' ? Object.is : is;
      var useState = React.useState,
          useEffect = React.useEffect,
          useLayoutEffect = React.useLayoutEffect,
          useDebugValue = React.useDebugValue;
      var didWarnOld18Alpha = false;
      var didWarnUncachedGetSnapshot = false;

      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        {
          if (!didWarnOld18Alpha) {
            if (React.startTransition !== undefined) {
              didWarnOld18Alpha = true;
              error('You are using an outdated, pre-release alpha of React 18 that ' + 'does not support useSyncExternalStore. The ' + 'use-sync-external-store shim will not work correctly. Upgrade ' + 'to a newer pre-release.');
            }
          }
        }
        var value = getSnapshot();
        {
          if (!didWarnUncachedGetSnapshot) {
            var cachedValue = getSnapshot();

            if (!objectIs(value, cachedValue)) {
              error('The result of getSnapshot should be cached to avoid an infinite loop');
              didWarnUncachedGetSnapshot = true;
            }
          }
        }

        var _useState = useState({
          inst: {
            value: value,
            getSnapshot: getSnapshot
          }
        }),
            inst = _useState[0].inst,
            forceUpdate = _useState[1];

        useLayoutEffect(function () {
          inst.value = value;
          inst.getSnapshot = getSnapshot;

          if (checkIfSnapshotChanged(inst)) {
            forceUpdate({
              inst: inst
            });
          }
        }, [subscribe, value, getSnapshot]);
        useEffect(function () {
          if (checkIfSnapshotChanged(inst)) {
            forceUpdate({
              inst: inst
            });
          }

          var handleStoreChange = function handleStoreChange() {
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst: inst
              });
            }
          };

          return subscribe(handleStoreChange);
        }, [subscribe]);
        useDebugValue(value);
        return value;
      }

      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        var prevValue = inst.value;

        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(prevValue, nextValue);
        } catch (error) {
          return true;
        }
      }

      var shim = useSyncExternalStore;
      var useSyncExternalStore$1 = React.useSyncExternalStore !== undefined ? React.useSyncExternalStore : shim;
      exports.useSyncExternalStore = useSyncExternalStore$1;

      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
      }
    })();
  }
},469,[49],"node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.native.development.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * @license React
   * use-subscription.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  if (process.env.NODE_ENV !== "production") {
    (function () {
      'use strict';

      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      }

      var shim = _$$_REQUIRE(_dependencyMap[0], "use-sync-external-store/shim");

      function useSubscription(_ref) {
        var getCurrentValue = _ref.getCurrentValue,
            subscribe = _ref.subscribe;
        return shim.useSyncExternalStore(subscribe, getCurrentValue);
      }

      exports.useSubscription = useSubscription;

      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
      }
    })();
  }
},470,[467],"node_modules/use-subscription/cjs/use-subscription.development.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useWindowDimensions;

  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/slicedToArray"));

  var _Dimensions = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "./Dimensions"));

  var _react = _$$_REQUIRE(_dependencyMap[3], "react");

  function useWindowDimensions() {
    var _useState = (0, _react.useState)(function () {
      return _Dimensions.default.get('window');
    }),
        _useState2 = (0, _slicedToArray2.default)(_useState, 2),
        dimensions = _useState2[0],
        setDimensions = _useState2[1];

    (0, _react.useEffect)(function () {
      function handleChange(_ref) {
        var window = _ref.window;

        if (dimensions.width !== window.width || dimensions.height !== window.height || dimensions.scale !== window.scale || dimensions.fontScale !== window.fontScale) {
          setDimensions(window);
        }
      }

      _Dimensions.default.addEventListener('change', handleChange);

      handleChange({
        window: _Dimensions.default.get('window')
      });
      return function () {
        _Dimensions.default.removeEventListener('change', handleChange);
      };
    }, [dimensions]);
    return dimensions;
  }
},471,[3,8,232,49],"node_modules/react-native/Libraries/Utilities/useWindowDimensions.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeVibration = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./NativeVibration"));

  var _vibrating = false;
  var _id = 0;
  var _default_vibration_length = 400;

  function vibrateByPattern(pattern) {
    var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (_vibrating) {
      return;
    }

    _vibrating = true;

    if (pattern[0] === 0) {
      _NativeVibration.default.vibrate(_default_vibration_length);

      pattern = pattern.slice(1);
    }

    if (pattern.length === 0) {
      _vibrating = false;
      return;
    }

    setTimeout(function () {
      return vibrateScheduler(++_id, pattern, repeat, 1);
    }, pattern[0]);
  }

  function vibrateScheduler(id, pattern, repeat, nextIndex) {
    if (!_vibrating || id !== _id) {
      return;
    }

    _NativeVibration.default.vibrate(_default_vibration_length);

    if (nextIndex >= pattern.length) {
      if (repeat) {
        nextIndex = 0;
      } else {
        _vibrating = false;
        return;
      }
    }

    setTimeout(function () {
      return vibrateScheduler(id, pattern, repeat, nextIndex + 1);
    }, pattern[nextIndex]);
  }

  var Vibration = {
    vibrate: function vibrate() {
      var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _default_vibration_length;
      var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if ("android" === 'android') {
        if (typeof pattern === 'number') {
          _NativeVibration.default.vibrate(pattern);
        } else if (Array.isArray(pattern)) {
          _NativeVibration.default.vibrateByPattern(pattern, repeat ? 0 : -1);
        } else {
          throw new Error('Vibration pattern should be a number or array');
        }
      } else {
        if (_vibrating) {
          return;
        }

        if (typeof pattern === 'number') {
          _NativeVibration.default.vibrate(pattern);
        } else if (Array.isArray(pattern)) {
          vibrateByPattern(pattern, repeat);
        } else {
          throw new Error('Vibration pattern should be a number or array');
        }
      }
    },
    cancel: function cancel() {
      if ("android" === 'ios') {
        _vibrating = false;
      } else {
        _NativeVibration.default.cancel();
      }
    }
  };
  module.exports = Vibration;
},472,[3,473],"node_modules/react-native/Libraries/Vibration/Vibration.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "../TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.getEnforcing('Vibration');

  exports.default = _default;
},473,[5],"node_modules/react-native/Libraries/Vibration/NativeVibration.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var YellowBox;

  if (__DEV__) {
    YellowBox = function (_React$Component) {
      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(YellowBox, _React$Component);

      var _super = _createSuper(YellowBox);

      function YellowBox() {
        _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, YellowBox);

        return _super.apply(this, arguments);
      }

      _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(YellowBox, [{
        key: "render",
        value: function render() {
          return null;
        }
      }], [{
        key: "ignoreWarnings",
        value: function ignoreWarnings(patterns) {
          console.warn('YellowBox has been replaced with LogBox. Please call LogBox.ignoreLogs() instead.');

          _$$_REQUIRE(_dependencyMap[6], "../LogBox/LogBox").ignoreLogs(patterns);
        }
      }, {
        key: "install",
        value: function install() {
          console.warn('YellowBox has been replaced with LogBox. Please call LogBox.install() instead.');

          _$$_REQUIRE(_dependencyMap[6], "../LogBox/LogBox").install();
        }
      }, {
        key: "uninstall",
        value: function uninstall() {
          console.warn('YellowBox has been replaced with LogBox. Please call LogBox.uninstall() instead.');

          _$$_REQUIRE(_dependencyMap[6], "../LogBox/LogBox").uninstall();
        }
      }]);

      return YellowBox;
    }(React.Component);
  } else {
    YellowBox = function (_React$Component2) {
      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(YellowBox, _React$Component2);

      var _super2 = _createSuper(YellowBox);

      function YellowBox() {
        _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, YellowBox);

        return _super2.apply(this, arguments);
      }

      _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(YellowBox, [{
        key: "render",
        value: function render() {
          return null;
        }
      }], [{
        key: "ignoreWarnings",
        value: function ignoreWarnings(patterns) {}
      }, {
        key: "install",
        value: function install() {}
      }, {
        key: "uninstall",
        value: function uninstall() {}
      }]);

      return YellowBox;
    }(React.Component);
  }

  module.exports = YellowBox;
},474,[31,32,49,35,16,17,386],"node_modules/react-native/Libraries/YellowBox/YellowBoxDeprecated.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DynamicColorIOS = void 0;

  var DynamicColorIOS = function DynamicColorIOS(tuple) {
    throw new Error('DynamicColorIOS is not available on this platform.');
  };

  exports.DynamicColorIOS = DynamicColorIOS;
},475,[],"node_modules/react-native/Libraries/StyleSheet/PlatformColorValueTypesIOS.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ColorAndroid = void 0;

  var ColorAndroid = function ColorAndroid(color) {
    return (0, _$$_REQUIRE(_dependencyMap[0], "./PlatformColorValueTypes").ColorAndroidPrivate)(color);
  };

  exports.ColorAndroid = ColorAndroid;
},476,[178],"node_modules/react-native/Libraries/StyleSheet/PlatformColorValueTypesAndroid.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PointPropType = _$$_REQUIRE(_dependencyMap[0], "prop-types").shape({
    x: _$$_REQUIRE(_dependencyMap[0], "prop-types").number,
    y: _$$_REQUIRE(_dependencyMap[0], "prop-types").number
  });

  module.exports = PointPropType;
},477,[210],"node_modules/react-native/Libraries/DeprecatedPropTypes/DeprecatedPointPropType.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _asyncToGenerator2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/asyncToGenerator"));

  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/slicedToArray"));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3], "react"));

  var _reactNative = _$$_REQUIRE(_dependencyMap[4], "react-native");

  var _index = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[5], "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/src/index"));

  var _this = this,
      _jsxFileName = "/Users/1fabiopereira/Workspace/react-native-pdf-extractor/sample/src/App.tsx";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var App = function App() {
    var _useState = (0, _react.useState)([]),
        _useState2 = (0, _slicedToArray2.default)(_useState, 2),
        result = _useState2[0],
        setResult = _useState2[1];

    var _useState3 = (0, _react.useState)(0),
        _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
        pages = _useState4[0],
        setPages = _useState4[1];

    var _useState5 = (0, _react.useState)(false),
        _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
        isEncrypted = _useState6[0],
        setIsEncrypted = _useState6[1];

    var _useState7 = (0, _react.useState)(),
        _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
        uri = _useState8[0],
        setUri = _useState8[1];

    function extract() {
      (0, _asyncToGenerator2.default)(function* () {
        var canIExtract = yield _index.default.canIExtract();
        var path = yield _index.default.getUri();

        if (canIExtract) {
          var encrypted = yield _index.default.isEncrypted();
          var password = encrypted ? 'your-password' : undefined;
          var numOfPages = yield _index.default.getNumberOfPages(password);
          var response = yield _index.default.getTextWithPattern(_index.Patterns.Common.Email, password);
          setUri(path);
          setIsEncrypted(encrypted);
          setResult(response);
          setPages(numOfPages);
        }
      })();
    }

    (0, _react.useEffect)(function () {
      extract();
    }, []);
    return _react.default.createElement(_reactNative.View, {
      style: styles.container,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 38,
        columnNumber: 5
      }
    }, _react.default.createElement(_reactNative.Text, {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 39,
        columnNumber: 7
      }
    }, "URI: " + uri), _react.default.createElement(_reactNative.Text, {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 40,
        columnNumber: 7
      }
    }, "Number of pages: " + pages), _react.default.createElement(_reactNative.Text, {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 41,
        columnNumber: 7
      }
    }, "Is encrypted: " + isEncrypted), _react.default.createElement(_reactNative.Text, {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 42,
        columnNumber: 7
      }
    }, "Result:"), _react.default.createElement(_reactNative.FlatList, {
      style: {},
      data: result || [],
      keyExtractor: function keyExtractor(item) {
        return item;
      },
      renderItem: function renderItem(_ref2) {
        var item = _ref2.item;
        return _react.default.createElement(_reactNative.Text, {
          __self: _this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 47,
            columnNumber: 53
          }
        }, item);
      },
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 43,
        columnNumber: 7
      }
    }));
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      padding: 20
    }
  });

  var _default = (0, _react.memo)(App);

  exports.default = _default;
},478,[3,68,8,49,1,479],"src/App.tsx");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = void 0;

  var _toConsumableArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/toConsumableArray"));

  var _asyncToGenerator2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/asyncToGenerator"));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3], "react-native");

  Object.keys(_$$_REQUIRE(_dependencyMap[4], "./Patterns")).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _$$_REQUIRE(_dependencyMap[4], "./Patterns")[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _$$_REQUIRE(_dependencyMap[4], "./Patterns")[key];
      }
    });
  });

  var PdfExtractor = _reactNative.Platform.select({
    android: _reactNative.NativeModules.PdfExtractor,
    ios: {}
  });

  var getUri = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      return PdfExtractor.getUri();
    });

    return function getUri() {
      return _ref.apply(this, arguments);
    };
  }();

  var isEncrypted = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      return PdfExtractor.isEncrypted();
    });

    return function isEncrypted() {
      return _ref2.apply(this, arguments);
    };
  }();

  var getNumberOfPages = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (password) {
      return PdfExtractor.getNumberOfPages(password);
    });

    return function getNumberOfPages(_x) {
      return _ref3.apply(this, arguments);
    };
  }();

  var canIExtract = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* () {
      return PdfExtractor.canIExtract();
    });

    return function canIExtract() {
      return _ref4.apply(this, arguments);
    };
  }();

  var getText = function () {
    var _ref5 = (0, _asyncToGenerator2.default)(function* (password) {
      var data = yield PdfExtractor.getText(password);
      return (0, _toConsumableArray2.default)(new Set((data == null ? void 0 : data.split('\n')) || []));
    });

    return function getText(_x2) {
      return _ref5.apply(this, arguments);
    };
  }();

  var getTextWithPattern = function () {
    var _ref6 = (0, _asyncToGenerator2.default)(function* (pattern, password) {
      var patterns = Array.isArray(pattern) ? pattern : [pattern];
      var data = yield getText(password);
      var matches = patterns.map(function (regex) {
        return (0, _$$_REQUIRE(_dependencyMap[5], "./Match").Match)(new RegExp(regex), data);
      });
      return (0, _toConsumableArray2.default)(new Set(matches)).flat();
    });

    return function getTextWithPattern(_x3, _x4) {
      return _ref6.apply(this, arguments);
    };
  }();

  var _default = {
    canIExtract: canIExtract,
    getNumberOfPages: getNumberOfPages,
    getText: getText,
    getTextWithPattern: getTextWithPattern,
    getUri: getUri,
    isEncrypted: isEncrypted
  };
  exports.default = _default;
},479,[480,481,487,1,488,489],"../src/index.tsx");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }

  module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
},480,[],"../node_modules/@babel/runtime/helpers/interopRequireDefault.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _toConsumableArray(arr) {
    return _$$_REQUIRE(_dependencyMap[0], "./arrayWithoutHoles.js")(arr) || _$$_REQUIRE(_dependencyMap[1], "./iterableToArray.js")(arr) || _$$_REQUIRE(_dependencyMap[2], "./unsupportedIterableToArray.js")(arr) || _$$_REQUIRE(_dependencyMap[3], "./nonIterableSpread.js")();
  }

  module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},481,[482,484,485,486],"../node_modules/@babel/runtime/helpers/toConsumableArray.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _$$_REQUIRE(_dependencyMap[0], "./arrayLikeToArray.js")(arr);
  }

  module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
},482,[483],"../node_modules/@babel/runtime/helpers/arrayWithoutHoles.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},483,[],"../node_modules/@babel/runtime/helpers/arrayLikeToArray.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},484,[],"../node_modules/@babel/runtime/helpers/iterableToArray.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _$$_REQUIRE(_dependencyMap[0], "./arrayLikeToArray.js")(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _$$_REQUIRE(_dependencyMap[0], "./arrayLikeToArray.js")(o, minLen);
  }

  module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},485,[483],"../node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;
},486,[],"../node_modules/@babel/runtime/helpers/nonIterableSpread.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
},487,[],"../node_modules/@babel/runtime/helpers/asyncToGenerator.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Patterns = void 0;
  var Common = {
    Email: ['(\\S+@\\w+\\.\\w+)']
  };
  var Brazil = {
    BankSlip: ['([0-9]{5})\\.([0-9]{5})\\s([0-9]{5})\\.([0-9]{6})\\s([0-9]{5})\\.([0-9]{6})\\s([0-9])\\s([0-9]{14})', '([0-9]{12})\\s([0-9]{12})\\s([0-9]{12})\\s([0-9]{12})', '([0-9]{11})-([0-9])\\s([0-9]{11})-([0-9])\\s([0-9]{11})-([0-9])\\s([0-9]{11})-([0-9])']
  };
  var Patterns = {
    Common: Common,
    Brazil: Brazil
  };
  exports.Patterns = Patterns;
},488,[],"../src/Patterns.ts");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Match = void 0;

  var _toConsumableArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/toConsumableArray"));

  var reducer = function reducer(pattern) {
    return function (line) {
      var regexp = pattern.global ? pattern : new RegExp(pattern, 'g');
      return line.match(regexp);
    };
  };

  var Match = function Match(pattern, data) {
    if (!data) return [];
    var matches = data.map(reducer(pattern)).flat();
    return (0, _toConsumableArray2.default)(new Set(matches)).filter(function (value) {
      return value;
    });
  };

  exports.Match = Match;
},489,[480,481],"../src/Match.ts");
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {
  "name": "PdfExtractorExample",
  "displayName": "PDF Extractor Example"
}
;
},490,[],"app.json");
__r(88);
__r(0);