"use strict";(self.webpackChunkreact_native_pdf_extractor_docs=self.webpackChunkreact_native_pdf_extractor_docs||[]).push([[103],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5125:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],c={sidebar_position:3},s="Usage",p={unversionedId:"getting-started/usage",id:"getting-started/usage",title:"Usage",description:"To see more details about available component properties go to Extractor or you can see a full implementation at Playground.",source:"@site/docs/getting-started/usage.md",sourceDirName:"getting-started",slug:"/getting-started/usage",permalink:"/react-native-pdf-extractor/docs/getting-started/usage",draft:!1,editUrl:"https://github.com/1fabiopereira/react-native-pdf-extractor/edit/master/website/docs/getting-started/usage.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/react-native-pdf-extractor/docs/getting-started/configuration"},next:{title:"Playground",permalink:"/react-native-pdf-extractor/docs/getting-started/playground"}},l={},d=[{value:"Dependency",id:"dependency",level:2}],u={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"usage"},"Usage"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 To see more details about available component properties go to ",(0,o.kt)("a",{parentName:"p",href:"/react-native-pdf-extractor/docs/api/extractors/Extractor"},"Extractor")," or you can see a full implementation at ",(0,o.kt)("a",{parentName:"p",href:"/react-native-pdf-extractor/docs/getting-started/playground"},"Playground"),".")),(0,o.kt)("br",null),(0,o.kt)("p",null,"We have two use cases for this library that has different approaches to each other. First case is used when you are running app and get file path that you want to extract data, using another libary, like ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/rnmods/react-native-document-picker"},"react-native-document-picker")," and sends the received path to component."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Extractor, Patterns } from 'react-native-pdf-extractor';\n\n// Some code snippets was be hidden for readability\n\nconst callback = (data: TransientObject) => {\n    // Your implementation here \n    console.log(data);\n    /*\n        {\n            duration: '40ms', <-----------------------------: Time spent to match\n            isEncrypted: false, <---------------------------: Was file encrypted?\n            pages: 2, <-------------------------------------: File number of pages\n            patterns: ['(/\\S+@\\w+\\.\\w+)/g'], <--------------: List of used patterns\n            text: ['name@mail.com'], <----------------------: List of found matches on file\n            uri: 'content://some-file-path.pdf' <-----------: File path\n        }\n    */  \n};\n\nreturn (\n    <Extractor\n        onResult={callback}\n        patterns={Patterns.Common.Email}\n        uri={uri}\n    />\n)\n")),(0,o.kt)("p",null,"The second case is applicable when the app receives an ",(0,o.kt)("strong",{parentName:"p"},"Android Intent Action")," with the file path, in this case the library extracts the path behind the scene and than trigger data extraction. You can see more about it on ",(0,o.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/android/content/Intent"},"Intent | Android developers"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Extractor, Patterns } from 'react-native-pdf-extractor';\n\n// Some code snippets was be hidden for readability\n\nconst callback = (data: TransientObject) => {\n    // Your implementation here \n    console.log(data);\n    /*\n        {\n            duration: '40ms', <-----------------------------: Time spent to match\n            isEncrypted: false, <---------------------------: Was file encrypted?\n            pages: 2, <-------------------------------------: File number of pages\n            patterns: ['(/\\S+@\\w+\\.\\w+)/g'], <--------------: List of used patterns\n            text: ['name@mail.com'], <----------------------: List of found matches on file\n            uri: 'content://some-file-path.pdf' <-----------: File path\n        }\n    */  \n};\n\nreturn (\n    <Extractor\n        onResult={callback}\n        patterns={Patterns.Common.Email}\n        fromIntent // <-------------------------------------: Try get uri from intent provider (android only)\n    />\n)\n")),(0,o.kt)("h2",{id:"dependency"},"Dependency"),(0,o.kt)("p",null,"To show a modal with password input when file is encrypted we use ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/react-native-modal"},"react-native-modal"),", to install that, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"yarn add react-native-modal\n")))}m.isMDXComponent=!0}}]);