"use strict";(self.webpackChunkreact_native_pdf_extractor_docs=self.webpackChunkreact_native_pdf_extractor_docs||[]).push([[12],{3905:function(t,e,r){r.d(e,{Zo:function(){return u},kt:function(){return f}});var n=r(7294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function o(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function l(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var s=n.createContext({}),c=function(t){var e=n.useContext(s),r=e;return t&&(r="function"==typeof t?t(e):o(o({},e),t)),r},u=function(t){var e=c(t.components);return n.createElement(s.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,i=t.originalType,s=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),d=c(r),f=a,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||i;return r?n.createElement(m,o(o({ref:e},u),{},{components:r})):n.createElement(m,o({ref:e},u))}));function f(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l.mdxType="string"==typeof t?t:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4237:function(t,e,r){r.r(e),r.d(e,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],l={sidebar_position:2},s="BaseExtractor",c={unversionedId:"api/extractors/BaseExtractor",id:"api/extractors/BaseExtractor",title:"BaseExtractor",description:"It is the extractor with greater granularity, basically it is a wrapper for the native module, it is exported along with the other resources, allowing new extractors to be built that extend it.",source:"@site/docs/api/extractors/BaseExtractor.md",sourceDirName:"api/extractors",slug:"/api/extractors/BaseExtractor",permalink:"/react-native-pdf-extractor/docs/api/extractors/BaseExtractor",draft:!1,editUrl:"https://github.com/1fabiopereira/react-native-pdf-extractor/edit/master/website/docs/api/extractors/BaseExtractor.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Extractor",permalink:"/react-native-pdf-extractor/docs/api/extractors/Extractor"},next:{title:"Patterns",permalink:"/react-native-pdf-extractor/docs/api/patterns"}},u={},p=[{value:"canIExtract",id:"caniextract",level:3},{value:"setUri",id:"seturi",level:3},{value:"getUri",id:"geturi",level:3},{value:"isEncrypted",id:"isencrypted",level:3},{value:"getNumberOfPages",id:"getnumberofpages",level:3},{value:"getText",id:"gettext",level:3},{value:"getTextWithPattern",id:"gettextwithpattern",level:3}],d={toc:p};function f(t){var e=t.components,r=(0,a.Z)(t,o);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"baseextractor"},"BaseExtractor"),(0,i.kt)("p",null,"It is the extractor with greater granularity, basically it is a wrapper for the native module, it is exported along with the other resources, allowing new extractors to be built that extend it."),(0,i.kt)("h3",{id:"caniextract"},"canIExtract"),(0,i.kt)("p",null,"This function returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise<boolean>")," that determine if you received an uri from Android ",(0,i.kt)("inlineCode",{parentName:"p"},"Intent")," and perform data extraction."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"async function canIExtract(): Promise<boolean>\n")),(0,i.kt)("h3",{id:"seturi"},"setUri"),(0,i.kt)("p",null,"This function receive a ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," that represents a path of PDF file and use it to perform data extraction, and returns a uri generated from received path."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"async function setUri(path: string): Promise<string>\n")),(0,i.kt)("h3",{id:"geturi"},"getUri"),(0,i.kt)("p",null,"This function returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise<string | undefined>")," that contains uri received from Android ",(0,i.kt)("inlineCode",{parentName:"p"},"Intent"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"async function getUri(): Promise<string | undefined>\n")),(0,i.kt)("h3",{id:"isencrypted"},"isEncrypted"),(0,i.kt)("p",null,"This function returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise<boolean>")," that determine if a pdf file is encrypted and need a password to be read."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"async function isEncrypted(): Promise<boolean>\n")),(0,i.kt)("h3",{id:"getnumberofpages"},"getNumberOfPages"),(0,i.kt)("p",null,"This function returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise<number>")," that determine the pdf file number of pages."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"async function getNumberOfPages(): Promise<boolean>\n")),(0,i.kt)("h3",{id:"gettext"},"getText"),(0,i.kt)("p",null,"This function returns all pdf file text as ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise<string[]>"),", where each array position is one line of the pdf file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"async function getText(password?: string): Promise<string[]>\n")),(0,i.kt)("table",null,(0,i.kt)("th",null,"name"),(0,i.kt)("th",null,"type"),(0,i.kt)("th",null,"default"),(0,i.kt)("th",null,"required"),(0,i.kt)("th",null,"description"),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,"password"),(0,i.kt)("td",null,"string | undefined"),(0,i.kt)("td",null,"undefined"),(0,i.kt)("td",null,"false"),(0,i.kt)("td",null,"password of pdf file")))),(0,i.kt)("h3",{id:"gettextwithpattern"},"getTextWithPattern"),(0,i.kt)("p",null,"This function returns a pdf file text that matches with passed pattern, as ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise<string[]>"),", where each array position is one match of the pdf file text."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"async function getTextWithPattern(\n  pattern: string | string[],\n  password?: string\n): Promise<string[]>\n")),(0,i.kt)("table",null,(0,i.kt)("th",null,"name"),(0,i.kt)("th",null,"type"),(0,i.kt)("th",null,"default"),(0,i.kt)("th",null,"required"),(0,i.kt)("th",null,"description"),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,"pattern"),(0,i.kt)("td",null,"string | string[]"),(0,i.kt)("td",null,"none"),(0,i.kt)("td",null,"true"),(0,i.kt)("td",null,"pattern to find match with pdf`s text")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"password"),(0,i.kt)("td",null,"string | undefined"),(0,i.kt)("td",null,"undefined"),(0,i.kt)("td",null,"false"),(0,i.kt)("td",null,"password of pdf file")))))}f.isMDXComponent=!0}}]);