"use strict";(self.webpackChunkreact_native_pdf_extractor_docs=self.webpackChunkreact_native_pdf_extractor_docs||[]).push([[103],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=p(n),f=a,m=l["".concat(c,".").concat(f)]||l[f]||d[f]||o;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=l;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},5125:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:3},c="Usage",p={unversionedId:"getting-started/usage",id:"getting-started/usage",title:"Usage",description:"We have two use cases for this library that has different approaches to each other. First case is used when you are running app and get file path that you want to extract data, using another libary, like react-native-document-picker and sends the received path to Extractor.extract method.",source:"@site/docs/getting-started/usage.md",sourceDirName:"getting-started",slug:"/getting-started/usage",permalink:"/react-native-pdf-extractor/docs/getting-started/usage",draft:!1,editUrl:"https://github.com/1fabiopereira/react-native-pdf-extractor/edit/master/website/docs/getting-started/usage.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/react-native-pdf-extractor/docs/getting-started/configuration"},next:{title:"API",permalink:"/react-native-pdf-extractor/docs/api"}},u={},d=[],l={toc:d};function f(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"usage"},"Usage"),(0,o.kt)("p",null,"We have two use cases for this library that has different approaches to each other. First case is used when you are running app and get file path that you want to extract data, using another libary, like ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/rnmods/react-native-document-picker"},"react-native-document-picker")," and sends the received path to ",(0,o.kt)("strong",{parentName:"p"},"Extractor.extract")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Extractor, Patterns } from 'react-native-pdf-extractor';\n\n// Some codes was be hidden for readability\n\nasync function extract(path: string) {\n    const response = await Extractor.extract(path, Patterns.Common.Email);\n    console.log(response); // It's will print somthing like this:\n    /*\n        {\n            duration: '40ms', <-----------------------------: Time spent to match\n            isEncrypted: false, <---------------------------: Was file encrypted?\n            pages: 2, <-------------------------------------: File number of pages\n            patterns: ['(/\\S+@\\w+\\.\\w+)/g'], <--------------: List of used patterns\n            text: ['name@mail.com'], <----------------------: List of found matches on file\n            uri: 'content://some-file-path.pdf' <-----------: File path\n        }\n    */\n};\n")),(0,o.kt)("p",null,"The second case is applicable when the app receives an ",(0,o.kt)("strong",{parentName:"p"},"Android Intent Action")," with the file path, in this case the library extracts the path behind the scene and than trigger data extraction. You can see more about it on ",(0,o.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/android/content/Intent"},"Intent | Android developers"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Extractor, Patterns } from 'react-native-pdf-extractor';\n\n// Some codes was be hidden for readability\n\nasync function extract() { // <-----------------------------: No params needed\n    const response = await Extractor.extractFromIntent(Patterns.Common.Email);\n    console.log(response); // It's will print somthing like this:\n    /*\n        {\n            duration: '40ms', <-----------------------------: Time spent to match\n            isEncrypted: false, <---------------------------: Was file encrypted?\n            pages: 2, <-------------------------------------: File number of pages\n            patterns: ['(/\\S+@\\w+\\.\\w+)/g'], <--------------: List of used patterns\n            text: ['name@mail.com'], <----------------------: List of found matches on file\n            uri: 'content://some-file-path.pdf' <-----------: File path\n        }\n    */\n};\n\nuseEffect(() => {\n    (async () => {\n        await extract() // <--------------------------------: Runs after view is rendered\n    })() \n}, [])\n")))}f.isMDXComponent=!0}}]);