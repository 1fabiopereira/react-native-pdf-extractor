"use strict";(self.webpackChunkreact_native_pdf_extractor_docs=self.webpackChunkreact_native_pdf_extractor_docs||[]).push([[838],{3905:function(t,e,n){n.d(e,{Zo:function(){return d},kt:function(){return f}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=r.createContext({}),u=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},d=function(t){var e=u(t.components);return r.createElement(s.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},c=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,s=t.parentName,d=o(t,["components","mdxType","originalType","parentName"]),c=u(n),f=a,m=c["".concat(s,".").concat(f)]||c[f]||p[f]||i;return n?r.createElement(m,l(l({ref:e},d),{},{components:n})):r.createElement(m,l({ref:e},d))}));function f(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o.mdxType="string"==typeof t?t:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4039:function(t,e,n){n.r(e),n.d(e,{assets:function(){return d},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return p}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],o={},s="Methods",u={unversionedId:"methods",id:"methods",title:"Methods",description:"canIExtract",source:"@site/docs/methods.md",sourceDirName:".",slug:"/methods",permalink:"/react-native-pdf-extractor/docs/methods",draft:!1,editUrl:"https://github.com/1fabiopereira/react-native-pdf-extractor/edit/master/website/docs/methods.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Playground app",permalink:"/react-native-pdf-extractor/docs/playground"},next:{title:"Patterns",permalink:"/react-native-pdf-extractor/docs/patterns"}},d={},p=[{value:"canIExtract",id:"caniextract",level:3},{value:"getUri",id:"geturi",level:3},{value:"isEncrypted",id:"isencrypted",level:3},{value:"getNumberOfPages",id:"getnumberofpages",level:3},{value:"getText",id:"gettext",level:3},{value:"getTextWithPattern",id:"gettextwithpattern",level:3}],c={toc:p};function f(t){var e=t.components,n=(0,a.Z)(t,l);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"caniextract"},"canIExtract"),(0,i.kt)("p",null,"This function return a ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise<boolean>")," that's determine if you received an uri from Android ",(0,i.kt)("inlineCode",{parentName:"p"},"Intent")," and you perform data extraction."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"async function canIExtract(): Promise<boolean>\n")),(0,i.kt)("h3",{id:"geturi"},"getUri"),(0,i.kt)("p",null,"This function return a ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise<string | undefined>")," that's can be contain uri received from Android ",(0,i.kt)("inlineCode",{parentName:"p"},"Intent"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"async function getUri(): Promise<string | undefined>\n")),(0,i.kt)("h3",{id:"isencrypted"},"isEncrypted"),(0,i.kt)("p",null,"This function return a ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise<boolean>")," that's determine if a pdf file is encrypted and need a password to be read."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"async function isEncrypted(): Promise<boolean>\n")),(0,i.kt)("h3",{id:"getnumberofpages"},"getNumberOfPages"),(0,i.kt)("p",null,"This function return a ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise<number>")," that's determine the pdf file number of pages."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"async function getNumberOfPages(): Promise<boolean>\n")),(0,i.kt)("table",null,(0,i.kt)("th",null,"name"),(0,i.kt)("th",null,"type"),(0,i.kt)("th",null,"default"),(0,i.kt)("th",null,"required"),(0,i.kt)("th",null,"description"),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,"password"),(0,i.kt)("td",null,"string | undefined"),(0,i.kt)("td",null,"undefined"),(0,i.kt)("td",null,"false"),(0,i.kt)("td",null,"password of pdf file")))),(0,i.kt)("h3",{id:"gettext"},"getText"),(0,i.kt)("p",null,"This function return all pdf file text as ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise<string[]>"),", where each array position is one line of pdf file that it can get."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"async function getText(password?: string): Promise<string[]>\n")),(0,i.kt)("table",null,(0,i.kt)("th",null,"name"),(0,i.kt)("th",null,"type"),(0,i.kt)("th",null,"default"),(0,i.kt)("th",null,"required"),(0,i.kt)("th",null,"description"),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,"password"),(0,i.kt)("td",null,"string | undefined"),(0,i.kt)("td",null,"undefined"),(0,i.kt)("td",null,"false"),(0,i.kt)("td",null,"password of pdf file")))),(0,i.kt)("h3",{id:"gettextwithpattern"},"getTextWithPattern"),(0,i.kt)("p",null,"This function return pdf file text that matches with passed pattern, as ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise<string[]>"),", where each array position is one match of pdf file text with pattern."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"async function getTextWithPattern(\n  pattern: string | string[],\n  password?: string\n): Promise<string[]>\n")),(0,i.kt)("table",null,(0,i.kt)("th",null,"name"),(0,i.kt)("th",null,"type"),(0,i.kt)("th",null,"default"),(0,i.kt)("th",null,"required"),(0,i.kt)("th",null,"description"),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,"pattern"),(0,i.kt)("td",null,"string | string[]"),(0,i.kt)("td",null,"none"),(0,i.kt)("td",null,"true"),(0,i.kt)("td",null,"pattern to find match with pdf`s text")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"password"),(0,i.kt)("td",null,"string | undefined"),(0,i.kt)("td",null,"undefined"),(0,i.kt)("td",null,"false"),(0,i.kt)("td",null,"password of pdf file")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE:")," All patterns passed will be converted in RegExp on runtime, yours patterns need to be in according to Javascript's RegExp specification, but in ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," type, ex: ",(0,i.kt)("inlineCode",{parentName:"p"},"'([0-9]{12})\\\\s([0-9]{12})\\\\s([0-9]{12})\\\\s([0-9]{12})'"),". You can see more infomation ",(0,i.kt)("a",{parentName:"p",href:"https://www.w3schools.com/jsref/jsref_obj_regexp.asp#:~:text=RegExp%20Object,pattern%20with%20Properties%20and%20Methods."},"here"),"."))}f.isMDXComponent=!0}}]);